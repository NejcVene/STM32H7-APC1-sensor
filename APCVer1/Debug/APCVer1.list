
APCVer1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000e740  080002a0  080002a0  000102a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000cc  0800e9e0  0800e9e0  0001e9e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800eaac  0800eaac  0001eaac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0800eab4  0800eab4  0001eab4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0800eab8  0800eab8  0001eab8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         0000007c  24000000  0800eabc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .RxDecripSection 00000060  2400007c  0800eb38  0002007c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .TxDecripSection 00000060  240000dc  0800eb98  000200dc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000e1c  2400013c  0800ebf8  0002013c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  24000f58  0800ebf8  00020f58  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  0002013c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002e3ef  00000000  00000000  0002016a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000042c6  00000000  00000000  0004e559  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00002078  00000000  00000000  00052820  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001ef8  00000000  00000000  00054898  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00040d4b  00000000  00000000  00056790  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0002aa6e  00000000  00000000  000974db  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0019bd72  00000000  00000000  000c1f49  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0025dcbb  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000093c0  00000000  00000000  0025dd0c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	; (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	; (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	; (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	2400013c 	.word	0x2400013c
 80002bc:	00000000 	.word	0x00000000
 80002c0:	0800e9c8 	.word	0x0800e9c8

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	; (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	; (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	; (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	24000140 	.word	0x24000140
 80002dc:	0800e9c8 	.word	0x0800e9c8

080002e0 <strlen>:
 80002e0:	4603      	mov	r3, r0
 80002e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002e6:	2a00      	cmp	r2, #0
 80002e8:	d1fb      	bne.n	80002e2 <strlen+0x2>
 80002ea:	1a18      	subs	r0, r3, r0
 80002ec:	3801      	subs	r0, #1
 80002ee:	4770      	bx	lr

080002f0 <memchr>:
 80002f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002f4:	2a10      	cmp	r2, #16
 80002f6:	db2b      	blt.n	8000350 <memchr+0x60>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	d008      	beq.n	8000310 <memchr+0x20>
 80002fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000302:	3a01      	subs	r2, #1
 8000304:	428b      	cmp	r3, r1
 8000306:	d02d      	beq.n	8000364 <memchr+0x74>
 8000308:	f010 0f07 	tst.w	r0, #7
 800030c:	b342      	cbz	r2, 8000360 <memchr+0x70>
 800030e:	d1f6      	bne.n	80002fe <memchr+0xe>
 8000310:	b4f0      	push	{r4, r5, r6, r7}
 8000312:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000316:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800031a:	f022 0407 	bic.w	r4, r2, #7
 800031e:	f07f 0700 	mvns.w	r7, #0
 8000322:	2300      	movs	r3, #0
 8000324:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000328:	3c08      	subs	r4, #8
 800032a:	ea85 0501 	eor.w	r5, r5, r1
 800032e:	ea86 0601 	eor.w	r6, r6, r1
 8000332:	fa85 f547 	uadd8	r5, r5, r7
 8000336:	faa3 f587 	sel	r5, r3, r7
 800033a:	fa86 f647 	uadd8	r6, r6, r7
 800033e:	faa5 f687 	sel	r6, r5, r7
 8000342:	b98e      	cbnz	r6, 8000368 <memchr+0x78>
 8000344:	d1ee      	bne.n	8000324 <memchr+0x34>
 8000346:	bcf0      	pop	{r4, r5, r6, r7}
 8000348:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800034c:	f002 0207 	and.w	r2, r2, #7
 8000350:	b132      	cbz	r2, 8000360 <memchr+0x70>
 8000352:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000356:	3a01      	subs	r2, #1
 8000358:	ea83 0301 	eor.w	r3, r3, r1
 800035c:	b113      	cbz	r3, 8000364 <memchr+0x74>
 800035e:	d1f8      	bne.n	8000352 <memchr+0x62>
 8000360:	2000      	movs	r0, #0
 8000362:	4770      	bx	lr
 8000364:	3801      	subs	r0, #1
 8000366:	4770      	bx	lr
 8000368:	2d00      	cmp	r5, #0
 800036a:	bf06      	itte	eq
 800036c:	4635      	moveq	r5, r6
 800036e:	3803      	subeq	r0, #3
 8000370:	3807      	subne	r0, #7
 8000372:	f015 0f01 	tst.w	r5, #1
 8000376:	d107      	bne.n	8000388 <memchr+0x98>
 8000378:	3001      	adds	r0, #1
 800037a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800037e:	bf02      	ittt	eq
 8000380:	3001      	addeq	r0, #1
 8000382:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000386:	3001      	addeq	r0, #1
 8000388:	bcf0      	pop	{r4, r5, r6, r7}
 800038a:	3801      	subs	r0, #1
 800038c:	4770      	bx	lr
 800038e:	bf00      	nop

08000390 <__aeabi_uldivmod>:
 8000390:	b953      	cbnz	r3, 80003a8 <__aeabi_uldivmod+0x18>
 8000392:	b94a      	cbnz	r2, 80003a8 <__aeabi_uldivmod+0x18>
 8000394:	2900      	cmp	r1, #0
 8000396:	bf08      	it	eq
 8000398:	2800      	cmpeq	r0, #0
 800039a:	bf1c      	itt	ne
 800039c:	f04f 31ff 	movne.w	r1, #4294967295
 80003a0:	f04f 30ff 	movne.w	r0, #4294967295
 80003a4:	f000 b974 	b.w	8000690 <__aeabi_idiv0>
 80003a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80003ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003b0:	f000 f806 	bl	80003c0 <__udivmoddi4>
 80003b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003bc:	b004      	add	sp, #16
 80003be:	4770      	bx	lr

080003c0 <__udivmoddi4>:
 80003c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003c4:	9d08      	ldr	r5, [sp, #32]
 80003c6:	4604      	mov	r4, r0
 80003c8:	468e      	mov	lr, r1
 80003ca:	2b00      	cmp	r3, #0
 80003cc:	d14d      	bne.n	800046a <__udivmoddi4+0xaa>
 80003ce:	428a      	cmp	r2, r1
 80003d0:	4694      	mov	ip, r2
 80003d2:	d969      	bls.n	80004a8 <__udivmoddi4+0xe8>
 80003d4:	fab2 f282 	clz	r2, r2
 80003d8:	b152      	cbz	r2, 80003f0 <__udivmoddi4+0x30>
 80003da:	fa01 f302 	lsl.w	r3, r1, r2
 80003de:	f1c2 0120 	rsb	r1, r2, #32
 80003e2:	fa20 f101 	lsr.w	r1, r0, r1
 80003e6:	fa0c fc02 	lsl.w	ip, ip, r2
 80003ea:	ea41 0e03 	orr.w	lr, r1, r3
 80003ee:	4094      	lsls	r4, r2
 80003f0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003f4:	0c21      	lsrs	r1, r4, #16
 80003f6:	fbbe f6f8 	udiv	r6, lr, r8
 80003fa:	fa1f f78c 	uxth.w	r7, ip
 80003fe:	fb08 e316 	mls	r3, r8, r6, lr
 8000402:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000406:	fb06 f107 	mul.w	r1, r6, r7
 800040a:	4299      	cmp	r1, r3
 800040c:	d90a      	bls.n	8000424 <__udivmoddi4+0x64>
 800040e:	eb1c 0303 	adds.w	r3, ip, r3
 8000412:	f106 30ff 	add.w	r0, r6, #4294967295
 8000416:	f080 811f 	bcs.w	8000658 <__udivmoddi4+0x298>
 800041a:	4299      	cmp	r1, r3
 800041c:	f240 811c 	bls.w	8000658 <__udivmoddi4+0x298>
 8000420:	3e02      	subs	r6, #2
 8000422:	4463      	add	r3, ip
 8000424:	1a5b      	subs	r3, r3, r1
 8000426:	b2a4      	uxth	r4, r4
 8000428:	fbb3 f0f8 	udiv	r0, r3, r8
 800042c:	fb08 3310 	mls	r3, r8, r0, r3
 8000430:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000434:	fb00 f707 	mul.w	r7, r0, r7
 8000438:	42a7      	cmp	r7, r4
 800043a:	d90a      	bls.n	8000452 <__udivmoddi4+0x92>
 800043c:	eb1c 0404 	adds.w	r4, ip, r4
 8000440:	f100 33ff 	add.w	r3, r0, #4294967295
 8000444:	f080 810a 	bcs.w	800065c <__udivmoddi4+0x29c>
 8000448:	42a7      	cmp	r7, r4
 800044a:	f240 8107 	bls.w	800065c <__udivmoddi4+0x29c>
 800044e:	4464      	add	r4, ip
 8000450:	3802      	subs	r0, #2
 8000452:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000456:	1be4      	subs	r4, r4, r7
 8000458:	2600      	movs	r6, #0
 800045a:	b11d      	cbz	r5, 8000464 <__udivmoddi4+0xa4>
 800045c:	40d4      	lsrs	r4, r2
 800045e:	2300      	movs	r3, #0
 8000460:	e9c5 4300 	strd	r4, r3, [r5]
 8000464:	4631      	mov	r1, r6
 8000466:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800046a:	428b      	cmp	r3, r1
 800046c:	d909      	bls.n	8000482 <__udivmoddi4+0xc2>
 800046e:	2d00      	cmp	r5, #0
 8000470:	f000 80ef 	beq.w	8000652 <__udivmoddi4+0x292>
 8000474:	2600      	movs	r6, #0
 8000476:	e9c5 0100 	strd	r0, r1, [r5]
 800047a:	4630      	mov	r0, r6
 800047c:	4631      	mov	r1, r6
 800047e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000482:	fab3 f683 	clz	r6, r3
 8000486:	2e00      	cmp	r6, #0
 8000488:	d14a      	bne.n	8000520 <__udivmoddi4+0x160>
 800048a:	428b      	cmp	r3, r1
 800048c:	d302      	bcc.n	8000494 <__udivmoddi4+0xd4>
 800048e:	4282      	cmp	r2, r0
 8000490:	f200 80f9 	bhi.w	8000686 <__udivmoddi4+0x2c6>
 8000494:	1a84      	subs	r4, r0, r2
 8000496:	eb61 0303 	sbc.w	r3, r1, r3
 800049a:	2001      	movs	r0, #1
 800049c:	469e      	mov	lr, r3
 800049e:	2d00      	cmp	r5, #0
 80004a0:	d0e0      	beq.n	8000464 <__udivmoddi4+0xa4>
 80004a2:	e9c5 4e00 	strd	r4, lr, [r5]
 80004a6:	e7dd      	b.n	8000464 <__udivmoddi4+0xa4>
 80004a8:	b902      	cbnz	r2, 80004ac <__udivmoddi4+0xec>
 80004aa:	deff      	udf	#255	; 0xff
 80004ac:	fab2 f282 	clz	r2, r2
 80004b0:	2a00      	cmp	r2, #0
 80004b2:	f040 8092 	bne.w	80005da <__udivmoddi4+0x21a>
 80004b6:	eba1 010c 	sub.w	r1, r1, ip
 80004ba:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004be:	fa1f fe8c 	uxth.w	lr, ip
 80004c2:	2601      	movs	r6, #1
 80004c4:	0c20      	lsrs	r0, r4, #16
 80004c6:	fbb1 f3f7 	udiv	r3, r1, r7
 80004ca:	fb07 1113 	mls	r1, r7, r3, r1
 80004ce:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80004d2:	fb0e f003 	mul.w	r0, lr, r3
 80004d6:	4288      	cmp	r0, r1
 80004d8:	d908      	bls.n	80004ec <__udivmoddi4+0x12c>
 80004da:	eb1c 0101 	adds.w	r1, ip, r1
 80004de:	f103 38ff 	add.w	r8, r3, #4294967295
 80004e2:	d202      	bcs.n	80004ea <__udivmoddi4+0x12a>
 80004e4:	4288      	cmp	r0, r1
 80004e6:	f200 80cb 	bhi.w	8000680 <__udivmoddi4+0x2c0>
 80004ea:	4643      	mov	r3, r8
 80004ec:	1a09      	subs	r1, r1, r0
 80004ee:	b2a4      	uxth	r4, r4
 80004f0:	fbb1 f0f7 	udiv	r0, r1, r7
 80004f4:	fb07 1110 	mls	r1, r7, r0, r1
 80004f8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80004fc:	fb0e fe00 	mul.w	lr, lr, r0
 8000500:	45a6      	cmp	lr, r4
 8000502:	d908      	bls.n	8000516 <__udivmoddi4+0x156>
 8000504:	eb1c 0404 	adds.w	r4, ip, r4
 8000508:	f100 31ff 	add.w	r1, r0, #4294967295
 800050c:	d202      	bcs.n	8000514 <__udivmoddi4+0x154>
 800050e:	45a6      	cmp	lr, r4
 8000510:	f200 80bb 	bhi.w	800068a <__udivmoddi4+0x2ca>
 8000514:	4608      	mov	r0, r1
 8000516:	eba4 040e 	sub.w	r4, r4, lr
 800051a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800051e:	e79c      	b.n	800045a <__udivmoddi4+0x9a>
 8000520:	f1c6 0720 	rsb	r7, r6, #32
 8000524:	40b3      	lsls	r3, r6
 8000526:	fa22 fc07 	lsr.w	ip, r2, r7
 800052a:	ea4c 0c03 	orr.w	ip, ip, r3
 800052e:	fa20 f407 	lsr.w	r4, r0, r7
 8000532:	fa01 f306 	lsl.w	r3, r1, r6
 8000536:	431c      	orrs	r4, r3
 8000538:	40f9      	lsrs	r1, r7
 800053a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800053e:	fa00 f306 	lsl.w	r3, r0, r6
 8000542:	fbb1 f8f9 	udiv	r8, r1, r9
 8000546:	0c20      	lsrs	r0, r4, #16
 8000548:	fa1f fe8c 	uxth.w	lr, ip
 800054c:	fb09 1118 	mls	r1, r9, r8, r1
 8000550:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000554:	fb08 f00e 	mul.w	r0, r8, lr
 8000558:	4288      	cmp	r0, r1
 800055a:	fa02 f206 	lsl.w	r2, r2, r6
 800055e:	d90b      	bls.n	8000578 <__udivmoddi4+0x1b8>
 8000560:	eb1c 0101 	adds.w	r1, ip, r1
 8000564:	f108 3aff 	add.w	sl, r8, #4294967295
 8000568:	f080 8088 	bcs.w	800067c <__udivmoddi4+0x2bc>
 800056c:	4288      	cmp	r0, r1
 800056e:	f240 8085 	bls.w	800067c <__udivmoddi4+0x2bc>
 8000572:	f1a8 0802 	sub.w	r8, r8, #2
 8000576:	4461      	add	r1, ip
 8000578:	1a09      	subs	r1, r1, r0
 800057a:	b2a4      	uxth	r4, r4
 800057c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000580:	fb09 1110 	mls	r1, r9, r0, r1
 8000584:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000588:	fb00 fe0e 	mul.w	lr, r0, lr
 800058c:	458e      	cmp	lr, r1
 800058e:	d908      	bls.n	80005a2 <__udivmoddi4+0x1e2>
 8000590:	eb1c 0101 	adds.w	r1, ip, r1
 8000594:	f100 34ff 	add.w	r4, r0, #4294967295
 8000598:	d26c      	bcs.n	8000674 <__udivmoddi4+0x2b4>
 800059a:	458e      	cmp	lr, r1
 800059c:	d96a      	bls.n	8000674 <__udivmoddi4+0x2b4>
 800059e:	3802      	subs	r0, #2
 80005a0:	4461      	add	r1, ip
 80005a2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80005a6:	fba0 9402 	umull	r9, r4, r0, r2
 80005aa:	eba1 010e 	sub.w	r1, r1, lr
 80005ae:	42a1      	cmp	r1, r4
 80005b0:	46c8      	mov	r8, r9
 80005b2:	46a6      	mov	lr, r4
 80005b4:	d356      	bcc.n	8000664 <__udivmoddi4+0x2a4>
 80005b6:	d053      	beq.n	8000660 <__udivmoddi4+0x2a0>
 80005b8:	b15d      	cbz	r5, 80005d2 <__udivmoddi4+0x212>
 80005ba:	ebb3 0208 	subs.w	r2, r3, r8
 80005be:	eb61 010e 	sbc.w	r1, r1, lr
 80005c2:	fa01 f707 	lsl.w	r7, r1, r7
 80005c6:	fa22 f306 	lsr.w	r3, r2, r6
 80005ca:	40f1      	lsrs	r1, r6
 80005cc:	431f      	orrs	r7, r3
 80005ce:	e9c5 7100 	strd	r7, r1, [r5]
 80005d2:	2600      	movs	r6, #0
 80005d4:	4631      	mov	r1, r6
 80005d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	40d8      	lsrs	r0, r3
 80005e0:	fa0c fc02 	lsl.w	ip, ip, r2
 80005e4:	fa21 f303 	lsr.w	r3, r1, r3
 80005e8:	4091      	lsls	r1, r2
 80005ea:	4301      	orrs	r1, r0
 80005ec:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80005f0:	fa1f fe8c 	uxth.w	lr, ip
 80005f4:	fbb3 f0f7 	udiv	r0, r3, r7
 80005f8:	fb07 3610 	mls	r6, r7, r0, r3
 80005fc:	0c0b      	lsrs	r3, r1, #16
 80005fe:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000602:	fb00 f60e 	mul.w	r6, r0, lr
 8000606:	429e      	cmp	r6, r3
 8000608:	fa04 f402 	lsl.w	r4, r4, r2
 800060c:	d908      	bls.n	8000620 <__udivmoddi4+0x260>
 800060e:	eb1c 0303 	adds.w	r3, ip, r3
 8000612:	f100 38ff 	add.w	r8, r0, #4294967295
 8000616:	d22f      	bcs.n	8000678 <__udivmoddi4+0x2b8>
 8000618:	429e      	cmp	r6, r3
 800061a:	d92d      	bls.n	8000678 <__udivmoddi4+0x2b8>
 800061c:	3802      	subs	r0, #2
 800061e:	4463      	add	r3, ip
 8000620:	1b9b      	subs	r3, r3, r6
 8000622:	b289      	uxth	r1, r1
 8000624:	fbb3 f6f7 	udiv	r6, r3, r7
 8000628:	fb07 3316 	mls	r3, r7, r6, r3
 800062c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000630:	fb06 f30e 	mul.w	r3, r6, lr
 8000634:	428b      	cmp	r3, r1
 8000636:	d908      	bls.n	800064a <__udivmoddi4+0x28a>
 8000638:	eb1c 0101 	adds.w	r1, ip, r1
 800063c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000640:	d216      	bcs.n	8000670 <__udivmoddi4+0x2b0>
 8000642:	428b      	cmp	r3, r1
 8000644:	d914      	bls.n	8000670 <__udivmoddi4+0x2b0>
 8000646:	3e02      	subs	r6, #2
 8000648:	4461      	add	r1, ip
 800064a:	1ac9      	subs	r1, r1, r3
 800064c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000650:	e738      	b.n	80004c4 <__udivmoddi4+0x104>
 8000652:	462e      	mov	r6, r5
 8000654:	4628      	mov	r0, r5
 8000656:	e705      	b.n	8000464 <__udivmoddi4+0xa4>
 8000658:	4606      	mov	r6, r0
 800065a:	e6e3      	b.n	8000424 <__udivmoddi4+0x64>
 800065c:	4618      	mov	r0, r3
 800065e:	e6f8      	b.n	8000452 <__udivmoddi4+0x92>
 8000660:	454b      	cmp	r3, r9
 8000662:	d2a9      	bcs.n	80005b8 <__udivmoddi4+0x1f8>
 8000664:	ebb9 0802 	subs.w	r8, r9, r2
 8000668:	eb64 0e0c 	sbc.w	lr, r4, ip
 800066c:	3801      	subs	r0, #1
 800066e:	e7a3      	b.n	80005b8 <__udivmoddi4+0x1f8>
 8000670:	4646      	mov	r6, r8
 8000672:	e7ea      	b.n	800064a <__udivmoddi4+0x28a>
 8000674:	4620      	mov	r0, r4
 8000676:	e794      	b.n	80005a2 <__udivmoddi4+0x1e2>
 8000678:	4640      	mov	r0, r8
 800067a:	e7d1      	b.n	8000620 <__udivmoddi4+0x260>
 800067c:	46d0      	mov	r8, sl
 800067e:	e77b      	b.n	8000578 <__udivmoddi4+0x1b8>
 8000680:	3b02      	subs	r3, #2
 8000682:	4461      	add	r1, ip
 8000684:	e732      	b.n	80004ec <__udivmoddi4+0x12c>
 8000686:	4630      	mov	r0, r6
 8000688:	e709      	b.n	800049e <__udivmoddi4+0xde>
 800068a:	4464      	add	r4, ip
 800068c:	3802      	subs	r0, #2
 800068e:	e742      	b.n	8000516 <__udivmoddi4+0x156>

08000690 <__aeabi_idiv0>:
 8000690:	4770      	bx	lr
 8000692:	bf00      	nop

08000694 <HAL_UART_RxCpltCallback>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) { // function is called when the data reception is complete
 8000694:	b480      	push	{r7}
 8000696:	b083      	sub	sp, #12
 8000698:	af00      	add	r7, sp, #0
 800069a:	6078      	str	r0, [r7, #4]

	if (huart->Instance == USART1) {
 800069c:	687b      	ldr	r3, [r7, #4]
 800069e:	681b      	ldr	r3, [r3, #0]
 80006a0:	4a05      	ldr	r2, [pc, #20]	; (80006b8 <HAL_UART_RxCpltCallback+0x24>)
 80006a2:	4293      	cmp	r3, r2
 80006a4:	d102      	bne.n	80006ac <HAL_UART_RxCpltCallback+0x18>
		has = 1;
 80006a6:	4b05      	ldr	r3, [pc, #20]	; (80006bc <HAL_UART_RxCpltCallback+0x28>)
 80006a8:	2201      	movs	r2, #1
 80006aa:	601a      	str	r2, [r3, #0]
	  // has = 1;
	  // HAL_UART_Receive_IT(&huart1, measurementData, 64);
	  // HAL_UART_Transmit_IT(&huart1, getDataCmd, 7);


  }
 80006ac:	bf00      	nop
 80006ae:	370c      	adds	r7, #12
 80006b0:	46bd      	mov	sp, r7
 80006b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006b6:	4770      	bx	lr
 80006b8:	40011000 	.word	0x40011000
 80006bc:	24000f24 	.word	0x24000f24

080006c0 <HAL_UART_TxCpltCallback>:

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart) { // function is called when the data transmit is complete
 80006c0:	b580      	push	{r7, lr}
 80006c2:	b082      	sub	sp, #8
 80006c4:	af00      	add	r7, sp, #0
 80006c6:	6078      	str	r0, [r7, #4]

	if (huart->Instance == USART1) {
 80006c8:	687b      	ldr	r3, [r7, #4]
 80006ca:	681b      	ldr	r3, [r3, #0]
 80006cc:	4a05      	ldr	r2, [pc, #20]	; (80006e4 <HAL_UART_TxCpltCallback+0x24>)
 80006ce:	4293      	cmp	r3, r2
 80006d0:	d104      	bne.n	80006dc <HAL_UART_TxCpltCallback+0x1c>
		HAL_UART_Receive_IT(&huart1, measurementData, 64);
 80006d2:	2240      	movs	r2, #64	; 0x40
 80006d4:	4904      	ldr	r1, [pc, #16]	; (80006e8 <HAL_UART_TxCpltCallback+0x28>)
 80006d6:	4805      	ldr	r0, [pc, #20]	; (80006ec <HAL_UART_TxCpltCallback+0x2c>)
 80006d8:	f00a fc10 	bl	800aefc <HAL_UART_Receive_IT>
	}

}
 80006dc:	bf00      	nop
 80006de:	3708      	adds	r7, #8
 80006e0:	46bd      	mov	sp, r7
 80006e2:	bd80      	pop	{r7, pc}
 80006e4:	40011000 	.word	0x40011000
 80006e8:	24000de4 	.word	0x24000de4
 80006ec:	2400077c 	.word	0x2400077c

080006f0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80006f0:	b580      	push	{r7, lr}
 80006f2:	b092      	sub	sp, #72	; 0x48
 80006f4:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80006f6:	f002 f9ff 	bl	8002af8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80006fa:	f000 f871 	bl	80007e0 <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 80006fe:	f000 f8f1 	bl	80008e4 <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000702:	f000 fe9f 	bl	8001444 <MX_GPIO_Init>
  MX_ADC1_Init();
 8000706:	f000 f91d 	bl	8000944 <MX_ADC1_Init>
  MX_ADC2_Init();
 800070a:	f000 f991 	bl	8000a30 <MX_ADC2_Init>
  MX_ADC3_Init();
 800070e:	f000 f9f3 	bl	8000af8 <MX_ADC3_Init>
  MX_ETH_Init();
 8000712:	f000 fa53 	bl	8000bbc <MX_ETH_Init>
  MX_FDCAN1_Init();
 8000716:	f000 fa9d 	bl	8000c54 <MX_FDCAN1_Init>
  MX_FDCAN2_Init();
 800071a:	f000 faff 	bl	8000d1c <MX_FDCAN2_Init>
  MX_FMC_Init();
 800071e:	f000 fe43 	bl	80013a8 <MX_FMC_Init>
  MX_LTDC_Init();
 8000722:	f000 fb5f 	bl	8000de4 <MX_LTDC_Init>
  MX_QUADSPI_Init();
 8000726:	f000 fc0f 	bl	8000f48 <MX_QUADSPI_Init>
  MX_RTC_Init();
 800072a:	f000 fc39 	bl	8000fa0 <MX_RTC_Init>
  MX_SAI2_Init();
 800072e:	f000 fc5f 	bl	8000ff0 <MX_SAI2_Init>
  MX_SPI2_Init();
 8000732:	f000 fd1b 	bl	800116c <MX_SPI2_Init>
  MX_USART3_UART_Init();
 8000736:	f000 fdb9 	bl	80012ac <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 800073a:	f000 fe03 	bl	8001344 <MX_USB_OTG_FS_PCD_Init>
  MX_USART1_UART_Init();
 800073e:	f000 fd69 	bl	8001214 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */

  // commands to send to the sensor

  HAL_UART_Transmit_IT(&huart1, getDataCmd, 7);
 8000742:	2207      	movs	r2, #7
 8000744:	491e      	ldr	r1, [pc, #120]	; (80007c0 <main+0xd0>)
 8000746:	481f      	ldr	r0, [pc, #124]	; (80007c4 <main+0xd4>)
 8000748:	f00a fb44 	bl	800add4 <HAL_UART_Transmit_IT>
  // HAL_UART_Receive_IT(&huart1, measurementData, 64);
  // HAL_UART_Transmit_IT(&huart1, getDataCmd, 7);

  while (1)
  {
	  if (has == 1) { // has == 1 means that we received data
 800074c:	4b1e      	ldr	r3, [pc, #120]	; (80007c8 <main+0xd8>)
 800074e:	681b      	ldr	r3, [r3, #0]
 8000750:	2b01      	cmp	r3, #1
 8000752:	d1fb      	bne.n	800074c <main+0x5c>
		  for (int i = 0; i<ARRAY_LENGTH; i++) {
 8000754:	2300      	movs	r3, #0
 8000756:	647b      	str	r3, [r7, #68]	; 0x44
 8000758:	e01b      	b.n	8000792 <main+0xa2>
			  // print received data to the terminal
			  snprintf(sendBuffer, 256, "%u ", measurementData[i]);
 800075a:	1d3a      	adds	r2, r7, #4
 800075c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800075e:	4413      	add	r3, r2
 8000760:	781b      	ldrb	r3, [r3, #0]
 8000762:	4a1a      	ldr	r2, [pc, #104]	; (80007cc <main+0xdc>)
 8000764:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000768:	4819      	ldr	r0, [pc, #100]	; (80007d0 <main+0xe0>)
 800076a:	f00d fcb9 	bl	800e0e0 <sniprintf>
			  HAL_UART_Transmit(&huart3, sendBuffer, strlen(sendBuffer), 1000);
 800076e:	4818      	ldr	r0, [pc, #96]	; (80007d0 <main+0xe0>)
 8000770:	f7ff fdb6 	bl	80002e0 <strlen>
 8000774:	4603      	mov	r3, r0
 8000776:	b29a      	uxth	r2, r3
 8000778:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800077c:	4914      	ldr	r1, [pc, #80]	; (80007d0 <main+0xe0>)
 800077e:	4815      	ldr	r0, [pc, #84]	; (80007d4 <main+0xe4>)
 8000780:	f00a fa99 	bl	800acb6 <HAL_UART_Transmit>
			  HAL_Delay(1000);
 8000784:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000788:	f002 fa48 	bl	8002c1c <HAL_Delay>
		  for (int i = 0; i<ARRAY_LENGTH; i++) {
 800078c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800078e:	3301      	adds	r3, #1
 8000790:	647b      	str	r3, [r7, #68]	; 0x44
 8000792:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8000794:	2b3f      	cmp	r3, #63	; 0x3f
 8000796:	dde0      	ble.n	800075a <main+0x6a>
		  }
		  snprintf(sendBuffer, 256, "%s\r\n", "DONE");
 8000798:	4b0f      	ldr	r3, [pc, #60]	; (80007d8 <main+0xe8>)
 800079a:	4a10      	ldr	r2, [pc, #64]	; (80007dc <main+0xec>)
 800079c:	f44f 7180 	mov.w	r1, #256	; 0x100
 80007a0:	480b      	ldr	r0, [pc, #44]	; (80007d0 <main+0xe0>)
 80007a2:	f00d fc9d 	bl	800e0e0 <sniprintf>
		  HAL_UART_Transmit(&huart3, sendBuffer, strlen(sendBuffer), 1000);
 80007a6:	480a      	ldr	r0, [pc, #40]	; (80007d0 <main+0xe0>)
 80007a8:	f7ff fd9a 	bl	80002e0 <strlen>
 80007ac:	4603      	mov	r3, r0
 80007ae:	b29a      	uxth	r2, r3
 80007b0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80007b4:	4906      	ldr	r1, [pc, #24]	; (80007d0 <main+0xe0>)
 80007b6:	4807      	ldr	r0, [pc, #28]	; (80007d4 <main+0xe4>)
 80007b8:	f00a fa7d 	bl	800acb6 <HAL_UART_Transmit>
	  if (has == 1) { // has == 1 means that we received data
 80007bc:	e7c6      	b.n	800074c <main+0x5c>
 80007be:	bf00      	nop
 80007c0:	24000000 	.word	0x24000000
 80007c4:	2400077c 	.word	0x2400077c
 80007c8:	24000f24 	.word	0x24000f24
 80007cc:	0800e9e0 	.word	0x0800e9e0
 80007d0:	24000e24 	.word	0x24000e24
 80007d4:	24000810 	.word	0x24000810
 80007d8:	0800e9e4 	.word	0x0800e9e4
 80007dc:	0800e9ec 	.word	0x0800e9ec

080007e0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80007e0:	b580      	push	{r7, lr}
 80007e2:	b09c      	sub	sp, #112	; 0x70
 80007e4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80007e6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80007ea:	224c      	movs	r2, #76	; 0x4c
 80007ec:	2100      	movs	r1, #0
 80007ee:	4618      	mov	r0, r3
 80007f0:	f00d fc6e 	bl	800e0d0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80007f4:	1d3b      	adds	r3, r7, #4
 80007f6:	2220      	movs	r2, #32
 80007f8:	2100      	movs	r1, #0
 80007fa:	4618      	mov	r0, r3
 80007fc:	f00d fc68 	bl	800e0d0 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8000800:	2002      	movs	r0, #2
 8000802:	f005 fea9 	bl	8006558 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8000806:	2300      	movs	r3, #0
 8000808:	603b      	str	r3, [r7, #0]
 800080a:	4b34      	ldr	r3, [pc, #208]	; (80008dc <SystemClock_Config+0xfc>)
 800080c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800080e:	4a33      	ldr	r2, [pc, #204]	; (80008dc <SystemClock_Config+0xfc>)
 8000810:	f023 0301 	bic.w	r3, r3, #1
 8000814:	62d3      	str	r3, [r2, #44]	; 0x2c
 8000816:	4b31      	ldr	r3, [pc, #196]	; (80008dc <SystemClock_Config+0xfc>)
 8000818:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800081a:	f003 0301 	and.w	r3, r3, #1
 800081e:	603b      	str	r3, [r7, #0]
 8000820:	4b2f      	ldr	r3, [pc, #188]	; (80008e0 <SystemClock_Config+0x100>)
 8000822:	699b      	ldr	r3, [r3, #24]
 8000824:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000828:	4a2d      	ldr	r2, [pc, #180]	; (80008e0 <SystemClock_Config+0x100>)
 800082a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800082e:	6193      	str	r3, [r2, #24]
 8000830:	4b2b      	ldr	r3, [pc, #172]	; (80008e0 <SystemClock_Config+0x100>)
 8000832:	699b      	ldr	r3, [r3, #24]
 8000834:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000838:	603b      	str	r3, [r7, #0]
 800083a:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 800083c:	bf00      	nop
 800083e:	4b28      	ldr	r3, [pc, #160]	; (80008e0 <SystemClock_Config+0x100>)
 8000840:	699b      	ldr	r3, [r3, #24]
 8000842:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000846:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800084a:	d1f8      	bne.n	800083e <SystemClock_Config+0x5e>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI
 800084c:	230b      	movs	r3, #11
 800084e:	627b      	str	r3, [r7, #36]	; 0x24
                              |RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000850:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000854:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 8000856:	2301      	movs	r3, #1
 8000858:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800085a:	2340      	movs	r3, #64	; 0x40
 800085c:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 800085e:	2301      	movs	r3, #1
 8000860:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000862:	2302      	movs	r3, #2
 8000864:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000866:	2302      	movs	r3, #2
 8000868:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 22;
 800086a:	2316      	movs	r3, #22
 800086c:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 169;
 800086e:	23a9      	movs	r3, #169	; 0xa9
 8000870:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 8000872:	2302      	movs	r3, #2
 8000874:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000876:	2304      	movs	r3, #4
 8000878:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 800087a:	2302      	movs	r3, #2
 800087c:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_0;
 800087e:	2300      	movs	r3, #0
 8000880:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000882:	2300      	movs	r3, #0
 8000884:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000886:	2300      	movs	r3, #0
 8000888:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800088a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800088e:	4618      	mov	r0, r3
 8000890:	f005 ff66 	bl	8006760 <HAL_RCC_OscConfig>
 8000894:	4603      	mov	r3, r0
 8000896:	2b00      	cmp	r3, #0
 8000898:	d001      	beq.n	800089e <SystemClock_Config+0xbe>
  {
    Error_Handler();
 800089a:	f000 ff7d 	bl	8001798 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800089e:	233f      	movs	r3, #63	; 0x3f
 80008a0:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80008a2:	2300      	movs	r3, #0
 80008a4:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 80008a6:	2300      	movs	r3, #0
 80008a8:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 80008aa:	2300      	movs	r3, #0
 80008ac:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 80008ae:	2300      	movs	r3, #0
 80008b0:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV1;
 80008b2:	2300      	movs	r3, #0
 80008b4:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV1;
 80008b6:	2300      	movs	r3, #0
 80008b8:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 80008ba:	2300      	movs	r3, #0
 80008bc:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80008be:	1d3b      	adds	r3, r7, #4
 80008c0:	2101      	movs	r1, #1
 80008c2:	4618      	mov	r0, r3
 80008c4:	f006 fba6 	bl	8007014 <HAL_RCC_ClockConfig>
 80008c8:	4603      	mov	r3, r0
 80008ca:	2b00      	cmp	r3, #0
 80008cc:	d001      	beq.n	80008d2 <SystemClock_Config+0xf2>
  {
    Error_Handler();
 80008ce:	f000 ff63 	bl	8001798 <Error_Handler>
  }
}
 80008d2:	bf00      	nop
 80008d4:	3770      	adds	r7, #112	; 0x70
 80008d6:	46bd      	mov	sp, r7
 80008d8:	bd80      	pop	{r7, pc}
 80008da:	bf00      	nop
 80008dc:	58000400 	.word	0x58000400
 80008e0:	58024800 	.word	0x58024800

080008e4 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 80008e4:	b580      	push	{r7, lr}
 80008e6:	b0b0      	sub	sp, #192	; 0xc0
 80008e8:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80008ea:	463b      	mov	r3, r7
 80008ec:	22c0      	movs	r2, #192	; 0xc0
 80008ee:	2100      	movs	r1, #0
 80008f0:	4618      	mov	r0, r3
 80008f2:	f00d fbed 	bl	800e0d0 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 80008f6:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 80008fa:	f04f 0300 	mov.w	r3, #0
 80008fe:	e9c7 2300 	strd	r2, r3, [r7]
  PeriphClkInitStruct.PLL2.PLL2M = 2;
 8000902:	2302      	movs	r3, #2
 8000904:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.PLL2.PLL2N = 12;
 8000906:	230c      	movs	r3, #12
 8000908:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLL2.PLL2P = 5;
 800090a:	2305      	movs	r3, #5
 800090c:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLL2.PLL2Q = 2;
 800090e:	2302      	movs	r3, #2
 8000910:	617b      	str	r3, [r7, #20]
  PeriphClkInitStruct.PLL2.PLL2R = 2;
 8000912:	2302      	movs	r3, #2
 8000914:	61bb      	str	r3, [r7, #24]
  PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_3;
 8000916:	23c0      	movs	r3, #192	; 0xc0
 8000918:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOMEDIUM;
 800091a:	2320      	movs	r3, #32
 800091c:	623b      	str	r3, [r7, #32]
  PeriphClkInitStruct.PLL2.PLL2FRACN = 0;
 800091e:	2300      	movs	r3, #0
 8000920:	627b      	str	r3, [r7, #36]	; 0x24
  PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLL2;
 8000922:	2300      	movs	r3, #0
 8000924:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000928:	463b      	mov	r3, r7
 800092a:	4618      	mov	r0, r3
 800092c:	f006 fefe 	bl	800772c <HAL_RCCEx_PeriphCLKConfig>
 8000930:	4603      	mov	r3, r0
 8000932:	2b00      	cmp	r3, #0
 8000934:	d001      	beq.n	800093a <PeriphCommonClock_Config+0x56>
  {
    Error_Handler();
 8000936:	f000 ff2f 	bl	8001798 <Error_Handler>
  }
}
 800093a:	bf00      	nop
 800093c:	37c0      	adds	r7, #192	; 0xc0
 800093e:	46bd      	mov	sp, r7
 8000940:	bd80      	pop	{r7, pc}
	...

08000944 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000944:	b580      	push	{r7, lr}
 8000946:	b08a      	sub	sp, #40	; 0x28
 8000948:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 800094a:	f107 031c 	add.w	r3, r7, #28
 800094e:	2200      	movs	r2, #0
 8000950:	601a      	str	r2, [r3, #0]
 8000952:	605a      	str	r2, [r3, #4]
 8000954:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8000956:	463b      	mov	r3, r7
 8000958:	2200      	movs	r2, #0
 800095a:	601a      	str	r2, [r3, #0]
 800095c:	605a      	str	r2, [r3, #4]
 800095e:	609a      	str	r2, [r3, #8]
 8000960:	60da      	str	r2, [r3, #12]
 8000962:	611a      	str	r2, [r3, #16]
 8000964:	615a      	str	r2, [r3, #20]
 8000966:	619a      	str	r2, [r3, #24]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000968:	4b2f      	ldr	r3, [pc, #188]	; (8000a28 <MX_ADC1_Init+0xe4>)
 800096a:	4a30      	ldr	r2, [pc, #192]	; (8000a2c <MX_ADC1_Init+0xe8>)
 800096c:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 800096e:	4b2e      	ldr	r3, [pc, #184]	; (8000a28 <MX_ADC1_Init+0xe4>)
 8000970:	2200      	movs	r2, #0
 8000972:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_16B;
 8000974:	4b2c      	ldr	r3, [pc, #176]	; (8000a28 <MX_ADC1_Init+0xe4>)
 8000976:	2200      	movs	r2, #0
 8000978:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800097a:	4b2b      	ldr	r3, [pc, #172]	; (8000a28 <MX_ADC1_Init+0xe4>)
 800097c:	2200      	movs	r2, #0
 800097e:	60da      	str	r2, [r3, #12]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000980:	4b29      	ldr	r3, [pc, #164]	; (8000a28 <MX_ADC1_Init+0xe4>)
 8000982:	2204      	movs	r2, #4
 8000984:	611a      	str	r2, [r3, #16]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000986:	4b28      	ldr	r3, [pc, #160]	; (8000a28 <MX_ADC1_Init+0xe4>)
 8000988:	2200      	movs	r2, #0
 800098a:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800098c:	4b26      	ldr	r3, [pc, #152]	; (8000a28 <MX_ADC1_Init+0xe4>)
 800098e:	2200      	movs	r2, #0
 8000990:	755a      	strb	r2, [r3, #21]
  hadc1.Init.NbrOfConversion = 1;
 8000992:	4b25      	ldr	r3, [pc, #148]	; (8000a28 <MX_ADC1_Init+0xe4>)
 8000994:	2201      	movs	r2, #1
 8000996:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000998:	4b23      	ldr	r3, [pc, #140]	; (8000a28 <MX_ADC1_Init+0xe4>)
 800099a:	2200      	movs	r2, #0
 800099c:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800099e:	4b22      	ldr	r3, [pc, #136]	; (8000a28 <MX_ADC1_Init+0xe4>)
 80009a0:	2200      	movs	r2, #0
 80009a2:	625a      	str	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80009a4:	4b20      	ldr	r3, [pc, #128]	; (8000a28 <MX_ADC1_Init+0xe4>)
 80009a6:	2200      	movs	r2, #0
 80009a8:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
 80009aa:	4b1f      	ldr	r3, [pc, #124]	; (8000a28 <MX_ADC1_Init+0xe4>)
 80009ac:	2200      	movs	r2, #0
 80009ae:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80009b0:	4b1d      	ldr	r3, [pc, #116]	; (8000a28 <MX_ADC1_Init+0xe4>)
 80009b2:	2200      	movs	r2, #0
 80009b4:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 80009b6:	4b1c      	ldr	r3, [pc, #112]	; (8000a28 <MX_ADC1_Init+0xe4>)
 80009b8:	2200      	movs	r2, #0
 80009ba:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 80009bc:	4b1a      	ldr	r3, [pc, #104]	; (8000a28 <MX_ADC1_Init+0xe4>)
 80009be:	2200      	movs	r2, #0
 80009c0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80009c4:	4818      	ldr	r0, [pc, #96]	; (8000a28 <MX_ADC1_Init+0xe4>)
 80009c6:	f002 fb0f 	bl	8002fe8 <HAL_ADC_Init>
 80009ca:	4603      	mov	r3, r0
 80009cc:	2b00      	cmp	r3, #0
 80009ce:	d001      	beq.n	80009d4 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 80009d0:	f000 fee2 	bl	8001798 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 80009d4:	2300      	movs	r3, #0
 80009d6:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 80009d8:	f107 031c 	add.w	r3, r7, #28
 80009dc:	4619      	mov	r1, r3
 80009de:	4812      	ldr	r0, [pc, #72]	; (8000a28 <MX_ADC1_Init+0xe4>)
 80009e0:	f003 f926 	bl	8003c30 <HAL_ADCEx_MultiModeConfigChannel>
 80009e4:	4603      	mov	r3, r0
 80009e6:	2b00      	cmp	r3, #0
 80009e8:	d001      	beq.n	80009ee <MX_ADC1_Init+0xaa>
  {
    Error_Handler();
 80009ea:	f000 fed5 	bl	8001798 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 80009ee:	2301      	movs	r3, #1
 80009f0:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80009f2:	2306      	movs	r3, #6
 80009f4:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 80009f6:	2300      	movs	r3, #0
 80009f8:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80009fa:	f240 73ff 	movw	r3, #2047	; 0x7ff
 80009fe:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000a00:	2304      	movs	r3, #4
 8000a02:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8000a04:	2300      	movs	r3, #0
 8000a06:	617b      	str	r3, [r7, #20]
  sConfig.OffsetSignedSaturation = DISABLE;
 8000a08:	2300      	movs	r3, #0
 8000a0a:	767b      	strb	r3, [r7, #25]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000a0c:	463b      	mov	r3, r7
 8000a0e:	4619      	mov	r1, r3
 8000a10:	4805      	ldr	r0, [pc, #20]	; (8000a28 <MX_ADC1_Init+0xe4>)
 8000a12:	f002 fc8b 	bl	800332c <HAL_ADC_ConfigChannel>
 8000a16:	4603      	mov	r3, r0
 8000a18:	2b00      	cmp	r3, #0
 8000a1a:	d001      	beq.n	8000a20 <MX_ADC1_Init+0xdc>
  {
    Error_Handler();
 8000a1c:	f000 febc 	bl	8001798 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000a20:	bf00      	nop
 8000a22:	3728      	adds	r7, #40	; 0x28
 8000a24:	46bd      	mov	sp, r7
 8000a26:	bd80      	pop	{r7, pc}
 8000a28:	24000190 	.word	0x24000190
 8000a2c:	40022000 	.word	0x40022000

08000a30 <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 8000a30:	b580      	push	{r7, lr}
 8000a32:	b088      	sub	sp, #32
 8000a34:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000a36:	1d3b      	adds	r3, r7, #4
 8000a38:	2200      	movs	r2, #0
 8000a3a:	601a      	str	r2, [r3, #0]
 8000a3c:	605a      	str	r2, [r3, #4]
 8000a3e:	609a      	str	r2, [r3, #8]
 8000a40:	60da      	str	r2, [r3, #12]
 8000a42:	611a      	str	r2, [r3, #16]
 8000a44:	615a      	str	r2, [r3, #20]
 8000a46:	619a      	str	r2, [r3, #24]

  /* USER CODE END ADC2_Init 1 */

  /** Common config
  */
  hadc2.Instance = ADC2;
 8000a48:	4b29      	ldr	r3, [pc, #164]	; (8000af0 <MX_ADC2_Init+0xc0>)
 8000a4a:	4a2a      	ldr	r2, [pc, #168]	; (8000af4 <MX_ADC2_Init+0xc4>)
 8000a4c:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000a4e:	4b28      	ldr	r3, [pc, #160]	; (8000af0 <MX_ADC2_Init+0xc0>)
 8000a50:	2200      	movs	r2, #0
 8000a52:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_16B;
 8000a54:	4b26      	ldr	r3, [pc, #152]	; (8000af0 <MX_ADC2_Init+0xc0>)
 8000a56:	2200      	movs	r2, #0
 8000a58:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000a5a:	4b25      	ldr	r3, [pc, #148]	; (8000af0 <MX_ADC2_Init+0xc0>)
 8000a5c:	2200      	movs	r2, #0
 8000a5e:	60da      	str	r2, [r3, #12]
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000a60:	4b23      	ldr	r3, [pc, #140]	; (8000af0 <MX_ADC2_Init+0xc0>)
 8000a62:	2204      	movs	r2, #4
 8000a64:	611a      	str	r2, [r3, #16]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 8000a66:	4b22      	ldr	r3, [pc, #136]	; (8000af0 <MX_ADC2_Init+0xc0>)
 8000a68:	2200      	movs	r2, #0
 8000a6a:	751a      	strb	r2, [r3, #20]
  hadc2.Init.ContinuousConvMode = DISABLE;
 8000a6c:	4b20      	ldr	r3, [pc, #128]	; (8000af0 <MX_ADC2_Init+0xc0>)
 8000a6e:	2200      	movs	r2, #0
 8000a70:	755a      	strb	r2, [r3, #21]
  hadc2.Init.NbrOfConversion = 1;
 8000a72:	4b1f      	ldr	r3, [pc, #124]	; (8000af0 <MX_ADC2_Init+0xc0>)
 8000a74:	2201      	movs	r2, #1
 8000a76:	619a      	str	r2, [r3, #24]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8000a78:	4b1d      	ldr	r3, [pc, #116]	; (8000af0 <MX_ADC2_Init+0xc0>)
 8000a7a:	2200      	movs	r2, #0
 8000a7c:	771a      	strb	r2, [r3, #28]
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000a7e:	4b1c      	ldr	r3, [pc, #112]	; (8000af0 <MX_ADC2_Init+0xc0>)
 8000a80:	2200      	movs	r2, #0
 8000a82:	625a      	str	r2, [r3, #36]	; 0x24
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000a84:	4b1a      	ldr	r3, [pc, #104]	; (8000af0 <MX_ADC2_Init+0xc0>)
 8000a86:	2200      	movs	r2, #0
 8000a88:	629a      	str	r2, [r3, #40]	; 0x28
  hadc2.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
 8000a8a:	4b19      	ldr	r3, [pc, #100]	; (8000af0 <MX_ADC2_Init+0xc0>)
 8000a8c:	2200      	movs	r2, #0
 8000a8e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000a90:	4b17      	ldr	r3, [pc, #92]	; (8000af0 <MX_ADC2_Init+0xc0>)
 8000a92:	2200      	movs	r2, #0
 8000a94:	631a      	str	r2, [r3, #48]	; 0x30
  hadc2.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 8000a96:	4b16      	ldr	r3, [pc, #88]	; (8000af0 <MX_ADC2_Init+0xc0>)
 8000a98:	2200      	movs	r2, #0
 8000a9a:	635a      	str	r2, [r3, #52]	; 0x34
  hadc2.Init.OversamplingMode = DISABLE;
 8000a9c:	4b14      	ldr	r3, [pc, #80]	; (8000af0 <MX_ADC2_Init+0xc0>)
 8000a9e:	2200      	movs	r2, #0
 8000aa0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8000aa4:	4812      	ldr	r0, [pc, #72]	; (8000af0 <MX_ADC2_Init+0xc0>)
 8000aa6:	f002 fa9f 	bl	8002fe8 <HAL_ADC_Init>
 8000aaa:	4603      	mov	r3, r0
 8000aac:	2b00      	cmp	r3, #0
 8000aae:	d001      	beq.n	8000ab4 <MX_ADC2_Init+0x84>
  {
    Error_Handler();
 8000ab0:	f000 fe72 	bl	8001798 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8000ab4:	2301      	movs	r3, #1
 8000ab6:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000ab8:	2306      	movs	r3, #6
 8000aba:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000abc:	2300      	movs	r3, #0
 8000abe:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000ac0:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8000ac4:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000ac6:	2304      	movs	r3, #4
 8000ac8:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8000aca:	2300      	movs	r3, #0
 8000acc:	61bb      	str	r3, [r7, #24]
  sConfig.OffsetSignedSaturation = DISABLE;
 8000ace:	2300      	movs	r3, #0
 8000ad0:	777b      	strb	r3, [r7, #29]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8000ad2:	1d3b      	adds	r3, r7, #4
 8000ad4:	4619      	mov	r1, r3
 8000ad6:	4806      	ldr	r0, [pc, #24]	; (8000af0 <MX_ADC2_Init+0xc0>)
 8000ad8:	f002 fc28 	bl	800332c <HAL_ADC_ConfigChannel>
 8000adc:	4603      	mov	r3, r0
 8000ade:	2b00      	cmp	r3, #0
 8000ae0:	d001      	beq.n	8000ae6 <MX_ADC2_Init+0xb6>
  {
    Error_Handler();
 8000ae2:	f000 fe59 	bl	8001798 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8000ae6:	bf00      	nop
 8000ae8:	3720      	adds	r7, #32
 8000aea:	46bd      	mov	sp, r7
 8000aec:	bd80      	pop	{r7, pc}
 8000aee:	bf00      	nop
 8000af0:	240001f4 	.word	0x240001f4
 8000af4:	40022100 	.word	0x40022100

08000af8 <MX_ADC3_Init>:
  * @brief ADC3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC3_Init(void)
{
 8000af8:	b580      	push	{r7, lr}
 8000afa:	b088      	sub	sp, #32
 8000afc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000afe:	1d3b      	adds	r3, r7, #4
 8000b00:	2200      	movs	r2, #0
 8000b02:	601a      	str	r2, [r3, #0]
 8000b04:	605a      	str	r2, [r3, #4]
 8000b06:	609a      	str	r2, [r3, #8]
 8000b08:	60da      	str	r2, [r3, #12]
 8000b0a:	611a      	str	r2, [r3, #16]
 8000b0c:	615a      	str	r2, [r3, #20]
 8000b0e:	619a      	str	r2, [r3, #24]

  /* USER CODE END ADC3_Init 1 */

  /** Common config
  */
  hadc3.Instance = ADC3;
 8000b10:	4b27      	ldr	r3, [pc, #156]	; (8000bb0 <MX_ADC3_Init+0xb8>)
 8000b12:	4a28      	ldr	r2, [pc, #160]	; (8000bb4 <MX_ADC3_Init+0xbc>)
 8000b14:	601a      	str	r2, [r3, #0]
  hadc3.Init.Resolution = ADC_RESOLUTION_16B;
 8000b16:	4b26      	ldr	r3, [pc, #152]	; (8000bb0 <MX_ADC3_Init+0xb8>)
 8000b18:	2200      	movs	r2, #0
 8000b1a:	609a      	str	r2, [r3, #8]
  hadc3.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000b1c:	4b24      	ldr	r3, [pc, #144]	; (8000bb0 <MX_ADC3_Init+0xb8>)
 8000b1e:	2200      	movs	r2, #0
 8000b20:	60da      	str	r2, [r3, #12]
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000b22:	4b23      	ldr	r3, [pc, #140]	; (8000bb0 <MX_ADC3_Init+0xb8>)
 8000b24:	2204      	movs	r2, #4
 8000b26:	611a      	str	r2, [r3, #16]
  hadc3.Init.LowPowerAutoWait = DISABLE;
 8000b28:	4b21      	ldr	r3, [pc, #132]	; (8000bb0 <MX_ADC3_Init+0xb8>)
 8000b2a:	2200      	movs	r2, #0
 8000b2c:	751a      	strb	r2, [r3, #20]
  hadc3.Init.ContinuousConvMode = DISABLE;
 8000b2e:	4b20      	ldr	r3, [pc, #128]	; (8000bb0 <MX_ADC3_Init+0xb8>)
 8000b30:	2200      	movs	r2, #0
 8000b32:	755a      	strb	r2, [r3, #21]
  hadc3.Init.NbrOfConversion = 1;
 8000b34:	4b1e      	ldr	r3, [pc, #120]	; (8000bb0 <MX_ADC3_Init+0xb8>)
 8000b36:	2201      	movs	r2, #1
 8000b38:	619a      	str	r2, [r3, #24]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 8000b3a:	4b1d      	ldr	r3, [pc, #116]	; (8000bb0 <MX_ADC3_Init+0xb8>)
 8000b3c:	2200      	movs	r2, #0
 8000b3e:	771a      	strb	r2, [r3, #28]
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000b40:	4b1b      	ldr	r3, [pc, #108]	; (8000bb0 <MX_ADC3_Init+0xb8>)
 8000b42:	2200      	movs	r2, #0
 8000b44:	625a      	str	r2, [r3, #36]	; 0x24
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000b46:	4b1a      	ldr	r3, [pc, #104]	; (8000bb0 <MX_ADC3_Init+0xb8>)
 8000b48:	2200      	movs	r2, #0
 8000b4a:	629a      	str	r2, [r3, #40]	; 0x28
  hadc3.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
 8000b4c:	4b18      	ldr	r3, [pc, #96]	; (8000bb0 <MX_ADC3_Init+0xb8>)
 8000b4e:	2200      	movs	r2, #0
 8000b50:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc3.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000b52:	4b17      	ldr	r3, [pc, #92]	; (8000bb0 <MX_ADC3_Init+0xb8>)
 8000b54:	2200      	movs	r2, #0
 8000b56:	631a      	str	r2, [r3, #48]	; 0x30
  hadc3.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 8000b58:	4b15      	ldr	r3, [pc, #84]	; (8000bb0 <MX_ADC3_Init+0xb8>)
 8000b5a:	2200      	movs	r2, #0
 8000b5c:	635a      	str	r2, [r3, #52]	; 0x34
  hadc3.Init.OversamplingMode = DISABLE;
 8000b5e:	4b14      	ldr	r3, [pc, #80]	; (8000bb0 <MX_ADC3_Init+0xb8>)
 8000b60:	2200      	movs	r2, #0
 8000b62:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 8000b66:	4812      	ldr	r0, [pc, #72]	; (8000bb0 <MX_ADC3_Init+0xb8>)
 8000b68:	f002 fa3e 	bl	8002fe8 <HAL_ADC_Init>
 8000b6c:	4603      	mov	r3, r0
 8000b6e:	2b00      	cmp	r3, #0
 8000b70:	d001      	beq.n	8000b76 <MX_ADC3_Init+0x7e>
  {
    Error_Handler();
 8000b72:	f000 fe11 	bl	8001798 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_7;
 8000b76:	4b10      	ldr	r3, [pc, #64]	; (8000bb8 <MX_ADC3_Init+0xc0>)
 8000b78:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000b7a:	2306      	movs	r3, #6
 8000b7c:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000b7e:	2300      	movs	r3, #0
 8000b80:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000b82:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8000b86:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000b88:	2304      	movs	r3, #4
 8000b8a:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8000b8c:	2300      	movs	r3, #0
 8000b8e:	61bb      	str	r3, [r7, #24]
  sConfig.OffsetSignedSaturation = DISABLE;
 8000b90:	2300      	movs	r3, #0
 8000b92:	777b      	strb	r3, [r7, #29]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8000b94:	1d3b      	adds	r3, r7, #4
 8000b96:	4619      	mov	r1, r3
 8000b98:	4805      	ldr	r0, [pc, #20]	; (8000bb0 <MX_ADC3_Init+0xb8>)
 8000b9a:	f002 fbc7 	bl	800332c <HAL_ADC_ConfigChannel>
 8000b9e:	4603      	mov	r3, r0
 8000ba0:	2b00      	cmp	r3, #0
 8000ba2:	d001      	beq.n	8000ba8 <MX_ADC3_Init+0xb0>
  {
    Error_Handler();
 8000ba4:	f000 fdf8 	bl	8001798 <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 8000ba8:	bf00      	nop
 8000baa:	3720      	adds	r7, #32
 8000bac:	46bd      	mov	sp, r7
 8000bae:	bd80      	pop	{r7, pc}
 8000bb0:	24000258 	.word	0x24000258
 8000bb4:	58026000 	.word	0x58026000
 8000bb8:	1d500080 	.word	0x1d500080

08000bbc <MX_ETH_Init>:
  * @brief ETH Initialization Function
  * @param None
  * @retval None
  */
static void MX_ETH_Init(void)
{
 8000bbc:	b580      	push	{r7, lr}
 8000bbe:	af00      	add	r7, sp, #0
   static uint8_t MACAddr[6];

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 8000bc0:	4b1e      	ldr	r3, [pc, #120]	; (8000c3c <MX_ETH_Init+0x80>)
 8000bc2:	4a1f      	ldr	r2, [pc, #124]	; (8000c40 <MX_ETH_Init+0x84>)
 8000bc4:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 8000bc6:	4b1f      	ldr	r3, [pc, #124]	; (8000c44 <MX_ETH_Init+0x88>)
 8000bc8:	2200      	movs	r2, #0
 8000bca:	701a      	strb	r2, [r3, #0]
  MACAddr[1] = 0x80;
 8000bcc:	4b1d      	ldr	r3, [pc, #116]	; (8000c44 <MX_ETH_Init+0x88>)
 8000bce:	2280      	movs	r2, #128	; 0x80
 8000bd0:	705a      	strb	r2, [r3, #1]
  MACAddr[2] = 0xE1;
 8000bd2:	4b1c      	ldr	r3, [pc, #112]	; (8000c44 <MX_ETH_Init+0x88>)
 8000bd4:	22e1      	movs	r2, #225	; 0xe1
 8000bd6:	709a      	strb	r2, [r3, #2]
  MACAddr[3] = 0x00;
 8000bd8:	4b1a      	ldr	r3, [pc, #104]	; (8000c44 <MX_ETH_Init+0x88>)
 8000bda:	2200      	movs	r2, #0
 8000bdc:	70da      	strb	r2, [r3, #3]
  MACAddr[4] = 0x00;
 8000bde:	4b19      	ldr	r3, [pc, #100]	; (8000c44 <MX_ETH_Init+0x88>)
 8000be0:	2200      	movs	r2, #0
 8000be2:	711a      	strb	r2, [r3, #4]
  MACAddr[5] = 0x00;
 8000be4:	4b17      	ldr	r3, [pc, #92]	; (8000c44 <MX_ETH_Init+0x88>)
 8000be6:	2200      	movs	r2, #0
 8000be8:	715a      	strb	r2, [r3, #5]
  heth.Init.MACAddr = &MACAddr[0];
 8000bea:	4b14      	ldr	r3, [pc, #80]	; (8000c3c <MX_ETH_Init+0x80>)
 8000bec:	4a15      	ldr	r2, [pc, #84]	; (8000c44 <MX_ETH_Init+0x88>)
 8000bee:	605a      	str	r2, [r3, #4]
  heth.Init.MediaInterface = HAL_ETH_MII_MODE;
 8000bf0:	4b12      	ldr	r3, [pc, #72]	; (8000c3c <MX_ETH_Init+0x80>)
 8000bf2:	2200      	movs	r2, #0
 8000bf4:	721a      	strb	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 8000bf6:	4b11      	ldr	r3, [pc, #68]	; (8000c3c <MX_ETH_Init+0x80>)
 8000bf8:	4a13      	ldr	r2, [pc, #76]	; (8000c48 <MX_ETH_Init+0x8c>)
 8000bfa:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 8000bfc:	4b0f      	ldr	r3, [pc, #60]	; (8000c3c <MX_ETH_Init+0x80>)
 8000bfe:	4a13      	ldr	r2, [pc, #76]	; (8000c4c <MX_ETH_Init+0x90>)
 8000c00:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 8000c02:	4b0e      	ldr	r3, [pc, #56]	; (8000c3c <MX_ETH_Init+0x80>)
 8000c04:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8000c08:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 8000c0a:	480c      	ldr	r0, [pc, #48]	; (8000c3c <MX_ETH_Init+0x80>)
 8000c0c:	f003 ff62 	bl	8004ad4 <HAL_ETH_Init>
 8000c10:	4603      	mov	r3, r0
 8000c12:	2b00      	cmp	r3, #0
 8000c14:	d001      	beq.n	8000c1a <MX_ETH_Init+0x5e>
  {
    Error_Handler();
 8000c16:	f000 fdbf 	bl	8001798 <Error_Handler>
  }

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 8000c1a:	2238      	movs	r2, #56	; 0x38
 8000c1c:	2100      	movs	r1, #0
 8000c1e:	480c      	ldr	r0, [pc, #48]	; (8000c50 <MX_ETH_Init+0x94>)
 8000c20:	f00d fa56 	bl	800e0d0 <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 8000c24:	4b0a      	ldr	r3, [pc, #40]	; (8000c50 <MX_ETH_Init+0x94>)
 8000c26:	2221      	movs	r2, #33	; 0x21
 8000c28:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 8000c2a:	4b09      	ldr	r3, [pc, #36]	; (8000c50 <MX_ETH_Init+0x94>)
 8000c2c:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8000c30:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 8000c32:	4b07      	ldr	r3, [pc, #28]	; (8000c50 <MX_ETH_Init+0x94>)
 8000c34:	2200      	movs	r2, #0
 8000c36:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 8000c38:	bf00      	nop
 8000c3a:	bd80      	pop	{r7, pc}
 8000c3c:	240002bc 	.word	0x240002bc
 8000c40:	40028000 	.word	0x40028000
 8000c44:	24000f28 	.word	0x24000f28
 8000c48:	240000dc 	.word	0x240000dc
 8000c4c:	2400007c 	.word	0x2400007c
 8000c50:	24000158 	.word	0x24000158

08000c54 <MX_FDCAN1_Init>:
  * @brief FDCAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_FDCAN1_Init(void)
{
 8000c54:	b580      	push	{r7, lr}
 8000c56:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN1_Init 0 */

  /* USER CODE BEGIN FDCAN1_Init 1 */

  /* USER CODE END FDCAN1_Init 1 */
  hfdcan1.Instance = FDCAN1;
 8000c58:	4b2e      	ldr	r3, [pc, #184]	; (8000d14 <MX_FDCAN1_Init+0xc0>)
 8000c5a:	4a2f      	ldr	r2, [pc, #188]	; (8000d18 <MX_FDCAN1_Init+0xc4>)
 8000c5c:	601a      	str	r2, [r3, #0]
  hfdcan1.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 8000c5e:	4b2d      	ldr	r3, [pc, #180]	; (8000d14 <MX_FDCAN1_Init+0xc0>)
 8000c60:	2200      	movs	r2, #0
 8000c62:	609a      	str	r2, [r3, #8]
  hfdcan1.Init.Mode = FDCAN_MODE_NORMAL;
 8000c64:	4b2b      	ldr	r3, [pc, #172]	; (8000d14 <MX_FDCAN1_Init+0xc0>)
 8000c66:	2200      	movs	r2, #0
 8000c68:	60da      	str	r2, [r3, #12]
  hfdcan1.Init.AutoRetransmission = DISABLE;
 8000c6a:	4b2a      	ldr	r3, [pc, #168]	; (8000d14 <MX_FDCAN1_Init+0xc0>)
 8000c6c:	2200      	movs	r2, #0
 8000c6e:	741a      	strb	r2, [r3, #16]
  hfdcan1.Init.TransmitPause = DISABLE;
 8000c70:	4b28      	ldr	r3, [pc, #160]	; (8000d14 <MX_FDCAN1_Init+0xc0>)
 8000c72:	2200      	movs	r2, #0
 8000c74:	745a      	strb	r2, [r3, #17]
  hfdcan1.Init.ProtocolException = DISABLE;
 8000c76:	4b27      	ldr	r3, [pc, #156]	; (8000d14 <MX_FDCAN1_Init+0xc0>)
 8000c78:	2200      	movs	r2, #0
 8000c7a:	749a      	strb	r2, [r3, #18]
  hfdcan1.Init.NominalPrescaler = 16;
 8000c7c:	4b25      	ldr	r3, [pc, #148]	; (8000d14 <MX_FDCAN1_Init+0xc0>)
 8000c7e:	2210      	movs	r2, #16
 8000c80:	615a      	str	r2, [r3, #20]
  hfdcan1.Init.NominalSyncJumpWidth = 1;
 8000c82:	4b24      	ldr	r3, [pc, #144]	; (8000d14 <MX_FDCAN1_Init+0xc0>)
 8000c84:	2201      	movs	r2, #1
 8000c86:	619a      	str	r2, [r3, #24]
  hfdcan1.Init.NominalTimeSeg1 = 2;
 8000c88:	4b22      	ldr	r3, [pc, #136]	; (8000d14 <MX_FDCAN1_Init+0xc0>)
 8000c8a:	2202      	movs	r2, #2
 8000c8c:	61da      	str	r2, [r3, #28]
  hfdcan1.Init.NominalTimeSeg2 = 2;
 8000c8e:	4b21      	ldr	r3, [pc, #132]	; (8000d14 <MX_FDCAN1_Init+0xc0>)
 8000c90:	2202      	movs	r2, #2
 8000c92:	621a      	str	r2, [r3, #32]
  hfdcan1.Init.DataPrescaler = 1;
 8000c94:	4b1f      	ldr	r3, [pc, #124]	; (8000d14 <MX_FDCAN1_Init+0xc0>)
 8000c96:	2201      	movs	r2, #1
 8000c98:	625a      	str	r2, [r3, #36]	; 0x24
  hfdcan1.Init.DataSyncJumpWidth = 1;
 8000c9a:	4b1e      	ldr	r3, [pc, #120]	; (8000d14 <MX_FDCAN1_Init+0xc0>)
 8000c9c:	2201      	movs	r2, #1
 8000c9e:	629a      	str	r2, [r3, #40]	; 0x28
  hfdcan1.Init.DataTimeSeg1 = 1;
 8000ca0:	4b1c      	ldr	r3, [pc, #112]	; (8000d14 <MX_FDCAN1_Init+0xc0>)
 8000ca2:	2201      	movs	r2, #1
 8000ca4:	62da      	str	r2, [r3, #44]	; 0x2c
  hfdcan1.Init.DataTimeSeg2 = 1;
 8000ca6:	4b1b      	ldr	r3, [pc, #108]	; (8000d14 <MX_FDCAN1_Init+0xc0>)
 8000ca8:	2201      	movs	r2, #1
 8000caa:	631a      	str	r2, [r3, #48]	; 0x30
  hfdcan1.Init.MessageRAMOffset = 0;
 8000cac:	4b19      	ldr	r3, [pc, #100]	; (8000d14 <MX_FDCAN1_Init+0xc0>)
 8000cae:	2200      	movs	r2, #0
 8000cb0:	635a      	str	r2, [r3, #52]	; 0x34
  hfdcan1.Init.StdFiltersNbr = 0;
 8000cb2:	4b18      	ldr	r3, [pc, #96]	; (8000d14 <MX_FDCAN1_Init+0xc0>)
 8000cb4:	2200      	movs	r2, #0
 8000cb6:	639a      	str	r2, [r3, #56]	; 0x38
  hfdcan1.Init.ExtFiltersNbr = 0;
 8000cb8:	4b16      	ldr	r3, [pc, #88]	; (8000d14 <MX_FDCAN1_Init+0xc0>)
 8000cba:	2200      	movs	r2, #0
 8000cbc:	63da      	str	r2, [r3, #60]	; 0x3c
  hfdcan1.Init.RxFifo0ElmtsNbr = 0;
 8000cbe:	4b15      	ldr	r3, [pc, #84]	; (8000d14 <MX_FDCAN1_Init+0xc0>)
 8000cc0:	2200      	movs	r2, #0
 8000cc2:	641a      	str	r2, [r3, #64]	; 0x40
  hfdcan1.Init.RxFifo0ElmtSize = FDCAN_DATA_BYTES_8;
 8000cc4:	4b13      	ldr	r3, [pc, #76]	; (8000d14 <MX_FDCAN1_Init+0xc0>)
 8000cc6:	2204      	movs	r2, #4
 8000cc8:	645a      	str	r2, [r3, #68]	; 0x44
  hfdcan1.Init.RxFifo1ElmtsNbr = 0;
 8000cca:	4b12      	ldr	r3, [pc, #72]	; (8000d14 <MX_FDCAN1_Init+0xc0>)
 8000ccc:	2200      	movs	r2, #0
 8000cce:	649a      	str	r2, [r3, #72]	; 0x48
  hfdcan1.Init.RxFifo1ElmtSize = FDCAN_DATA_BYTES_8;
 8000cd0:	4b10      	ldr	r3, [pc, #64]	; (8000d14 <MX_FDCAN1_Init+0xc0>)
 8000cd2:	2204      	movs	r2, #4
 8000cd4:	64da      	str	r2, [r3, #76]	; 0x4c
  hfdcan1.Init.RxBuffersNbr = 0;
 8000cd6:	4b0f      	ldr	r3, [pc, #60]	; (8000d14 <MX_FDCAN1_Init+0xc0>)
 8000cd8:	2200      	movs	r2, #0
 8000cda:	651a      	str	r2, [r3, #80]	; 0x50
  hfdcan1.Init.RxBufferSize = FDCAN_DATA_BYTES_8;
 8000cdc:	4b0d      	ldr	r3, [pc, #52]	; (8000d14 <MX_FDCAN1_Init+0xc0>)
 8000cde:	2204      	movs	r2, #4
 8000ce0:	655a      	str	r2, [r3, #84]	; 0x54
  hfdcan1.Init.TxEventsNbr = 0;
 8000ce2:	4b0c      	ldr	r3, [pc, #48]	; (8000d14 <MX_FDCAN1_Init+0xc0>)
 8000ce4:	2200      	movs	r2, #0
 8000ce6:	659a      	str	r2, [r3, #88]	; 0x58
  hfdcan1.Init.TxBuffersNbr = 0;
 8000ce8:	4b0a      	ldr	r3, [pc, #40]	; (8000d14 <MX_FDCAN1_Init+0xc0>)
 8000cea:	2200      	movs	r2, #0
 8000cec:	65da      	str	r2, [r3, #92]	; 0x5c
  hfdcan1.Init.TxFifoQueueElmtsNbr = 0;
 8000cee:	4b09      	ldr	r3, [pc, #36]	; (8000d14 <MX_FDCAN1_Init+0xc0>)
 8000cf0:	2200      	movs	r2, #0
 8000cf2:	661a      	str	r2, [r3, #96]	; 0x60
  hfdcan1.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 8000cf4:	4b07      	ldr	r3, [pc, #28]	; (8000d14 <MX_FDCAN1_Init+0xc0>)
 8000cf6:	2200      	movs	r2, #0
 8000cf8:	665a      	str	r2, [r3, #100]	; 0x64
  hfdcan1.Init.TxElmtSize = FDCAN_DATA_BYTES_8;
 8000cfa:	4b06      	ldr	r3, [pc, #24]	; (8000d14 <MX_FDCAN1_Init+0xc0>)
 8000cfc:	2204      	movs	r2, #4
 8000cfe:	669a      	str	r2, [r3, #104]	; 0x68
  if (HAL_FDCAN_Init(&hfdcan1) != HAL_OK)
 8000d00:	4804      	ldr	r0, [pc, #16]	; (8000d14 <MX_FDCAN1_Init+0xc0>)
 8000d02:	f004 fb0b 	bl	800531c <HAL_FDCAN_Init>
 8000d06:	4603      	mov	r3, r0
 8000d08:	2b00      	cmp	r3, #0
 8000d0a:	d001      	beq.n	8000d10 <MX_FDCAN1_Init+0xbc>
  {
    Error_Handler();
 8000d0c:	f000 fd44 	bl	8001798 <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN1_Init 2 */

  /* USER CODE END FDCAN1_Init 2 */

}
 8000d10:	bf00      	nop
 8000d12:	bd80      	pop	{r7, pc}
 8000d14:	2400036c 	.word	0x2400036c
 8000d18:	4000a000 	.word	0x4000a000

08000d1c <MX_FDCAN2_Init>:
  * @brief FDCAN2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_FDCAN2_Init(void)
{
 8000d1c:	b580      	push	{r7, lr}
 8000d1e:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN2_Init 0 */

  /* USER CODE BEGIN FDCAN2_Init 1 */

  /* USER CODE END FDCAN2_Init 1 */
  hfdcan2.Instance = FDCAN2;
 8000d20:	4b2e      	ldr	r3, [pc, #184]	; (8000ddc <MX_FDCAN2_Init+0xc0>)
 8000d22:	4a2f      	ldr	r2, [pc, #188]	; (8000de0 <MX_FDCAN2_Init+0xc4>)
 8000d24:	601a      	str	r2, [r3, #0]
  hfdcan2.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 8000d26:	4b2d      	ldr	r3, [pc, #180]	; (8000ddc <MX_FDCAN2_Init+0xc0>)
 8000d28:	2200      	movs	r2, #0
 8000d2a:	609a      	str	r2, [r3, #8]
  hfdcan2.Init.Mode = FDCAN_MODE_NORMAL;
 8000d2c:	4b2b      	ldr	r3, [pc, #172]	; (8000ddc <MX_FDCAN2_Init+0xc0>)
 8000d2e:	2200      	movs	r2, #0
 8000d30:	60da      	str	r2, [r3, #12]
  hfdcan2.Init.AutoRetransmission = DISABLE;
 8000d32:	4b2a      	ldr	r3, [pc, #168]	; (8000ddc <MX_FDCAN2_Init+0xc0>)
 8000d34:	2200      	movs	r2, #0
 8000d36:	741a      	strb	r2, [r3, #16]
  hfdcan2.Init.TransmitPause = DISABLE;
 8000d38:	4b28      	ldr	r3, [pc, #160]	; (8000ddc <MX_FDCAN2_Init+0xc0>)
 8000d3a:	2200      	movs	r2, #0
 8000d3c:	745a      	strb	r2, [r3, #17]
  hfdcan2.Init.ProtocolException = DISABLE;
 8000d3e:	4b27      	ldr	r3, [pc, #156]	; (8000ddc <MX_FDCAN2_Init+0xc0>)
 8000d40:	2200      	movs	r2, #0
 8000d42:	749a      	strb	r2, [r3, #18]
  hfdcan2.Init.NominalPrescaler = 16;
 8000d44:	4b25      	ldr	r3, [pc, #148]	; (8000ddc <MX_FDCAN2_Init+0xc0>)
 8000d46:	2210      	movs	r2, #16
 8000d48:	615a      	str	r2, [r3, #20]
  hfdcan2.Init.NominalSyncJumpWidth = 1;
 8000d4a:	4b24      	ldr	r3, [pc, #144]	; (8000ddc <MX_FDCAN2_Init+0xc0>)
 8000d4c:	2201      	movs	r2, #1
 8000d4e:	619a      	str	r2, [r3, #24]
  hfdcan2.Init.NominalTimeSeg1 = 2;
 8000d50:	4b22      	ldr	r3, [pc, #136]	; (8000ddc <MX_FDCAN2_Init+0xc0>)
 8000d52:	2202      	movs	r2, #2
 8000d54:	61da      	str	r2, [r3, #28]
  hfdcan2.Init.NominalTimeSeg2 = 2;
 8000d56:	4b21      	ldr	r3, [pc, #132]	; (8000ddc <MX_FDCAN2_Init+0xc0>)
 8000d58:	2202      	movs	r2, #2
 8000d5a:	621a      	str	r2, [r3, #32]
  hfdcan2.Init.DataPrescaler = 1;
 8000d5c:	4b1f      	ldr	r3, [pc, #124]	; (8000ddc <MX_FDCAN2_Init+0xc0>)
 8000d5e:	2201      	movs	r2, #1
 8000d60:	625a      	str	r2, [r3, #36]	; 0x24
  hfdcan2.Init.DataSyncJumpWidth = 1;
 8000d62:	4b1e      	ldr	r3, [pc, #120]	; (8000ddc <MX_FDCAN2_Init+0xc0>)
 8000d64:	2201      	movs	r2, #1
 8000d66:	629a      	str	r2, [r3, #40]	; 0x28
  hfdcan2.Init.DataTimeSeg1 = 1;
 8000d68:	4b1c      	ldr	r3, [pc, #112]	; (8000ddc <MX_FDCAN2_Init+0xc0>)
 8000d6a:	2201      	movs	r2, #1
 8000d6c:	62da      	str	r2, [r3, #44]	; 0x2c
  hfdcan2.Init.DataTimeSeg2 = 1;
 8000d6e:	4b1b      	ldr	r3, [pc, #108]	; (8000ddc <MX_FDCAN2_Init+0xc0>)
 8000d70:	2201      	movs	r2, #1
 8000d72:	631a      	str	r2, [r3, #48]	; 0x30
  hfdcan2.Init.MessageRAMOffset = 0;
 8000d74:	4b19      	ldr	r3, [pc, #100]	; (8000ddc <MX_FDCAN2_Init+0xc0>)
 8000d76:	2200      	movs	r2, #0
 8000d78:	635a      	str	r2, [r3, #52]	; 0x34
  hfdcan2.Init.StdFiltersNbr = 0;
 8000d7a:	4b18      	ldr	r3, [pc, #96]	; (8000ddc <MX_FDCAN2_Init+0xc0>)
 8000d7c:	2200      	movs	r2, #0
 8000d7e:	639a      	str	r2, [r3, #56]	; 0x38
  hfdcan2.Init.ExtFiltersNbr = 0;
 8000d80:	4b16      	ldr	r3, [pc, #88]	; (8000ddc <MX_FDCAN2_Init+0xc0>)
 8000d82:	2200      	movs	r2, #0
 8000d84:	63da      	str	r2, [r3, #60]	; 0x3c
  hfdcan2.Init.RxFifo0ElmtsNbr = 0;
 8000d86:	4b15      	ldr	r3, [pc, #84]	; (8000ddc <MX_FDCAN2_Init+0xc0>)
 8000d88:	2200      	movs	r2, #0
 8000d8a:	641a      	str	r2, [r3, #64]	; 0x40
  hfdcan2.Init.RxFifo0ElmtSize = FDCAN_DATA_BYTES_8;
 8000d8c:	4b13      	ldr	r3, [pc, #76]	; (8000ddc <MX_FDCAN2_Init+0xc0>)
 8000d8e:	2204      	movs	r2, #4
 8000d90:	645a      	str	r2, [r3, #68]	; 0x44
  hfdcan2.Init.RxFifo1ElmtsNbr = 0;
 8000d92:	4b12      	ldr	r3, [pc, #72]	; (8000ddc <MX_FDCAN2_Init+0xc0>)
 8000d94:	2200      	movs	r2, #0
 8000d96:	649a      	str	r2, [r3, #72]	; 0x48
  hfdcan2.Init.RxFifo1ElmtSize = FDCAN_DATA_BYTES_8;
 8000d98:	4b10      	ldr	r3, [pc, #64]	; (8000ddc <MX_FDCAN2_Init+0xc0>)
 8000d9a:	2204      	movs	r2, #4
 8000d9c:	64da      	str	r2, [r3, #76]	; 0x4c
  hfdcan2.Init.RxBuffersNbr = 0;
 8000d9e:	4b0f      	ldr	r3, [pc, #60]	; (8000ddc <MX_FDCAN2_Init+0xc0>)
 8000da0:	2200      	movs	r2, #0
 8000da2:	651a      	str	r2, [r3, #80]	; 0x50
  hfdcan2.Init.RxBufferSize = FDCAN_DATA_BYTES_8;
 8000da4:	4b0d      	ldr	r3, [pc, #52]	; (8000ddc <MX_FDCAN2_Init+0xc0>)
 8000da6:	2204      	movs	r2, #4
 8000da8:	655a      	str	r2, [r3, #84]	; 0x54
  hfdcan2.Init.TxEventsNbr = 0;
 8000daa:	4b0c      	ldr	r3, [pc, #48]	; (8000ddc <MX_FDCAN2_Init+0xc0>)
 8000dac:	2200      	movs	r2, #0
 8000dae:	659a      	str	r2, [r3, #88]	; 0x58
  hfdcan2.Init.TxBuffersNbr = 0;
 8000db0:	4b0a      	ldr	r3, [pc, #40]	; (8000ddc <MX_FDCAN2_Init+0xc0>)
 8000db2:	2200      	movs	r2, #0
 8000db4:	65da      	str	r2, [r3, #92]	; 0x5c
  hfdcan2.Init.TxFifoQueueElmtsNbr = 0;
 8000db6:	4b09      	ldr	r3, [pc, #36]	; (8000ddc <MX_FDCAN2_Init+0xc0>)
 8000db8:	2200      	movs	r2, #0
 8000dba:	661a      	str	r2, [r3, #96]	; 0x60
  hfdcan2.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 8000dbc:	4b07      	ldr	r3, [pc, #28]	; (8000ddc <MX_FDCAN2_Init+0xc0>)
 8000dbe:	2200      	movs	r2, #0
 8000dc0:	665a      	str	r2, [r3, #100]	; 0x64
  hfdcan2.Init.TxElmtSize = FDCAN_DATA_BYTES_8;
 8000dc2:	4b06      	ldr	r3, [pc, #24]	; (8000ddc <MX_FDCAN2_Init+0xc0>)
 8000dc4:	2204      	movs	r2, #4
 8000dc6:	669a      	str	r2, [r3, #104]	; 0x68
  if (HAL_FDCAN_Init(&hfdcan2) != HAL_OK)
 8000dc8:	4804      	ldr	r0, [pc, #16]	; (8000ddc <MX_FDCAN2_Init+0xc0>)
 8000dca:	f004 faa7 	bl	800531c <HAL_FDCAN_Init>
 8000dce:	4603      	mov	r3, r0
 8000dd0:	2b00      	cmp	r3, #0
 8000dd2:	d001      	beq.n	8000dd8 <MX_FDCAN2_Init+0xbc>
  {
    Error_Handler();
 8000dd4:	f000 fce0 	bl	8001798 <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN2_Init 2 */

  /* USER CODE END FDCAN2_Init 2 */

}
 8000dd8:	bf00      	nop
 8000dda:	bd80      	pop	{r7, pc}
 8000ddc:	2400040c 	.word	0x2400040c
 8000de0:	4000a400 	.word	0x4000a400

08000de4 <MX_LTDC_Init>:
  * @brief LTDC Initialization Function
  * @param None
  * @retval None
  */
static void MX_LTDC_Init(void)
{
 8000de4:	b580      	push	{r7, lr}
 8000de6:	b09a      	sub	sp, #104	; 0x68
 8000de8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN LTDC_Init 0 */

  /* USER CODE END LTDC_Init 0 */

  LTDC_LayerCfgTypeDef pLayerCfg = {0};
 8000dea:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000dee:	2234      	movs	r2, #52	; 0x34
 8000df0:	2100      	movs	r1, #0
 8000df2:	4618      	mov	r0, r3
 8000df4:	f00d f96c 	bl	800e0d0 <memset>
  LTDC_LayerCfgTypeDef pLayerCfg1 = {0};
 8000df8:	463b      	mov	r3, r7
 8000dfa:	2234      	movs	r2, #52	; 0x34
 8000dfc:	2100      	movs	r1, #0
 8000dfe:	4618      	mov	r0, r3
 8000e00:	f00d f966 	bl	800e0d0 <memset>

  /* USER CODE BEGIN LTDC_Init 1 */

  /* USER CODE END LTDC_Init 1 */
  hltdc.Instance = LTDC;
 8000e04:	4b4e      	ldr	r3, [pc, #312]	; (8000f40 <MX_LTDC_Init+0x15c>)
 8000e06:	4a4f      	ldr	r2, [pc, #316]	; (8000f44 <MX_LTDC_Init+0x160>)
 8000e08:	601a      	str	r2, [r3, #0]
  hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 8000e0a:	4b4d      	ldr	r3, [pc, #308]	; (8000f40 <MX_LTDC_Init+0x15c>)
 8000e0c:	2200      	movs	r2, #0
 8000e0e:	605a      	str	r2, [r3, #4]
  hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 8000e10:	4b4b      	ldr	r3, [pc, #300]	; (8000f40 <MX_LTDC_Init+0x15c>)
 8000e12:	2200      	movs	r2, #0
 8000e14:	609a      	str	r2, [r3, #8]
  hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 8000e16:	4b4a      	ldr	r3, [pc, #296]	; (8000f40 <MX_LTDC_Init+0x15c>)
 8000e18:	2200      	movs	r2, #0
 8000e1a:	60da      	str	r2, [r3, #12]
  hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 8000e1c:	4b48      	ldr	r3, [pc, #288]	; (8000f40 <MX_LTDC_Init+0x15c>)
 8000e1e:	2200      	movs	r2, #0
 8000e20:	611a      	str	r2, [r3, #16]
  hltdc.Init.HorizontalSync = 7;
 8000e22:	4b47      	ldr	r3, [pc, #284]	; (8000f40 <MX_LTDC_Init+0x15c>)
 8000e24:	2207      	movs	r2, #7
 8000e26:	615a      	str	r2, [r3, #20]
  hltdc.Init.VerticalSync = 3;
 8000e28:	4b45      	ldr	r3, [pc, #276]	; (8000f40 <MX_LTDC_Init+0x15c>)
 8000e2a:	2203      	movs	r2, #3
 8000e2c:	619a      	str	r2, [r3, #24]
  hltdc.Init.AccumulatedHBP = 14;
 8000e2e:	4b44      	ldr	r3, [pc, #272]	; (8000f40 <MX_LTDC_Init+0x15c>)
 8000e30:	220e      	movs	r2, #14
 8000e32:	61da      	str	r2, [r3, #28]
  hltdc.Init.AccumulatedVBP = 5;
 8000e34:	4b42      	ldr	r3, [pc, #264]	; (8000f40 <MX_LTDC_Init+0x15c>)
 8000e36:	2205      	movs	r2, #5
 8000e38:	621a      	str	r2, [r3, #32]
  hltdc.Init.AccumulatedActiveW = 654;
 8000e3a:	4b41      	ldr	r3, [pc, #260]	; (8000f40 <MX_LTDC_Init+0x15c>)
 8000e3c:	f240 228e 	movw	r2, #654	; 0x28e
 8000e40:	625a      	str	r2, [r3, #36]	; 0x24
  hltdc.Init.AccumulatedActiveH = 485;
 8000e42:	4b3f      	ldr	r3, [pc, #252]	; (8000f40 <MX_LTDC_Init+0x15c>)
 8000e44:	f240 12e5 	movw	r2, #485	; 0x1e5
 8000e48:	629a      	str	r2, [r3, #40]	; 0x28
  hltdc.Init.TotalWidth = 660;
 8000e4a:	4b3d      	ldr	r3, [pc, #244]	; (8000f40 <MX_LTDC_Init+0x15c>)
 8000e4c:	f44f 7225 	mov.w	r2, #660	; 0x294
 8000e50:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc.Init.TotalHeigh = 487;
 8000e52:	4b3b      	ldr	r3, [pc, #236]	; (8000f40 <MX_LTDC_Init+0x15c>)
 8000e54:	f240 12e7 	movw	r2, #487	; 0x1e7
 8000e58:	631a      	str	r2, [r3, #48]	; 0x30
  hltdc.Init.Backcolor.Blue = 0;
 8000e5a:	4b39      	ldr	r3, [pc, #228]	; (8000f40 <MX_LTDC_Init+0x15c>)
 8000e5c:	2200      	movs	r2, #0
 8000e5e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hltdc.Init.Backcolor.Green = 0;
 8000e62:	4b37      	ldr	r3, [pc, #220]	; (8000f40 <MX_LTDC_Init+0x15c>)
 8000e64:	2200      	movs	r2, #0
 8000e66:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  hltdc.Init.Backcolor.Red = 0;
 8000e6a:	4b35      	ldr	r3, [pc, #212]	; (8000f40 <MX_LTDC_Init+0x15c>)
 8000e6c:	2200      	movs	r2, #0
 8000e6e:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 8000e72:	4833      	ldr	r0, [pc, #204]	; (8000f40 <MX_LTDC_Init+0x15c>)
 8000e74:	f004 ff80 	bl	8005d78 <HAL_LTDC_Init>
 8000e78:	4603      	mov	r3, r0
 8000e7a:	2b00      	cmp	r3, #0
 8000e7c:	d001      	beq.n	8000e82 <MX_LTDC_Init+0x9e>
  {
    Error_Handler();
 8000e7e:	f000 fc8b 	bl	8001798 <Error_Handler>
  }
  pLayerCfg.WindowX0 = 0;
 8000e82:	2300      	movs	r3, #0
 8000e84:	637b      	str	r3, [r7, #52]	; 0x34
  pLayerCfg.WindowX1 = 0;
 8000e86:	2300      	movs	r3, #0
 8000e88:	63bb      	str	r3, [r7, #56]	; 0x38
  pLayerCfg.WindowY0 = 0;
 8000e8a:	2300      	movs	r3, #0
 8000e8c:	63fb      	str	r3, [r7, #60]	; 0x3c
  pLayerCfg.WindowY1 = 0;
 8000e8e:	2300      	movs	r3, #0
 8000e90:	643b      	str	r3, [r7, #64]	; 0x40
  pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_ARGB8888;
 8000e92:	2300      	movs	r3, #0
 8000e94:	647b      	str	r3, [r7, #68]	; 0x44
  pLayerCfg.Alpha = 0;
 8000e96:	2300      	movs	r3, #0
 8000e98:	64bb      	str	r3, [r7, #72]	; 0x48
  pLayerCfg.Alpha0 = 0;
 8000e9a:	2300      	movs	r3, #0
 8000e9c:	64fb      	str	r3, [r7, #76]	; 0x4c
  pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_CA;
 8000e9e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000ea2:	653b      	str	r3, [r7, #80]	; 0x50
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_CA;
 8000ea4:	2305      	movs	r3, #5
 8000ea6:	657b      	str	r3, [r7, #84]	; 0x54
  pLayerCfg.FBStartAdress = 0;
 8000ea8:	2300      	movs	r3, #0
 8000eaa:	65bb      	str	r3, [r7, #88]	; 0x58
  pLayerCfg.ImageWidth = 0;
 8000eac:	2300      	movs	r3, #0
 8000eae:	65fb      	str	r3, [r7, #92]	; 0x5c
  pLayerCfg.ImageHeight = 0;
 8000eb0:	2300      	movs	r3, #0
 8000eb2:	663b      	str	r3, [r7, #96]	; 0x60
  pLayerCfg.Backcolor.Blue = 0;
 8000eb4:	2300      	movs	r3, #0
 8000eb6:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64
  pLayerCfg.Backcolor.Green = 0;
 8000eba:	2300      	movs	r3, #0
 8000ebc:	f887 3065 	strb.w	r3, [r7, #101]	; 0x65
  pLayerCfg.Backcolor.Red = 0;
 8000ec0:	2300      	movs	r3, #0
 8000ec2:	f887 3066 	strb.w	r3, [r7, #102]	; 0x66
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 8000ec6:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000eca:	2200      	movs	r2, #0
 8000ecc:	4619      	mov	r1, r3
 8000ece:	481c      	ldr	r0, [pc, #112]	; (8000f40 <MX_LTDC_Init+0x15c>)
 8000ed0:	f005 f822 	bl	8005f18 <HAL_LTDC_ConfigLayer>
 8000ed4:	4603      	mov	r3, r0
 8000ed6:	2b00      	cmp	r3, #0
 8000ed8:	d001      	beq.n	8000ede <MX_LTDC_Init+0xfa>
  {
    Error_Handler();
 8000eda:	f000 fc5d 	bl	8001798 <Error_Handler>
  }
  pLayerCfg1.WindowX0 = 0;
 8000ede:	2300      	movs	r3, #0
 8000ee0:	603b      	str	r3, [r7, #0]
  pLayerCfg1.WindowX1 = 0;
 8000ee2:	2300      	movs	r3, #0
 8000ee4:	607b      	str	r3, [r7, #4]
  pLayerCfg1.WindowY0 = 0;
 8000ee6:	2300      	movs	r3, #0
 8000ee8:	60bb      	str	r3, [r7, #8]
  pLayerCfg1.WindowY1 = 0;
 8000eea:	2300      	movs	r3, #0
 8000eec:	60fb      	str	r3, [r7, #12]
  pLayerCfg1.PixelFormat = LTDC_PIXEL_FORMAT_ARGB8888;
 8000eee:	2300      	movs	r3, #0
 8000ef0:	613b      	str	r3, [r7, #16]
  pLayerCfg1.Alpha = 0;
 8000ef2:	2300      	movs	r3, #0
 8000ef4:	617b      	str	r3, [r7, #20]
  pLayerCfg1.Alpha0 = 0;
 8000ef6:	2300      	movs	r3, #0
 8000ef8:	61bb      	str	r3, [r7, #24]
  pLayerCfg1.BlendingFactor1 = LTDC_BLENDING_FACTOR1_CA;
 8000efa:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000efe:	61fb      	str	r3, [r7, #28]
  pLayerCfg1.BlendingFactor2 = LTDC_BLENDING_FACTOR2_CA;
 8000f00:	2305      	movs	r3, #5
 8000f02:	623b      	str	r3, [r7, #32]
  pLayerCfg1.FBStartAdress = 0;
 8000f04:	2300      	movs	r3, #0
 8000f06:	627b      	str	r3, [r7, #36]	; 0x24
  pLayerCfg1.ImageWidth = 0;
 8000f08:	2300      	movs	r3, #0
 8000f0a:	62bb      	str	r3, [r7, #40]	; 0x28
  pLayerCfg1.ImageHeight = 0;
 8000f0c:	2300      	movs	r3, #0
 8000f0e:	62fb      	str	r3, [r7, #44]	; 0x2c
  pLayerCfg1.Backcolor.Blue = 0;
 8000f10:	2300      	movs	r3, #0
 8000f12:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  pLayerCfg1.Backcolor.Green = 0;
 8000f16:	2300      	movs	r3, #0
 8000f18:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
  pLayerCfg1.Backcolor.Red = 0;
 8000f1c:	2300      	movs	r3, #0
 8000f1e:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg1, 1) != HAL_OK)
 8000f22:	463b      	mov	r3, r7
 8000f24:	2201      	movs	r2, #1
 8000f26:	4619      	mov	r1, r3
 8000f28:	4805      	ldr	r0, [pc, #20]	; (8000f40 <MX_LTDC_Init+0x15c>)
 8000f2a:	f004 fff5 	bl	8005f18 <HAL_LTDC_ConfigLayer>
 8000f2e:	4603      	mov	r3, r0
 8000f30:	2b00      	cmp	r3, #0
 8000f32:	d001      	beq.n	8000f38 <MX_LTDC_Init+0x154>
  {
    Error_Handler();
 8000f34:	f000 fc30 	bl	8001798 <Error_Handler>
  }
  /* USER CODE BEGIN LTDC_Init 2 */

  /* USER CODE END LTDC_Init 2 */

}
 8000f38:	bf00      	nop
 8000f3a:	3768      	adds	r7, #104	; 0x68
 8000f3c:	46bd      	mov	sp, r7
 8000f3e:	bd80      	pop	{r7, pc}
 8000f40:	240004ac 	.word	0x240004ac
 8000f44:	50001000 	.word	0x50001000

08000f48 <MX_QUADSPI_Init>:
  * @brief QUADSPI Initialization Function
  * @param None
  * @retval None
  */
static void MX_QUADSPI_Init(void)
{
 8000f48:	b580      	push	{r7, lr}
 8000f4a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN QUADSPI_Init 1 */

  /* USER CODE END QUADSPI_Init 1 */
  /* QUADSPI parameter configuration*/
  hqspi.Instance = QUADSPI;
 8000f4c:	4b12      	ldr	r3, [pc, #72]	; (8000f98 <MX_QUADSPI_Init+0x50>)
 8000f4e:	4a13      	ldr	r2, [pc, #76]	; (8000f9c <MX_QUADSPI_Init+0x54>)
 8000f50:	601a      	str	r2, [r3, #0]
  hqspi.Init.ClockPrescaler = 255;
 8000f52:	4b11      	ldr	r3, [pc, #68]	; (8000f98 <MX_QUADSPI_Init+0x50>)
 8000f54:	22ff      	movs	r2, #255	; 0xff
 8000f56:	605a      	str	r2, [r3, #4]
  hqspi.Init.FifoThreshold = 1;
 8000f58:	4b0f      	ldr	r3, [pc, #60]	; (8000f98 <MX_QUADSPI_Init+0x50>)
 8000f5a:	2201      	movs	r2, #1
 8000f5c:	609a      	str	r2, [r3, #8]
  hqspi.Init.SampleShifting = QSPI_SAMPLE_SHIFTING_NONE;
 8000f5e:	4b0e      	ldr	r3, [pc, #56]	; (8000f98 <MX_QUADSPI_Init+0x50>)
 8000f60:	2200      	movs	r2, #0
 8000f62:	60da      	str	r2, [r3, #12]
  hqspi.Init.FlashSize = 1;
 8000f64:	4b0c      	ldr	r3, [pc, #48]	; (8000f98 <MX_QUADSPI_Init+0x50>)
 8000f66:	2201      	movs	r2, #1
 8000f68:	611a      	str	r2, [r3, #16]
  hqspi.Init.ChipSelectHighTime = QSPI_CS_HIGH_TIME_1_CYCLE;
 8000f6a:	4b0b      	ldr	r3, [pc, #44]	; (8000f98 <MX_QUADSPI_Init+0x50>)
 8000f6c:	2200      	movs	r2, #0
 8000f6e:	615a      	str	r2, [r3, #20]
  hqspi.Init.ClockMode = QSPI_CLOCK_MODE_0;
 8000f70:	4b09      	ldr	r3, [pc, #36]	; (8000f98 <MX_QUADSPI_Init+0x50>)
 8000f72:	2200      	movs	r2, #0
 8000f74:	619a      	str	r2, [r3, #24]
  hqspi.Init.FlashID = QSPI_FLASH_ID_1;
 8000f76:	4b08      	ldr	r3, [pc, #32]	; (8000f98 <MX_QUADSPI_Init+0x50>)
 8000f78:	2200      	movs	r2, #0
 8000f7a:	61da      	str	r2, [r3, #28]
  hqspi.Init.DualFlash = QSPI_DUALFLASH_DISABLE;
 8000f7c:	4b06      	ldr	r3, [pc, #24]	; (8000f98 <MX_QUADSPI_Init+0x50>)
 8000f7e:	2200      	movs	r2, #0
 8000f80:	621a      	str	r2, [r3, #32]
  if (HAL_QSPI_Init(&hqspi) != HAL_OK)
 8000f82:	4805      	ldr	r0, [pc, #20]	; (8000f98 <MX_QUADSPI_Init+0x50>)
 8000f84:	f005 fb32 	bl	80065ec <HAL_QSPI_Init>
 8000f88:	4603      	mov	r3, r0
 8000f8a:	2b00      	cmp	r3, #0
 8000f8c:	d001      	beq.n	8000f92 <MX_QUADSPI_Init+0x4a>
  {
    Error_Handler();
 8000f8e:	f000 fc03 	bl	8001798 <Error_Handler>
  }
  /* USER CODE BEGIN QUADSPI_Init 2 */

  /* USER CODE END QUADSPI_Init 2 */

}
 8000f92:	bf00      	nop
 8000f94:	bd80      	pop	{r7, pc}
 8000f96:	bf00      	nop
 8000f98:	24000554 	.word	0x24000554
 8000f9c:	52005000 	.word	0x52005000

08000fa0 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8000fa0:	b580      	push	{r7, lr}
 8000fa2:	af00      	add	r7, sp, #0

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8000fa4:	4b10      	ldr	r3, [pc, #64]	; (8000fe8 <MX_RTC_Init+0x48>)
 8000fa6:	4a11      	ldr	r2, [pc, #68]	; (8000fec <MX_RTC_Init+0x4c>)
 8000fa8:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8000faa:	4b0f      	ldr	r3, [pc, #60]	; (8000fe8 <MX_RTC_Init+0x48>)
 8000fac:	2200      	movs	r2, #0
 8000fae:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8000fb0:	4b0d      	ldr	r3, [pc, #52]	; (8000fe8 <MX_RTC_Init+0x48>)
 8000fb2:	227f      	movs	r2, #127	; 0x7f
 8000fb4:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8000fb6:	4b0c      	ldr	r3, [pc, #48]	; (8000fe8 <MX_RTC_Init+0x48>)
 8000fb8:	22ff      	movs	r2, #255	; 0xff
 8000fba:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8000fbc:	4b0a      	ldr	r3, [pc, #40]	; (8000fe8 <MX_RTC_Init+0x48>)
 8000fbe:	2200      	movs	r2, #0
 8000fc0:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8000fc2:	4b09      	ldr	r3, [pc, #36]	; (8000fe8 <MX_RTC_Init+0x48>)
 8000fc4:	2200      	movs	r2, #0
 8000fc6:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8000fc8:	4b07      	ldr	r3, [pc, #28]	; (8000fe8 <MX_RTC_Init+0x48>)
 8000fca:	2200      	movs	r2, #0
 8000fcc:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8000fce:	4b06      	ldr	r3, [pc, #24]	; (8000fe8 <MX_RTC_Init+0x48>)
 8000fd0:	2200      	movs	r2, #0
 8000fd2:	615a      	str	r2, [r3, #20]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8000fd4:	4804      	ldr	r0, [pc, #16]	; (8000fe8 <MX_RTC_Init+0x48>)
 8000fd6:	f009 f8a7 	bl	800a128 <HAL_RTC_Init>
 8000fda:	4603      	mov	r3, r0
 8000fdc:	2b00      	cmp	r3, #0
 8000fde:	d001      	beq.n	8000fe4 <MX_RTC_Init+0x44>
  {
    Error_Handler();
 8000fe0:	f000 fbda 	bl	8001798 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8000fe4:	bf00      	nop
 8000fe6:	bd80      	pop	{r7, pc}
 8000fe8:	240005a0 	.word	0x240005a0
 8000fec:	58004000 	.word	0x58004000

08000ff0 <MX_SAI2_Init>:
  * @brief SAI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SAI2_Init(void)
{
 8000ff0:	b580      	push	{r7, lr}
 8000ff2:	af00      	add	r7, sp, #0
  /* USER CODE END SAI2_Init 0 */

  /* USER CODE BEGIN SAI2_Init 1 */

  /* USER CODE END SAI2_Init 1 */
  hsai_BlockA2.Instance = SAI2_Block_A;
 8000ff4:	4b58      	ldr	r3, [pc, #352]	; (8001158 <MX_SAI2_Init+0x168>)
 8000ff6:	4a59      	ldr	r2, [pc, #356]	; (800115c <MX_SAI2_Init+0x16c>)
 8000ff8:	601a      	str	r2, [r3, #0]
  hsai_BlockA2.Init.Protocol = SAI_FREE_PROTOCOL;
 8000ffa:	4b57      	ldr	r3, [pc, #348]	; (8001158 <MX_SAI2_Init+0x168>)
 8000ffc:	2200      	movs	r2, #0
 8000ffe:	645a      	str	r2, [r3, #68]	; 0x44
  hsai_BlockA2.Init.AudioMode = SAI_MODEMASTER_TX;
 8001000:	4b55      	ldr	r3, [pc, #340]	; (8001158 <MX_SAI2_Init+0x168>)
 8001002:	2200      	movs	r2, #0
 8001004:	605a      	str	r2, [r3, #4]
  hsai_BlockA2.Init.DataSize = SAI_DATASIZE_8;
 8001006:	4b54      	ldr	r3, [pc, #336]	; (8001158 <MX_SAI2_Init+0x168>)
 8001008:	2240      	movs	r2, #64	; 0x40
 800100a:	649a      	str	r2, [r3, #72]	; 0x48
  hsai_BlockA2.Init.FirstBit = SAI_FIRSTBIT_MSB;
 800100c:	4b52      	ldr	r3, [pc, #328]	; (8001158 <MX_SAI2_Init+0x168>)
 800100e:	2200      	movs	r2, #0
 8001010:	64da      	str	r2, [r3, #76]	; 0x4c
  hsai_BlockA2.Init.ClockStrobing = SAI_CLOCKSTROBING_FALLINGEDGE;
 8001012:	4b51      	ldr	r3, [pc, #324]	; (8001158 <MX_SAI2_Init+0x168>)
 8001014:	2200      	movs	r2, #0
 8001016:	651a      	str	r2, [r3, #80]	; 0x50
  hsai_BlockA2.Init.Synchro = SAI_ASYNCHRONOUS;
 8001018:	4b4f      	ldr	r3, [pc, #316]	; (8001158 <MX_SAI2_Init+0x168>)
 800101a:	2200      	movs	r2, #0
 800101c:	609a      	str	r2, [r3, #8]
  hsai_BlockA2.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 800101e:	4b4e      	ldr	r3, [pc, #312]	; (8001158 <MX_SAI2_Init+0x168>)
 8001020:	2200      	movs	r2, #0
 8001022:	615a      	str	r2, [r3, #20]
  hsai_BlockA2.Init.NoDivider = SAI_MASTERDIVIDER_ENABLE;
 8001024:	4b4c      	ldr	r3, [pc, #304]	; (8001158 <MX_SAI2_Init+0x168>)
 8001026:	2200      	movs	r2, #0
 8001028:	619a      	str	r2, [r3, #24]
  hsai_BlockA2.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_EMPTY;
 800102a:	4b4b      	ldr	r3, [pc, #300]	; (8001158 <MX_SAI2_Init+0x168>)
 800102c:	2200      	movs	r2, #0
 800102e:	61da      	str	r2, [r3, #28]
  hsai_BlockA2.Init.AudioFrequency = SAI_AUDIO_FREQUENCY_192K;
 8001030:	4b49      	ldr	r3, [pc, #292]	; (8001158 <MX_SAI2_Init+0x168>)
 8001032:	4a4b      	ldr	r2, [pc, #300]	; (8001160 <MX_SAI2_Init+0x170>)
 8001034:	621a      	str	r2, [r3, #32]
  hsai_BlockA2.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 8001036:	4b48      	ldr	r3, [pc, #288]	; (8001158 <MX_SAI2_Init+0x168>)
 8001038:	2200      	movs	r2, #0
 800103a:	60da      	str	r2, [r3, #12]
  hsai_BlockA2.Init.MonoStereoMode = SAI_STEREOMODE;
 800103c:	4b46      	ldr	r3, [pc, #280]	; (8001158 <MX_SAI2_Init+0x168>)
 800103e:	2200      	movs	r2, #0
 8001040:	62da      	str	r2, [r3, #44]	; 0x2c
  hsai_BlockA2.Init.CompandingMode = SAI_NOCOMPANDING;
 8001042:	4b45      	ldr	r3, [pc, #276]	; (8001158 <MX_SAI2_Init+0x168>)
 8001044:	2200      	movs	r2, #0
 8001046:	631a      	str	r2, [r3, #48]	; 0x30
  hsai_BlockA2.Init.TriState = SAI_OUTPUT_NOTRELEASED;
 8001048:	4b43      	ldr	r3, [pc, #268]	; (8001158 <MX_SAI2_Init+0x168>)
 800104a:	2200      	movs	r2, #0
 800104c:	635a      	str	r2, [r3, #52]	; 0x34
  hsai_BlockA2.Init.PdmInit.Activation = DISABLE;
 800104e:	4b42      	ldr	r3, [pc, #264]	; (8001158 <MX_SAI2_Init+0x168>)
 8001050:	2200      	movs	r2, #0
 8001052:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hsai_BlockA2.Init.PdmInit.MicPairsNbr = 1;
 8001056:	4b40      	ldr	r3, [pc, #256]	; (8001158 <MX_SAI2_Init+0x168>)
 8001058:	2201      	movs	r2, #1
 800105a:	63da      	str	r2, [r3, #60]	; 0x3c
  hsai_BlockA2.Init.PdmInit.ClockEnable = SAI_PDM_CLOCK1_ENABLE;
 800105c:	4b3e      	ldr	r3, [pc, #248]	; (8001158 <MX_SAI2_Init+0x168>)
 800105e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001062:	641a      	str	r2, [r3, #64]	; 0x40
  hsai_BlockA2.FrameInit.FrameLength = 8;
 8001064:	4b3c      	ldr	r3, [pc, #240]	; (8001158 <MX_SAI2_Init+0x168>)
 8001066:	2208      	movs	r2, #8
 8001068:	655a      	str	r2, [r3, #84]	; 0x54
  hsai_BlockA2.FrameInit.ActiveFrameLength = 1;
 800106a:	4b3b      	ldr	r3, [pc, #236]	; (8001158 <MX_SAI2_Init+0x168>)
 800106c:	2201      	movs	r2, #1
 800106e:	659a      	str	r2, [r3, #88]	; 0x58
  hsai_BlockA2.FrameInit.FSDefinition = SAI_FS_STARTFRAME;
 8001070:	4b39      	ldr	r3, [pc, #228]	; (8001158 <MX_SAI2_Init+0x168>)
 8001072:	2200      	movs	r2, #0
 8001074:	65da      	str	r2, [r3, #92]	; 0x5c
  hsai_BlockA2.FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 8001076:	4b38      	ldr	r3, [pc, #224]	; (8001158 <MX_SAI2_Init+0x168>)
 8001078:	2200      	movs	r2, #0
 800107a:	661a      	str	r2, [r3, #96]	; 0x60
  hsai_BlockA2.FrameInit.FSOffset = SAI_FS_FIRSTBIT;
 800107c:	4b36      	ldr	r3, [pc, #216]	; (8001158 <MX_SAI2_Init+0x168>)
 800107e:	2200      	movs	r2, #0
 8001080:	665a      	str	r2, [r3, #100]	; 0x64
  hsai_BlockA2.SlotInit.FirstBitOffset = 0;
 8001082:	4b35      	ldr	r3, [pc, #212]	; (8001158 <MX_SAI2_Init+0x168>)
 8001084:	2200      	movs	r2, #0
 8001086:	669a      	str	r2, [r3, #104]	; 0x68
  hsai_BlockA2.SlotInit.SlotSize = SAI_SLOTSIZE_DATASIZE;
 8001088:	4b33      	ldr	r3, [pc, #204]	; (8001158 <MX_SAI2_Init+0x168>)
 800108a:	2200      	movs	r2, #0
 800108c:	66da      	str	r2, [r3, #108]	; 0x6c
  hsai_BlockA2.SlotInit.SlotNumber = 1;
 800108e:	4b32      	ldr	r3, [pc, #200]	; (8001158 <MX_SAI2_Init+0x168>)
 8001090:	2201      	movs	r2, #1
 8001092:	671a      	str	r2, [r3, #112]	; 0x70
  hsai_BlockA2.SlotInit.SlotActive = 0x00000000;
 8001094:	4b30      	ldr	r3, [pc, #192]	; (8001158 <MX_SAI2_Init+0x168>)
 8001096:	2200      	movs	r2, #0
 8001098:	675a      	str	r2, [r3, #116]	; 0x74
  if (HAL_SAI_Init(&hsai_BlockA2) != HAL_OK)
 800109a:	482f      	ldr	r0, [pc, #188]	; (8001158 <MX_SAI2_Init+0x168>)
 800109c:	f009 f95c 	bl	800a358 <HAL_SAI_Init>
 80010a0:	4603      	mov	r3, r0
 80010a2:	2b00      	cmp	r3, #0
 80010a4:	d001      	beq.n	80010aa <MX_SAI2_Init+0xba>
  {
    Error_Handler();
 80010a6:	f000 fb77 	bl	8001798 <Error_Handler>
  }
  hsai_BlockB2.Instance = SAI2_Block_B;
 80010aa:	4b2e      	ldr	r3, [pc, #184]	; (8001164 <MX_SAI2_Init+0x174>)
 80010ac:	4a2e      	ldr	r2, [pc, #184]	; (8001168 <MX_SAI2_Init+0x178>)
 80010ae:	601a      	str	r2, [r3, #0]
  hsai_BlockB2.Init.Protocol = SAI_FREE_PROTOCOL;
 80010b0:	4b2c      	ldr	r3, [pc, #176]	; (8001164 <MX_SAI2_Init+0x174>)
 80010b2:	2200      	movs	r2, #0
 80010b4:	645a      	str	r2, [r3, #68]	; 0x44
  hsai_BlockB2.Init.AudioMode = SAI_MODESLAVE_RX;
 80010b6:	4b2b      	ldr	r3, [pc, #172]	; (8001164 <MX_SAI2_Init+0x174>)
 80010b8:	2203      	movs	r2, #3
 80010ba:	605a      	str	r2, [r3, #4]
  hsai_BlockB2.Init.DataSize = SAI_DATASIZE_8;
 80010bc:	4b29      	ldr	r3, [pc, #164]	; (8001164 <MX_SAI2_Init+0x174>)
 80010be:	2240      	movs	r2, #64	; 0x40
 80010c0:	649a      	str	r2, [r3, #72]	; 0x48
  hsai_BlockB2.Init.FirstBit = SAI_FIRSTBIT_MSB;
 80010c2:	4b28      	ldr	r3, [pc, #160]	; (8001164 <MX_SAI2_Init+0x174>)
 80010c4:	2200      	movs	r2, #0
 80010c6:	64da      	str	r2, [r3, #76]	; 0x4c
  hsai_BlockB2.Init.ClockStrobing = SAI_CLOCKSTROBING_FALLINGEDGE;
 80010c8:	4b26      	ldr	r3, [pc, #152]	; (8001164 <MX_SAI2_Init+0x174>)
 80010ca:	2200      	movs	r2, #0
 80010cc:	651a      	str	r2, [r3, #80]	; 0x50
  hsai_BlockB2.Init.Synchro = SAI_SYNCHRONOUS;
 80010ce:	4b25      	ldr	r3, [pc, #148]	; (8001164 <MX_SAI2_Init+0x174>)
 80010d0:	2201      	movs	r2, #1
 80010d2:	609a      	str	r2, [r3, #8]
  hsai_BlockB2.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 80010d4:	4b23      	ldr	r3, [pc, #140]	; (8001164 <MX_SAI2_Init+0x174>)
 80010d6:	2200      	movs	r2, #0
 80010d8:	615a      	str	r2, [r3, #20]
  hsai_BlockB2.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_EMPTY;
 80010da:	4b22      	ldr	r3, [pc, #136]	; (8001164 <MX_SAI2_Init+0x174>)
 80010dc:	2200      	movs	r2, #0
 80010de:	61da      	str	r2, [r3, #28]
  hsai_BlockB2.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 80010e0:	4b20      	ldr	r3, [pc, #128]	; (8001164 <MX_SAI2_Init+0x174>)
 80010e2:	2200      	movs	r2, #0
 80010e4:	60da      	str	r2, [r3, #12]
  hsai_BlockB2.Init.MonoStereoMode = SAI_STEREOMODE;
 80010e6:	4b1f      	ldr	r3, [pc, #124]	; (8001164 <MX_SAI2_Init+0x174>)
 80010e8:	2200      	movs	r2, #0
 80010ea:	62da      	str	r2, [r3, #44]	; 0x2c
  hsai_BlockB2.Init.CompandingMode = SAI_NOCOMPANDING;
 80010ec:	4b1d      	ldr	r3, [pc, #116]	; (8001164 <MX_SAI2_Init+0x174>)
 80010ee:	2200      	movs	r2, #0
 80010f0:	631a      	str	r2, [r3, #48]	; 0x30
  hsai_BlockB2.Init.TriState = SAI_OUTPUT_NOTRELEASED;
 80010f2:	4b1c      	ldr	r3, [pc, #112]	; (8001164 <MX_SAI2_Init+0x174>)
 80010f4:	2200      	movs	r2, #0
 80010f6:	635a      	str	r2, [r3, #52]	; 0x34
  hsai_BlockB2.Init.PdmInit.Activation = DISABLE;
 80010f8:	4b1a      	ldr	r3, [pc, #104]	; (8001164 <MX_SAI2_Init+0x174>)
 80010fa:	2200      	movs	r2, #0
 80010fc:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hsai_BlockB2.Init.PdmInit.MicPairsNbr = 1;
 8001100:	4b18      	ldr	r3, [pc, #96]	; (8001164 <MX_SAI2_Init+0x174>)
 8001102:	2201      	movs	r2, #1
 8001104:	63da      	str	r2, [r3, #60]	; 0x3c
  hsai_BlockB2.Init.PdmInit.ClockEnable = SAI_PDM_CLOCK1_ENABLE;
 8001106:	4b17      	ldr	r3, [pc, #92]	; (8001164 <MX_SAI2_Init+0x174>)
 8001108:	f44f 7280 	mov.w	r2, #256	; 0x100
 800110c:	641a      	str	r2, [r3, #64]	; 0x40
  hsai_BlockB2.FrameInit.FrameLength = 8;
 800110e:	4b15      	ldr	r3, [pc, #84]	; (8001164 <MX_SAI2_Init+0x174>)
 8001110:	2208      	movs	r2, #8
 8001112:	655a      	str	r2, [r3, #84]	; 0x54
  hsai_BlockB2.FrameInit.ActiveFrameLength = 1;
 8001114:	4b13      	ldr	r3, [pc, #76]	; (8001164 <MX_SAI2_Init+0x174>)
 8001116:	2201      	movs	r2, #1
 8001118:	659a      	str	r2, [r3, #88]	; 0x58
  hsai_BlockB2.FrameInit.FSDefinition = SAI_FS_STARTFRAME;
 800111a:	4b12      	ldr	r3, [pc, #72]	; (8001164 <MX_SAI2_Init+0x174>)
 800111c:	2200      	movs	r2, #0
 800111e:	65da      	str	r2, [r3, #92]	; 0x5c
  hsai_BlockB2.FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 8001120:	4b10      	ldr	r3, [pc, #64]	; (8001164 <MX_SAI2_Init+0x174>)
 8001122:	2200      	movs	r2, #0
 8001124:	661a      	str	r2, [r3, #96]	; 0x60
  hsai_BlockB2.FrameInit.FSOffset = SAI_FS_FIRSTBIT;
 8001126:	4b0f      	ldr	r3, [pc, #60]	; (8001164 <MX_SAI2_Init+0x174>)
 8001128:	2200      	movs	r2, #0
 800112a:	665a      	str	r2, [r3, #100]	; 0x64
  hsai_BlockB2.SlotInit.FirstBitOffset = 0;
 800112c:	4b0d      	ldr	r3, [pc, #52]	; (8001164 <MX_SAI2_Init+0x174>)
 800112e:	2200      	movs	r2, #0
 8001130:	669a      	str	r2, [r3, #104]	; 0x68
  hsai_BlockB2.SlotInit.SlotSize = SAI_SLOTSIZE_DATASIZE;
 8001132:	4b0c      	ldr	r3, [pc, #48]	; (8001164 <MX_SAI2_Init+0x174>)
 8001134:	2200      	movs	r2, #0
 8001136:	66da      	str	r2, [r3, #108]	; 0x6c
  hsai_BlockB2.SlotInit.SlotNumber = 1;
 8001138:	4b0a      	ldr	r3, [pc, #40]	; (8001164 <MX_SAI2_Init+0x174>)
 800113a:	2201      	movs	r2, #1
 800113c:	671a      	str	r2, [r3, #112]	; 0x70
  hsai_BlockB2.SlotInit.SlotActive = 0x00000000;
 800113e:	4b09      	ldr	r3, [pc, #36]	; (8001164 <MX_SAI2_Init+0x174>)
 8001140:	2200      	movs	r2, #0
 8001142:	675a      	str	r2, [r3, #116]	; 0x74
  if (HAL_SAI_Init(&hsai_BlockB2) != HAL_OK)
 8001144:	4807      	ldr	r0, [pc, #28]	; (8001164 <MX_SAI2_Init+0x174>)
 8001146:	f009 f907 	bl	800a358 <HAL_SAI_Init>
 800114a:	4603      	mov	r3, r0
 800114c:	2b00      	cmp	r3, #0
 800114e:	d001      	beq.n	8001154 <MX_SAI2_Init+0x164>
  {
    Error_Handler();
 8001150:	f000 fb22 	bl	8001798 <Error_Handler>
  }
  /* USER CODE BEGIN SAI2_Init 2 */

  /* USER CODE END SAI2_Init 2 */

}
 8001154:	bf00      	nop
 8001156:	bd80      	pop	{r7, pc}
 8001158:	240005c4 	.word	0x240005c4
 800115c:	40015c04 	.word	0x40015c04
 8001160:	0002ee00 	.word	0x0002ee00
 8001164:	2400065c 	.word	0x2400065c
 8001168:	40015c24 	.word	0x40015c24

0800116c <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 800116c:	b580      	push	{r7, lr}
 800116e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8001170:	4b26      	ldr	r3, [pc, #152]	; (800120c <MX_SPI2_Init+0xa0>)
 8001172:	4a27      	ldr	r2, [pc, #156]	; (8001210 <MX_SPI2_Init+0xa4>)
 8001174:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8001176:	4b25      	ldr	r3, [pc, #148]	; (800120c <MX_SPI2_Init+0xa0>)
 8001178:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 800117c:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 800117e:	4b23      	ldr	r3, [pc, #140]	; (800120c <MX_SPI2_Init+0xa0>)
 8001180:	2200      	movs	r2, #0
 8001182:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_4BIT;
 8001184:	4b21      	ldr	r3, [pc, #132]	; (800120c <MX_SPI2_Init+0xa0>)
 8001186:	2203      	movs	r2, #3
 8001188:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 800118a:	4b20      	ldr	r3, [pc, #128]	; (800120c <MX_SPI2_Init+0xa0>)
 800118c:	2200      	movs	r2, #0
 800118e:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001190:	4b1e      	ldr	r3, [pc, #120]	; (800120c <MX_SPI2_Init+0xa0>)
 8001192:	2200      	movs	r2, #0
 8001194:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_HARD_INPUT;
 8001196:	4b1d      	ldr	r3, [pc, #116]	; (800120c <MX_SPI2_Init+0xa0>)
 8001198:	2200      	movs	r2, #0
 800119a:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800119c:	4b1b      	ldr	r3, [pc, #108]	; (800120c <MX_SPI2_Init+0xa0>)
 800119e:	2200      	movs	r2, #0
 80011a0:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80011a2:	4b1a      	ldr	r3, [pc, #104]	; (800120c <MX_SPI2_Init+0xa0>)
 80011a4:	2200      	movs	r2, #0
 80011a6:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80011a8:	4b18      	ldr	r3, [pc, #96]	; (800120c <MX_SPI2_Init+0xa0>)
 80011aa:	2200      	movs	r2, #0
 80011ac:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80011ae:	4b17      	ldr	r3, [pc, #92]	; (800120c <MX_SPI2_Init+0xa0>)
 80011b0:	2200      	movs	r2, #0
 80011b2:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 0x0;
 80011b4:	4b15      	ldr	r3, [pc, #84]	; (800120c <MX_SPI2_Init+0xa0>)
 80011b6:	2200      	movs	r2, #0
 80011b8:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80011ba:	4b14      	ldr	r3, [pc, #80]	; (800120c <MX_SPI2_Init+0xa0>)
 80011bc:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80011c0:	635a      	str	r2, [r3, #52]	; 0x34
  hspi2.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 80011c2:	4b12      	ldr	r3, [pc, #72]	; (800120c <MX_SPI2_Init+0xa0>)
 80011c4:	2200      	movs	r2, #0
 80011c6:	639a      	str	r2, [r3, #56]	; 0x38
  hspi2.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 80011c8:	4b10      	ldr	r3, [pc, #64]	; (800120c <MX_SPI2_Init+0xa0>)
 80011ca:	2200      	movs	r2, #0
 80011cc:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi2.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 80011ce:	4b0f      	ldr	r3, [pc, #60]	; (800120c <MX_SPI2_Init+0xa0>)
 80011d0:	2200      	movs	r2, #0
 80011d2:	641a      	str	r2, [r3, #64]	; 0x40
  hspi2.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 80011d4:	4b0d      	ldr	r3, [pc, #52]	; (800120c <MX_SPI2_Init+0xa0>)
 80011d6:	2200      	movs	r2, #0
 80011d8:	645a      	str	r2, [r3, #68]	; 0x44
  hspi2.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 80011da:	4b0c      	ldr	r3, [pc, #48]	; (800120c <MX_SPI2_Init+0xa0>)
 80011dc:	2200      	movs	r2, #0
 80011de:	649a      	str	r2, [r3, #72]	; 0x48
  hspi2.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 80011e0:	4b0a      	ldr	r3, [pc, #40]	; (800120c <MX_SPI2_Init+0xa0>)
 80011e2:	2200      	movs	r2, #0
 80011e4:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi2.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 80011e6:	4b09      	ldr	r3, [pc, #36]	; (800120c <MX_SPI2_Init+0xa0>)
 80011e8:	2200      	movs	r2, #0
 80011ea:	651a      	str	r2, [r3, #80]	; 0x50
  hspi2.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 80011ec:	4b07      	ldr	r3, [pc, #28]	; (800120c <MX_SPI2_Init+0xa0>)
 80011ee:	2200      	movs	r2, #0
 80011f0:	655a      	str	r2, [r3, #84]	; 0x54
  hspi2.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 80011f2:	4b06      	ldr	r3, [pc, #24]	; (800120c <MX_SPI2_Init+0xa0>)
 80011f4:	2200      	movs	r2, #0
 80011f6:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 80011f8:	4804      	ldr	r0, [pc, #16]	; (800120c <MX_SPI2_Init+0xa0>)
 80011fa:	f009 fbcd 	bl	800a998 <HAL_SPI_Init>
 80011fe:	4603      	mov	r3, r0
 8001200:	2b00      	cmp	r3, #0
 8001202:	d001      	beq.n	8001208 <MX_SPI2_Init+0x9c>
  {
    Error_Handler();
 8001204:	f000 fac8 	bl	8001798 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8001208:	bf00      	nop
 800120a:	bd80      	pop	{r7, pc}
 800120c:	240006f4 	.word	0x240006f4
 8001210:	40003800 	.word	0x40003800

08001214 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001214:	b580      	push	{r7, lr}
 8001216:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001218:	4b22      	ldr	r3, [pc, #136]	; (80012a4 <MX_USART1_UART_Init+0x90>)
 800121a:	4a23      	ldr	r2, [pc, #140]	; (80012a8 <MX_USART1_UART_Init+0x94>)
 800121c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 800121e:	4b21      	ldr	r3, [pc, #132]	; (80012a4 <MX_USART1_UART_Init+0x90>)
 8001220:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8001224:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001226:	4b1f      	ldr	r3, [pc, #124]	; (80012a4 <MX_USART1_UART_Init+0x90>)
 8001228:	2200      	movs	r2, #0
 800122a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800122c:	4b1d      	ldr	r3, [pc, #116]	; (80012a4 <MX_USART1_UART_Init+0x90>)
 800122e:	2200      	movs	r2, #0
 8001230:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001232:	4b1c      	ldr	r3, [pc, #112]	; (80012a4 <MX_USART1_UART_Init+0x90>)
 8001234:	2200      	movs	r2, #0
 8001236:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001238:	4b1a      	ldr	r3, [pc, #104]	; (80012a4 <MX_USART1_UART_Init+0x90>)
 800123a:	220c      	movs	r2, #12
 800123c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800123e:	4b19      	ldr	r3, [pc, #100]	; (80012a4 <MX_USART1_UART_Init+0x90>)
 8001240:	2200      	movs	r2, #0
 8001242:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001244:	4b17      	ldr	r3, [pc, #92]	; (80012a4 <MX_USART1_UART_Init+0x90>)
 8001246:	2200      	movs	r2, #0
 8001248:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800124a:	4b16      	ldr	r3, [pc, #88]	; (80012a4 <MX_USART1_UART_Init+0x90>)
 800124c:	2200      	movs	r2, #0
 800124e:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001250:	4b14      	ldr	r3, [pc, #80]	; (80012a4 <MX_USART1_UART_Init+0x90>)
 8001252:	2200      	movs	r2, #0
 8001254:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001256:	4b13      	ldr	r3, [pc, #76]	; (80012a4 <MX_USART1_UART_Init+0x90>)
 8001258:	2200      	movs	r2, #0
 800125a:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800125c:	4811      	ldr	r0, [pc, #68]	; (80012a4 <MX_USART1_UART_Init+0x90>)
 800125e:	f009 fcda 	bl	800ac16 <HAL_UART_Init>
 8001262:	4603      	mov	r3, r0
 8001264:	2b00      	cmp	r3, #0
 8001266:	d001      	beq.n	800126c <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8001268:	f000 fa96 	bl	8001798 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800126c:	2100      	movs	r1, #0
 800126e:	480d      	ldr	r0, [pc, #52]	; (80012a4 <MX_USART1_UART_Init+0x90>)
 8001270:	f00c fa5b 	bl	800d72a <HAL_UARTEx_SetTxFifoThreshold>
 8001274:	4603      	mov	r3, r0
 8001276:	2b00      	cmp	r3, #0
 8001278:	d001      	beq.n	800127e <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 800127a:	f000 fa8d 	bl	8001798 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800127e:	2100      	movs	r1, #0
 8001280:	4808      	ldr	r0, [pc, #32]	; (80012a4 <MX_USART1_UART_Init+0x90>)
 8001282:	f00c fa90 	bl	800d7a6 <HAL_UARTEx_SetRxFifoThreshold>
 8001286:	4603      	mov	r3, r0
 8001288:	2b00      	cmp	r3, #0
 800128a:	d001      	beq.n	8001290 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 800128c:	f000 fa84 	bl	8001798 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8001290:	4804      	ldr	r0, [pc, #16]	; (80012a4 <MX_USART1_UART_Init+0x90>)
 8001292:	f00c fa11 	bl	800d6b8 <HAL_UARTEx_DisableFifoMode>
 8001296:	4603      	mov	r3, r0
 8001298:	2b00      	cmp	r3, #0
 800129a:	d001      	beq.n	80012a0 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 800129c:	f000 fa7c 	bl	8001798 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80012a0:	bf00      	nop
 80012a2:	bd80      	pop	{r7, pc}
 80012a4:	2400077c 	.word	0x2400077c
 80012a8:	40011000 	.word	0x40011000

080012ac <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80012ac:	b580      	push	{r7, lr}
 80012ae:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80012b0:	4b22      	ldr	r3, [pc, #136]	; (800133c <MX_USART3_UART_Init+0x90>)
 80012b2:	4a23      	ldr	r2, [pc, #140]	; (8001340 <MX_USART3_UART_Init+0x94>)
 80012b4:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 9600;
 80012b6:	4b21      	ldr	r3, [pc, #132]	; (800133c <MX_USART3_UART_Init+0x90>)
 80012b8:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80012bc:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80012be:	4b1f      	ldr	r3, [pc, #124]	; (800133c <MX_USART3_UART_Init+0x90>)
 80012c0:	2200      	movs	r2, #0
 80012c2:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80012c4:	4b1d      	ldr	r3, [pc, #116]	; (800133c <MX_USART3_UART_Init+0x90>)
 80012c6:	2200      	movs	r2, #0
 80012c8:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80012ca:	4b1c      	ldr	r3, [pc, #112]	; (800133c <MX_USART3_UART_Init+0x90>)
 80012cc:	2200      	movs	r2, #0
 80012ce:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80012d0:	4b1a      	ldr	r3, [pc, #104]	; (800133c <MX_USART3_UART_Init+0x90>)
 80012d2:	220c      	movs	r2, #12
 80012d4:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80012d6:	4b19      	ldr	r3, [pc, #100]	; (800133c <MX_USART3_UART_Init+0x90>)
 80012d8:	2200      	movs	r2, #0
 80012da:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80012dc:	4b17      	ldr	r3, [pc, #92]	; (800133c <MX_USART3_UART_Init+0x90>)
 80012de:	2200      	movs	r2, #0
 80012e0:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80012e2:	4b16      	ldr	r3, [pc, #88]	; (800133c <MX_USART3_UART_Init+0x90>)
 80012e4:	2200      	movs	r2, #0
 80012e6:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80012e8:	4b14      	ldr	r3, [pc, #80]	; (800133c <MX_USART3_UART_Init+0x90>)
 80012ea:	2200      	movs	r2, #0
 80012ec:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80012ee:	4b13      	ldr	r3, [pc, #76]	; (800133c <MX_USART3_UART_Init+0x90>)
 80012f0:	2200      	movs	r2, #0
 80012f2:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80012f4:	4811      	ldr	r0, [pc, #68]	; (800133c <MX_USART3_UART_Init+0x90>)
 80012f6:	f009 fc8e 	bl	800ac16 <HAL_UART_Init>
 80012fa:	4603      	mov	r3, r0
 80012fc:	2b00      	cmp	r3, #0
 80012fe:	d001      	beq.n	8001304 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8001300:	f000 fa4a 	bl	8001798 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001304:	2100      	movs	r1, #0
 8001306:	480d      	ldr	r0, [pc, #52]	; (800133c <MX_USART3_UART_Init+0x90>)
 8001308:	f00c fa0f 	bl	800d72a <HAL_UARTEx_SetTxFifoThreshold>
 800130c:	4603      	mov	r3, r0
 800130e:	2b00      	cmp	r3, #0
 8001310:	d001      	beq.n	8001316 <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8001312:	f000 fa41 	bl	8001798 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001316:	2100      	movs	r1, #0
 8001318:	4808      	ldr	r0, [pc, #32]	; (800133c <MX_USART3_UART_Init+0x90>)
 800131a:	f00c fa44 	bl	800d7a6 <HAL_UARTEx_SetRxFifoThreshold>
 800131e:	4603      	mov	r3, r0
 8001320:	2b00      	cmp	r3, #0
 8001322:	d001      	beq.n	8001328 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8001324:	f000 fa38 	bl	8001798 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8001328:	4804      	ldr	r0, [pc, #16]	; (800133c <MX_USART3_UART_Init+0x90>)
 800132a:	f00c f9c5 	bl	800d6b8 <HAL_UARTEx_DisableFifoMode>
 800132e:	4603      	mov	r3, r0
 8001330:	2b00      	cmp	r3, #0
 8001332:	d001      	beq.n	8001338 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8001334:	f000 fa30 	bl	8001798 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001338:	bf00      	nop
 800133a:	bd80      	pop	{r7, pc}
 800133c:	24000810 	.word	0x24000810
 8001340:	40004800 	.word	0x40004800

08001344 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8001344:	b580      	push	{r7, lr}
 8001346:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8001348:	4b15      	ldr	r3, [pc, #84]	; (80013a0 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 800134a:	4a16      	ldr	r2, [pc, #88]	; (80013a4 <MX_USB_OTG_FS_PCD_Init+0x60>)
 800134c:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 9;
 800134e:	4b14      	ldr	r3, [pc, #80]	; (80013a0 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001350:	2209      	movs	r2, #9
 8001352:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8001354:	4b12      	ldr	r3, [pc, #72]	; (80013a0 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001356:	2202      	movs	r2, #2
 8001358:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800135a:	4b11      	ldr	r3, [pc, #68]	; (80013a0 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 800135c:	2200      	movs	r2, #0
 800135e:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8001360:	4b0f      	ldr	r3, [pc, #60]	; (80013a0 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001362:	2202      	movs	r2, #2
 8001364:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8001366:	4b0e      	ldr	r3, [pc, #56]	; (80013a0 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001368:	2200      	movs	r2, #0
 800136a:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800136c:	4b0c      	ldr	r3, [pc, #48]	; (80013a0 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 800136e:	2200      	movs	r2, #0
 8001370:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8001372:	4b0b      	ldr	r3, [pc, #44]	; (80013a0 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001374:	2200      	movs	r2, #0
 8001376:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.battery_charging_enable = ENABLE;
 8001378:	4b09      	ldr	r3, [pc, #36]	; (80013a0 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 800137a:	2201      	movs	r2, #1
 800137c:	629a      	str	r2, [r3, #40]	; 0x28
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 800137e:	4b08      	ldr	r3, [pc, #32]	; (80013a0 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001380:	2201      	movs	r2, #1
 8001382:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8001384:	4b06      	ldr	r3, [pc, #24]	; (80013a0 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001386:	2200      	movs	r2, #0
 8001388:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800138a:	4805      	ldr	r0, [pc, #20]	; (80013a0 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 800138c:	f004 ff9c 	bl	80062c8 <HAL_PCD_Init>
 8001390:	4603      	mov	r3, r0
 8001392:	2b00      	cmp	r3, #0
 8001394:	d001      	beq.n	800139a <MX_USB_OTG_FS_PCD_Init+0x56>
  {
    Error_Handler();
 8001396:	f000 f9ff 	bl	8001798 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 800139a:	bf00      	nop
 800139c:	bd80      	pop	{r7, pc}
 800139e:	bf00      	nop
 80013a0:	240008a4 	.word	0x240008a4
 80013a4:	40080000 	.word	0x40080000

080013a8 <MX_FMC_Init>:

/* FMC initialization function */
static void MX_FMC_Init(void)
{
 80013a8:	b580      	push	{r7, lr}
 80013aa:	b088      	sub	sp, #32
 80013ac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN FMC_Init 0 */

  /* USER CODE END FMC_Init 0 */

  FMC_SDRAM_TimingTypeDef SdramTiming = {0};
 80013ae:	1d3b      	adds	r3, r7, #4
 80013b0:	2200      	movs	r2, #0
 80013b2:	601a      	str	r2, [r3, #0]
 80013b4:	605a      	str	r2, [r3, #4]
 80013b6:	609a      	str	r2, [r3, #8]
 80013b8:	60da      	str	r2, [r3, #12]
 80013ba:	611a      	str	r2, [r3, #16]
 80013bc:	615a      	str	r2, [r3, #20]
 80013be:	619a      	str	r2, [r3, #24]

  /* USER CODE END FMC_Init 1 */

  /** Perform the SDRAM1 memory initialization sequence
  */
  hsdram1.Instance = FMC_SDRAM_DEVICE;
 80013c0:	4b1e      	ldr	r3, [pc, #120]	; (800143c <MX_FMC_Init+0x94>)
 80013c2:	4a1f      	ldr	r2, [pc, #124]	; (8001440 <MX_FMC_Init+0x98>)
 80013c4:	601a      	str	r2, [r3, #0]
  /* hsdram1.Init */
  hsdram1.Init.SDBank = FMC_SDRAM_BANK2;
 80013c6:	4b1d      	ldr	r3, [pc, #116]	; (800143c <MX_FMC_Init+0x94>)
 80013c8:	2201      	movs	r2, #1
 80013ca:	605a      	str	r2, [r3, #4]
  hsdram1.Init.ColumnBitsNumber = FMC_SDRAM_COLUMN_BITS_NUM_8;
 80013cc:	4b1b      	ldr	r3, [pc, #108]	; (800143c <MX_FMC_Init+0x94>)
 80013ce:	2200      	movs	r2, #0
 80013d0:	609a      	str	r2, [r3, #8]
  hsdram1.Init.RowBitsNumber = FMC_SDRAM_ROW_BITS_NUM_12;
 80013d2:	4b1a      	ldr	r3, [pc, #104]	; (800143c <MX_FMC_Init+0x94>)
 80013d4:	2204      	movs	r2, #4
 80013d6:	60da      	str	r2, [r3, #12]
  hsdram1.Init.MemoryDataWidth = FMC_SDRAM_MEM_BUS_WIDTH_16;
 80013d8:	4b18      	ldr	r3, [pc, #96]	; (800143c <MX_FMC_Init+0x94>)
 80013da:	2210      	movs	r2, #16
 80013dc:	611a      	str	r2, [r3, #16]
  hsdram1.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 80013de:	4b17      	ldr	r3, [pc, #92]	; (800143c <MX_FMC_Init+0x94>)
 80013e0:	2240      	movs	r2, #64	; 0x40
 80013e2:	615a      	str	r2, [r3, #20]
  hsdram1.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_1;
 80013e4:	4b15      	ldr	r3, [pc, #84]	; (800143c <MX_FMC_Init+0x94>)
 80013e6:	2280      	movs	r2, #128	; 0x80
 80013e8:	619a      	str	r2, [r3, #24]
  hsdram1.Init.WriteProtection = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 80013ea:	4b14      	ldr	r3, [pc, #80]	; (800143c <MX_FMC_Init+0x94>)
 80013ec:	2200      	movs	r2, #0
 80013ee:	61da      	str	r2, [r3, #28]
  hsdram1.Init.SDClockPeriod = FMC_SDRAM_CLOCK_DISABLE;
 80013f0:	4b12      	ldr	r3, [pc, #72]	; (800143c <MX_FMC_Init+0x94>)
 80013f2:	2200      	movs	r2, #0
 80013f4:	621a      	str	r2, [r3, #32]
  hsdram1.Init.ReadBurst = FMC_SDRAM_RBURST_DISABLE;
 80013f6:	4b11      	ldr	r3, [pc, #68]	; (800143c <MX_FMC_Init+0x94>)
 80013f8:	2200      	movs	r2, #0
 80013fa:	625a      	str	r2, [r3, #36]	; 0x24
  hsdram1.Init.ReadPipeDelay = FMC_SDRAM_RPIPE_DELAY_0;
 80013fc:	4b0f      	ldr	r3, [pc, #60]	; (800143c <MX_FMC_Init+0x94>)
 80013fe:	2200      	movs	r2, #0
 8001400:	629a      	str	r2, [r3, #40]	; 0x28
  /* SdramTiming */
  SdramTiming.LoadToActiveDelay = 16;
 8001402:	2310      	movs	r3, #16
 8001404:	607b      	str	r3, [r7, #4]
  SdramTiming.ExitSelfRefreshDelay = 16;
 8001406:	2310      	movs	r3, #16
 8001408:	60bb      	str	r3, [r7, #8]
  SdramTiming.SelfRefreshTime = 16;
 800140a:	2310      	movs	r3, #16
 800140c:	60fb      	str	r3, [r7, #12]
  SdramTiming.RowCycleDelay = 16;
 800140e:	2310      	movs	r3, #16
 8001410:	613b      	str	r3, [r7, #16]
  SdramTiming.WriteRecoveryTime = 16;
 8001412:	2310      	movs	r3, #16
 8001414:	617b      	str	r3, [r7, #20]
  SdramTiming.RPDelay = 16;
 8001416:	2310      	movs	r3, #16
 8001418:	61bb      	str	r3, [r7, #24]
  SdramTiming.RCDDelay = 16;
 800141a:	2310      	movs	r3, #16
 800141c:	61fb      	str	r3, [r7, #28]

  if (HAL_SDRAM_Init(&hsdram1, &SdramTiming) != HAL_OK)
 800141e:	1d3b      	adds	r3, r7, #4
 8001420:	4619      	mov	r1, r3
 8001422:	4806      	ldr	r0, [pc, #24]	; (800143c <MX_FMC_Init+0x94>)
 8001424:	f009 fa7c 	bl	800a920 <HAL_SDRAM_Init>
 8001428:	4603      	mov	r3, r0
 800142a:	2b00      	cmp	r3, #0
 800142c:	d001      	beq.n	8001432 <MX_FMC_Init+0x8a>
  {
    Error_Handler( );
 800142e:	f000 f9b3 	bl	8001798 <Error_Handler>
  }

  /* USER CODE BEGIN FMC_Init 2 */

  /* USER CODE END FMC_Init 2 */
}
 8001432:	bf00      	nop
 8001434:	3720      	adds	r7, #32
 8001436:	46bd      	mov	sp, r7
 8001438:	bd80      	pop	{r7, pc}
 800143a:	bf00      	nop
 800143c:	24000db0 	.word	0x24000db0
 8001440:	52004140 	.word	0x52004140

08001444 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001444:	b580      	push	{r7, lr}
 8001446:	b090      	sub	sp, #64	; 0x40
 8001448:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800144a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800144e:	2200      	movs	r2, #0
 8001450:	601a      	str	r2, [r3, #0]
 8001452:	605a      	str	r2, [r3, #4]
 8001454:	609a      	str	r2, [r3, #8]
 8001456:	60da      	str	r2, [r3, #12]
 8001458:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOI_CLK_ENABLE();
 800145a:	4bbf      	ldr	r3, [pc, #764]	; (8001758 <MX_GPIO_Init+0x314>)
 800145c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001460:	4abd      	ldr	r2, [pc, #756]	; (8001758 <MX_GPIO_Init+0x314>)
 8001462:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001466:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800146a:	4bbb      	ldr	r3, [pc, #748]	; (8001758 <MX_GPIO_Init+0x314>)
 800146c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001470:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001474:	62bb      	str	r3, [r7, #40]	; 0x28
 8001476:	6abb      	ldr	r3, [r7, #40]	; 0x28
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001478:	4bb7      	ldr	r3, [pc, #732]	; (8001758 <MX_GPIO_Init+0x314>)
 800147a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800147e:	4ab6      	ldr	r2, [pc, #728]	; (8001758 <MX_GPIO_Init+0x314>)
 8001480:	f043 0302 	orr.w	r3, r3, #2
 8001484:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001488:	4bb3      	ldr	r3, [pc, #716]	; (8001758 <MX_GPIO_Init+0x314>)
 800148a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800148e:	f003 0302 	and.w	r3, r3, #2
 8001492:	627b      	str	r3, [r7, #36]	; 0x24
 8001494:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  __HAL_RCC_GPIOK_CLK_ENABLE();
 8001496:	4bb0      	ldr	r3, [pc, #704]	; (8001758 <MX_GPIO_Init+0x314>)
 8001498:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800149c:	4aae      	ldr	r2, [pc, #696]	; (8001758 <MX_GPIO_Init+0x314>)
 800149e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80014a2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80014a6:	4bac      	ldr	r3, [pc, #688]	; (8001758 <MX_GPIO_Init+0x314>)
 80014a8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80014ac:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80014b0:	623b      	str	r3, [r7, #32]
 80014b2:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80014b4:	4ba8      	ldr	r3, [pc, #672]	; (8001758 <MX_GPIO_Init+0x314>)
 80014b6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80014ba:	4aa7      	ldr	r2, [pc, #668]	; (8001758 <MX_GPIO_Init+0x314>)
 80014bc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80014c0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80014c4:	4ba4      	ldr	r3, [pc, #656]	; (8001758 <MX_GPIO_Init+0x314>)
 80014c6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80014ca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80014ce:	61fb      	str	r3, [r7, #28]
 80014d0:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80014d2:	4ba1      	ldr	r3, [pc, #644]	; (8001758 <MX_GPIO_Init+0x314>)
 80014d4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80014d8:	4a9f      	ldr	r2, [pc, #636]	; (8001758 <MX_GPIO_Init+0x314>)
 80014da:	f043 0304 	orr.w	r3, r3, #4
 80014de:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80014e2:	4b9d      	ldr	r3, [pc, #628]	; (8001758 <MX_GPIO_Init+0x314>)
 80014e4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80014e8:	f003 0304 	and.w	r3, r3, #4
 80014ec:	61bb      	str	r3, [r7, #24]
 80014ee:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80014f0:	4b99      	ldr	r3, [pc, #612]	; (8001758 <MX_GPIO_Init+0x314>)
 80014f2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80014f6:	4a98      	ldr	r2, [pc, #608]	; (8001758 <MX_GPIO_Init+0x314>)
 80014f8:	f043 0301 	orr.w	r3, r3, #1
 80014fc:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001500:	4b95      	ldr	r3, [pc, #596]	; (8001758 <MX_GPIO_Init+0x314>)
 8001502:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001506:	f003 0301 	and.w	r3, r3, #1
 800150a:	617b      	str	r3, [r7, #20]
 800150c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800150e:	4b92      	ldr	r3, [pc, #584]	; (8001758 <MX_GPIO_Init+0x314>)
 8001510:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001514:	4a90      	ldr	r2, [pc, #576]	; (8001758 <MX_GPIO_Init+0x314>)
 8001516:	f043 0310 	orr.w	r3, r3, #16
 800151a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800151e:	4b8e      	ldr	r3, [pc, #568]	; (8001758 <MX_GPIO_Init+0x314>)
 8001520:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001524:	f003 0310 	and.w	r3, r3, #16
 8001528:	613b      	str	r3, [r7, #16]
 800152a:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 800152c:	4b8a      	ldr	r3, [pc, #552]	; (8001758 <MX_GPIO_Init+0x314>)
 800152e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001532:	4a89      	ldr	r2, [pc, #548]	; (8001758 <MX_GPIO_Init+0x314>)
 8001534:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001538:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800153c:	4b86      	ldr	r3, [pc, #536]	; (8001758 <MX_GPIO_Init+0x314>)
 800153e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001542:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001546:	60fb      	str	r3, [r7, #12]
 8001548:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800154a:	4b83      	ldr	r3, [pc, #524]	; (8001758 <MX_GPIO_Init+0x314>)
 800154c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001550:	4a81      	ldr	r2, [pc, #516]	; (8001758 <MX_GPIO_Init+0x314>)
 8001552:	f043 0308 	orr.w	r3, r3, #8
 8001556:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800155a:	4b7f      	ldr	r3, [pc, #508]	; (8001758 <MX_GPIO_Init+0x314>)
 800155c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001560:	f003 0308 	and.w	r3, r3, #8
 8001564:	60bb      	str	r3, [r7, #8]
 8001566:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001568:	4b7b      	ldr	r3, [pc, #492]	; (8001758 <MX_GPIO_Init+0x314>)
 800156a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800156e:	4a7a      	ldr	r2, [pc, #488]	; (8001758 <MX_GPIO_Init+0x314>)
 8001570:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001574:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001578:	4b77      	ldr	r3, [pc, #476]	; (8001758 <MX_GPIO_Init+0x314>)
 800157a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800157e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001582:	607b      	str	r3, [r7, #4]
 8001584:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001586:	4b74      	ldr	r3, [pc, #464]	; (8001758 <MX_GPIO_Init+0x314>)
 8001588:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800158c:	4a72      	ldr	r2, [pc, #456]	; (8001758 <MX_GPIO_Init+0x314>)
 800158e:	f043 0320 	orr.w	r3, r3, #32
 8001592:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001596:	4b70      	ldr	r3, [pc, #448]	; (8001758 <MX_GPIO_Init+0x314>)
 8001598:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800159c:	f003 0320 	and.w	r3, r3, #32
 80015a0:	603b      	str	r3, [r7, #0]
 80015a2:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80015a4:	2200      	movs	r2, #0
 80015a6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80015aa:	486c      	ldr	r0, [pc, #432]	; (800175c <MX_GPIO_Init+0x318>)
 80015ac:	f004 fbca 	bl	8005d44 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, MII_TX_ER_nINT_Pin|LCD_RST_Pin, GPIO_PIN_RESET);
 80015b0:	2200      	movs	r2, #0
 80015b2:	f241 0104 	movw	r1, #4100	; 0x1004
 80015b6:	486a      	ldr	r0, [pc, #424]	; (8001760 <MX_GPIO_Init+0x31c>)
 80015b8:	f004 fbc4 	bl	8005d44 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD1_GPIO_Port, LD1_Pin, GPIO_PIN_RESET);
 80015bc:	2200      	movs	r2, #0
 80015be:	2104      	movs	r1, #4
 80015c0:	4868      	ldr	r0, [pc, #416]	; (8001764 <MX_GPIO_Init+0x320>)
 80015c2:	f004 fbbf 	bl	8005d44 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PH15 */
  GPIO_InitStruct.Pin = GPIO_PIN_15;
 80015c6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80015ca:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015cc:	2302      	movs	r3, #2
 80015ce:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015d0:	2300      	movs	r3, #0
 80015d2:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015d4:	2300      	movs	r3, #0
 80015d6:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 80015d8:	2303      	movs	r3, #3
 80015da:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 80015dc:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80015e0:	4619      	mov	r1, r3
 80015e2:	4861      	ldr	r0, [pc, #388]	; (8001768 <MX_GPIO_Init+0x324>)
 80015e4:	f004 f9fe 	bl	80059e4 <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_DISPD7_Pin */
  GPIO_InitStruct.Pin = LCD_DISPD7_Pin;
 80015e8:	2380      	movs	r3, #128	; 0x80
 80015ea:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80015ec:	2300      	movs	r3, #0
 80015ee:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015f0:	2300      	movs	r3, #0
 80015f2:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(LCD_DISPD7_GPIO_Port, &GPIO_InitStruct);
 80015f4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80015f8:	4619      	mov	r1, r3
 80015fa:	485c      	ldr	r0, [pc, #368]	; (800176c <MX_GPIO_Init+0x328>)
 80015fc:	f004 f9f2 	bl	80059e4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PE5 PE4 */
  GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_4;
 8001600:	2330      	movs	r3, #48	; 0x30
 8001602:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001604:	2302      	movs	r3, #2
 8001606:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001608:	2300      	movs	r3, #0
 800160a:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800160c:	2300      	movs	r3, #0
 800160e:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_SAI4;
 8001610:	230a      	movs	r3, #10
 8001612:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001614:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001618:	4619      	mov	r1, r3
 800161a:	4855      	ldr	r0, [pc, #340]	; (8001770 <MX_GPIO_Init+0x32c>)
 800161c:	f004 f9e2 	bl	80059e4 <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001620:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001624:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001626:	2300      	movs	r3, #0
 8001628:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800162a:	2300      	movs	r3, #0
 800162c:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800162e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001632:	4619      	mov	r1, r3
 8001634:	484f      	ldr	r0, [pc, #316]	; (8001774 <MX_GPIO_Init+0x330>)
 8001636:	f004 f9d5 	bl	80059e4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 800163a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800163e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001640:	2302      	movs	r3, #2
 8001642:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001644:	2300      	movs	r3, #0
 8001646:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001648:	2300      	movs	r3, #0
 800164a:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 800164c:	2301      	movs	r3, #1
 800164e:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001650:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001654:	4619      	mov	r1, r3
 8001656:	4848      	ldr	r0, [pc, #288]	; (8001778 <MX_GPIO_Init+0x334>)
 8001658:	f004 f9c4 	bl	80059e4 <HAL_GPIO_Init>

  /*Configure GPIO pin : audio_Int_Pin */
  GPIO_InitStruct.Pin = audio_Int_Pin;
 800165c:	2380      	movs	r3, #128	; 0x80
 800165e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001660:	2302      	movs	r3, #2
 8001662:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001664:	2300      	movs	r3, #0
 8001666:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001668:	2300      	movs	r3, #0
 800166a:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF6_SAI1;
 800166c:	2306      	movs	r3, #6
 800166e:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(audio_Int_GPIO_Port, &GPIO_InitStruct);
 8001670:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001674:	4619      	mov	r1, r3
 8001676:	4841      	ldr	r0, [pc, #260]	; (800177c <MX_GPIO_Init+0x338>)
 8001678:	f004 f9b4 	bl	80059e4 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 800167c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001680:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001682:	2301      	movs	r3, #1
 8001684:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001686:	2300      	movs	r3, #0
 8001688:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800168a:	2300      	movs	r3, #0
 800168c:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 800168e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001692:	4619      	mov	r1, r3
 8001694:	4831      	ldr	r0, [pc, #196]	; (800175c <MX_GPIO_Init+0x318>)
 8001696:	f004 f9a5 	bl	80059e4 <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_INT_Pin */
  GPIO_InitStruct.Pin = LCD_INT_Pin;
 800169a:	2304      	movs	r3, #4
 800169c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800169e:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80016a2:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016a4:	2300      	movs	r3, #0
 80016a6:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(LCD_INT_GPIO_Port, &GPIO_InitStruct);
 80016a8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80016ac:	4619      	mov	r1, r3
 80016ae:	4833      	ldr	r0, [pc, #204]	; (800177c <MX_GPIO_Init+0x338>)
 80016b0:	f004 f998 	bl	80059e4 <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_BL_Pin */
  GPIO_InitStruct.Pin = LCD_BL_Pin;
 80016b4:	2301      	movs	r3, #1
 80016b6:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80016b8:	2300      	movs	r3, #0
 80016ba:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016bc:	2300      	movs	r3, #0
 80016be:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(LCD_BL_GPIO_Port, &GPIO_InitStruct);
 80016c0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80016c4:	4619      	mov	r1, r3
 80016c6:	482e      	ldr	r0, [pc, #184]	; (8001780 <MX_GPIO_Init+0x33c>)
 80016c8:	f004 f98c 	bl	80059e4 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS2_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS2_OverCurrent_Pin;
 80016cc:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80016d0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80016d2:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80016d6:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016d8:	2300      	movs	r3, #0
 80016da:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(OTG_FS2_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80016dc:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80016e0:	4619      	mov	r1, r3
 80016e2:	4821      	ldr	r0, [pc, #132]	; (8001768 <MX_GPIO_Init+0x324>)
 80016e4:	f004 f97e 	bl	80059e4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 80016e8:	2340      	movs	r3, #64	; 0x40
 80016ea:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016ec:	2302      	movs	r3, #2
 80016ee:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016f0:	2300      	movs	r3, #0
 80016f2:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016f4:	2300      	movs	r3, #0
 80016f6:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF9_TIM13;
 80016f8:	2309      	movs	r3, #9
 80016fa:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80016fc:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001700:	4619      	mov	r1, r3
 8001702:	481d      	ldr	r0, [pc, #116]	; (8001778 <MX_GPIO_Init+0x334>)
 8001704:	f004 f96e 	bl	80059e4 <HAL_GPIO_Init>

  /*Configure GPIO pins : MII_TX_ER_nINT_Pin LCD_RST_Pin */
  GPIO_InitStruct.Pin = MII_TX_ER_nINT_Pin|LCD_RST_Pin;
 8001708:	f241 0304 	movw	r3, #4100	; 0x1004
 800170c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800170e:	2301      	movs	r3, #1
 8001710:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001712:	2300      	movs	r3, #0
 8001714:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001716:	2300      	movs	r3, #0
 8001718:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800171a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800171e:	4619      	mov	r1, r3
 8001720:	480f      	ldr	r0, [pc, #60]	; (8001760 <MX_GPIO_Init+0x31c>)
 8001722:	f004 f95f 	bl	80059e4 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS2_PSO_Pin */
  GPIO_InitStruct.Pin = OTG_FS2_PSO_Pin;
 8001726:	2320      	movs	r3, #32
 8001728:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800172a:	2300      	movs	r3, #0
 800172c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800172e:	2300      	movs	r3, #0
 8001730:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(OTG_FS2_PSO_GPIO_Port, &GPIO_InitStruct);
 8001732:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001736:	4619      	mov	r1, r3
 8001738:	480f      	ldr	r0, [pc, #60]	; (8001778 <MX_GPIO_Init+0x334>)
 800173a:	f004 f953 	bl	80059e4 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD1_Pin */
  GPIO_InitStruct.Pin = LD1_Pin;
 800173e:	2304      	movs	r3, #4
 8001740:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001742:	2301      	movs	r3, #1
 8001744:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001746:	2300      	movs	r3, #0
 8001748:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800174a:	2300      	movs	r3, #0
 800174c:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(LD1_GPIO_Port, &GPIO_InitStruct);
 800174e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001752:	4619      	mov	r1, r3
 8001754:	e016      	b.n	8001784 <MX_GPIO_Init+0x340>
 8001756:	bf00      	nop
 8001758:	58024400 	.word	0x58024400
 800175c:	58022000 	.word	0x58022000
 8001760:	58020400 	.word	0x58020400
 8001764:	58022400 	.word	0x58022400
 8001768:	58021c00 	.word	0x58021c00
 800176c:	58020c00 	.word	0x58020c00
 8001770:	58021000 	.word	0x58021000
 8001774:	58020800 	.word	0x58020800
 8001778:	58020000 	.word	0x58020000
 800177c:	58021800 	.word	0x58021800
 8001780:	58022800 	.word	0x58022800
 8001784:	4803      	ldr	r0, [pc, #12]	; (8001794 <MX_GPIO_Init+0x350>)
 8001786:	f004 f92d 	bl	80059e4 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800178a:	bf00      	nop
 800178c:	3740      	adds	r7, #64	; 0x40
 800178e:	46bd      	mov	sp, r7
 8001790:	bd80      	pop	{r7, pc}
 8001792:	bf00      	nop
 8001794:	58022400 	.word	0x58022400

08001798 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001798:	b480      	push	{r7}
 800179a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800179c:	b672      	cpsid	i
}
 800179e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80017a0:	e7fe      	b.n	80017a0 <Error_Handler+0x8>
	...

080017a4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80017a4:	b480      	push	{r7}
 80017a6:	b083      	sub	sp, #12
 80017a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80017aa:	4b0a      	ldr	r3, [pc, #40]	; (80017d4 <HAL_MspInit+0x30>)
 80017ac:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80017b0:	4a08      	ldr	r2, [pc, #32]	; (80017d4 <HAL_MspInit+0x30>)
 80017b2:	f043 0302 	orr.w	r3, r3, #2
 80017b6:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 80017ba:	4b06      	ldr	r3, [pc, #24]	; (80017d4 <HAL_MspInit+0x30>)
 80017bc:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80017c0:	f003 0302 	and.w	r3, r3, #2
 80017c4:	607b      	str	r3, [r7, #4]
 80017c6:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80017c8:	bf00      	nop
 80017ca:	370c      	adds	r7, #12
 80017cc:	46bd      	mov	sp, r7
 80017ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017d2:	4770      	bx	lr
 80017d4:	58024400 	.word	0x58024400

080017d8 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80017d8:	b580      	push	{r7, lr}
 80017da:	b090      	sub	sp, #64	; 0x40
 80017dc:	af00      	add	r7, sp, #0
 80017de:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017e0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80017e4:	2200      	movs	r2, #0
 80017e6:	601a      	str	r2, [r3, #0]
 80017e8:	605a      	str	r2, [r3, #4]
 80017ea:	609a      	str	r2, [r3, #8]
 80017ec:	60da      	str	r2, [r3, #12]
 80017ee:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	681b      	ldr	r3, [r3, #0]
 80017f4:	4a72      	ldr	r2, [pc, #456]	; (80019c0 <HAL_ADC_MspInit+0x1e8>)
 80017f6:	4293      	cmp	r3, r2
 80017f8:	d14e      	bne.n	8001898 <HAL_ADC_MspInit+0xc0>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    HAL_RCC_ADC12_CLK_ENABLED++;
 80017fa:	4b72      	ldr	r3, [pc, #456]	; (80019c4 <HAL_ADC_MspInit+0x1ec>)
 80017fc:	681b      	ldr	r3, [r3, #0]
 80017fe:	3301      	adds	r3, #1
 8001800:	4a70      	ldr	r2, [pc, #448]	; (80019c4 <HAL_ADC_MspInit+0x1ec>)
 8001802:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8001804:	4b6f      	ldr	r3, [pc, #444]	; (80019c4 <HAL_ADC_MspInit+0x1ec>)
 8001806:	681b      	ldr	r3, [r3, #0]
 8001808:	2b01      	cmp	r3, #1
 800180a:	d10e      	bne.n	800182a <HAL_ADC_MspInit+0x52>
      __HAL_RCC_ADC12_CLK_ENABLE();
 800180c:	4b6e      	ldr	r3, [pc, #440]	; (80019c8 <HAL_ADC_MspInit+0x1f0>)
 800180e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001812:	4a6d      	ldr	r2, [pc, #436]	; (80019c8 <HAL_ADC_MspInit+0x1f0>)
 8001814:	f043 0320 	orr.w	r3, r3, #32
 8001818:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 800181c:	4b6a      	ldr	r3, [pc, #424]	; (80019c8 <HAL_ADC_MspInit+0x1f0>)
 800181e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001822:	f003 0320 	and.w	r3, r3, #32
 8001826:	62bb      	str	r3, [r7, #40]	; 0x28
 8001828:	6abb      	ldr	r3, [r7, #40]	; 0x28
    }

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800182a:	4b67      	ldr	r3, [pc, #412]	; (80019c8 <HAL_ADC_MspInit+0x1f0>)
 800182c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001830:	4a65      	ldr	r2, [pc, #404]	; (80019c8 <HAL_ADC_MspInit+0x1f0>)
 8001832:	f043 0304 	orr.w	r3, r3, #4
 8001836:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800183a:	4b63      	ldr	r3, [pc, #396]	; (80019c8 <HAL_ADC_MspInit+0x1f0>)
 800183c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001840:	f003 0304 	and.w	r3, r3, #4
 8001844:	627b      	str	r3, [r7, #36]	; 0x24
 8001846:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001848:	4b5f      	ldr	r3, [pc, #380]	; (80019c8 <HAL_ADC_MspInit+0x1f0>)
 800184a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800184e:	4a5e      	ldr	r2, [pc, #376]	; (80019c8 <HAL_ADC_MspInit+0x1f0>)
 8001850:	f043 0301 	orr.w	r3, r3, #1
 8001854:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001858:	4b5b      	ldr	r3, [pc, #364]	; (80019c8 <HAL_ADC_MspInit+0x1f0>)
 800185a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800185e:	f003 0301 	and.w	r3, r3, #1
 8001862:	623b      	str	r3, [r7, #32]
 8001864:	6a3b      	ldr	r3, [r7, #32]
    /**ADC1 GPIO Configuration
    PC0     ------> ADC1_INP10
    PA0_C     ------> ADC1_INP0
    PA1_C     ------> ADC1_INP1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001866:	2301      	movs	r3, #1
 8001868:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800186a:	2303      	movs	r3, #3
 800186c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800186e:	2300      	movs	r3, #0
 8001870:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001872:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001876:	4619      	mov	r1, r3
 8001878:	4854      	ldr	r0, [pc, #336]	; (80019cc <HAL_ADC_MspInit+0x1f4>)
 800187a:	f004 f8b3 	bl	80059e4 <HAL_GPIO_Init>

    HAL_SYSCFG_AnalogSwitchConfig(SYSCFG_SWITCH_PA0, SYSCFG_SWITCH_PA0_OPEN);
 800187e:	f04f 7180 	mov.w	r1, #16777216	; 0x1000000
 8001882:	f04f 7080 	mov.w	r0, #16777216	; 0x1000000
 8001886:	f001 fa0d 	bl	8002ca4 <HAL_SYSCFG_AnalogSwitchConfig>

    HAL_SYSCFG_AnalogSwitchConfig(SYSCFG_SWITCH_PA1, SYSCFG_SWITCH_PA1_OPEN);
 800188a:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 800188e:	f04f 7000 	mov.w	r0, #33554432	; 0x2000000
 8001892:	f001 fa07 	bl	8002ca4 <HAL_SYSCFG_AnalogSwitchConfig>
  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }

}
 8001896:	e08f      	b.n	80019b8 <HAL_ADC_MspInit+0x1e0>
  else if(hadc->Instance==ADC2)
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	681b      	ldr	r3, [r3, #0]
 800189c:	4a4c      	ldr	r2, [pc, #304]	; (80019d0 <HAL_ADC_MspInit+0x1f8>)
 800189e:	4293      	cmp	r3, r2
 80018a0:	d133      	bne.n	800190a <HAL_ADC_MspInit+0x132>
    HAL_RCC_ADC12_CLK_ENABLED++;
 80018a2:	4b48      	ldr	r3, [pc, #288]	; (80019c4 <HAL_ADC_MspInit+0x1ec>)
 80018a4:	681b      	ldr	r3, [r3, #0]
 80018a6:	3301      	adds	r3, #1
 80018a8:	4a46      	ldr	r2, [pc, #280]	; (80019c4 <HAL_ADC_MspInit+0x1ec>)
 80018aa:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 80018ac:	4b45      	ldr	r3, [pc, #276]	; (80019c4 <HAL_ADC_MspInit+0x1ec>)
 80018ae:	681b      	ldr	r3, [r3, #0]
 80018b0:	2b01      	cmp	r3, #1
 80018b2:	d10e      	bne.n	80018d2 <HAL_ADC_MspInit+0xfa>
      __HAL_RCC_ADC12_CLK_ENABLE();
 80018b4:	4b44      	ldr	r3, [pc, #272]	; (80019c8 <HAL_ADC_MspInit+0x1f0>)
 80018b6:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80018ba:	4a43      	ldr	r2, [pc, #268]	; (80019c8 <HAL_ADC_MspInit+0x1f0>)
 80018bc:	f043 0320 	orr.w	r3, r3, #32
 80018c0:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 80018c4:	4b40      	ldr	r3, [pc, #256]	; (80019c8 <HAL_ADC_MspInit+0x1f0>)
 80018c6:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80018ca:	f003 0320 	and.w	r3, r3, #32
 80018ce:	61fb      	str	r3, [r7, #28]
 80018d0:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80018d2:	4b3d      	ldr	r3, [pc, #244]	; (80019c8 <HAL_ADC_MspInit+0x1f0>)
 80018d4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80018d8:	4a3b      	ldr	r2, [pc, #236]	; (80019c8 <HAL_ADC_MspInit+0x1f0>)
 80018da:	f043 0301 	orr.w	r3, r3, #1
 80018de:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80018e2:	4b39      	ldr	r3, [pc, #228]	; (80019c8 <HAL_ADC_MspInit+0x1f0>)
 80018e4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80018e8:	f003 0301 	and.w	r3, r3, #1
 80018ec:	61bb      	str	r3, [r7, #24]
 80018ee:	69bb      	ldr	r3, [r7, #24]
    HAL_SYSCFG_AnalogSwitchConfig(SYSCFG_SWITCH_PA0, SYSCFG_SWITCH_PA0_OPEN);
 80018f0:	f04f 7180 	mov.w	r1, #16777216	; 0x1000000
 80018f4:	f04f 7080 	mov.w	r0, #16777216	; 0x1000000
 80018f8:	f001 f9d4 	bl	8002ca4 <HAL_SYSCFG_AnalogSwitchConfig>
    HAL_SYSCFG_AnalogSwitchConfig(SYSCFG_SWITCH_PA1, SYSCFG_SWITCH_PA1_OPEN);
 80018fc:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8001900:	f04f 7000 	mov.w	r0, #33554432	; 0x2000000
 8001904:	f001 f9ce 	bl	8002ca4 <HAL_SYSCFG_AnalogSwitchConfig>
}
 8001908:	e056      	b.n	80019b8 <HAL_ADC_MspInit+0x1e0>
  else if(hadc->Instance==ADC3)
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	681b      	ldr	r3, [r3, #0]
 800190e:	4a31      	ldr	r2, [pc, #196]	; (80019d4 <HAL_ADC_MspInit+0x1fc>)
 8001910:	4293      	cmp	r3, r2
 8001912:	d151      	bne.n	80019b8 <HAL_ADC_MspInit+0x1e0>
    __HAL_RCC_ADC3_CLK_ENABLE();
 8001914:	4b2c      	ldr	r3, [pc, #176]	; (80019c8 <HAL_ADC_MspInit+0x1f0>)
 8001916:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800191a:	4a2b      	ldr	r2, [pc, #172]	; (80019c8 <HAL_ADC_MspInit+0x1f0>)
 800191c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001920:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001924:	4b28      	ldr	r3, [pc, #160]	; (80019c8 <HAL_ADC_MspInit+0x1f0>)
 8001926:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800192a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800192e:	617b      	str	r3, [r7, #20]
 8001930:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8001932:	4b25      	ldr	r3, [pc, #148]	; (80019c8 <HAL_ADC_MspInit+0x1f0>)
 8001934:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001938:	4a23      	ldr	r2, [pc, #140]	; (80019c8 <HAL_ADC_MspInit+0x1f0>)
 800193a:	f043 0320 	orr.w	r3, r3, #32
 800193e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001942:	4b21      	ldr	r3, [pc, #132]	; (80019c8 <HAL_ADC_MspInit+0x1f0>)
 8001944:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001948:	f003 0320 	and.w	r3, r3, #32
 800194c:	613b      	str	r3, [r7, #16]
 800194e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001950:	4b1d      	ldr	r3, [pc, #116]	; (80019c8 <HAL_ADC_MspInit+0x1f0>)
 8001952:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001956:	4a1c      	ldr	r2, [pc, #112]	; (80019c8 <HAL_ADC_MspInit+0x1f0>)
 8001958:	f043 0304 	orr.w	r3, r3, #4
 800195c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001960:	4b19      	ldr	r3, [pc, #100]	; (80019c8 <HAL_ADC_MspInit+0x1f0>)
 8001962:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001966:	f003 0304 	and.w	r3, r3, #4
 800196a:	60fb      	str	r3, [r7, #12]
 800196c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 800196e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001972:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001974:	2303      	movs	r3, #3
 8001976:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001978:	2300      	movs	r3, #0
 800197a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800197c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001980:	4619      	mov	r1, r3
 8001982:	4815      	ldr	r0, [pc, #84]	; (80019d8 <HAL_ADC_MspInit+0x200>)
 8001984:	f004 f82e 	bl	80059e4 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001988:	2301      	movs	r3, #1
 800198a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800198c:	2303      	movs	r3, #3
 800198e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001990:	2300      	movs	r3, #0
 8001992:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001994:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001998:	4619      	mov	r1, r3
 800199a:	480c      	ldr	r0, [pc, #48]	; (80019cc <HAL_ADC_MspInit+0x1f4>)
 800199c:	f004 f822 	bl	80059e4 <HAL_GPIO_Init>
    HAL_SYSCFG_AnalogSwitchConfig(SYSCFG_SWITCH_PC2, SYSCFG_SWITCH_PC2_OPEN);
 80019a0:	f04f 6180 	mov.w	r1, #67108864	; 0x4000000
 80019a4:	f04f 6080 	mov.w	r0, #67108864	; 0x4000000
 80019a8:	f001 f97c 	bl	8002ca4 <HAL_SYSCFG_AnalogSwitchConfig>
    HAL_SYSCFG_AnalogSwitchConfig(SYSCFG_SWITCH_PC3, SYSCFG_SWITCH_PC3_OPEN);
 80019ac:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
 80019b0:	f04f 6000 	mov.w	r0, #134217728	; 0x8000000
 80019b4:	f001 f976 	bl	8002ca4 <HAL_SYSCFG_AnalogSwitchConfig>
}
 80019b8:	bf00      	nop
 80019ba:	3740      	adds	r7, #64	; 0x40
 80019bc:	46bd      	mov	sp, r7
 80019be:	bd80      	pop	{r7, pc}
 80019c0:	40022000 	.word	0x40022000
 80019c4:	24000f30 	.word	0x24000f30
 80019c8:	58024400 	.word	0x58024400
 80019cc:	58020800 	.word	0x58020800
 80019d0:	40022100 	.word	0x40022100
 80019d4:	58026000 	.word	0x58026000
 80019d8:	58021400 	.word	0x58021400

080019dc <HAL_ETH_MspInit>:
* This function configures the hardware resources used in this example
* @param heth: ETH handle pointer
* @retval None
*/
void HAL_ETH_MspInit(ETH_HandleTypeDef* heth)
{
 80019dc:	b580      	push	{r7, lr}
 80019de:	b092      	sub	sp, #72	; 0x48
 80019e0:	af00      	add	r7, sp, #0
 80019e2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019e4:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80019e8:	2200      	movs	r2, #0
 80019ea:	601a      	str	r2, [r3, #0]
 80019ec:	605a      	str	r2, [r3, #4]
 80019ee:	609a      	str	r2, [r3, #8]
 80019f0:	60da      	str	r2, [r3, #12]
 80019f2:	611a      	str	r2, [r3, #16]
  if(heth->Instance==ETH)
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	4a87      	ldr	r2, [pc, #540]	; (8001c18 <HAL_ETH_MspInit+0x23c>)
 80019fa:	4293      	cmp	r3, r2
 80019fc:	f040 8108 	bne.w	8001c10 <HAL_ETH_MspInit+0x234>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ETH1MAC_CLK_ENABLE();
 8001a00:	4b86      	ldr	r3, [pc, #536]	; (8001c1c <HAL_ETH_MspInit+0x240>)
 8001a02:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001a06:	4a85      	ldr	r2, [pc, #532]	; (8001c1c <HAL_ETH_MspInit+0x240>)
 8001a08:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001a0c:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8001a10:	4b82      	ldr	r3, [pc, #520]	; (8001c1c <HAL_ETH_MspInit+0x240>)
 8001a12:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001a16:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001a1a:	633b      	str	r3, [r7, #48]	; 0x30
 8001a1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    __HAL_RCC_ETH1TX_CLK_ENABLE();
 8001a1e:	4b7f      	ldr	r3, [pc, #508]	; (8001c1c <HAL_ETH_MspInit+0x240>)
 8001a20:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001a24:	4a7d      	ldr	r2, [pc, #500]	; (8001c1c <HAL_ETH_MspInit+0x240>)
 8001a26:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001a2a:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8001a2e:	4b7b      	ldr	r3, [pc, #492]	; (8001c1c <HAL_ETH_MspInit+0x240>)
 8001a30:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001a34:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001a38:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001a3a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    __HAL_RCC_ETH1RX_CLK_ENABLE();
 8001a3c:	4b77      	ldr	r3, [pc, #476]	; (8001c1c <HAL_ETH_MspInit+0x240>)
 8001a3e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001a42:	4a76      	ldr	r2, [pc, #472]	; (8001c1c <HAL_ETH_MspInit+0x240>)
 8001a44:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001a48:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8001a4c:	4b73      	ldr	r3, [pc, #460]	; (8001c1c <HAL_ETH_MspInit+0x240>)
 8001a4e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001a52:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a56:	62bb      	str	r3, [r7, #40]	; 0x28
 8001a58:	6abb      	ldr	r3, [r7, #40]	; 0x28

    __HAL_RCC_GPIOG_CLK_ENABLE();
 8001a5a:	4b70      	ldr	r3, [pc, #448]	; (8001c1c <HAL_ETH_MspInit+0x240>)
 8001a5c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001a60:	4a6e      	ldr	r2, [pc, #440]	; (8001c1c <HAL_ETH_MspInit+0x240>)
 8001a62:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001a66:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001a6a:	4b6c      	ldr	r3, [pc, #432]	; (8001c1c <HAL_ETH_MspInit+0x240>)
 8001a6c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001a70:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001a74:	627b      	str	r3, [r7, #36]	; 0x24
 8001a76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001a78:	4b68      	ldr	r3, [pc, #416]	; (8001c1c <HAL_ETH_MspInit+0x240>)
 8001a7a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001a7e:	4a67      	ldr	r2, [pc, #412]	; (8001c1c <HAL_ETH_MspInit+0x240>)
 8001a80:	f043 0310 	orr.w	r3, r3, #16
 8001a84:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001a88:	4b64      	ldr	r3, [pc, #400]	; (8001c1c <HAL_ETH_MspInit+0x240>)
 8001a8a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001a8e:	f003 0310 	and.w	r3, r3, #16
 8001a92:	623b      	str	r3, [r7, #32]
 8001a94:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOI_CLK_ENABLE();
 8001a96:	4b61      	ldr	r3, [pc, #388]	; (8001c1c <HAL_ETH_MspInit+0x240>)
 8001a98:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001a9c:	4a5f      	ldr	r2, [pc, #380]	; (8001c1c <HAL_ETH_MspInit+0x240>)
 8001a9e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001aa2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001aa6:	4b5d      	ldr	r3, [pc, #372]	; (8001c1c <HAL_ETH_MspInit+0x240>)
 8001aa8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001aac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001ab0:	61fb      	str	r3, [r7, #28]
 8001ab2:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001ab4:	4b59      	ldr	r3, [pc, #356]	; (8001c1c <HAL_ETH_MspInit+0x240>)
 8001ab6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001aba:	4a58      	ldr	r2, [pc, #352]	; (8001c1c <HAL_ETH_MspInit+0x240>)
 8001abc:	f043 0304 	orr.w	r3, r3, #4
 8001ac0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001ac4:	4b55      	ldr	r3, [pc, #340]	; (8001c1c <HAL_ETH_MspInit+0x240>)
 8001ac6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001aca:	f003 0304 	and.w	r3, r3, #4
 8001ace:	61bb      	str	r3, [r7, #24]
 8001ad0:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOH_CLK_ENABLE();
 8001ad2:	4b52      	ldr	r3, [pc, #328]	; (8001c1c <HAL_ETH_MspInit+0x240>)
 8001ad4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001ad8:	4a50      	ldr	r2, [pc, #320]	; (8001c1c <HAL_ETH_MspInit+0x240>)
 8001ada:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001ade:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001ae2:	4b4e      	ldr	r3, [pc, #312]	; (8001c1c <HAL_ETH_MspInit+0x240>)
 8001ae4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001ae8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001aec:	617b      	str	r3, [r7, #20]
 8001aee:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001af0:	4b4a      	ldr	r3, [pc, #296]	; (8001c1c <HAL_ETH_MspInit+0x240>)
 8001af2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001af6:	4a49      	ldr	r2, [pc, #292]	; (8001c1c <HAL_ETH_MspInit+0x240>)
 8001af8:	f043 0301 	orr.w	r3, r3, #1
 8001afc:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001b00:	4b46      	ldr	r3, [pc, #280]	; (8001c1c <HAL_ETH_MspInit+0x240>)
 8001b02:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001b06:	f003 0301 	and.w	r3, r3, #1
 8001b0a:	613b      	str	r3, [r7, #16]
 8001b0c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001b0e:	4b43      	ldr	r3, [pc, #268]	; (8001c1c <HAL_ETH_MspInit+0x240>)
 8001b10:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001b14:	4a41      	ldr	r2, [pc, #260]	; (8001c1c <HAL_ETH_MspInit+0x240>)
 8001b16:	f043 0302 	orr.w	r3, r3, #2
 8001b1a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001b1e:	4b3f      	ldr	r3, [pc, #252]	; (8001c1c <HAL_ETH_MspInit+0x240>)
 8001b20:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001b24:	f003 0302 	and.w	r3, r3, #2
 8001b28:	60fb      	str	r3, [r7, #12]
 8001b2a:	68fb      	ldr	r3, [r7, #12]
    PC4     ------> ETH_RXD0
    PB1     ------> ETH_RXD3
    PC5     ------> ETH_RXD1
    PB0     ------> ETH_RXD2
    */
    GPIO_InitStruct.Pin = MII_TX_EN_Pin|MII_TXD1_Pin|MII_TXD0_Pin;
 8001b2c:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8001b30:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b32:	2302      	movs	r3, #2
 8001b34:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b36:	2300      	movs	r3, #0
 8001b38:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b3a:	2300      	movs	r3, #0
 8001b3c:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001b3e:	230b      	movs	r3, #11
 8001b40:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001b42:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001b46:	4619      	mov	r1, r3
 8001b48:	4835      	ldr	r0, [pc, #212]	; (8001c20 <HAL_ETH_MspInit+0x244>)
 8001b4a:	f003 ff4b 	bl	80059e4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = MII_TXD3_Pin;
 8001b4e:	2304      	movs	r3, #4
 8001b50:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b52:	2302      	movs	r3, #2
 8001b54:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b56:	2300      	movs	r3, #0
 8001b58:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b5a:	2300      	movs	r3, #0
 8001b5c:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001b5e:	230b      	movs	r3, #11
 8001b60:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(MII_TXD3_GPIO_Port, &GPIO_InitStruct);
 8001b62:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001b66:	4619      	mov	r1, r3
 8001b68:	482e      	ldr	r0, [pc, #184]	; (8001c24 <HAL_ETH_MspInit+0x248>)
 8001b6a:	f003 ff3b 	bl	80059e4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = MII_RX_ER_Pin;
 8001b6e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001b72:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b74:	2302      	movs	r3, #2
 8001b76:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b78:	2300      	movs	r3, #0
 8001b7a:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b7c:	2300      	movs	r3, #0
 8001b7e:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001b80:	230b      	movs	r3, #11
 8001b82:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(MII_RX_ER_GPIO_Port, &GPIO_InitStruct);
 8001b84:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001b88:	4619      	mov	r1, r3
 8001b8a:	4827      	ldr	r0, [pc, #156]	; (8001c28 <HAL_ETH_MspInit+0x24c>)
 8001b8c:	f003 ff2a 	bl	80059e4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = MII_MDC_Pin|MII_TXD2_Pin|MII_TX_CLK_Pin|MII_RXD0_Pin
 8001b90:	233e      	movs	r3, #62	; 0x3e
 8001b92:	637b      	str	r3, [r7, #52]	; 0x34
                          |MII_RXD1_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b94:	2302      	movs	r3, #2
 8001b96:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b98:	2300      	movs	r3, #0
 8001b9a:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b9c:	2300      	movs	r3, #0
 8001b9e:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001ba0:	230b      	movs	r3, #11
 8001ba2:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001ba4:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001ba8:	4619      	mov	r1, r3
 8001baa:	4820      	ldr	r0, [pc, #128]	; (8001c2c <HAL_ETH_MspInit+0x250>)
 8001bac:	f003 ff1a 	bl	80059e4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = MII_CRS_Pin|MII_COL_Pin;
 8001bb0:	230c      	movs	r3, #12
 8001bb2:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001bb4:	2302      	movs	r3, #2
 8001bb6:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bb8:	2300      	movs	r3, #0
 8001bba:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001bbc:	2300      	movs	r3, #0
 8001bbe:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001bc0:	230b      	movs	r3, #11
 8001bc2:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8001bc4:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001bc8:	4619      	mov	r1, r3
 8001bca:	4819      	ldr	r0, [pc, #100]	; (8001c30 <HAL_ETH_MspInit+0x254>)
 8001bcc:	f003 ff0a 	bl	80059e4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = MII_MDIO_Pin|MII_RX_CLK_Pin|MII_RX_DV_Pin;
 8001bd0:	2386      	movs	r3, #134	; 0x86
 8001bd2:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001bd4:	2302      	movs	r3, #2
 8001bd6:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bd8:	2300      	movs	r3, #0
 8001bda:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001bdc:	2300      	movs	r3, #0
 8001bde:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001be0:	230b      	movs	r3, #11
 8001be2:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001be4:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001be8:	4619      	mov	r1, r3
 8001bea:	4812      	ldr	r0, [pc, #72]	; (8001c34 <HAL_ETH_MspInit+0x258>)
 8001bec:	f003 fefa 	bl	80059e4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = MII_RX_D3_Pin|MII_RX_D2_Pin;
 8001bf0:	2303      	movs	r3, #3
 8001bf2:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001bf4:	2302      	movs	r3, #2
 8001bf6:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bf8:	2300      	movs	r3, #0
 8001bfa:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001bfc:	2300      	movs	r3, #0
 8001bfe:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001c00:	230b      	movs	r3, #11
 8001c02:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001c04:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001c08:	4619      	mov	r1, r3
 8001c0a:	480b      	ldr	r0, [pc, #44]	; (8001c38 <HAL_ETH_MspInit+0x25c>)
 8001c0c:	f003 feea 	bl	80059e4 <HAL_GPIO_Init>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }

}
 8001c10:	bf00      	nop
 8001c12:	3748      	adds	r7, #72	; 0x48
 8001c14:	46bd      	mov	sp, r7
 8001c16:	bd80      	pop	{r7, pc}
 8001c18:	40028000 	.word	0x40028000
 8001c1c:	58024400 	.word	0x58024400
 8001c20:	58021800 	.word	0x58021800
 8001c24:	58021000 	.word	0x58021000
 8001c28:	58022000 	.word	0x58022000
 8001c2c:	58020800 	.word	0x58020800
 8001c30:	58021c00 	.word	0x58021c00
 8001c34:	58020000 	.word	0x58020000
 8001c38:	58020400 	.word	0x58020400

08001c3c <HAL_FDCAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hfdcan: FDCAN handle pointer
* @retval None
*/
void HAL_FDCAN_MspInit(FDCAN_HandleTypeDef* hfdcan)
{
 8001c3c:	b580      	push	{r7, lr}
 8001c3e:	b0bc      	sub	sp, #240	; 0xf0
 8001c40:	af00      	add	r7, sp, #0
 8001c42:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c44:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8001c48:	2200      	movs	r2, #0
 8001c4a:	601a      	str	r2, [r3, #0]
 8001c4c:	605a      	str	r2, [r3, #4]
 8001c4e:	609a      	str	r2, [r3, #8]
 8001c50:	60da      	str	r2, [r3, #12]
 8001c52:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001c54:	f107 0318 	add.w	r3, r7, #24
 8001c58:	22c0      	movs	r2, #192	; 0xc0
 8001c5a:	2100      	movs	r1, #0
 8001c5c:	4618      	mov	r0, r3
 8001c5e:	f00c fa37 	bl	800e0d0 <memset>
  if(hfdcan->Instance==FDCAN1)
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	4a57      	ldr	r2, [pc, #348]	; (8001dc4 <HAL_FDCAN_MspInit+0x188>)
 8001c68:	4293      	cmp	r3, r2
 8001c6a:	d151      	bne.n	8001d10 <HAL_FDCAN_MspInit+0xd4>

  /* USER CODE END FDCAN1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 8001c6c:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8001c70:	f04f 0300 	mov.w	r3, #0
 8001c74:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.FdcanClockSelection = RCC_FDCANCLKSOURCE_PLL;
 8001c78:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8001c7c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001c80:	f107 0318 	add.w	r3, r7, #24
 8001c84:	4618      	mov	r0, r3
 8001c86:	f005 fd51 	bl	800772c <HAL_RCCEx_PeriphCLKConfig>
 8001c8a:	4603      	mov	r3, r0
 8001c8c:	2b00      	cmp	r3, #0
 8001c8e:	d001      	beq.n	8001c94 <HAL_FDCAN_MspInit+0x58>
    {
      Error_Handler();
 8001c90:	f7ff fd82 	bl	8001798 <Error_Handler>
    }

    /* Peripheral clock enable */
    HAL_RCC_FDCAN_CLK_ENABLED++;
 8001c94:	4b4c      	ldr	r3, [pc, #304]	; (8001dc8 <HAL_FDCAN_MspInit+0x18c>)
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	3301      	adds	r3, #1
 8001c9a:	4a4b      	ldr	r2, [pc, #300]	; (8001dc8 <HAL_FDCAN_MspInit+0x18c>)
 8001c9c:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_FDCAN_CLK_ENABLED==1){
 8001c9e:	4b4a      	ldr	r3, [pc, #296]	; (8001dc8 <HAL_FDCAN_MspInit+0x18c>)
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	2b01      	cmp	r3, #1
 8001ca4:	d10e      	bne.n	8001cc4 <HAL_FDCAN_MspInit+0x88>
      __HAL_RCC_FDCAN_CLK_ENABLE();
 8001ca6:	4b49      	ldr	r3, [pc, #292]	; (8001dcc <HAL_FDCAN_MspInit+0x190>)
 8001ca8:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 8001cac:	4a47      	ldr	r2, [pc, #284]	; (8001dcc <HAL_FDCAN_MspInit+0x190>)
 8001cae:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001cb2:	f8c2 30ec 	str.w	r3, [r2, #236]	; 0xec
 8001cb6:	4b45      	ldr	r3, [pc, #276]	; (8001dcc <HAL_FDCAN_MspInit+0x190>)
 8001cb8:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 8001cbc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001cc0:	617b      	str	r3, [r7, #20]
 8001cc2:	697b      	ldr	r3, [r7, #20]
    }

    __HAL_RCC_GPIOH_CLK_ENABLE();
 8001cc4:	4b41      	ldr	r3, [pc, #260]	; (8001dcc <HAL_FDCAN_MspInit+0x190>)
 8001cc6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001cca:	4a40      	ldr	r2, [pc, #256]	; (8001dcc <HAL_FDCAN_MspInit+0x190>)
 8001ccc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001cd0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001cd4:	4b3d      	ldr	r3, [pc, #244]	; (8001dcc <HAL_FDCAN_MspInit+0x190>)
 8001cd6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001cda:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001cde:	613b      	str	r3, [r7, #16]
 8001ce0:	693b      	ldr	r3, [r7, #16]
    /**FDCAN1 GPIO Configuration
    PH14     ------> FDCAN1_RX
    PH13     ------> FDCAN1_TX
    */
    GPIO_InitStruct.Pin = FDCAN1_RX_Pin|FDCAN1_TX_Pin;
 8001ce2:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 8001ce6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001cea:	2302      	movs	r3, #2
 8001cec:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cf0:	2300      	movs	r3, #0
 8001cf2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001cf6:	2300      	movs	r3, #0
 8001cf8:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN1;
 8001cfc:	2309      	movs	r3, #9
 8001cfe:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8001d02:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8001d06:	4619      	mov	r1, r3
 8001d08:	4831      	ldr	r0, [pc, #196]	; (8001dd0 <HAL_FDCAN_MspInit+0x194>)
 8001d0a:	f003 fe6b 	bl	80059e4 <HAL_GPIO_Init>
  /* USER CODE BEGIN FDCAN2_MspInit 1 */

  /* USER CODE END FDCAN2_MspInit 1 */
  }

}
 8001d0e:	e055      	b.n	8001dbc <HAL_FDCAN_MspInit+0x180>
  else if(hfdcan->Instance==FDCAN2)
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	4a2f      	ldr	r2, [pc, #188]	; (8001dd4 <HAL_FDCAN_MspInit+0x198>)
 8001d16:	4293      	cmp	r3, r2
 8001d18:	d150      	bne.n	8001dbc <HAL_FDCAN_MspInit+0x180>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 8001d1a:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8001d1e:	f04f 0300 	mov.w	r3, #0
 8001d22:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.FdcanClockSelection = RCC_FDCANCLKSOURCE_PLL;
 8001d26:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8001d2a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001d2e:	f107 0318 	add.w	r3, r7, #24
 8001d32:	4618      	mov	r0, r3
 8001d34:	f005 fcfa 	bl	800772c <HAL_RCCEx_PeriphCLKConfig>
 8001d38:	4603      	mov	r3, r0
 8001d3a:	2b00      	cmp	r3, #0
 8001d3c:	d001      	beq.n	8001d42 <HAL_FDCAN_MspInit+0x106>
      Error_Handler();
 8001d3e:	f7ff fd2b 	bl	8001798 <Error_Handler>
    HAL_RCC_FDCAN_CLK_ENABLED++;
 8001d42:	4b21      	ldr	r3, [pc, #132]	; (8001dc8 <HAL_FDCAN_MspInit+0x18c>)
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	3301      	adds	r3, #1
 8001d48:	4a1f      	ldr	r2, [pc, #124]	; (8001dc8 <HAL_FDCAN_MspInit+0x18c>)
 8001d4a:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_FDCAN_CLK_ENABLED==1){
 8001d4c:	4b1e      	ldr	r3, [pc, #120]	; (8001dc8 <HAL_FDCAN_MspInit+0x18c>)
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	2b01      	cmp	r3, #1
 8001d52:	d10e      	bne.n	8001d72 <HAL_FDCAN_MspInit+0x136>
      __HAL_RCC_FDCAN_CLK_ENABLE();
 8001d54:	4b1d      	ldr	r3, [pc, #116]	; (8001dcc <HAL_FDCAN_MspInit+0x190>)
 8001d56:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 8001d5a:	4a1c      	ldr	r2, [pc, #112]	; (8001dcc <HAL_FDCAN_MspInit+0x190>)
 8001d5c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001d60:	f8c2 30ec 	str.w	r3, [r2, #236]	; 0xec
 8001d64:	4b19      	ldr	r3, [pc, #100]	; (8001dcc <HAL_FDCAN_MspInit+0x190>)
 8001d66:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 8001d6a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d6e:	60fb      	str	r3, [r7, #12]
 8001d70:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001d72:	4b16      	ldr	r3, [pc, #88]	; (8001dcc <HAL_FDCAN_MspInit+0x190>)
 8001d74:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001d78:	4a14      	ldr	r2, [pc, #80]	; (8001dcc <HAL_FDCAN_MspInit+0x190>)
 8001d7a:	f043 0302 	orr.w	r3, r3, #2
 8001d7e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001d82:	4b12      	ldr	r3, [pc, #72]	; (8001dcc <HAL_FDCAN_MspInit+0x190>)
 8001d84:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001d88:	f003 0302 	and.w	r3, r3, #2
 8001d8c:	60bb      	str	r3, [r7, #8]
 8001d8e:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = FDCAN2_RX_Pin|FDCAN2_TX_Pin;
 8001d90:	f242 0320 	movw	r3, #8224	; 0x2020
 8001d94:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d98:	2302      	movs	r3, #2
 8001d9a:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d9e:	2300      	movs	r3, #0
 8001da0:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001da4:	2300      	movs	r3, #0
 8001da6:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN2;
 8001daa:	2309      	movs	r3, #9
 8001dac:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001db0:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8001db4:	4619      	mov	r1, r3
 8001db6:	4808      	ldr	r0, [pc, #32]	; (8001dd8 <HAL_FDCAN_MspInit+0x19c>)
 8001db8:	f003 fe14 	bl	80059e4 <HAL_GPIO_Init>
}
 8001dbc:	bf00      	nop
 8001dbe:	37f0      	adds	r7, #240	; 0xf0
 8001dc0:	46bd      	mov	sp, r7
 8001dc2:	bd80      	pop	{r7, pc}
 8001dc4:	4000a000 	.word	0x4000a000
 8001dc8:	24000f34 	.word	0x24000f34
 8001dcc:	58024400 	.word	0x58024400
 8001dd0:	58021c00 	.word	0x58021c00
 8001dd4:	4000a400 	.word	0x4000a400
 8001dd8:	58020400 	.word	0x58020400

08001ddc <HAL_LTDC_MspInit>:
* This function configures the hardware resources used in this example
* @param hltdc: LTDC handle pointer
* @retval None
*/
void HAL_LTDC_MspInit(LTDC_HandleTypeDef* hltdc)
{
 8001ddc:	b580      	push	{r7, lr}
 8001dde:	b0be      	sub	sp, #248	; 0xf8
 8001de0:	af00      	add	r7, sp, #0
 8001de2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001de4:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8001de8:	2200      	movs	r2, #0
 8001dea:	601a      	str	r2, [r3, #0]
 8001dec:	605a      	str	r2, [r3, #4]
 8001dee:	609a      	str	r2, [r3, #8]
 8001df0:	60da      	str	r2, [r3, #12]
 8001df2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001df4:	f107 0320 	add.w	r3, r7, #32
 8001df8:	22c0      	movs	r2, #192	; 0xc0
 8001dfa:	2100      	movs	r1, #0
 8001dfc:	4618      	mov	r0, r3
 8001dfe:	f00c f967 	bl	800e0d0 <memset>
  if(hltdc->Instance==LTDC)
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	4a66      	ldr	r2, [pc, #408]	; (8001fa0 <HAL_LTDC_MspInit+0x1c4>)
 8001e08:	4293      	cmp	r3, r2
 8001e0a:	f040 80c4 	bne.w	8001f96 <HAL_LTDC_MspInit+0x1ba>

  /* USER CODE END LTDC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 8001e0e:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8001e12:	f04f 0300 	mov.w	r3, #0
 8001e16:	e9c7 2308 	strd	r2, r3, [r7, #32]
    PeriphClkInitStruct.PLL3.PLL3M = 32;
 8001e1a:	2320      	movs	r3, #32
 8001e1c:	64bb      	str	r3, [r7, #72]	; 0x48
    PeriphClkInitStruct.PLL3.PLL3N = 192;
 8001e1e:	23c0      	movs	r3, #192	; 0xc0
 8001e20:	64fb      	str	r3, [r7, #76]	; 0x4c
    PeriphClkInitStruct.PLL3.PLL3P = 2;
 8001e22:	2302      	movs	r3, #2
 8001e24:	653b      	str	r3, [r7, #80]	; 0x50
    PeriphClkInitStruct.PLL3.PLL3Q = 2;
 8001e26:	2302      	movs	r3, #2
 8001e28:	657b      	str	r3, [r7, #84]	; 0x54
    PeriphClkInitStruct.PLL3.PLL3R = 2;
 8001e2a:	2302      	movs	r3, #2
 8001e2c:	65bb      	str	r3, [r7, #88]	; 0x58
    PeriphClkInitStruct.PLL3.PLL3RGE = RCC_PLL3VCIRANGE_3;
 8001e2e:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8001e32:	65fb      	str	r3, [r7, #92]	; 0x5c
    PeriphClkInitStruct.PLL3.PLL3VCOSEL = RCC_PLL3VCOMEDIUM;
 8001e34:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001e38:	663b      	str	r3, [r7, #96]	; 0x60
    PeriphClkInitStruct.PLL3.PLL3FRACN = 0;
 8001e3a:	2300      	movs	r3, #0
 8001e3c:	667b      	str	r3, [r7, #100]	; 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001e3e:	f107 0320 	add.w	r3, r7, #32
 8001e42:	4618      	mov	r0, r3
 8001e44:	f005 fc72 	bl	800772c <HAL_RCCEx_PeriphCLKConfig>
 8001e48:	4603      	mov	r3, r0
 8001e4a:	2b00      	cmp	r3, #0
 8001e4c:	d001      	beq.n	8001e52 <HAL_LTDC_MspInit+0x76>
    {
      Error_Handler();
 8001e4e:	f7ff fca3 	bl	8001798 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LTDC_CLK_ENABLE();
 8001e52:	4b54      	ldr	r3, [pc, #336]	; (8001fa4 <HAL_LTDC_MspInit+0x1c8>)
 8001e54:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8001e58:	4a52      	ldr	r2, [pc, #328]	; (8001fa4 <HAL_LTDC_MspInit+0x1c8>)
 8001e5a:	f043 0308 	orr.w	r3, r3, #8
 8001e5e:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
 8001e62:	4b50      	ldr	r3, [pc, #320]	; (8001fa4 <HAL_LTDC_MspInit+0x1c8>)
 8001e64:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8001e68:	f003 0308 	and.w	r3, r3, #8
 8001e6c:	61fb      	str	r3, [r7, #28]
 8001e6e:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOK_CLK_ENABLE();
 8001e70:	4b4c      	ldr	r3, [pc, #304]	; (8001fa4 <HAL_LTDC_MspInit+0x1c8>)
 8001e72:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001e76:	4a4b      	ldr	r2, [pc, #300]	; (8001fa4 <HAL_LTDC_MspInit+0x1c8>)
 8001e78:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001e7c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001e80:	4b48      	ldr	r3, [pc, #288]	; (8001fa4 <HAL_LTDC_MspInit+0x1c8>)
 8001e82:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001e86:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001e8a:	61bb      	str	r3, [r7, #24]
 8001e8c:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOI_CLK_ENABLE();
 8001e8e:	4b45      	ldr	r3, [pc, #276]	; (8001fa4 <HAL_LTDC_MspInit+0x1c8>)
 8001e90:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001e94:	4a43      	ldr	r2, [pc, #268]	; (8001fa4 <HAL_LTDC_MspInit+0x1c8>)
 8001e96:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001e9a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001e9e:	4b41      	ldr	r3, [pc, #260]	; (8001fa4 <HAL_LTDC_MspInit+0x1c8>)
 8001ea0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001ea4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001ea8:	617b      	str	r3, [r7, #20]
 8001eaa:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOJ_CLK_ENABLE();
 8001eac:	4b3d      	ldr	r3, [pc, #244]	; (8001fa4 <HAL_LTDC_MspInit+0x1c8>)
 8001eae:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001eb2:	4a3c      	ldr	r2, [pc, #240]	; (8001fa4 <HAL_LTDC_MspInit+0x1c8>)
 8001eb4:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001eb8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001ebc:	4b39      	ldr	r3, [pc, #228]	; (8001fa4 <HAL_LTDC_MspInit+0x1c8>)
 8001ebe:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001ec2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001ec6:	613b      	str	r3, [r7, #16]
 8001ec8:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOH_CLK_ENABLE();
 8001eca:	4b36      	ldr	r3, [pc, #216]	; (8001fa4 <HAL_LTDC_MspInit+0x1c8>)
 8001ecc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001ed0:	4a34      	ldr	r2, [pc, #208]	; (8001fa4 <HAL_LTDC_MspInit+0x1c8>)
 8001ed2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001ed6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001eda:	4b32      	ldr	r3, [pc, #200]	; (8001fa4 <HAL_LTDC_MspInit+0x1c8>)
 8001edc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001ee0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001ee4:	60fb      	str	r3, [r7, #12]
 8001ee6:	68fb      	ldr	r3, [r7, #12]
    PJ5     ------> LTDC_R6
    PH9     ------> LTDC_R3
    PJ3     ------> LTDC_R4
    PJ4     ------> LTDC_R5
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_4|GPIO_PIN_6|GPIO_PIN_3
 8001ee8:	23fc      	movs	r3, #252	; 0xfc
 8001eea:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
                          |GPIO_PIN_7|GPIO_PIN_2;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001eee:	2302      	movs	r3, #2
 8001ef0:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ef4:	2300      	movs	r3, #0
 8001ef6:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001efa:	2300      	movs	r3, #0
 8001efc:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001f00:	230e      	movs	r3, #14
 8001f02:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    HAL_GPIO_Init(GPIOK, &GPIO_InitStruct);
 8001f06:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8001f0a:	4619      	mov	r1, r3
 8001f0c:	4826      	ldr	r0, [pc, #152]	; (8001fa8 <HAL_LTDC_MspInit+0x1cc>)
 8001f0e:	f003 fd69 	bl	80059e4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_0|GPIO_PIN_9|GPIO_PIN_12
 8001f12:	f24d 2303 	movw	r3, #53763	; 0xd203
 8001f16:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
                          |GPIO_PIN_14|GPIO_PIN_15;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f1a:	2302      	movs	r3, #2
 8001f1c:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f20:	2300      	movs	r3, #0
 8001f22:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f26:	2300      	movs	r3, #0
 8001f28:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001f2c:	230e      	movs	r3, #14
 8001f2e:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8001f32:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8001f36:	4619      	mov	r1, r3
 8001f38:	481c      	ldr	r0, [pc, #112]	; (8001fac <HAL_LTDC_MspInit+0x1d0>)
 8001f3a:	f003 fd53 	bl	80059e4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_DISP_Pin|GPIO_PIN_14|GPIO_PIN_12|GPIO_PIN_13
 8001f3e:	f64f 73fb 	movw	r3, #65531	; 0xfffb
 8001f42:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
                          |GPIO_PIN_11|GPIO_PIN_10|GPIO_PIN_9|GPIO_PIN_0
                          |GPIO_PIN_8|GPIO_PIN_7|GPIO_PIN_6|GPIO_PIN_1
                          |GPIO_PIN_5|GPIO_PIN_3|GPIO_PIN_4;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f46:	2302      	movs	r3, #2
 8001f48:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f4c:	2300      	movs	r3, #0
 8001f4e:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f52:	2300      	movs	r3, #0
 8001f54:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001f58:	230e      	movs	r3, #14
 8001f5a:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 8001f5e:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8001f62:	4619      	mov	r1, r3
 8001f64:	4812      	ldr	r0, [pc, #72]	; (8001fb0 <HAL_LTDC_MspInit+0x1d4>)
 8001f66:	f003 fd3d 	bl	80059e4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001f6a:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001f6e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f72:	2302      	movs	r3, #2
 8001f74:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f78:	2300      	movs	r3, #0
 8001f7a:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f7e:	2300      	movs	r3, #0
 8001f80:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001f84:	230e      	movs	r3, #14
 8001f86:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8001f8a:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8001f8e:	4619      	mov	r1, r3
 8001f90:	4808      	ldr	r0, [pc, #32]	; (8001fb4 <HAL_LTDC_MspInit+0x1d8>)
 8001f92:	f003 fd27 	bl	80059e4 <HAL_GPIO_Init>
  /* USER CODE BEGIN LTDC_MspInit 1 */

  /* USER CODE END LTDC_MspInit 1 */
  }

}
 8001f96:	bf00      	nop
 8001f98:	37f8      	adds	r7, #248	; 0xf8
 8001f9a:	46bd      	mov	sp, r7
 8001f9c:	bd80      	pop	{r7, pc}
 8001f9e:	bf00      	nop
 8001fa0:	50001000 	.word	0x50001000
 8001fa4:	58024400 	.word	0x58024400
 8001fa8:	58022800 	.word	0x58022800
 8001fac:	58022000 	.word	0x58022000
 8001fb0:	58022400 	.word	0x58022400
 8001fb4:	58021c00 	.word	0x58021c00

08001fb8 <HAL_QSPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hqspi: QSPI handle pointer
* @retval None
*/
void HAL_QSPI_MspInit(QSPI_HandleTypeDef* hqspi)
{
 8001fb8:	b580      	push	{r7, lr}
 8001fba:	b0bc      	sub	sp, #240	; 0xf0
 8001fbc:	af00      	add	r7, sp, #0
 8001fbe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001fc0:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8001fc4:	2200      	movs	r2, #0
 8001fc6:	601a      	str	r2, [r3, #0]
 8001fc8:	605a      	str	r2, [r3, #4]
 8001fca:	609a      	str	r2, [r3, #8]
 8001fcc:	60da      	str	r2, [r3, #12]
 8001fce:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001fd0:	f107 0318 	add.w	r3, r7, #24
 8001fd4:	22c0      	movs	r2, #192	; 0xc0
 8001fd6:	2100      	movs	r1, #0
 8001fd8:	4618      	mov	r0, r3
 8001fda:	f00c f879 	bl	800e0d0 <memset>
  if(hqspi->Instance==QUADSPI)
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	4a56      	ldr	r2, [pc, #344]	; (800213c <HAL_QSPI_MspInit+0x184>)
 8001fe4:	4293      	cmp	r3, r2
 8001fe6:	f040 80a5 	bne.w	8002134 <HAL_QSPI_MspInit+0x17c>

  /* USER CODE END QUADSPI_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_QSPI;
 8001fea:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001fee:	f04f 0300 	mov.w	r3, #0
 8001ff2:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.QspiClockSelection = RCC_QSPICLKSOURCE_D1HCLK;
 8001ff6:	2300      	movs	r3, #0
 8001ff8:	667b      	str	r3, [r7, #100]	; 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001ffa:	f107 0318 	add.w	r3, r7, #24
 8001ffe:	4618      	mov	r0, r3
 8002000:	f005 fb94 	bl	800772c <HAL_RCCEx_PeriphCLKConfig>
 8002004:	4603      	mov	r3, r0
 8002006:	2b00      	cmp	r3, #0
 8002008:	d001      	beq.n	800200e <HAL_QSPI_MspInit+0x56>
    {
      Error_Handler();
 800200a:	f7ff fbc5 	bl	8001798 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_QSPI_CLK_ENABLE();
 800200e:	4b4c      	ldr	r3, [pc, #304]	; (8002140 <HAL_QSPI_MspInit+0x188>)
 8002010:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8002014:	4a4a      	ldr	r2, [pc, #296]	; (8002140 <HAL_QSPI_MspInit+0x188>)
 8002016:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800201a:	f8c2 30d4 	str.w	r3, [r2, #212]	; 0xd4
 800201e:	4b48      	ldr	r3, [pc, #288]	; (8002140 <HAL_QSPI_MspInit+0x188>)
 8002020:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8002024:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002028:	617b      	str	r3, [r7, #20]
 800202a:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800202c:	4b44      	ldr	r3, [pc, #272]	; (8002140 <HAL_QSPI_MspInit+0x188>)
 800202e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002032:	4a43      	ldr	r2, [pc, #268]	; (8002140 <HAL_QSPI_MspInit+0x188>)
 8002034:	f043 0302 	orr.w	r3, r3, #2
 8002038:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800203c:	4b40      	ldr	r3, [pc, #256]	; (8002140 <HAL_QSPI_MspInit+0x188>)
 800203e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002042:	f003 0302 	and.w	r3, r3, #2
 8002046:	613b      	str	r3, [r7, #16]
 8002048:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 800204a:	4b3d      	ldr	r3, [pc, #244]	; (8002140 <HAL_QSPI_MspInit+0x188>)
 800204c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002050:	4a3b      	ldr	r2, [pc, #236]	; (8002140 <HAL_QSPI_MspInit+0x188>)
 8002052:	f043 0320 	orr.w	r3, r3, #32
 8002056:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800205a:	4b39      	ldr	r3, [pc, #228]	; (8002140 <HAL_QSPI_MspInit+0x188>)
 800205c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002060:	f003 0320 	and.w	r3, r3, #32
 8002064:	60fb      	str	r3, [r7, #12]
 8002066:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002068:	4b35      	ldr	r3, [pc, #212]	; (8002140 <HAL_QSPI_MspInit+0x188>)
 800206a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800206e:	4a34      	ldr	r2, [pc, #208]	; (8002140 <HAL_QSPI_MspInit+0x188>)
 8002070:	f043 0308 	orr.w	r3, r3, #8
 8002074:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002078:	4b31      	ldr	r3, [pc, #196]	; (8002140 <HAL_QSPI_MspInit+0x188>)
 800207a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800207e:	f003 0308 	and.w	r3, r3, #8
 8002082:	60bb      	str	r3, [r7, #8]
 8002084:	68bb      	ldr	r3, [r7, #8]
    PF7     ------> QUADSPI_BK1_IO2
    PF10     ------> QUADSPI_CLK
    PF9     ------> QUADSPI_BK1_IO1
    PD11     ------> QUADSPI_BK1_IO0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8002086:	2340      	movs	r3, #64	; 0x40
 8002088:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800208c:	2302      	movs	r3, #2
 800208e:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002092:	2300      	movs	r3, #0
 8002094:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002098:	2300      	movs	r3, #0
 800209a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 800209e:	230a      	movs	r3, #10
 80020a0:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80020a4:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 80020a8:	4619      	mov	r1, r3
 80020aa:	4826      	ldr	r0, [pc, #152]	; (8002144 <HAL_QSPI_MspInit+0x18c>)
 80020ac:	f003 fc9a 	bl	80059e4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_10;
 80020b0:	f44f 6398 	mov.w	r3, #1216	; 0x4c0
 80020b4:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020b8:	2302      	movs	r3, #2
 80020ba:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020be:	2300      	movs	r3, #0
 80020c0:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80020c4:	2300      	movs	r3, #0
 80020c6:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 80020ca:	2309      	movs	r3, #9
 80020cc:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80020d0:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 80020d4:	4619      	mov	r1, r3
 80020d6:	481c      	ldr	r0, [pc, #112]	; (8002148 <HAL_QSPI_MspInit+0x190>)
 80020d8:	f003 fc84 	bl	80059e4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80020dc:	f44f 7300 	mov.w	r3, #512	; 0x200
 80020e0:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020e4:	2302      	movs	r3, #2
 80020e6:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020ea:	2300      	movs	r3, #0
 80020ec:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80020f0:	2300      	movs	r3, #0
 80020f2:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 80020f6:	230a      	movs	r3, #10
 80020f8:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80020fc:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8002100:	4619      	mov	r1, r3
 8002102:	4811      	ldr	r0, [pc, #68]	; (8002148 <HAL_QSPI_MspInit+0x190>)
 8002104:	f003 fc6e 	bl	80059e4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8002108:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800210c:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002110:	2302      	movs	r3, #2
 8002112:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002116:	2300      	movs	r3, #0
 8002118:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800211c:	2300      	movs	r3, #0
 800211e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8002122:	2309      	movs	r3, #9
 8002124:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002128:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 800212c:	4619      	mov	r1, r3
 800212e:	4807      	ldr	r0, [pc, #28]	; (800214c <HAL_QSPI_MspInit+0x194>)
 8002130:	f003 fc58 	bl	80059e4 <HAL_GPIO_Init>
  /* USER CODE BEGIN QUADSPI_MspInit 1 */

  /* USER CODE END QUADSPI_MspInit 1 */
  }

}
 8002134:	bf00      	nop
 8002136:	37f0      	adds	r7, #240	; 0xf0
 8002138:	46bd      	mov	sp, r7
 800213a:	bd80      	pop	{r7, pc}
 800213c:	52005000 	.word	0x52005000
 8002140:	58024400 	.word	0x58024400
 8002144:	58020400 	.word	0x58020400
 8002148:	58021400 	.word	0x58021400
 800214c:	58020c00 	.word	0x58020c00

08002150 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8002150:	b580      	push	{r7, lr}
 8002152:	b0b2      	sub	sp, #200	; 0xc8
 8002154:	af00      	add	r7, sp, #0
 8002156:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002158:	f107 0308 	add.w	r3, r7, #8
 800215c:	22c0      	movs	r2, #192	; 0xc0
 800215e:	2100      	movs	r1, #0
 8002160:	4618      	mov	r0, r3
 8002162:	f00b ffb5 	bl	800e0d0 <memset>
  if(hrtc->Instance==RTC)
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	4a10      	ldr	r2, [pc, #64]	; (80021ac <HAL_RTC_MspInit+0x5c>)
 800216c:	4293      	cmp	r3, r2
 800216e:	d119      	bne.n	80021a4 <HAL_RTC_MspInit+0x54>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8002170:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8002174:	f04f 0300 	mov.w	r3, #0
 8002178:	e9c7 2302 	strd	r2, r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 800217c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002180:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002184:	f107 0308 	add.w	r3, r7, #8
 8002188:	4618      	mov	r0, r3
 800218a:	f005 facf 	bl	800772c <HAL_RCCEx_PeriphCLKConfig>
 800218e:	4603      	mov	r3, r0
 8002190:	2b00      	cmp	r3, #0
 8002192:	d001      	beq.n	8002198 <HAL_RTC_MspInit+0x48>
    {
      Error_Handler();
 8002194:	f7ff fb00 	bl	8001798 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8002198:	4b05      	ldr	r3, [pc, #20]	; (80021b0 <HAL_RTC_MspInit+0x60>)
 800219a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800219c:	4a04      	ldr	r2, [pc, #16]	; (80021b0 <HAL_RTC_MspInit+0x60>)
 800219e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80021a2:	6713      	str	r3, [r2, #112]	; 0x70
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 80021a4:	bf00      	nop
 80021a6:	37c8      	adds	r7, #200	; 0xc8
 80021a8:	46bd      	mov	sp, r7
 80021aa:	bd80      	pop	{r7, pc}
 80021ac:	58004000 	.word	0x58004000
 80021b0:	58024400 	.word	0x58024400

080021b4 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80021b4:	b580      	push	{r7, lr}
 80021b6:	b0bc      	sub	sp, #240	; 0xf0
 80021b8:	af00      	add	r7, sp, #0
 80021ba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80021bc:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 80021c0:	2200      	movs	r2, #0
 80021c2:	601a      	str	r2, [r3, #0]
 80021c4:	605a      	str	r2, [r3, #4]
 80021c6:	609a      	str	r2, [r3, #8]
 80021c8:	60da      	str	r2, [r3, #12]
 80021ca:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80021cc:	f107 0318 	add.w	r3, r7, #24
 80021d0:	22c0      	movs	r2, #192	; 0xc0
 80021d2:	2100      	movs	r1, #0
 80021d4:	4618      	mov	r0, r3
 80021d6:	f00b ff7b 	bl	800e0d0 <memset>
  if(hspi->Instance==SPI2)
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	4a55      	ldr	r2, [pc, #340]	; (8002334 <HAL_SPI_MspInit+0x180>)
 80021e0:	4293      	cmp	r3, r2
 80021e2:	f040 80a3 	bne.w	800232c <HAL_SPI_MspInit+0x178>

  /* USER CODE END SPI2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI2;
 80021e6:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80021ea:	f04f 0300 	mov.w	r3, #0
 80021ee:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
 80021f2:	2300      	movs	r3, #0
 80021f4:	67bb      	str	r3, [r7, #120]	; 0x78
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80021f6:	f107 0318 	add.w	r3, r7, #24
 80021fa:	4618      	mov	r0, r3
 80021fc:	f005 fa96 	bl	800772c <HAL_RCCEx_PeriphCLKConfig>
 8002200:	4603      	mov	r3, r0
 8002202:	2b00      	cmp	r3, #0
 8002204:	d001      	beq.n	800220a <HAL_SPI_MspInit+0x56>
    {
      Error_Handler();
 8002206:	f7ff fac7 	bl	8001798 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 800220a:	4b4b      	ldr	r3, [pc, #300]	; (8002338 <HAL_SPI_MspInit+0x184>)
 800220c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002210:	4a49      	ldr	r2, [pc, #292]	; (8002338 <HAL_SPI_MspInit+0x184>)
 8002212:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002216:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800221a:	4b47      	ldr	r3, [pc, #284]	; (8002338 <HAL_SPI_MspInit+0x184>)
 800221c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002220:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002224:	617b      	str	r3, [r7, #20]
 8002226:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002228:	4b43      	ldr	r3, [pc, #268]	; (8002338 <HAL_SPI_MspInit+0x184>)
 800222a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800222e:	4a42      	ldr	r2, [pc, #264]	; (8002338 <HAL_SPI_MspInit+0x184>)
 8002230:	f043 0302 	orr.w	r3, r3, #2
 8002234:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002238:	4b3f      	ldr	r3, [pc, #252]	; (8002338 <HAL_SPI_MspInit+0x184>)
 800223a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800223e:	f003 0302 	and.w	r3, r3, #2
 8002242:	613b      	str	r3, [r7, #16]
 8002244:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002246:	4b3c      	ldr	r3, [pc, #240]	; (8002338 <HAL_SPI_MspInit+0x184>)
 8002248:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800224c:	4a3a      	ldr	r2, [pc, #232]	; (8002338 <HAL_SPI_MspInit+0x184>)
 800224e:	f043 0308 	orr.w	r3, r3, #8
 8002252:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002256:	4b38      	ldr	r3, [pc, #224]	; (8002338 <HAL_SPI_MspInit+0x184>)
 8002258:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800225c:	f003 0308 	and.w	r3, r3, #8
 8002260:	60fb      	str	r3, [r7, #12]
 8002262:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOI_CLK_ENABLE();
 8002264:	4b34      	ldr	r3, [pc, #208]	; (8002338 <HAL_SPI_MspInit+0x184>)
 8002266:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800226a:	4a33      	ldr	r2, [pc, #204]	; (8002338 <HAL_SPI_MspInit+0x184>)
 800226c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002270:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002274:	4b30      	ldr	r3, [pc, #192]	; (8002338 <HAL_SPI_MspInit+0x184>)
 8002276:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800227a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800227e:	60bb      	str	r3, [r7, #8]
 8002280:	68bb      	ldr	r3, [r7, #8]
    PB4 (NJTRST)     ------> SPI2_NSS
    PD3     ------> SPI2_SCK
    PI2     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8002282:	2310      	movs	r3, #16
 8002284:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002288:	2302      	movs	r3, #2
 800228a:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800228e:	2300      	movs	r3, #0
 8002290:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002294:	2300      	movs	r3, #0
 8002296:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF7_SPI2;
 800229a:	2307      	movs	r3, #7
 800229c:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80022a0:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 80022a4:	4619      	mov	r1, r3
 80022a6:	4825      	ldr	r0, [pc, #148]	; (800233c <HAL_SPI_MspInit+0x188>)
 80022a8:	f003 fb9c 	bl	80059e4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80022ac:	2308      	movs	r3, #8
 80022ae:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80022b2:	2302      	movs	r3, #2
 80022b4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022b8:	2300      	movs	r3, #0
 80022ba:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80022be:	2300      	movs	r3, #0
 80022c0:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80022c4:	2305      	movs	r3, #5
 80022c6:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80022ca:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 80022ce:	4619      	mov	r1, r3
 80022d0:	481b      	ldr	r0, [pc, #108]	; (8002340 <HAL_SPI_MspInit+0x18c>)
 80022d2:	f003 fb87 	bl	80059e4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80022d6:	2304      	movs	r3, #4
 80022d8:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80022dc:	2302      	movs	r3, #2
 80022de:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022e2:	2300      	movs	r3, #0
 80022e4:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80022e8:	2300      	movs	r3, #0
 80022ea:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80022ee:	2305      	movs	r3, #5
 80022f0:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 80022f4:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 80022f8:	4619      	mov	r1, r3
 80022fa:	4812      	ldr	r0, [pc, #72]	; (8002344 <HAL_SPI_MspInit+0x190>)
 80022fc:	f003 fb72 	bl	80059e4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8002300:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002304:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002308:	2302      	movs	r3, #2
 800230a:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800230e:	2300      	movs	r3, #0
 8002310:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002314:	2300      	movs	r3, #0
 8002316:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800231a:	2305      	movs	r3, #5
 800231c:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002320:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8002324:	4619      	mov	r1, r3
 8002326:	4805      	ldr	r0, [pc, #20]	; (800233c <HAL_SPI_MspInit+0x188>)
 8002328:	f003 fb5c 	bl	80059e4 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 800232c:	bf00      	nop
 800232e:	37f0      	adds	r7, #240	; 0xf0
 8002330:	46bd      	mov	sp, r7
 8002332:	bd80      	pop	{r7, pc}
 8002334:	40003800 	.word	0x40003800
 8002338:	58024400 	.word	0x58024400
 800233c:	58020400 	.word	0x58020400
 8002340:	58020c00 	.word	0x58020c00
 8002344:	58022000 	.word	0x58022000

08002348 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002348:	b580      	push	{r7, lr}
 800234a:	b0bc      	sub	sp, #240	; 0xf0
 800234c:	af00      	add	r7, sp, #0
 800234e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002350:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8002354:	2200      	movs	r2, #0
 8002356:	601a      	str	r2, [r3, #0]
 8002358:	605a      	str	r2, [r3, #4]
 800235a:	609a      	str	r2, [r3, #8]
 800235c:	60da      	str	r2, [r3, #12]
 800235e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002360:	f107 0318 	add.w	r3, r7, #24
 8002364:	22c0      	movs	r2, #192	; 0xc0
 8002366:	2100      	movs	r1, #0
 8002368:	4618      	mov	r0, r3
 800236a:	f00b feb1 	bl	800e0d0 <memset>
  if(huart->Instance==USART1)
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	4a5c      	ldr	r2, [pc, #368]	; (80024e4 <HAL_UART_MspInit+0x19c>)
 8002374:	4293      	cmp	r3, r2
 8002376:	d164      	bne.n	8002442 <HAL_UART_MspInit+0xfa>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8002378:	f04f 0201 	mov.w	r2, #1
 800237c:	f04f 0300 	mov.w	r3, #0
 8002380:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.Usart16ClockSelection = RCC_USART16CLKSOURCE_D2PCLK2;
 8002384:	2300      	movs	r3, #0
 8002386:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800238a:	f107 0318 	add.w	r3, r7, #24
 800238e:	4618      	mov	r0, r3
 8002390:	f005 f9cc 	bl	800772c <HAL_RCCEx_PeriphCLKConfig>
 8002394:	4603      	mov	r3, r0
 8002396:	2b00      	cmp	r3, #0
 8002398:	d001      	beq.n	800239e <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 800239a:	f7ff f9fd 	bl	8001798 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800239e:	4b52      	ldr	r3, [pc, #328]	; (80024e8 <HAL_UART_MspInit+0x1a0>)
 80023a0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80023a4:	4a50      	ldr	r2, [pc, #320]	; (80024e8 <HAL_UART_MspInit+0x1a0>)
 80023a6:	f043 0310 	orr.w	r3, r3, #16
 80023aa:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 80023ae:	4b4e      	ldr	r3, [pc, #312]	; (80024e8 <HAL_UART_MspInit+0x1a0>)
 80023b0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80023b4:	f003 0310 	and.w	r3, r3, #16
 80023b8:	617b      	str	r3, [r7, #20]
 80023ba:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80023bc:	4b4a      	ldr	r3, [pc, #296]	; (80024e8 <HAL_UART_MspInit+0x1a0>)
 80023be:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80023c2:	4a49      	ldr	r2, [pc, #292]	; (80024e8 <HAL_UART_MspInit+0x1a0>)
 80023c4:	f043 0302 	orr.w	r3, r3, #2
 80023c8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80023cc:	4b46      	ldr	r3, [pc, #280]	; (80024e8 <HAL_UART_MspInit+0x1a0>)
 80023ce:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80023d2:	f003 0302 	and.w	r3, r3, #2
 80023d6:	613b      	str	r3, [r7, #16]
 80023d8:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PB7     ------> USART1_RX
    PB14     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 80023da:	2380      	movs	r3, #128	; 0x80
 80023dc:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80023e0:	2302      	movs	r3, #2
 80023e2:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023e6:	2300      	movs	r3, #0
 80023e8:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80023ec:	2300      	movs	r3, #0
 80023ee:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80023f2:	2307      	movs	r3, #7
 80023f4:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80023f8:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 80023fc:	4619      	mov	r1, r3
 80023fe:	483b      	ldr	r0, [pc, #236]	; (80024ec <HAL_UART_MspInit+0x1a4>)
 8002400:	f003 faf0 	bl	80059e4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_14;
 8002404:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8002408:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800240c:	2302      	movs	r3, #2
 800240e:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002412:	2300      	movs	r3, #0
 8002414:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002418:	2300      	movs	r3, #0
 800241a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF4_USART1;
 800241e:	2304      	movs	r3, #4
 8002420:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002424:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8002428:	4619      	mov	r1, r3
 800242a:	4830      	ldr	r0, [pc, #192]	; (80024ec <HAL_UART_MspInit+0x1a4>)
 800242c:	f003 fada 	bl	80059e4 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8002430:	2200      	movs	r2, #0
 8002432:	2100      	movs	r1, #0
 8002434:	2025      	movs	r0, #37	; 0x25
 8002436:	f001 fdb4 	bl	8003fa2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800243a:	2025      	movs	r0, #37	; 0x25
 800243c:	f001 fdcb 	bl	8003fd6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8002440:	e04b      	b.n	80024da <HAL_UART_MspInit+0x192>
  else if(huart->Instance==USART3)
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	4a2a      	ldr	r2, [pc, #168]	; (80024f0 <HAL_UART_MspInit+0x1a8>)
 8002448:	4293      	cmp	r3, r2
 800244a:	d146      	bne.n	80024da <HAL_UART_MspInit+0x192>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 800244c:	f04f 0202 	mov.w	r2, #2
 8002450:	f04f 0300 	mov.w	r3, #0
 8002454:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8002458:	2300      	movs	r3, #0
 800245a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800245e:	f107 0318 	add.w	r3, r7, #24
 8002462:	4618      	mov	r0, r3
 8002464:	f005 f962 	bl	800772c <HAL_RCCEx_PeriphCLKConfig>
 8002468:	4603      	mov	r3, r0
 800246a:	2b00      	cmp	r3, #0
 800246c:	d001      	beq.n	8002472 <HAL_UART_MspInit+0x12a>
      Error_Handler();
 800246e:	f7ff f993 	bl	8001798 <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 8002472:	4b1d      	ldr	r3, [pc, #116]	; (80024e8 <HAL_UART_MspInit+0x1a0>)
 8002474:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002478:	4a1b      	ldr	r2, [pc, #108]	; (80024e8 <HAL_UART_MspInit+0x1a0>)
 800247a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800247e:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8002482:	4b19      	ldr	r3, [pc, #100]	; (80024e8 <HAL_UART_MspInit+0x1a0>)
 8002484:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002488:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800248c:	60fb      	str	r3, [r7, #12]
 800248e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002490:	4b15      	ldr	r3, [pc, #84]	; (80024e8 <HAL_UART_MspInit+0x1a0>)
 8002492:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002496:	4a14      	ldr	r2, [pc, #80]	; (80024e8 <HAL_UART_MspInit+0x1a0>)
 8002498:	f043 0302 	orr.w	r3, r3, #2
 800249c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80024a0:	4b11      	ldr	r3, [pc, #68]	; (80024e8 <HAL_UART_MspInit+0x1a0>)
 80024a2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80024a6:	f003 0302 	and.w	r3, r3, #2
 80024aa:	60bb      	str	r3, [r7, #8]
 80024ac:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = APC_TX_Pin|APC_RX_Pin;
 80024ae:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80024b2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80024b6:	2302      	movs	r3, #2
 80024b8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024bc:	2300      	movs	r3, #0
 80024be:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80024c2:	2300      	movs	r3, #0
 80024c4:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80024c8:	2307      	movs	r3, #7
 80024ca:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80024ce:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 80024d2:	4619      	mov	r1, r3
 80024d4:	4805      	ldr	r0, [pc, #20]	; (80024ec <HAL_UART_MspInit+0x1a4>)
 80024d6:	f003 fa85 	bl	80059e4 <HAL_GPIO_Init>
}
 80024da:	bf00      	nop
 80024dc:	37f0      	adds	r7, #240	; 0xf0
 80024de:	46bd      	mov	sp, r7
 80024e0:	bd80      	pop	{r7, pc}
 80024e2:	bf00      	nop
 80024e4:	40011000 	.word	0x40011000
 80024e8:	58024400 	.word	0x58024400
 80024ec:	58020400 	.word	0x58020400
 80024f0:	40004800 	.word	0x40004800

080024f4 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 80024f4:	b580      	push	{r7, lr}
 80024f6:	b0ba      	sub	sp, #232	; 0xe8
 80024f8:	af00      	add	r7, sp, #0
 80024fa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80024fc:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8002500:	2200      	movs	r2, #0
 8002502:	601a      	str	r2, [r3, #0]
 8002504:	605a      	str	r2, [r3, #4]
 8002506:	609a      	str	r2, [r3, #8]
 8002508:	60da      	str	r2, [r3, #12]
 800250a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800250c:	f107 0310 	add.w	r3, r7, #16
 8002510:	22c0      	movs	r2, #192	; 0xc0
 8002512:	2100      	movs	r1, #0
 8002514:	4618      	mov	r0, r3
 8002516:	f00b fddb 	bl	800e0d0 <memset>
  if(hpcd->Instance==USB_OTG_FS)
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	4a30      	ldr	r2, [pc, #192]	; (80025e0 <HAL_PCD_MspInit+0xec>)
 8002520:	4293      	cmp	r3, r2
 8002522:	d159      	bne.n	80025d8 <HAL_PCD_MspInit+0xe4>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8002524:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8002528:	f04f 0300 	mov.w	r3, #0
 800252c:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_PLL;
 8002530:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8002534:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002538:	f107 0310 	add.w	r3, r7, #16
 800253c:	4618      	mov	r0, r3
 800253e:	f005 f8f5 	bl	800772c <HAL_RCCEx_PeriphCLKConfig>
 8002542:	4603      	mov	r3, r0
 8002544:	2b00      	cmp	r3, #0
 8002546:	d001      	beq.n	800254c <HAL_PCD_MspInit+0x58>
    {
      Error_Handler();
 8002548:	f7ff f926 	bl	8001798 <Error_Handler>
    }

  /** Enable USB Voltage detector
  */
    HAL_PWREx_EnableUSBVoltageDetector();
 800254c:	f004 f83e 	bl	80065cc <HAL_PWREx_EnableUSBVoltageDetector>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002550:	4b24      	ldr	r3, [pc, #144]	; (80025e4 <HAL_PCD_MspInit+0xf0>)
 8002552:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002556:	4a23      	ldr	r2, [pc, #140]	; (80025e4 <HAL_PCD_MspInit+0xf0>)
 8002558:	f043 0301 	orr.w	r3, r3, #1
 800255c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002560:	4b20      	ldr	r3, [pc, #128]	; (80025e4 <HAL_PCD_MspInit+0xf0>)
 8002562:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002566:	f003 0301 	and.w	r3, r3, #1
 800256a:	60fb      	str	r3, [r7, #12]
 800256c:	68fb      	ldr	r3, [r7, #12]
    /**USB_OTG_FS GPIO Configuration
    PA9     ------> USB_OTG_FS_VBUS
    PA12     ------> USB_OTG_FS_DP
    PA11     ------> USB_OTG_FS_DM
    */
    GPIO_InitStruct.Pin = VBUS_FS2_Pin;
 800256e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002572:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002576:	2300      	movs	r3, #0
 8002578:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800257c:	2300      	movs	r3, #0
 800257e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(VBUS_FS2_GPIO_Port, &GPIO_InitStruct);
 8002582:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8002586:	4619      	mov	r1, r3
 8002588:	4817      	ldr	r0, [pc, #92]	; (80025e8 <HAL_PCD_MspInit+0xf4>)
 800258a:	f003 fa2b 	bl	80059e4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_OTG_FS2_P_Pin|USB_OTG_FS2_N_Pin;
 800258e:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8002592:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002596:	2302      	movs	r3, #2
 8002598:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800259c:	2300      	movs	r3, #0
 800259e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80025a2:	2300      	movs	r3, #0
 80025a4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 80025a8:	230a      	movs	r3, #10
 80025aa:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80025ae:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80025b2:	4619      	mov	r1, r3
 80025b4:	480c      	ldr	r0, [pc, #48]	; (80025e8 <HAL_PCD_MspInit+0xf4>)
 80025b6:	f003 fa15 	bl	80059e4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80025ba:	4b0a      	ldr	r3, [pc, #40]	; (80025e4 <HAL_PCD_MspInit+0xf0>)
 80025bc:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80025c0:	4a08      	ldr	r2, [pc, #32]	; (80025e4 <HAL_PCD_MspInit+0xf0>)
 80025c2:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80025c6:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 80025ca:	4b06      	ldr	r3, [pc, #24]	; (80025e4 <HAL_PCD_MspInit+0xf0>)
 80025cc:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80025d0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80025d4:	60bb      	str	r3, [r7, #8]
 80025d6:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 80025d8:	bf00      	nop
 80025da:	37e8      	adds	r7, #232	; 0xe8
 80025dc:	46bd      	mov	sp, r7
 80025de:	bd80      	pop	{r7, pc}
 80025e0:	40080000 	.word	0x40080000
 80025e4:	58024400 	.word	0x58024400
 80025e8:	58020000 	.word	0x58020000

080025ec <HAL_FMC_MspInit>:

}

static uint32_t FMC_Initialized = 0;

static void HAL_FMC_MspInit(void){
 80025ec:	b580      	push	{r7, lr}
 80025ee:	b0b8      	sub	sp, #224	; 0xe0
 80025f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 80025f2:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80025f6:	2200      	movs	r2, #0
 80025f8:	601a      	str	r2, [r3, #0]
 80025fa:	605a      	str	r2, [r3, #4]
 80025fc:	609a      	str	r2, [r3, #8]
 80025fe:	60da      	str	r2, [r3, #12]
 8002600:	611a      	str	r2, [r3, #16]
  if (FMC_Initialized) {
 8002602:	4b51      	ldr	r3, [pc, #324]	; (8002748 <HAL_FMC_MspInit+0x15c>)
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	2b00      	cmp	r3, #0
 8002608:	f040 8099 	bne.w	800273e <HAL_FMC_MspInit+0x152>
    return;
  }
  FMC_Initialized = 1;
 800260c:	4b4e      	ldr	r3, [pc, #312]	; (8002748 <HAL_FMC_MspInit+0x15c>)
 800260e:	2201      	movs	r2, #1
 8002610:	601a      	str	r2, [r3, #0]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002612:	f107 0308 	add.w	r3, r7, #8
 8002616:	22c0      	movs	r2, #192	; 0xc0
 8002618:	2100      	movs	r1, #0
 800261a:	4618      	mov	r0, r3
 800261c:	f00b fd58 	bl	800e0d0 <memset>

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_FMC;
 8002620:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002624:	f04f 0300 	mov.w	r3, #0
 8002628:	e9c7 2302 	strd	r2, r3, [r7, #8]
    PeriphClkInitStruct.FmcClockSelection = RCC_FMCCLKSOURCE_D1HCLK;
 800262c:	2300      	movs	r3, #0
 800262e:	653b      	str	r3, [r7, #80]	; 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002630:	f107 0308 	add.w	r3, r7, #8
 8002634:	4618      	mov	r0, r3
 8002636:	f005 f879 	bl	800772c <HAL_RCCEx_PeriphCLKConfig>
 800263a:	4603      	mov	r3, r0
 800263c:	2b00      	cmp	r3, #0
 800263e:	d001      	beq.n	8002644 <HAL_FMC_MspInit+0x58>
    {
      Error_Handler();
 8002640:	f7ff f8aa 	bl	8001798 <Error_Handler>
    }

  /* Peripheral clock enable */
  __HAL_RCC_FMC_CLK_ENABLE();
 8002644:	4b41      	ldr	r3, [pc, #260]	; (800274c <HAL_FMC_MspInit+0x160>)
 8002646:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 800264a:	4a40      	ldr	r2, [pc, #256]	; (800274c <HAL_FMC_MspInit+0x160>)
 800264c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002650:	f8c2 30d4 	str.w	r3, [r2, #212]	; 0xd4
 8002654:	4b3d      	ldr	r3, [pc, #244]	; (800274c <HAL_FMC_MspInit+0x160>)
 8002656:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 800265a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800265e:	607b      	str	r3, [r7, #4]
 8002660:	687b      	ldr	r3, [r7, #4]
  PE7   ------> FMC_D4
  PE14   ------> FMC_D11
  PH7   ------> FMC_SDCKE1
  PD8   ------> FMC_D13
  */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_0|GPIO_PIN_10|GPIO_PIN_9
 8002662:	f64f 7383 	movw	r3, #65411	; 0xff83
 8002666:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
                          |GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_15|GPIO_PIN_8
                          |GPIO_PIN_13|GPIO_PIN_7|GPIO_PIN_14;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800266a:	2302      	movs	r3, #2
 800266c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002670:	2300      	movs	r3, #0
 8002672:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002676:	2303      	movs	r3, #3
 8002678:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800267c:	230c      	movs	r3, #12
 800267e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002682:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8002686:	4619      	mov	r1, r3
 8002688:	4831      	ldr	r0, [pc, #196]	; (8002750 <HAL_FMC_MspInit+0x164>)
 800268a:	f003 f9ab 	bl	80059e4 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_15|GPIO_PIN_8|GPIO_PIN_5|GPIO_PIN_4
 800268e:	f248 1333 	movw	r3, #33075	; 0x8133
 8002692:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
                          |GPIO_PIN_0|GPIO_PIN_1;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002696:	2302      	movs	r3, #2
 8002698:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800269c:	2300      	movs	r3, #0
 800269e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80026a2:	2303      	movs	r3, #3
 80026a4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80026a8:	230c      	movs	r3, #12
 80026aa:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80026ae:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80026b2:	4619      	mov	r1, r3
 80026b4:	4827      	ldr	r0, [pc, #156]	; (8002754 <HAL_FMC_MspInit+0x168>)
 80026b6:	f003 f995 	bl	80059e4 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_15|GPIO_PIN_14
 80026ba:	f24c 7303 	movw	r3, #50947	; 0xc703
 80026be:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
                          |GPIO_PIN_10|GPIO_PIN_9|GPIO_PIN_8;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80026c2:	2302      	movs	r3, #2
 80026c4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026c8:	2300      	movs	r3, #0
 80026ca:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80026ce:	2303      	movs	r3, #3
 80026d0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80026d4:	230c      	movs	r3, #12
 80026d6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80026da:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80026de:	4619      	mov	r1, r3
 80026e0:	481d      	ldr	r0, [pc, #116]	; (8002758 <HAL_FMC_MspInit+0x16c>)
 80026e2:	f003 f97f 	bl	80059e4 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_1|GPIO_PIN_0|GPIO_PIN_3
 80026e6:	f64f 033f 	movw	r3, #63551	; 0xf83f
 80026ea:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
                          |GPIO_PIN_5|GPIO_PIN_4|GPIO_PIN_13|GPIO_PIN_14
                          |GPIO_PIN_12|GPIO_PIN_15|GPIO_PIN_11;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80026ee:	2302      	movs	r3, #2
 80026f0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026f4:	2300      	movs	r3, #0
 80026f6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80026fa:	2303      	movs	r3, #3
 80026fc:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8002700:	230c      	movs	r3, #12
 8002702:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8002706:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 800270a:	4619      	mov	r1, r3
 800270c:	4813      	ldr	r0, [pc, #76]	; (800275c <HAL_FMC_MspInit+0x170>)
 800270e:	f003 f969 	bl	80059e4 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8002712:	23e0      	movs	r3, #224	; 0xe0
 8002714:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002718:	2302      	movs	r3, #2
 800271a:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800271e:	2300      	movs	r3, #0
 8002720:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002724:	2303      	movs	r3, #3
 8002726:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800272a:	230c      	movs	r3, #12
 800272c:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8002730:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8002734:	4619      	mov	r1, r3
 8002736:	480a      	ldr	r0, [pc, #40]	; (8002760 <HAL_FMC_MspInit+0x174>)
 8002738:	f003 f954 	bl	80059e4 <HAL_GPIO_Init>
 800273c:	e000      	b.n	8002740 <HAL_FMC_MspInit+0x154>
    return;
 800273e:	bf00      	nop

  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}
 8002740:	37e0      	adds	r7, #224	; 0xe0
 8002742:	46bd      	mov	sp, r7
 8002744:	bd80      	pop	{r7, pc}
 8002746:	bf00      	nop
 8002748:	24000f38 	.word	0x24000f38
 800274c:	58024400 	.word	0x58024400
 8002750:	58021000 	.word	0x58021000
 8002754:	58021800 	.word	0x58021800
 8002758:	58020c00 	.word	0x58020c00
 800275c:	58021400 	.word	0x58021400
 8002760:	58021c00 	.word	0x58021c00

08002764 <HAL_SDRAM_MspInit>:

void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef* hsdram){
 8002764:	b580      	push	{r7, lr}
 8002766:	b082      	sub	sp, #8
 8002768:	af00      	add	r7, sp, #0
 800276a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SDRAM_MspInit 0 */

  /* USER CODE END SDRAM_MspInit 0 */
  HAL_FMC_MspInit();
 800276c:	f7ff ff3e 	bl	80025ec <HAL_FMC_MspInit>
  /* USER CODE BEGIN SDRAM_MspInit 1 */

  /* USER CODE END SDRAM_MspInit 1 */
}
 8002770:	bf00      	nop
 8002772:	3708      	adds	r7, #8
 8002774:	46bd      	mov	sp, r7
 8002776:	bd80      	pop	{r7, pc}

08002778 <HAL_SAI_MspInit>:
}

static uint32_t SAI2_client =0;

void HAL_SAI_MspInit(SAI_HandleTypeDef* hsai)
{
 8002778:	b580      	push	{r7, lr}
 800277a:	b0ba      	sub	sp, #232	; 0xe8
 800277c:	af00      	add	r7, sp, #0
 800277e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct;
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002780:	f107 0310 	add.w	r3, r7, #16
 8002784:	22c0      	movs	r2, #192	; 0xc0
 8002786:	2100      	movs	r1, #0
 8002788:	4618      	mov	r0, r3
 800278a:	f00b fca1 	bl	800e0d0 <memset>
/* SAI2 */
    if(hsai->Instance==SAI2_Block_A)
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	4a45      	ldr	r2, [pc, #276]	; (80028a8 <HAL_SAI_MspInit+0x130>)
 8002794:	4293      	cmp	r3, r2
 8002796:	d13e      	bne.n	8002816 <HAL_SAI_MspInit+0x9e>
    {
    /* Peripheral clock enable */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SAI2;
 8002798:	f44f 7200 	mov.w	r2, #512	; 0x200
 800279c:	f04f 0300 	mov.w	r3, #0
 80027a0:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Sai23ClockSelection = RCC_SAI23CLKSOURCE_PLL;
 80027a4:	2300      	movs	r3, #0
 80027a6:	66fb      	str	r3, [r7, #108]	; 0x6c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80027a8:	f107 0310 	add.w	r3, r7, #16
 80027ac:	4618      	mov	r0, r3
 80027ae:	f004 ffbd 	bl	800772c <HAL_RCCEx_PeriphCLKConfig>
 80027b2:	4603      	mov	r3, r0
 80027b4:	2b00      	cmp	r3, #0
 80027b6:	d001      	beq.n	80027bc <HAL_SAI_MspInit+0x44>
    {
      Error_Handler();
 80027b8:	f7fe ffee 	bl	8001798 <Error_Handler>
    }

    if (SAI2_client == 0)
 80027bc:	4b3b      	ldr	r3, [pc, #236]	; (80028ac <HAL_SAI_MspInit+0x134>)
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	2b00      	cmp	r3, #0
 80027c2:	d10e      	bne.n	80027e2 <HAL_SAI_MspInit+0x6a>
    {
       __HAL_RCC_SAI2_CLK_ENABLE();
 80027c4:	4b3a      	ldr	r3, [pc, #232]	; (80028b0 <HAL_SAI_MspInit+0x138>)
 80027c6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80027ca:	4a39      	ldr	r2, [pc, #228]	; (80028b0 <HAL_SAI_MspInit+0x138>)
 80027cc:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80027d0:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 80027d4:	4b36      	ldr	r3, [pc, #216]	; (80028b0 <HAL_SAI_MspInit+0x138>)
 80027d6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80027da:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80027de:	60fb      	str	r3, [r7, #12]
 80027e0:	68fb      	ldr	r3, [r7, #12]
    }
    SAI2_client ++;
 80027e2:	4b32      	ldr	r3, [pc, #200]	; (80028ac <HAL_SAI_MspInit+0x134>)
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	3301      	adds	r3, #1
 80027e8:	4a30      	ldr	r2, [pc, #192]	; (80028ac <HAL_SAI_MspInit+0x134>)
 80027ea:	6013      	str	r3, [r2, #0]
    PI6     ------> SAI2_SD_A
    PI5     ------> SAI2_SCK_A
    PI4     ------> SAI2_MCLK_A
    PI7     ------> SAI2_FS_A
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_5|GPIO_PIN_4|GPIO_PIN_7;
 80027ec:	23f0      	movs	r3, #240	; 0xf0
 80027ee:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80027f2:	2302      	movs	r3, #2
 80027f4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027f8:	2300      	movs	r3, #0
 80027fa:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80027fe:	2300      	movs	r3, #0
 8002800:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF10_SAI2;
 8002804:	230a      	movs	r3, #10
 8002806:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 800280a:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 800280e:	4619      	mov	r1, r3
 8002810:	4828      	ldr	r0, [pc, #160]	; (80028b4 <HAL_SAI_MspInit+0x13c>)
 8002812:	f003 f8e7 	bl	80059e4 <HAL_GPIO_Init>

    }
    if(hsai->Instance==SAI2_Block_B)
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	4a27      	ldr	r2, [pc, #156]	; (80028b8 <HAL_SAI_MspInit+0x140>)
 800281c:	4293      	cmp	r3, r2
 800281e:	d13f      	bne.n	80028a0 <HAL_SAI_MspInit+0x128>
    {
      /* Peripheral clock enable */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SAI2;
 8002820:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002824:	f04f 0300 	mov.w	r3, #0
 8002828:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Sai23ClockSelection = RCC_SAI23CLKSOURCE_PLL;
 800282c:	2300      	movs	r3, #0
 800282e:	66fb      	str	r3, [r7, #108]	; 0x6c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002830:	f107 0310 	add.w	r3, r7, #16
 8002834:	4618      	mov	r0, r3
 8002836:	f004 ff79 	bl	800772c <HAL_RCCEx_PeriphCLKConfig>
 800283a:	4603      	mov	r3, r0
 800283c:	2b00      	cmp	r3, #0
 800283e:	d001      	beq.n	8002844 <HAL_SAI_MspInit+0xcc>
    {
      Error_Handler();
 8002840:	f7fe ffaa 	bl	8001798 <Error_Handler>
    }

      if (SAI2_client == 0)
 8002844:	4b19      	ldr	r3, [pc, #100]	; (80028ac <HAL_SAI_MspInit+0x134>)
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	2b00      	cmp	r3, #0
 800284a:	d10e      	bne.n	800286a <HAL_SAI_MspInit+0xf2>
      {
       __HAL_RCC_SAI2_CLK_ENABLE();
 800284c:	4b18      	ldr	r3, [pc, #96]	; (80028b0 <HAL_SAI_MspInit+0x138>)
 800284e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002852:	4a17      	ldr	r2, [pc, #92]	; (80028b0 <HAL_SAI_MspInit+0x138>)
 8002854:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002858:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 800285c:	4b14      	ldr	r3, [pc, #80]	; (80028b0 <HAL_SAI_MspInit+0x138>)
 800285e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002862:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002866:	60bb      	str	r3, [r7, #8]
 8002868:	68bb      	ldr	r3, [r7, #8]
      }
    SAI2_client ++;
 800286a:	4b10      	ldr	r3, [pc, #64]	; (80028ac <HAL_SAI_MspInit+0x134>)
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	3301      	adds	r3, #1
 8002870:	4a0e      	ldr	r2, [pc, #56]	; (80028ac <HAL_SAI_MspInit+0x134>)
 8002872:	6013      	str	r3, [r2, #0]

    /**SAI2_B_Block_B GPIO Configuration
    PG10     ------> SAI2_SD_B
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8002874:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002878:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800287c:	2302      	movs	r3, #2
 800287e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002882:	2300      	movs	r3, #0
 8002884:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002888:	2300      	movs	r3, #0
 800288a:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF10_SAI2;
 800288e:	230a      	movs	r3, #10
 8002890:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002894:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8002898:	4619      	mov	r1, r3
 800289a:	4808      	ldr	r0, [pc, #32]	; (80028bc <HAL_SAI_MspInit+0x144>)
 800289c:	f003 f8a2 	bl	80059e4 <HAL_GPIO_Init>

    }
}
 80028a0:	bf00      	nop
 80028a2:	37e8      	adds	r7, #232	; 0xe8
 80028a4:	46bd      	mov	sp, r7
 80028a6:	bd80      	pop	{r7, pc}
 80028a8:	40015c04 	.word	0x40015c04
 80028ac:	24000f3c 	.word	0x24000f3c
 80028b0:	58024400 	.word	0x58024400
 80028b4:	58022000 	.word	0x58022000
 80028b8:	40015c24 	.word	0x40015c24
 80028bc:	58021800 	.word	0x58021800

080028c0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80028c0:	b480      	push	{r7}
 80028c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80028c4:	e7fe      	b.n	80028c4 <NMI_Handler+0x4>

080028c6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80028c6:	b480      	push	{r7}
 80028c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80028ca:	e7fe      	b.n	80028ca <HardFault_Handler+0x4>

080028cc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80028cc:	b480      	push	{r7}
 80028ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80028d0:	e7fe      	b.n	80028d0 <MemManage_Handler+0x4>

080028d2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80028d2:	b480      	push	{r7}
 80028d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80028d6:	e7fe      	b.n	80028d6 <BusFault_Handler+0x4>

080028d8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80028d8:	b480      	push	{r7}
 80028da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80028dc:	e7fe      	b.n	80028dc <UsageFault_Handler+0x4>

080028de <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80028de:	b480      	push	{r7}
 80028e0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80028e2:	bf00      	nop
 80028e4:	46bd      	mov	sp, r7
 80028e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028ea:	4770      	bx	lr

080028ec <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80028ec:	b480      	push	{r7}
 80028ee:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80028f0:	bf00      	nop
 80028f2:	46bd      	mov	sp, r7
 80028f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028f8:	4770      	bx	lr

080028fa <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80028fa:	b480      	push	{r7}
 80028fc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80028fe:	bf00      	nop
 8002900:	46bd      	mov	sp, r7
 8002902:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002906:	4770      	bx	lr

08002908 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002908:	b580      	push	{r7, lr}
 800290a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800290c:	f000 f966 	bl	8002bdc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002910:	bf00      	nop
 8002912:	bd80      	pop	{r7, pc}

08002914 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8002914:	b580      	push	{r7, lr}
 8002916:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8002918:	4802      	ldr	r0, [pc, #8]	; (8002924 <USART1_IRQHandler+0x10>)
 800291a:	f008 fb3b 	bl	800af94 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800291e:	bf00      	nop
 8002920:	bd80      	pop	{r7, pc}
 8002922:	bf00      	nop
 8002924:	2400077c 	.word	0x2400077c

08002928 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002928:	b580      	push	{r7, lr}
 800292a:	b086      	sub	sp, #24
 800292c:	af00      	add	r7, sp, #0
 800292e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002930:	4a14      	ldr	r2, [pc, #80]	; (8002984 <_sbrk+0x5c>)
 8002932:	4b15      	ldr	r3, [pc, #84]	; (8002988 <_sbrk+0x60>)
 8002934:	1ad3      	subs	r3, r2, r3
 8002936:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002938:	697b      	ldr	r3, [r7, #20]
 800293a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800293c:	4b13      	ldr	r3, [pc, #76]	; (800298c <_sbrk+0x64>)
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	2b00      	cmp	r3, #0
 8002942:	d102      	bne.n	800294a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002944:	4b11      	ldr	r3, [pc, #68]	; (800298c <_sbrk+0x64>)
 8002946:	4a12      	ldr	r2, [pc, #72]	; (8002990 <_sbrk+0x68>)
 8002948:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800294a:	4b10      	ldr	r3, [pc, #64]	; (800298c <_sbrk+0x64>)
 800294c:	681a      	ldr	r2, [r3, #0]
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	4413      	add	r3, r2
 8002952:	693a      	ldr	r2, [r7, #16]
 8002954:	429a      	cmp	r2, r3
 8002956:	d207      	bcs.n	8002968 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002958:	f00b fb82 	bl	800e060 <__errno>
 800295c:	4603      	mov	r3, r0
 800295e:	220c      	movs	r2, #12
 8002960:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002962:	f04f 33ff 	mov.w	r3, #4294967295
 8002966:	e009      	b.n	800297c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002968:	4b08      	ldr	r3, [pc, #32]	; (800298c <_sbrk+0x64>)
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800296e:	4b07      	ldr	r3, [pc, #28]	; (800298c <_sbrk+0x64>)
 8002970:	681a      	ldr	r2, [r3, #0]
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	4413      	add	r3, r2
 8002976:	4a05      	ldr	r2, [pc, #20]	; (800298c <_sbrk+0x64>)
 8002978:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800297a:	68fb      	ldr	r3, [r7, #12]
}
 800297c:	4618      	mov	r0, r3
 800297e:	3718      	adds	r7, #24
 8002980:	46bd      	mov	sp, r7
 8002982:	bd80      	pop	{r7, pc}
 8002984:	24080000 	.word	0x24080000
 8002988:	00000400 	.word	0x00000400
 800298c:	24000f40 	.word	0x24000f40
 8002990:	24000f58 	.word	0x24000f58

08002994 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8002994:	b480      	push	{r7}
 8002996:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8002998:	4b37      	ldr	r3, [pc, #220]	; (8002a78 <SystemInit+0xe4>)
 800299a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800299e:	4a36      	ldr	r2, [pc, #216]	; (8002a78 <SystemInit+0xe4>)
 80029a0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80029a4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80029a8:	4b34      	ldr	r3, [pc, #208]	; (8002a7c <SystemInit+0xe8>)
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	f003 030f 	and.w	r3, r3, #15
 80029b0:	2b06      	cmp	r3, #6
 80029b2:	d807      	bhi.n	80029c4 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80029b4:	4b31      	ldr	r3, [pc, #196]	; (8002a7c <SystemInit+0xe8>)
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	f023 030f 	bic.w	r3, r3, #15
 80029bc:	4a2f      	ldr	r2, [pc, #188]	; (8002a7c <SystemInit+0xe8>)
 80029be:	f043 0307 	orr.w	r3, r3, #7
 80029c2:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 80029c4:	4b2e      	ldr	r3, [pc, #184]	; (8002a80 <SystemInit+0xec>)
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	4a2d      	ldr	r2, [pc, #180]	; (8002a80 <SystemInit+0xec>)
 80029ca:	f043 0301 	orr.w	r3, r3, #1
 80029ce:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80029d0:	4b2b      	ldr	r3, [pc, #172]	; (8002a80 <SystemInit+0xec>)
 80029d2:	2200      	movs	r2, #0
 80029d4:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 80029d6:	4b2a      	ldr	r3, [pc, #168]	; (8002a80 <SystemInit+0xec>)
 80029d8:	681a      	ldr	r2, [r3, #0]
 80029da:	4929      	ldr	r1, [pc, #164]	; (8002a80 <SystemInit+0xec>)
 80029dc:	4b29      	ldr	r3, [pc, #164]	; (8002a84 <SystemInit+0xf0>)
 80029de:	4013      	ands	r3, r2
 80029e0:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80029e2:	4b26      	ldr	r3, [pc, #152]	; (8002a7c <SystemInit+0xe8>)
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	f003 0308 	and.w	r3, r3, #8
 80029ea:	2b00      	cmp	r3, #0
 80029ec:	d007      	beq.n	80029fe <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80029ee:	4b23      	ldr	r3, [pc, #140]	; (8002a7c <SystemInit+0xe8>)
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	f023 030f 	bic.w	r3, r3, #15
 80029f6:	4a21      	ldr	r2, [pc, #132]	; (8002a7c <SystemInit+0xe8>)
 80029f8:	f043 0307 	orr.w	r3, r3, #7
 80029fc:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 80029fe:	4b20      	ldr	r3, [pc, #128]	; (8002a80 <SystemInit+0xec>)
 8002a00:	2200      	movs	r2, #0
 8002a02:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8002a04:	4b1e      	ldr	r3, [pc, #120]	; (8002a80 <SystemInit+0xec>)
 8002a06:	2200      	movs	r2, #0
 8002a08:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8002a0a:	4b1d      	ldr	r3, [pc, #116]	; (8002a80 <SystemInit+0xec>)
 8002a0c:	2200      	movs	r2, #0
 8002a0e:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8002a10:	4b1b      	ldr	r3, [pc, #108]	; (8002a80 <SystemInit+0xec>)
 8002a12:	4a1d      	ldr	r2, [pc, #116]	; (8002a88 <SystemInit+0xf4>)
 8002a14:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8002a16:	4b1a      	ldr	r3, [pc, #104]	; (8002a80 <SystemInit+0xec>)
 8002a18:	4a1c      	ldr	r2, [pc, #112]	; (8002a8c <SystemInit+0xf8>)
 8002a1a:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8002a1c:	4b18      	ldr	r3, [pc, #96]	; (8002a80 <SystemInit+0xec>)
 8002a1e:	4a1c      	ldr	r2, [pc, #112]	; (8002a90 <SystemInit+0xfc>)
 8002a20:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8002a22:	4b17      	ldr	r3, [pc, #92]	; (8002a80 <SystemInit+0xec>)
 8002a24:	2200      	movs	r2, #0
 8002a26:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8002a28:	4b15      	ldr	r3, [pc, #84]	; (8002a80 <SystemInit+0xec>)
 8002a2a:	4a19      	ldr	r2, [pc, #100]	; (8002a90 <SystemInit+0xfc>)
 8002a2c:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8002a2e:	4b14      	ldr	r3, [pc, #80]	; (8002a80 <SystemInit+0xec>)
 8002a30:	2200      	movs	r2, #0
 8002a32:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8002a34:	4b12      	ldr	r3, [pc, #72]	; (8002a80 <SystemInit+0xec>)
 8002a36:	4a16      	ldr	r2, [pc, #88]	; (8002a90 <SystemInit+0xfc>)
 8002a38:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8002a3a:	4b11      	ldr	r3, [pc, #68]	; (8002a80 <SystemInit+0xec>)
 8002a3c:	2200      	movs	r2, #0
 8002a3e:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8002a40:	4b0f      	ldr	r3, [pc, #60]	; (8002a80 <SystemInit+0xec>)
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	4a0e      	ldr	r2, [pc, #56]	; (8002a80 <SystemInit+0xec>)
 8002a46:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002a4a:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8002a4c:	4b0c      	ldr	r3, [pc, #48]	; (8002a80 <SystemInit+0xec>)
 8002a4e:	2200      	movs	r2, #0
 8002a50:	661a      	str	r2, [r3, #96]	; 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8002a52:	4b10      	ldr	r3, [pc, #64]	; (8002a94 <SystemInit+0x100>)
 8002a54:	681a      	ldr	r2, [r3, #0]
 8002a56:	4b10      	ldr	r3, [pc, #64]	; (8002a98 <SystemInit+0x104>)
 8002a58:	4013      	ands	r3, r2
 8002a5a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002a5e:	d202      	bcs.n	8002a66 <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8002a60:	4b0e      	ldr	r3, [pc, #56]	; (8002a9c <SystemInit+0x108>)
 8002a62:	2201      	movs	r2, #1
 8002a64:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8002a66:	4b0e      	ldr	r3, [pc, #56]	; (8002aa0 <SystemInit+0x10c>)
 8002a68:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8002a6c:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8002a6e:	bf00      	nop
 8002a70:	46bd      	mov	sp, r7
 8002a72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a76:	4770      	bx	lr
 8002a78:	e000ed00 	.word	0xe000ed00
 8002a7c:	52002000 	.word	0x52002000
 8002a80:	58024400 	.word	0x58024400
 8002a84:	eaf6ed7f 	.word	0xeaf6ed7f
 8002a88:	02020200 	.word	0x02020200
 8002a8c:	01ff0000 	.word	0x01ff0000
 8002a90:	01010280 	.word	0x01010280
 8002a94:	5c001000 	.word	0x5c001000
 8002a98:	ffff0000 	.word	0xffff0000
 8002a9c:	51008108 	.word	0x51008108
 8002aa0:	52004000 	.word	0x52004000

08002aa4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8002aa4:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002adc <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8002aa8:	f7ff ff74 	bl	8002994 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002aac:	480c      	ldr	r0, [pc, #48]	; (8002ae0 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8002aae:	490d      	ldr	r1, [pc, #52]	; (8002ae4 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002ab0:	4a0d      	ldr	r2, [pc, #52]	; (8002ae8 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8002ab2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002ab4:	e002      	b.n	8002abc <LoopCopyDataInit>

08002ab6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002ab6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002ab8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002aba:	3304      	adds	r3, #4

08002abc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002abc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002abe:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002ac0:	d3f9      	bcc.n	8002ab6 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002ac2:	4a0a      	ldr	r2, [pc, #40]	; (8002aec <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002ac4:	4c0a      	ldr	r4, [pc, #40]	; (8002af0 <LoopFillZerobss+0x22>)
  movs r3, #0
 8002ac6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002ac8:	e001      	b.n	8002ace <LoopFillZerobss>

08002aca <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002aca:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002acc:	3204      	adds	r2, #4

08002ace <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002ace:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002ad0:	d3fb      	bcc.n	8002aca <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002ad2:	f00b facb 	bl	800e06c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002ad6:	f7fd fe0b 	bl	80006f0 <main>
  bx  lr
 8002ada:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002adc:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8002ae0:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8002ae4:	2400007c 	.word	0x2400007c
  ldr r2, =_sidata
 8002ae8:	0800eabc 	.word	0x0800eabc
  ldr r2, =_sbss
 8002aec:	2400013c 	.word	0x2400013c
  ldr r4, =_ebss
 8002af0:	24000f58 	.word	0x24000f58

08002af4 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002af4:	e7fe      	b.n	8002af4 <ADC3_IRQHandler>
	...

08002af8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002af8:	b580      	push	{r7, lr}
 8002afa:	b082      	sub	sp, #8
 8002afc:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002afe:	2003      	movs	r0, #3
 8002b00:	f001 fa44 	bl	8003f8c <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8002b04:	f004 fc3c 	bl	8007380 <HAL_RCC_GetSysClockFreq>
 8002b08:	4602      	mov	r2, r0
 8002b0a:	4b15      	ldr	r3, [pc, #84]	; (8002b60 <HAL_Init+0x68>)
 8002b0c:	699b      	ldr	r3, [r3, #24]
 8002b0e:	0a1b      	lsrs	r3, r3, #8
 8002b10:	f003 030f 	and.w	r3, r3, #15
 8002b14:	4913      	ldr	r1, [pc, #76]	; (8002b64 <HAL_Init+0x6c>)
 8002b16:	5ccb      	ldrb	r3, [r1, r3]
 8002b18:	f003 031f 	and.w	r3, r3, #31
 8002b1c:	fa22 f303 	lsr.w	r3, r2, r3
 8002b20:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8002b22:	4b0f      	ldr	r3, [pc, #60]	; (8002b60 <HAL_Init+0x68>)
 8002b24:	699b      	ldr	r3, [r3, #24]
 8002b26:	f003 030f 	and.w	r3, r3, #15
 8002b2a:	4a0e      	ldr	r2, [pc, #56]	; (8002b64 <HAL_Init+0x6c>)
 8002b2c:	5cd3      	ldrb	r3, [r2, r3]
 8002b2e:	f003 031f 	and.w	r3, r3, #31
 8002b32:	687a      	ldr	r2, [r7, #4]
 8002b34:	fa22 f303 	lsr.w	r3, r2, r3
 8002b38:	4a0b      	ldr	r2, [pc, #44]	; (8002b68 <HAL_Init+0x70>)
 8002b3a:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8002b3c:	4a0b      	ldr	r2, [pc, #44]	; (8002b6c <HAL_Init+0x74>)
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002b42:	2000      	movs	r0, #0
 8002b44:	f000 f814 	bl	8002b70 <HAL_InitTick>
 8002b48:	4603      	mov	r3, r0
 8002b4a:	2b00      	cmp	r3, #0
 8002b4c:	d001      	beq.n	8002b52 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8002b4e:	2301      	movs	r3, #1
 8002b50:	e002      	b.n	8002b58 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8002b52:	f7fe fe27 	bl	80017a4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002b56:	2300      	movs	r3, #0
}
 8002b58:	4618      	mov	r0, r3
 8002b5a:	3708      	adds	r7, #8
 8002b5c:	46bd      	mov	sp, r7
 8002b5e:	bd80      	pop	{r7, pc}
 8002b60:	58024400 	.word	0x58024400
 8002b64:	0800ea40 	.word	0x0800ea40
 8002b68:	2400000c 	.word	0x2400000c
 8002b6c:	24000008 	.word	0x24000008

08002b70 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002b70:	b580      	push	{r7, lr}
 8002b72:	b082      	sub	sp, #8
 8002b74:	af00      	add	r7, sp, #0
 8002b76:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8002b78:	4b15      	ldr	r3, [pc, #84]	; (8002bd0 <HAL_InitTick+0x60>)
 8002b7a:	781b      	ldrb	r3, [r3, #0]
 8002b7c:	2b00      	cmp	r3, #0
 8002b7e:	d101      	bne.n	8002b84 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8002b80:	2301      	movs	r3, #1
 8002b82:	e021      	b.n	8002bc8 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8002b84:	4b13      	ldr	r3, [pc, #76]	; (8002bd4 <HAL_InitTick+0x64>)
 8002b86:	681a      	ldr	r2, [r3, #0]
 8002b88:	4b11      	ldr	r3, [pc, #68]	; (8002bd0 <HAL_InitTick+0x60>)
 8002b8a:	781b      	ldrb	r3, [r3, #0]
 8002b8c:	4619      	mov	r1, r3
 8002b8e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002b92:	fbb3 f3f1 	udiv	r3, r3, r1
 8002b96:	fbb2 f3f3 	udiv	r3, r2, r3
 8002b9a:	4618      	mov	r0, r3
 8002b9c:	f001 fa29 	bl	8003ff2 <HAL_SYSTICK_Config>
 8002ba0:	4603      	mov	r3, r0
 8002ba2:	2b00      	cmp	r3, #0
 8002ba4:	d001      	beq.n	8002baa <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8002ba6:	2301      	movs	r3, #1
 8002ba8:	e00e      	b.n	8002bc8 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	2b0f      	cmp	r3, #15
 8002bae:	d80a      	bhi.n	8002bc6 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002bb0:	2200      	movs	r2, #0
 8002bb2:	6879      	ldr	r1, [r7, #4]
 8002bb4:	f04f 30ff 	mov.w	r0, #4294967295
 8002bb8:	f001 f9f3 	bl	8003fa2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002bbc:	4a06      	ldr	r2, [pc, #24]	; (8002bd8 <HAL_InitTick+0x68>)
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002bc2:	2300      	movs	r3, #0
 8002bc4:	e000      	b.n	8002bc8 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8002bc6:	2301      	movs	r3, #1
}
 8002bc8:	4618      	mov	r0, r3
 8002bca:	3708      	adds	r7, #8
 8002bcc:	46bd      	mov	sp, r7
 8002bce:	bd80      	pop	{r7, pc}
 8002bd0:	24000014 	.word	0x24000014
 8002bd4:	24000008 	.word	0x24000008
 8002bd8:	24000010 	.word	0x24000010

08002bdc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002bdc:	b480      	push	{r7}
 8002bde:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002be0:	4b06      	ldr	r3, [pc, #24]	; (8002bfc <HAL_IncTick+0x20>)
 8002be2:	781b      	ldrb	r3, [r3, #0]
 8002be4:	461a      	mov	r2, r3
 8002be6:	4b06      	ldr	r3, [pc, #24]	; (8002c00 <HAL_IncTick+0x24>)
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	4413      	add	r3, r2
 8002bec:	4a04      	ldr	r2, [pc, #16]	; (8002c00 <HAL_IncTick+0x24>)
 8002bee:	6013      	str	r3, [r2, #0]
}
 8002bf0:	bf00      	nop
 8002bf2:	46bd      	mov	sp, r7
 8002bf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bf8:	4770      	bx	lr
 8002bfa:	bf00      	nop
 8002bfc:	24000014 	.word	0x24000014
 8002c00:	24000f44 	.word	0x24000f44

08002c04 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002c04:	b480      	push	{r7}
 8002c06:	af00      	add	r7, sp, #0
  return uwTick;
 8002c08:	4b03      	ldr	r3, [pc, #12]	; (8002c18 <HAL_GetTick+0x14>)
 8002c0a:	681b      	ldr	r3, [r3, #0]
}
 8002c0c:	4618      	mov	r0, r3
 8002c0e:	46bd      	mov	sp, r7
 8002c10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c14:	4770      	bx	lr
 8002c16:	bf00      	nop
 8002c18:	24000f44 	.word	0x24000f44

08002c1c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002c1c:	b580      	push	{r7, lr}
 8002c1e:	b084      	sub	sp, #16
 8002c20:	af00      	add	r7, sp, #0
 8002c22:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002c24:	f7ff ffee 	bl	8002c04 <HAL_GetTick>
 8002c28:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002c2e:	68fb      	ldr	r3, [r7, #12]
 8002c30:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002c34:	d005      	beq.n	8002c42 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002c36:	4b0a      	ldr	r3, [pc, #40]	; (8002c60 <HAL_Delay+0x44>)
 8002c38:	781b      	ldrb	r3, [r3, #0]
 8002c3a:	461a      	mov	r2, r3
 8002c3c:	68fb      	ldr	r3, [r7, #12]
 8002c3e:	4413      	add	r3, r2
 8002c40:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002c42:	bf00      	nop
 8002c44:	f7ff ffde 	bl	8002c04 <HAL_GetTick>
 8002c48:	4602      	mov	r2, r0
 8002c4a:	68bb      	ldr	r3, [r7, #8]
 8002c4c:	1ad3      	subs	r3, r2, r3
 8002c4e:	68fa      	ldr	r2, [r7, #12]
 8002c50:	429a      	cmp	r2, r3
 8002c52:	d8f7      	bhi.n	8002c44 <HAL_Delay+0x28>
  {
  }
}
 8002c54:	bf00      	nop
 8002c56:	bf00      	nop
 8002c58:	3710      	adds	r7, #16
 8002c5a:	46bd      	mov	sp, r7
 8002c5c:	bd80      	pop	{r7, pc}
 8002c5e:	bf00      	nop
 8002c60:	24000014 	.word	0x24000014

08002c64 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8002c64:	b480      	push	{r7}
 8002c66:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8002c68:	4b03      	ldr	r3, [pc, #12]	; (8002c78 <HAL_GetREVID+0x14>)
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	0c1b      	lsrs	r3, r3, #16
}
 8002c6e:	4618      	mov	r0, r3
 8002c70:	46bd      	mov	sp, r7
 8002c72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c76:	4770      	bx	lr
 8002c78:	5c001000 	.word	0x5c001000

08002c7c <HAL_SYSCFG_ETHInterfaceSelect>:
  *   @arg SYSCFG_ETH_MII : Select the Media Independent Interface
  *   @arg SYSCFG_ETH_RMII: Select the Reduced Media Independent Interface
  * @retval None
  */
void HAL_SYSCFG_ETHInterfaceSelect(uint32_t SYSCFG_ETHInterface)
{
 8002c7c:	b480      	push	{r7}
 8002c7e:	b083      	sub	sp, #12
 8002c80:	af00      	add	r7, sp, #0
 8002c82:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ETHERNET_CONFIG(SYSCFG_ETHInterface));

  MODIFY_REG(SYSCFG->PMCR, SYSCFG_PMCR_EPIS_SEL, (uint32_t)(SYSCFG_ETHInterface));
 8002c84:	4b06      	ldr	r3, [pc, #24]	; (8002ca0 <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 8002c86:	685b      	ldr	r3, [r3, #4]
 8002c88:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 8002c8c:	4904      	ldr	r1, [pc, #16]	; (8002ca0 <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	4313      	orrs	r3, r2
 8002c92:	604b      	str	r3, [r1, #4]
}
 8002c94:	bf00      	nop
 8002c96:	370c      	adds	r7, #12
 8002c98:	46bd      	mov	sp, r7
 8002c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c9e:	4770      	bx	lr
 8002ca0:	58000400 	.word	0x58000400

08002ca4 <HAL_SYSCFG_AnalogSwitchConfig>:
  *   @arg SYSCFG_SWITCH_PC3_CLOSE
  * @retval None
  */

void HAL_SYSCFG_AnalogSwitchConfig(uint32_t SYSCFG_AnalogSwitch , uint32_t SYSCFG_SwitchState )
{
 8002ca4:	b480      	push	{r7}
 8002ca6:	b083      	sub	sp, #12
 8002ca8:	af00      	add	r7, sp, #0
 8002caa:	6078      	str	r0, [r7, #4]
 8002cac:	6039      	str	r1, [r7, #0]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ANALOG_SWITCH(SYSCFG_AnalogSwitch));
  assert_param(IS_SYSCFG_SWITCH_STATE(SYSCFG_SwitchState));

  MODIFY_REG(SYSCFG->PMCR, (uint32_t) SYSCFG_AnalogSwitch, (uint32_t)(SYSCFG_SwitchState));
 8002cae:	4b07      	ldr	r3, [pc, #28]	; (8002ccc <HAL_SYSCFG_AnalogSwitchConfig+0x28>)
 8002cb0:	685a      	ldr	r2, [r3, #4]
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	43db      	mvns	r3, r3
 8002cb6:	401a      	ands	r2, r3
 8002cb8:	4904      	ldr	r1, [pc, #16]	; (8002ccc <HAL_SYSCFG_AnalogSwitchConfig+0x28>)
 8002cba:	683b      	ldr	r3, [r7, #0]
 8002cbc:	4313      	orrs	r3, r2
 8002cbe:	604b      	str	r3, [r1, #4]
}
 8002cc0:	bf00      	nop
 8002cc2:	370c      	adds	r7, #12
 8002cc4:	46bd      	mov	sp, r7
 8002cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cca:	4770      	bx	lr
 8002ccc:	58000400 	.word	0x58000400

08002cd0 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8002cd0:	b480      	push	{r7}
 8002cd2:	b083      	sub	sp, #12
 8002cd4:	af00      	add	r7, sp, #0
 8002cd6:	6078      	str	r0, [r7, #4]
 8002cd8:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	689b      	ldr	r3, [r3, #8]
 8002cde:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8002ce2:	683b      	ldr	r3, [r7, #0]
 8002ce4:	431a      	orrs	r2, r3
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	609a      	str	r2, [r3, #8]
}
 8002cea:	bf00      	nop
 8002cec:	370c      	adds	r7, #12
 8002cee:	46bd      	mov	sp, r7
 8002cf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cf4:	4770      	bx	lr

08002cf6 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8002cf6:	b480      	push	{r7}
 8002cf8:	b083      	sub	sp, #12
 8002cfa:	af00      	add	r7, sp, #0
 8002cfc:	6078      	str	r0, [r7, #4]
 8002cfe:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	689b      	ldr	r3, [r3, #8]
 8002d04:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8002d08:	683b      	ldr	r3, [r7, #0]
 8002d0a:	431a      	orrs	r2, r3
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	609a      	str	r2, [r3, #8]
}
 8002d10:	bf00      	nop
 8002d12:	370c      	adds	r7, #12
 8002d14:	46bd      	mov	sp, r7
 8002d16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d1a:	4770      	bx	lr

08002d1c <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002d1c:	b480      	push	{r7}
 8002d1e:	b083      	sub	sp, #12
 8002d20:	af00      	add	r7, sp, #0
 8002d22:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	689b      	ldr	r3, [r3, #8]
 8002d28:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8002d2c:	4618      	mov	r0, r3
 8002d2e:	370c      	adds	r7, #12
 8002d30:	46bd      	mov	sp, r7
 8002d32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d36:	4770      	bx	lr

08002d38 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0x3FFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8002d38:	b480      	push	{r7}
 8002d3a:	b087      	sub	sp, #28
 8002d3c:	af00      	add	r7, sp, #0
 8002d3e:	60f8      	str	r0, [r7, #12]
 8002d40:	60b9      	str	r1, [r7, #8]
 8002d42:	607a      	str	r2, [r7, #4]
 8002d44:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002d46:	68fb      	ldr	r3, [r7, #12]
 8002d48:	3360      	adds	r3, #96	; 0x60
 8002d4a:	461a      	mov	r2, r3
 8002d4c:	68bb      	ldr	r3, [r7, #8]
 8002d4e:	009b      	lsls	r3, r3, #2
 8002d50:	4413      	add	r3, r2
 8002d52:	617b      	str	r3, [r7, #20]
               ADC3_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
  else
#endif /* ADC_VER_V5_V90 */
  {
    MODIFY_REG(*preg,
 8002d54:	697b      	ldr	r3, [r7, #20]
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	f003 41f8 	and.w	r1, r3, #2080374784	; 0x7c000000
 8002d62:	683b      	ldr	r3, [r7, #0]
 8002d64:	430b      	orrs	r3, r1
 8002d66:	431a      	orrs	r2, r3
 8002d68:	697b      	ldr	r3, [r7, #20]
 8002d6a:	601a      	str	r2, [r3, #0]
               ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
               (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
}
 8002d6c:	bf00      	nop
 8002d6e:	371c      	adds	r7, #28
 8002d70:	46bd      	mov	sp, r7
 8002d72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d76:	4770      	bx	lr

08002d78 <LL_ADC_SetDataRightShift>:
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_ENABLE
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetDataRightShift(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t RigthShift)
{
 8002d78:	b480      	push	{r7}
 8002d7a:	b085      	sub	sp, #20
 8002d7c:	af00      	add	r7, sp, #0
 8002d7e:	60f8      	str	r0, [r7, #12]
 8002d80:	60b9      	str	r1, [r7, #8]
 8002d82:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_RSHIFT1 | ADC_CFGR2_RSHIFT2 | ADC_CFGR2_RSHIFT3 | ADC_CFGR2_RSHIFT4), RigthShift << (Offsety & 0x1FUL));
 8002d84:	68fb      	ldr	r3, [r7, #12]
 8002d86:	691b      	ldr	r3, [r3, #16]
 8002d88:	f423 42f0 	bic.w	r2, r3, #30720	; 0x7800
 8002d8c:	68bb      	ldr	r3, [r7, #8]
 8002d8e:	f003 031f 	and.w	r3, r3, #31
 8002d92:	6879      	ldr	r1, [r7, #4]
 8002d94:	fa01 f303 	lsl.w	r3, r1, r3
 8002d98:	431a      	orrs	r2, r3
 8002d9a:	68fb      	ldr	r3, [r7, #12]
 8002d9c:	611a      	str	r2, [r3, #16]
}
 8002d9e:	bf00      	nop
 8002da0:	3714      	adds	r7, #20
 8002da2:	46bd      	mov	sp, r7
 8002da4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002da8:	4770      	bx	lr

08002daa <LL_ADC_SetOffsetSignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSignedSaturation)
{
 8002daa:	b480      	push	{r7}
 8002dac:	b087      	sub	sp, #28
 8002dae:	af00      	add	r7, sp, #0
 8002db0:	60f8      	str	r0, [r7, #12]
 8002db2:	60b9      	str	r1, [r7, #8]
 8002db4:	607a      	str	r2, [r7, #4]
    /* Function not available on this instance */
  }
  else
#endif  /* ADC_VER_V5_V90 */
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002db6:	68fb      	ldr	r3, [r7, #12]
 8002db8:	3360      	adds	r3, #96	; 0x60
 8002dba:	461a      	mov	r2, r3
 8002dbc:	68bb      	ldr	r3, [r7, #8]
 8002dbe:	009b      	lsls	r3, r3, #2
 8002dc0:	4413      	add	r3, r2
 8002dc2:	617b      	str	r3, [r7, #20]
    MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
 8002dc4:	697b      	ldr	r3, [r7, #20]
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	431a      	orrs	r2, r3
 8002dd0:	697b      	ldr	r3, [r7, #20]
 8002dd2:	601a      	str	r2, [r3, #0]
  }
}
 8002dd4:	bf00      	nop
 8002dd6:	371c      	adds	r7, #28
 8002dd8:	46bd      	mov	sp, r7
 8002dda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dde:	4770      	bx	lr

08002de0 <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32H7, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to 8 Ms/s)).
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8002de0:	b480      	push	{r7}
 8002de2:	b087      	sub	sp, #28
 8002de4:	af00      	add	r7, sp, #0
 8002de6:	60f8      	str	r0, [r7, #12]
 8002de8:	60b9      	str	r1, [r7, #8]
 8002dea:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8002dec:	68fb      	ldr	r3, [r7, #12]
 8002dee:	3330      	adds	r3, #48	; 0x30
 8002df0:	461a      	mov	r2, r3
 8002df2:	68bb      	ldr	r3, [r7, #8]
 8002df4:	0a1b      	lsrs	r3, r3, #8
 8002df6:	009b      	lsls	r3, r3, #2
 8002df8:	f003 030c 	and.w	r3, r3, #12
 8002dfc:	4413      	add	r3, r2
 8002dfe:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002e00:	697b      	ldr	r3, [r7, #20]
 8002e02:	681a      	ldr	r2, [r3, #0]
 8002e04:	68bb      	ldr	r3, [r7, #8]
 8002e06:	f003 031f 	and.w	r3, r3, #31
 8002e0a:	211f      	movs	r1, #31
 8002e0c:	fa01 f303 	lsl.w	r3, r1, r3
 8002e10:	43db      	mvns	r3, r3
 8002e12:	401a      	ands	r2, r3
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	0e9b      	lsrs	r3, r3, #26
 8002e18:	f003 011f 	and.w	r1, r3, #31
 8002e1c:	68bb      	ldr	r3, [r7, #8]
 8002e1e:	f003 031f 	and.w	r3, r3, #31
 8002e22:	fa01 f303 	lsl.w	r3, r1, r3
 8002e26:	431a      	orrs	r2, r3
 8002e28:	697b      	ldr	r3, [r7, #20]
 8002e2a:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8002e2c:	bf00      	nop
 8002e2e:	371c      	adds	r7, #28
 8002e30:	46bd      	mov	sp, r7
 8002e32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e36:	4770      	bx	lr

08002e38 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_387CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_810CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8002e38:	b480      	push	{r7}
 8002e3a:	b087      	sub	sp, #28
 8002e3c:	af00      	add	r7, sp, #0
 8002e3e:	60f8      	str	r0, [r7, #12]
 8002e40:	60b9      	str	r1, [r7, #8]
 8002e42:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8002e44:	68fb      	ldr	r3, [r7, #12]
 8002e46:	3314      	adds	r3, #20
 8002e48:	461a      	mov	r2, r3
 8002e4a:	68bb      	ldr	r3, [r7, #8]
 8002e4c:	0e5b      	lsrs	r3, r3, #25
 8002e4e:	009b      	lsls	r3, r3, #2
 8002e50:	f003 0304 	and.w	r3, r3, #4
 8002e54:	4413      	add	r3, r2
 8002e56:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002e58:	697b      	ldr	r3, [r7, #20]
 8002e5a:	681a      	ldr	r2, [r3, #0]
 8002e5c:	68bb      	ldr	r3, [r7, #8]
 8002e5e:	0d1b      	lsrs	r3, r3, #20
 8002e60:	f003 031f 	and.w	r3, r3, #31
 8002e64:	2107      	movs	r1, #7
 8002e66:	fa01 f303 	lsl.w	r3, r1, r3
 8002e6a:	43db      	mvns	r3, r3
 8002e6c:	401a      	ands	r2, r3
 8002e6e:	68bb      	ldr	r3, [r7, #8]
 8002e70:	0d1b      	lsrs	r3, r3, #20
 8002e72:	f003 031f 	and.w	r3, r3, #31
 8002e76:	6879      	ldr	r1, [r7, #4]
 8002e78:	fa01 f303 	lsl.w	r3, r1, r3
 8002e7c:	431a      	orrs	r2, r3
 8002e7e:	697b      	ldr	r3, [r7, #20]
 8002e80:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8002e82:	bf00      	nop
 8002e84:	371c      	adds	r7, #28
 8002e86:	46bd      	mov	sp, r7
 8002e88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e8c:	4770      	bx	lr
	...

08002e90 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8002e90:	b480      	push	{r7}
 8002e92:	b085      	sub	sp, #20
 8002e94:	af00      	add	r7, sp, #0
 8002e96:	60f8      	str	r0, [r7, #12]
 8002e98:	60b9      	str	r1, [r7, #8]
 8002e9a:	607a      	str	r2, [r7, #4]
  }
#else  /* ADC_VER_V5_V90 */
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8002e9c:	68fb      	ldr	r3, [r7, #12]
 8002e9e:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 8002ea2:	68bb      	ldr	r3, [r7, #8]
 8002ea4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002ea8:	43db      	mvns	r3, r3
 8002eaa:	401a      	ands	r2, r3
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	f003 0318 	and.w	r3, r3, #24
 8002eb2:	4908      	ldr	r1, [pc, #32]	; (8002ed4 <LL_ADC_SetChannelSingleDiff+0x44>)
 8002eb4:	40d9      	lsrs	r1, r3
 8002eb6:	68bb      	ldr	r3, [r7, #8]
 8002eb8:	400b      	ands	r3, r1
 8002eba:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002ebe:	431a      	orrs	r2, r3
 8002ec0:	68fb      	ldr	r3, [r7, #12]
 8002ec2:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
#endif /* ADC_VER_V5_V90 */
}
 8002ec6:	bf00      	nop
 8002ec8:	3714      	adds	r7, #20
 8002eca:	46bd      	mov	sp, r7
 8002ecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ed0:	4770      	bx	lr
 8002ed2:	bf00      	nop
 8002ed4:	000fffff 	.word	0x000fffff

08002ed8 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8002ed8:	b480      	push	{r7}
 8002eda:	b083      	sub	sp, #12
 8002edc:	af00      	add	r7, sp, #0
 8002ede:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	689a      	ldr	r2, [r3, #8]
 8002ee4:	4b04      	ldr	r3, [pc, #16]	; (8002ef8 <LL_ADC_DisableDeepPowerDown+0x20>)
 8002ee6:	4013      	ands	r3, r2
 8002ee8:	687a      	ldr	r2, [r7, #4]
 8002eea:	6093      	str	r3, [r2, #8]
}
 8002eec:	bf00      	nop
 8002eee:	370c      	adds	r7, #12
 8002ef0:	46bd      	mov	sp, r7
 8002ef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ef6:	4770      	bx	lr
 8002ef8:	5fffffc0 	.word	0x5fffffc0

08002efc <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8002efc:	b480      	push	{r7}
 8002efe:	b083      	sub	sp, #12
 8002f00:	af00      	add	r7, sp, #0
 8002f02:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	689b      	ldr	r3, [r3, #8]
 8002f08:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002f0c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002f10:	d101      	bne.n	8002f16 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8002f12:	2301      	movs	r3, #1
 8002f14:	e000      	b.n	8002f18 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8002f16:	2300      	movs	r3, #0
}
 8002f18:	4618      	mov	r0, r3
 8002f1a:	370c      	adds	r7, #12
 8002f1c:	46bd      	mov	sp, r7
 8002f1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f22:	4770      	bx	lr

08002f24 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8002f24:	b480      	push	{r7}
 8002f26:	b083      	sub	sp, #12
 8002f28:	af00      	add	r7, sp, #0
 8002f2a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	689a      	ldr	r2, [r3, #8]
 8002f30:	4b05      	ldr	r3, [pc, #20]	; (8002f48 <LL_ADC_EnableInternalRegulator+0x24>)
 8002f32:	4013      	ands	r3, r2
 8002f34:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8002f3c:	bf00      	nop
 8002f3e:	370c      	adds	r7, #12
 8002f40:	46bd      	mov	sp, r7
 8002f42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f46:	4770      	bx	lr
 8002f48:	6fffffc0 	.word	0x6fffffc0

08002f4c <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8002f4c:	b480      	push	{r7}
 8002f4e:	b083      	sub	sp, #12
 8002f50:	af00      	add	r7, sp, #0
 8002f52:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	689b      	ldr	r3, [r3, #8]
 8002f58:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002f5c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002f60:	d101      	bne.n	8002f66 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8002f62:	2301      	movs	r3, #1
 8002f64:	e000      	b.n	8002f68 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8002f66:	2300      	movs	r3, #0
}
 8002f68:	4618      	mov	r0, r3
 8002f6a:	370c      	adds	r7, #12
 8002f6c:	46bd      	mov	sp, r7
 8002f6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f72:	4770      	bx	lr

08002f74 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8002f74:	b480      	push	{r7}
 8002f76:	b083      	sub	sp, #12
 8002f78:	af00      	add	r7, sp, #0
 8002f7a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	689b      	ldr	r3, [r3, #8]
 8002f80:	f003 0301 	and.w	r3, r3, #1
 8002f84:	2b01      	cmp	r3, #1
 8002f86:	d101      	bne.n	8002f8c <LL_ADC_IsEnabled+0x18>
 8002f88:	2301      	movs	r3, #1
 8002f8a:	e000      	b.n	8002f8e <LL_ADC_IsEnabled+0x1a>
 8002f8c:	2300      	movs	r3, #0
}
 8002f8e:	4618      	mov	r0, r3
 8002f90:	370c      	adds	r7, #12
 8002f92:	46bd      	mov	sp, r7
 8002f94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f98:	4770      	bx	lr

08002f9a <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8002f9a:	b480      	push	{r7}
 8002f9c:	b083      	sub	sp, #12
 8002f9e:	af00      	add	r7, sp, #0
 8002fa0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	689b      	ldr	r3, [r3, #8]
 8002fa6:	f003 0304 	and.w	r3, r3, #4
 8002faa:	2b04      	cmp	r3, #4
 8002fac:	d101      	bne.n	8002fb2 <LL_ADC_REG_IsConversionOngoing+0x18>
 8002fae:	2301      	movs	r3, #1
 8002fb0:	e000      	b.n	8002fb4 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002fb2:	2300      	movs	r3, #0
}
 8002fb4:	4618      	mov	r0, r3
 8002fb6:	370c      	adds	r7, #12
 8002fb8:	46bd      	mov	sp, r7
 8002fba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fbe:	4770      	bx	lr

08002fc0 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8002fc0:	b480      	push	{r7}
 8002fc2:	b083      	sub	sp, #12
 8002fc4:	af00      	add	r7, sp, #0
 8002fc6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	689b      	ldr	r3, [r3, #8]
 8002fcc:	f003 0308 	and.w	r3, r3, #8
 8002fd0:	2b08      	cmp	r3, #8
 8002fd2:	d101      	bne.n	8002fd8 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8002fd4:	2301      	movs	r3, #1
 8002fd6:	e000      	b.n	8002fda <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8002fd8:	2300      	movs	r3, #0
}
 8002fda:	4618      	mov	r0, r3
 8002fdc:	370c      	adds	r7, #12
 8002fde:	46bd      	mov	sp, r7
 8002fe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fe4:	4770      	bx	lr
	...

08002fe8 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002fe8:	b590      	push	{r4, r7, lr}
 8002fea:	b089      	sub	sp, #36	; 0x24
 8002fec:	af00      	add	r7, sp, #0
 8002fee:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002ff0:	2300      	movs	r3, #0
 8002ff2:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8002ff4:	2300      	movs	r3, #0
 8002ff6:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	2b00      	cmp	r3, #0
 8002ffc:	d101      	bne.n	8003002 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8002ffe:	2301      	movs	r3, #1
 8003000:	e18f      	b.n	8003322 <HAL_ADC_Init+0x33a>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	68db      	ldr	r3, [r3, #12]
 8003006:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800300c:	2b00      	cmp	r3, #0
 800300e:	d109      	bne.n	8003024 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8003010:	6878      	ldr	r0, [r7, #4]
 8003012:	f7fe fbe1 	bl	80017d8 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	2200      	movs	r2, #0
 800301a:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	2200      	movs	r2, #0
 8003020:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	4618      	mov	r0, r3
 800302a:	f7ff ff67 	bl	8002efc <LL_ADC_IsDeepPowerDownEnabled>
 800302e:	4603      	mov	r3, r0
 8003030:	2b00      	cmp	r3, #0
 8003032:	d004      	beq.n	800303e <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	4618      	mov	r0, r3
 800303a:	f7ff ff4d 	bl	8002ed8 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	4618      	mov	r0, r3
 8003044:	f7ff ff82 	bl	8002f4c <LL_ADC_IsInternalRegulatorEnabled>
 8003048:	4603      	mov	r3, r0
 800304a:	2b00      	cmp	r3, #0
 800304c:	d114      	bne.n	8003078 <HAL_ADC_Init+0x90>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	4618      	mov	r0, r3
 8003054:	f7ff ff66 	bl	8002f24 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003058:	4b87      	ldr	r3, [pc, #540]	; (8003278 <HAL_ADC_Init+0x290>)
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	099b      	lsrs	r3, r3, #6
 800305e:	4a87      	ldr	r2, [pc, #540]	; (800327c <HAL_ADC_Init+0x294>)
 8003060:	fba2 2303 	umull	r2, r3, r2, r3
 8003064:	099b      	lsrs	r3, r3, #6
 8003066:	3301      	adds	r3, #1
 8003068:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 800306a:	e002      	b.n	8003072 <HAL_ADC_Init+0x8a>
    {
      wait_loop_index--;
 800306c:	68bb      	ldr	r3, [r7, #8]
 800306e:	3b01      	subs	r3, #1
 8003070:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8003072:	68bb      	ldr	r3, [r7, #8]
 8003074:	2b00      	cmp	r3, #0
 8003076:	d1f9      	bne.n	800306c <HAL_ADC_Init+0x84>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	4618      	mov	r0, r3
 800307e:	f7ff ff65 	bl	8002f4c <LL_ADC_IsInternalRegulatorEnabled>
 8003082:	4603      	mov	r3, r0
 8003084:	2b00      	cmp	r3, #0
 8003086:	d10d      	bne.n	80030a4 <HAL_ADC_Init+0xbc>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800308c:	f043 0210 	orr.w	r2, r3, #16
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003098:	f043 0201 	orr.w	r2, r3, #1
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 80030a0:	2301      	movs	r3, #1
 80030a2:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	4618      	mov	r0, r3
 80030aa:	f7ff ff76 	bl	8002f9a <LL_ADC_REG_IsConversionOngoing>
 80030ae:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80030b4:	f003 0310 	and.w	r3, r3, #16
 80030b8:	2b00      	cmp	r3, #0
 80030ba:	f040 8129 	bne.w	8003310 <HAL_ADC_Init+0x328>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 80030be:	697b      	ldr	r3, [r7, #20]
 80030c0:	2b00      	cmp	r3, #0
 80030c2:	f040 8125 	bne.w	8003310 <HAL_ADC_Init+0x328>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80030ca:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 80030ce:	f043 0202 	orr.w	r2, r3, #2
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	4618      	mov	r0, r3
 80030dc:	f7ff ff4a 	bl	8002f74 <LL_ADC_IsEnabled>
 80030e0:	4603      	mov	r3, r0
 80030e2:	2b00      	cmp	r3, #0
 80030e4:	d136      	bne.n	8003154 <HAL_ADC_Init+0x16c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	4a65      	ldr	r2, [pc, #404]	; (8003280 <HAL_ADC_Init+0x298>)
 80030ec:	4293      	cmp	r3, r2
 80030ee:	d004      	beq.n	80030fa <HAL_ADC_Init+0x112>
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	4a63      	ldr	r2, [pc, #396]	; (8003284 <HAL_ADC_Init+0x29c>)
 80030f6:	4293      	cmp	r3, r2
 80030f8:	d10e      	bne.n	8003118 <HAL_ADC_Init+0x130>
 80030fa:	4861      	ldr	r0, [pc, #388]	; (8003280 <HAL_ADC_Init+0x298>)
 80030fc:	f7ff ff3a 	bl	8002f74 <LL_ADC_IsEnabled>
 8003100:	4604      	mov	r4, r0
 8003102:	4860      	ldr	r0, [pc, #384]	; (8003284 <HAL_ADC_Init+0x29c>)
 8003104:	f7ff ff36 	bl	8002f74 <LL_ADC_IsEnabled>
 8003108:	4603      	mov	r3, r0
 800310a:	4323      	orrs	r3, r4
 800310c:	2b00      	cmp	r3, #0
 800310e:	bf0c      	ite	eq
 8003110:	2301      	moveq	r3, #1
 8003112:	2300      	movne	r3, #0
 8003114:	b2db      	uxtb	r3, r3
 8003116:	e008      	b.n	800312a <HAL_ADC_Init+0x142>
 8003118:	485b      	ldr	r0, [pc, #364]	; (8003288 <HAL_ADC_Init+0x2a0>)
 800311a:	f7ff ff2b 	bl	8002f74 <LL_ADC_IsEnabled>
 800311e:	4603      	mov	r3, r0
 8003120:	2b00      	cmp	r3, #0
 8003122:	bf0c      	ite	eq
 8003124:	2301      	moveq	r3, #1
 8003126:	2300      	movne	r3, #0
 8003128:	b2db      	uxtb	r3, r3
 800312a:	2b00      	cmp	r3, #0
 800312c:	d012      	beq.n	8003154 <HAL_ADC_Init+0x16c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	4a53      	ldr	r2, [pc, #332]	; (8003280 <HAL_ADC_Init+0x298>)
 8003134:	4293      	cmp	r3, r2
 8003136:	d004      	beq.n	8003142 <HAL_ADC_Init+0x15a>
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	4a51      	ldr	r2, [pc, #324]	; (8003284 <HAL_ADC_Init+0x29c>)
 800313e:	4293      	cmp	r3, r2
 8003140:	d101      	bne.n	8003146 <HAL_ADC_Init+0x15e>
 8003142:	4a52      	ldr	r2, [pc, #328]	; (800328c <HAL_ADC_Init+0x2a4>)
 8003144:	e000      	b.n	8003148 <HAL_ADC_Init+0x160>
 8003146:	4a52      	ldr	r2, [pc, #328]	; (8003290 <HAL_ADC_Init+0x2a8>)
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	685b      	ldr	r3, [r3, #4]
 800314c:	4619      	mov	r1, r3
 800314e:	4610      	mov	r0, r2
 8003150:	f7ff fdbe 	bl	8002cd0 <LL_ADC_SetCommonClock>
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
    }

#else

    if ((HAL_GetREVID() > REV_ID_Y) && (ADC_RESOLUTION_8B == hadc->Init.Resolution))
 8003154:	f7ff fd86 	bl	8002c64 <HAL_GetREVID>
 8003158:	4603      	mov	r3, r0
 800315a:	f241 0203 	movw	r2, #4099	; 0x1003
 800315e:	4293      	cmp	r3, r2
 8003160:	d914      	bls.n	800318c <HAL_ADC_Init+0x1a4>
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	689b      	ldr	r3, [r3, #8]
 8003166:	2b10      	cmp	r3, #16
 8003168:	d110      	bne.n	800318c <HAL_ADC_Init+0x1a4>
    {
      /* for STM32H7 silicon rev.B and above , ADC_CFGR_RES value for 8bits resolution is : b111 */
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	7d5b      	ldrb	r3, [r3, #21]
 800316e:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	6b1b      	ldr	r3, [r3, #48]	; 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8003174:	431a      	orrs	r2, r3
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 800317a:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	7f1b      	ldrb	r3, [r3, #28]
 8003180:	041b      	lsls	r3, r3, #16
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 8003182:	4313      	orrs	r3, r2
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8003184:	f043 030c 	orr.w	r3, r3, #12
 8003188:	61bb      	str	r3, [r7, #24]
 800318a:	e00d      	b.n	80031a8 <HAL_ADC_Init+0x1c0>
    }
    else
    {

      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	7d5b      	ldrb	r3, [r3, #21]
 8003190:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	6b1b      	ldr	r3, [r3, #48]	; 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8003196:	431a      	orrs	r2, r3
                  hadc->Init.Resolution                                                 |
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 800319c:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	7f1b      	ldrb	r3, [r3, #28]
 80031a2:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 80031a4:	4313      	orrs	r3, r2
 80031a6:	61bb      	str	r3, [r7, #24]
    }

#endif /* ADC_VER_V5_3 */

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	7f1b      	ldrb	r3, [r3, #28]
 80031ac:	2b01      	cmp	r3, #1
 80031ae:	d106      	bne.n	80031be <HAL_ADC_Init+0x1d6>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	6a1b      	ldr	r3, [r3, #32]
 80031b4:	3b01      	subs	r3, #1
 80031b6:	045b      	lsls	r3, r3, #17
 80031b8:	69ba      	ldr	r2, [r7, #24]
 80031ba:	4313      	orrs	r3, r2
 80031bc:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031c2:	2b00      	cmp	r3, #0
 80031c4:	d009      	beq.n	80031da <HAL_ADC_Init+0x1f2>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031ca:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80031d2:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80031d4:	69ba      	ldr	r2, [r7, #24]
 80031d6:	4313      	orrs	r3, r2
 80031d8:	61bb      	str	r3, [r7, #24]
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
    }
#else
    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	68da      	ldr	r2, [r3, #12]
 80031e0:	4b2c      	ldr	r3, [pc, #176]	; (8003294 <HAL_ADC_Init+0x2ac>)
 80031e2:	4013      	ands	r3, r2
 80031e4:	687a      	ldr	r2, [r7, #4]
 80031e6:	6812      	ldr	r2, [r2, #0]
 80031e8:	69b9      	ldr	r1, [r7, #24]
 80031ea:	430b      	orrs	r3, r1
 80031ec:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - Conversion data management      Init.ConversionDataManagement       */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	4618      	mov	r0, r3
 80031f4:	f7ff fed1 	bl	8002f9a <LL_ADC_REG_IsConversionOngoing>
 80031f8:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	4618      	mov	r0, r3
 8003200:	f7ff fede 	bl	8002fc0 <LL_ADC_INJ_IsConversionOngoing>
 8003204:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8003206:	693b      	ldr	r3, [r7, #16]
 8003208:	2b00      	cmp	r3, #0
 800320a:	d15f      	bne.n	80032cc <HAL_ADC_Init+0x2e4>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800320c:	68fb      	ldr	r3, [r7, #12]
 800320e:	2b00      	cmp	r3, #0
 8003210:	d15c      	bne.n	80032cc <HAL_ADC_Init+0x2e4>
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
                    ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
      }
#else
      tmpCFGR = (
                  ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	7d1b      	ldrb	r3, [r3, #20]
 8003216:	039a      	lsls	r2, r3, #14
                  ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
      tmpCFGR = (
 800321c:	4313      	orrs	r3, r2
 800321e:	61bb      	str	r3, [r7, #24]
#endif

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	68da      	ldr	r2, [r3, #12]
 8003226:	4b1c      	ldr	r3, [pc, #112]	; (8003298 <HAL_ADC_Init+0x2b0>)
 8003228:	4013      	ands	r3, r2
 800322a:	687a      	ldr	r2, [r7, #4]
 800322c:	6812      	ldr	r2, [r2, #0]
 800322e:	69b9      	ldr	r1, [r7, #24]
 8003230:	430b      	orrs	r3, r1
 8003232:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800323a:	2b01      	cmp	r3, #1
 800323c:	d130      	bne.n	80032a0 <HAL_ADC_Init+0x2b8>
#endif
        assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
        assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
        assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

        if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003242:	2b00      	cmp	r3, #0
        /*  - Oversampling Ratio                                               */
        /*  - Right bit shift                                                  */
        /*  - Left bit shift                                                   */
        /*  - Triggered mode                                                   */
        /*  - Oversampling mode (continued/resumed)                            */
        MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	691a      	ldr	r2, [r3, #16]
 800324a:	4b14      	ldr	r3, [pc, #80]	; (800329c <HAL_ADC_Init+0x2b4>)
 800324c:	4013      	ands	r3, r2
 800324e:	687a      	ldr	r2, [r7, #4]
 8003250:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8003252:	3a01      	subs	r2, #1
 8003254:	0411      	lsls	r1, r2, #16
 8003256:	687a      	ldr	r2, [r7, #4]
 8003258:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800325a:	4311      	orrs	r1, r2
 800325c:	687a      	ldr	r2, [r7, #4]
 800325e:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8003260:	4311      	orrs	r1, r2
 8003262:	687a      	ldr	r2, [r7, #4]
 8003264:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8003266:	430a      	orrs	r2, r1
 8003268:	431a      	orrs	r2, r3
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	f042 0201 	orr.w	r2, r2, #1
 8003272:	611a      	str	r2, [r3, #16]
 8003274:	e01c      	b.n	80032b0 <HAL_ADC_Init+0x2c8>
 8003276:	bf00      	nop
 8003278:	24000008 	.word	0x24000008
 800327c:	053e2d63 	.word	0x053e2d63
 8003280:	40022000 	.word	0x40022000
 8003284:	40022100 	.word	0x40022100
 8003288:	58026000 	.word	0x58026000
 800328c:	40022300 	.word	0x40022300
 8003290:	58026300 	.word	0x58026300
 8003294:	fff0c003 	.word	0xfff0c003
 8003298:	ffffbffc 	.word	0xffffbffc
 800329c:	fc00f81e 	.word	0xfc00f81e

      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	691a      	ldr	r2, [r3, #16]
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	f022 0201 	bic.w	r2, r2, #1
 80032ae:	611a      	str	r2, [r3, #16]
      }

      /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	691b      	ldr	r3, [r3, #16]
 80032b6:	f023 4170 	bic.w	r1, r3, #4026531840	; 0xf0000000
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	430a      	orrs	r2, r1
 80032c4:	611a      	str	r2, [r3, #16]
        /* Configure the BOOST Mode */
        ADC_ConfigureBoostMode(hadc);
      }
#else
      /* Configure the BOOST Mode */
      ADC_ConfigureBoostMode(hadc);
 80032c6:	6878      	ldr	r0, [r7, #4]
 80032c8:	f000 fb80 	bl	80039cc <ADC_ConfigureBoostMode>
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	68db      	ldr	r3, [r3, #12]
 80032d0:	2b01      	cmp	r3, #1
 80032d2:	d10c      	bne.n	80032ee <HAL_ADC_Init+0x306>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032da:	f023 010f 	bic.w	r1, r3, #15
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	699b      	ldr	r3, [r3, #24]
 80032e2:	1e5a      	subs	r2, r3, #1
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	430a      	orrs	r2, r1
 80032ea:	631a      	str	r2, [r3, #48]	; 0x30
 80032ec:	e007      	b.n	80032fe <HAL_ADC_Init+0x316>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	f022 020f 	bic.w	r2, r2, #15
 80032fc:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003302:	f023 0303 	bic.w	r3, r3, #3
 8003306:	f043 0201 	orr.w	r2, r3, #1
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	655a      	str	r2, [r3, #84]	; 0x54
 800330e:	e007      	b.n	8003320 <HAL_ADC_Init+0x338>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003314:	f043 0210 	orr.w	r2, r3, #16
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 800331c:	2301      	movs	r3, #1
 800331e:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8003320:	7ffb      	ldrb	r3, [r7, #31]
}
 8003322:	4618      	mov	r0, r3
 8003324:	3724      	adds	r7, #36	; 0x24
 8003326:	46bd      	mov	sp, r7
 8003328:	bd90      	pop	{r4, r7, pc}
 800332a:	bf00      	nop

0800332c <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 800332c:	b590      	push	{r4, r7, lr}
 800332e:	b0a1      	sub	sp, #132	; 0x84
 8003330:	af00      	add	r7, sp, #0
 8003332:	6078      	str	r0, [r7, #4]
 8003334:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003336:	2300      	movs	r3, #0
 8003338:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 800333c:	2300      	movs	r3, #0
 800333e:	60bb      	str	r3, [r7, #8]
  /* if ROVSE is set, the value of the OFFSETy_EN bit in ADCx_OFRy register is
     ignored (considered as reset) */
  assert_param(!((sConfig->OffsetNumber != ADC_OFFSET_NONE) && (hadc->Init.OversamplingMode == ENABLE)));

  /* Verification of channel number */
  if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8003340:	683b      	ldr	r3, [r7, #0]
 8003342:	68db      	ldr	r3, [r3, #12]
 8003344:	4a9d      	ldr	r2, [pc, #628]	; (80035bc <HAL_ADC_ConfigChannel+0x290>)
 8003346:	4293      	cmp	r3, r2
    }
#endif
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800334e:	2b01      	cmp	r3, #1
 8003350:	d101      	bne.n	8003356 <HAL_ADC_ConfigChannel+0x2a>
 8003352:	2302      	movs	r3, #2
 8003354:	e321      	b.n	800399a <HAL_ADC_ConfigChannel+0x66e>
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	2201      	movs	r2, #1
 800335a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	4618      	mov	r0, r3
 8003364:	f7ff fe19 	bl	8002f9a <LL_ADC_REG_IsConversionOngoing>
 8003368:	4603      	mov	r3, r0
 800336a:	2b00      	cmp	r3, #0
 800336c:	f040 8306 	bne.w	800397c <HAL_ADC_ConfigChannel+0x650>
      /* ADC channels preselection */
      hadc->Instance->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
    }
#else
    /* ADC channels preselection */
    hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 8003370:	683b      	ldr	r3, [r7, #0]
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003378:	2b00      	cmp	r3, #0
 800337a:	d108      	bne.n	800338e <HAL_ADC_ConfigChannel+0x62>
 800337c:	683b      	ldr	r3, [r7, #0]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	0e9b      	lsrs	r3, r3, #26
 8003382:	f003 031f 	and.w	r3, r3, #31
 8003386:	2201      	movs	r2, #1
 8003388:	fa02 f303 	lsl.w	r3, r2, r3
 800338c:	e016      	b.n	80033bc <HAL_ADC_ConfigChannel+0x90>
 800338e:	683b      	ldr	r3, [r7, #0]
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	667b      	str	r3, [r7, #100]	; 0x64
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003394:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003396:	fa93 f3a3 	rbit	r3, r3
 800339a:	663b      	str	r3, [r7, #96]	; 0x60
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800339c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800339e:	66bb      	str	r3, [r7, #104]	; 0x68
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 80033a0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80033a2:	2b00      	cmp	r3, #0
 80033a4:	d101      	bne.n	80033aa <HAL_ADC_ConfigChannel+0x7e>
  {
    return 32U;
 80033a6:	2320      	movs	r3, #32
 80033a8:	e003      	b.n	80033b2 <HAL_ADC_ConfigChannel+0x86>
  }
  return __builtin_clz(value);
 80033aa:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80033ac:	fab3 f383 	clz	r3, r3
 80033b0:	b2db      	uxtb	r3, r3
 80033b2:	f003 031f 	and.w	r3, r3, #31
 80033b6:	2201      	movs	r2, #1
 80033b8:	fa02 f303 	lsl.w	r3, r2, r3
 80033bc:	687a      	ldr	r2, [r7, #4]
 80033be:	6812      	ldr	r2, [r2, #0]
 80033c0:	69d1      	ldr	r1, [r2, #28]
 80033c2:	687a      	ldr	r2, [r7, #4]
 80033c4:	6812      	ldr	r2, [r2, #0]
 80033c6:	430b      	orrs	r3, r1
 80033c8:	61d3      	str	r3, [r2, #28]
#endif /* ADC_VER_V5_V90 */

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	6818      	ldr	r0, [r3, #0]
 80033ce:	683b      	ldr	r3, [r7, #0]
 80033d0:	6859      	ldr	r1, [r3, #4]
 80033d2:	683b      	ldr	r3, [r7, #0]
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	461a      	mov	r2, r3
 80033d8:	f7ff fd02 	bl	8002de0 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	4618      	mov	r0, r3
 80033e2:	f7ff fdda 	bl	8002f9a <LL_ADC_REG_IsConversionOngoing>
 80033e6:	67b8      	str	r0, [r7, #120]	; 0x78
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	4618      	mov	r0, r3
 80033ee:	f7ff fde7 	bl	8002fc0 <LL_ADC_INJ_IsConversionOngoing>
 80033f2:	6778      	str	r0, [r7, #116]	; 0x74
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80033f4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80033f6:	2b00      	cmp	r3, #0
 80033f8:	f040 80b3 	bne.w	8003562 <HAL_ADC_ConfigChannel+0x236>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80033fc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80033fe:	2b00      	cmp	r3, #0
 8003400:	f040 80af 	bne.w	8003562 <HAL_ADC_ConfigChannel+0x236>
       )
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	6818      	ldr	r0, [r3, #0]
 8003408:	683b      	ldr	r3, [r7, #0]
 800340a:	6819      	ldr	r1, [r3, #0]
 800340c:	683b      	ldr	r3, [r7, #0]
 800340e:	689b      	ldr	r3, [r3, #8]
 8003410:	461a      	mov	r2, r3
 8003412:	f7ff fd11 	bl	8002e38 <LL_ADC_SetChannelSamplingTime>
        tmpOffsetShifted = ADC3_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
      }
      else
#endif /* ADC_VER_V5_V90 */
      {
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8003416:	4b6a      	ldr	r3, [pc, #424]	; (80035c0 <HAL_ADC_ConfigChannel+0x294>)
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800341e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003422:	d10b      	bne.n	800343c <HAL_ADC_ConfigChannel+0x110>
 8003424:	683b      	ldr	r3, [r7, #0]
 8003426:	695a      	ldr	r2, [r3, #20]
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	68db      	ldr	r3, [r3, #12]
 800342e:	089b      	lsrs	r3, r3, #2
 8003430:	f003 0307 	and.w	r3, r3, #7
 8003434:	005b      	lsls	r3, r3, #1
 8003436:	fa02 f303 	lsl.w	r3, r2, r3
 800343a:	e01d      	b.n	8003478 <HAL_ADC_ConfigChannel+0x14c>
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	68db      	ldr	r3, [r3, #12]
 8003442:	f003 0310 	and.w	r3, r3, #16
 8003446:	2b00      	cmp	r3, #0
 8003448:	d10b      	bne.n	8003462 <HAL_ADC_ConfigChannel+0x136>
 800344a:	683b      	ldr	r3, [r7, #0]
 800344c:	695a      	ldr	r2, [r3, #20]
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	68db      	ldr	r3, [r3, #12]
 8003454:	089b      	lsrs	r3, r3, #2
 8003456:	f003 0307 	and.w	r3, r3, #7
 800345a:	005b      	lsls	r3, r3, #1
 800345c:	fa02 f303 	lsl.w	r3, r2, r3
 8003460:	e00a      	b.n	8003478 <HAL_ADC_ConfigChannel+0x14c>
 8003462:	683b      	ldr	r3, [r7, #0]
 8003464:	695a      	ldr	r2, [r3, #20]
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	68db      	ldr	r3, [r3, #12]
 800346c:	089b      	lsrs	r3, r3, #2
 800346e:	f003 0304 	and.w	r3, r3, #4
 8003472:	005b      	lsls	r3, r3, #1
 8003474:	fa02 f303 	lsl.w	r3, r2, r3
 8003478:	673b      	str	r3, [r7, #112]	; 0x70
      }
      
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 800347a:	683b      	ldr	r3, [r7, #0]
 800347c:	691b      	ldr	r3, [r3, #16]
 800347e:	2b04      	cmp	r3, #4
 8003480:	d027      	beq.n	80034d2 <HAL_ADC_ConfigChannel+0x1a6>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	6818      	ldr	r0, [r3, #0]
 8003486:	683b      	ldr	r3, [r7, #0]
 8003488:	6919      	ldr	r1, [r3, #16]
 800348a:	683b      	ldr	r3, [r7, #0]
 800348c:	681a      	ldr	r2, [r3, #0]
 800348e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003490:	f7ff fc52 	bl	8002d38 <LL_ADC_SetOffset>
        else
#endif /* ADC_VER_V5_V90 */
        {
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSignedSaturation));
          /* Set ADC selected offset signed saturation */
          LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	6818      	ldr	r0, [r3, #0]
 8003498:	683b      	ldr	r3, [r7, #0]
 800349a:	6919      	ldr	r1, [r3, #16]
 800349c:	683b      	ldr	r3, [r7, #0]
 800349e:	7e5b      	ldrb	r3, [r3, #25]
 80034a0:	2b01      	cmp	r3, #1
 80034a2:	d102      	bne.n	80034aa <HAL_ADC_ConfigChannel+0x17e>
 80034a4:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80034a8:	e000      	b.n	80034ac <HAL_ADC_ConfigChannel+0x180>
 80034aa:	2300      	movs	r3, #0
 80034ac:	461a      	mov	r2, r3
 80034ae:	f7ff fc7c 	bl	8002daa <LL_ADC_SetOffsetSignedSaturation>

          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetRightShift));
          /* Set ADC selected offset right shift */
          LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	6818      	ldr	r0, [r3, #0]
 80034b6:	683b      	ldr	r3, [r7, #0]
 80034b8:	6919      	ldr	r1, [r3, #16]
 80034ba:	683b      	ldr	r3, [r7, #0]
 80034bc:	7e1b      	ldrb	r3, [r3, #24]
 80034be:	2b01      	cmp	r3, #1
 80034c0:	d102      	bne.n	80034c8 <HAL_ADC_ConfigChannel+0x19c>
 80034c2:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80034c6:	e000      	b.n	80034ca <HAL_ADC_ConfigChannel+0x19e>
 80034c8:	2300      	movs	r3, #0
 80034ca:	461a      	mov	r2, r3
 80034cc:	f7ff fc54 	bl	8002d78 <LL_ADC_SetDataRightShift>
 80034d0:	e047      	b.n	8003562 <HAL_ADC_ConfigChannel+0x236>
          }
        }
        else
#endif /* ADC_VER_V5_V90 */
        {
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80034d8:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80034dc:	683b      	ldr	r3, [r7, #0]
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	069b      	lsls	r3, r3, #26
 80034e2:	429a      	cmp	r2, r3
 80034e4:	d107      	bne.n	80034f6 <HAL_ADC_ConfigChannel+0x1ca>
          {
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80034f4:	661a      	str	r2, [r3, #96]	; 0x60
          }
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80034fc:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003500:	683b      	ldr	r3, [r7, #0]
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	069b      	lsls	r3, r3, #26
 8003506:	429a      	cmp	r2, r3
 8003508:	d107      	bne.n	800351a <HAL_ADC_ConfigChannel+0x1ee>
          {
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8003518:	665a      	str	r2, [r3, #100]	; 0x64
          }
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003520:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003524:	683b      	ldr	r3, [r7, #0]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	069b      	lsls	r3, r3, #26
 800352a:	429a      	cmp	r2, r3
 800352c:	d107      	bne.n	800353e <HAL_ADC_ConfigChannel+0x212>
          {
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 800353c:	669a      	str	r2, [r3, #104]	; 0x68
          }
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003544:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003548:	683b      	ldr	r3, [r7, #0]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	069b      	lsls	r3, r3, #26
 800354e:	429a      	cmp	r2, r3
 8003550:	d107      	bne.n	8003562 <HAL_ADC_ConfigChannel+0x236>
          {
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8003560:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	4618      	mov	r0, r3
 8003568:	f7ff fd04 	bl	8002f74 <LL_ADC_IsEnabled>
 800356c:	4603      	mov	r3, r0
 800356e:	2b00      	cmp	r3, #0
 8003570:	f040 820d 	bne.w	800398e <HAL_ADC_ConfigChannel+0x662>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	6818      	ldr	r0, [r3, #0]
 8003578:	683b      	ldr	r3, [r7, #0]
 800357a:	6819      	ldr	r1, [r3, #0]
 800357c:	683b      	ldr	r3, [r7, #0]
 800357e:	68db      	ldr	r3, [r3, #12]
 8003580:	461a      	mov	r2, r3
 8003582:	f7ff fc85 	bl	8002e90 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8003586:	683b      	ldr	r3, [r7, #0]
 8003588:	68db      	ldr	r3, [r3, #12]
 800358a:	4a0c      	ldr	r2, [pc, #48]	; (80035bc <HAL_ADC_ConfigChannel+0x290>)
 800358c:	4293      	cmp	r3, r2
 800358e:	f040 8133 	bne.w	80037f8 <HAL_ADC_ConfigChannel+0x4cc>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8003596:	683b      	ldr	r3, [r7, #0]
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800359e:	2b00      	cmp	r3, #0
 80035a0:	d110      	bne.n	80035c4 <HAL_ADC_ConfigChannel+0x298>
 80035a2:	683b      	ldr	r3, [r7, #0]
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	0e9b      	lsrs	r3, r3, #26
 80035a8:	3301      	adds	r3, #1
 80035aa:	f003 031f 	and.w	r3, r3, #31
 80035ae:	2b09      	cmp	r3, #9
 80035b0:	bf94      	ite	ls
 80035b2:	2301      	movls	r3, #1
 80035b4:	2300      	movhi	r3, #0
 80035b6:	b2db      	uxtb	r3, r3
 80035b8:	e01e      	b.n	80035f8 <HAL_ADC_ConfigChannel+0x2cc>
 80035ba:	bf00      	nop
 80035bc:	47ff0000 	.word	0x47ff0000
 80035c0:	5c001000 	.word	0x5c001000
 80035c4:	683b      	ldr	r3, [r7, #0]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	65bb      	str	r3, [r7, #88]	; 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80035ca:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80035cc:	fa93 f3a3 	rbit	r3, r3
 80035d0:	657b      	str	r3, [r7, #84]	; 0x54
  return result;
 80035d2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80035d4:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (value == 0U)
 80035d6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80035d8:	2b00      	cmp	r3, #0
 80035da:	d101      	bne.n	80035e0 <HAL_ADC_ConfigChannel+0x2b4>
    return 32U;
 80035dc:	2320      	movs	r3, #32
 80035de:	e003      	b.n	80035e8 <HAL_ADC_ConfigChannel+0x2bc>
  return __builtin_clz(value);
 80035e0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80035e2:	fab3 f383 	clz	r3, r3
 80035e6:	b2db      	uxtb	r3, r3
 80035e8:	3301      	adds	r3, #1
 80035ea:	f003 031f 	and.w	r3, r3, #31
 80035ee:	2b09      	cmp	r3, #9
 80035f0:	bf94      	ite	ls
 80035f2:	2301      	movls	r3, #1
 80035f4:	2300      	movhi	r3, #0
 80035f6:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80035f8:	2b00      	cmp	r3, #0
 80035fa:	d079      	beq.n	80036f0 <HAL_ADC_ConfigChannel+0x3c4>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80035fc:	683b      	ldr	r3, [r7, #0]
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003604:	2b00      	cmp	r3, #0
 8003606:	d107      	bne.n	8003618 <HAL_ADC_ConfigChannel+0x2ec>
 8003608:	683b      	ldr	r3, [r7, #0]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	0e9b      	lsrs	r3, r3, #26
 800360e:	3301      	adds	r3, #1
 8003610:	069b      	lsls	r3, r3, #26
 8003612:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003616:	e015      	b.n	8003644 <HAL_ADC_ConfigChannel+0x318>
 8003618:	683b      	ldr	r3, [r7, #0]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800361e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003620:	fa93 f3a3 	rbit	r3, r3
 8003624:	64bb      	str	r3, [r7, #72]	; 0x48
  return result;
 8003626:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003628:	653b      	str	r3, [r7, #80]	; 0x50
  if (value == 0U)
 800362a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800362c:	2b00      	cmp	r3, #0
 800362e:	d101      	bne.n	8003634 <HAL_ADC_ConfigChannel+0x308>
    return 32U;
 8003630:	2320      	movs	r3, #32
 8003632:	e003      	b.n	800363c <HAL_ADC_ConfigChannel+0x310>
  return __builtin_clz(value);
 8003634:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003636:	fab3 f383 	clz	r3, r3
 800363a:	b2db      	uxtb	r3, r3
 800363c:	3301      	adds	r3, #1
 800363e:	069b      	lsls	r3, r3, #26
 8003640:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003644:	683b      	ldr	r3, [r7, #0]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800364c:	2b00      	cmp	r3, #0
 800364e:	d109      	bne.n	8003664 <HAL_ADC_ConfigChannel+0x338>
 8003650:	683b      	ldr	r3, [r7, #0]
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	0e9b      	lsrs	r3, r3, #26
 8003656:	3301      	adds	r3, #1
 8003658:	f003 031f 	and.w	r3, r3, #31
 800365c:	2101      	movs	r1, #1
 800365e:	fa01 f303 	lsl.w	r3, r1, r3
 8003662:	e017      	b.n	8003694 <HAL_ADC_ConfigChannel+0x368>
 8003664:	683b      	ldr	r3, [r7, #0]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800366a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800366c:	fa93 f3a3 	rbit	r3, r3
 8003670:	63fb      	str	r3, [r7, #60]	; 0x3c
  return result;
 8003672:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003674:	647b      	str	r3, [r7, #68]	; 0x44
  if (value == 0U)
 8003676:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003678:	2b00      	cmp	r3, #0
 800367a:	d101      	bne.n	8003680 <HAL_ADC_ConfigChannel+0x354>
    return 32U;
 800367c:	2320      	movs	r3, #32
 800367e:	e003      	b.n	8003688 <HAL_ADC_ConfigChannel+0x35c>
  return __builtin_clz(value);
 8003680:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003682:	fab3 f383 	clz	r3, r3
 8003686:	b2db      	uxtb	r3, r3
 8003688:	3301      	adds	r3, #1
 800368a:	f003 031f 	and.w	r3, r3, #31
 800368e:	2101      	movs	r1, #1
 8003690:	fa01 f303 	lsl.w	r3, r1, r3
 8003694:	ea42 0103 	orr.w	r1, r2, r3
 8003698:	683b      	ldr	r3, [r7, #0]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80036a0:	2b00      	cmp	r3, #0
 80036a2:	d10a      	bne.n	80036ba <HAL_ADC_ConfigChannel+0x38e>
 80036a4:	683b      	ldr	r3, [r7, #0]
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	0e9b      	lsrs	r3, r3, #26
 80036aa:	3301      	adds	r3, #1
 80036ac:	f003 021f 	and.w	r2, r3, #31
 80036b0:	4613      	mov	r3, r2
 80036b2:	005b      	lsls	r3, r3, #1
 80036b4:	4413      	add	r3, r2
 80036b6:	051b      	lsls	r3, r3, #20
 80036b8:	e018      	b.n	80036ec <HAL_ADC_ConfigChannel+0x3c0>
 80036ba:	683b      	ldr	r3, [r7, #0]
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80036c0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80036c2:	fa93 f3a3 	rbit	r3, r3
 80036c6:	633b      	str	r3, [r7, #48]	; 0x30
  return result;
 80036c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80036ca:	63bb      	str	r3, [r7, #56]	; 0x38
  if (value == 0U)
 80036cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80036ce:	2b00      	cmp	r3, #0
 80036d0:	d101      	bne.n	80036d6 <HAL_ADC_ConfigChannel+0x3aa>
    return 32U;
 80036d2:	2320      	movs	r3, #32
 80036d4:	e003      	b.n	80036de <HAL_ADC_ConfigChannel+0x3b2>
  return __builtin_clz(value);
 80036d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80036d8:	fab3 f383 	clz	r3, r3
 80036dc:	b2db      	uxtb	r3, r3
 80036de:	3301      	adds	r3, #1
 80036e0:	f003 021f 	and.w	r2, r3, #31
 80036e4:	4613      	mov	r3, r2
 80036e6:	005b      	lsls	r3, r3, #1
 80036e8:	4413      	add	r3, r2
 80036ea:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80036ec:	430b      	orrs	r3, r1
 80036ee:	e07e      	b.n	80037ee <HAL_ADC_ConfigChannel+0x4c2>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80036f0:	683b      	ldr	r3, [r7, #0]
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80036f8:	2b00      	cmp	r3, #0
 80036fa:	d107      	bne.n	800370c <HAL_ADC_ConfigChannel+0x3e0>
 80036fc:	683b      	ldr	r3, [r7, #0]
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	0e9b      	lsrs	r3, r3, #26
 8003702:	3301      	adds	r3, #1
 8003704:	069b      	lsls	r3, r3, #26
 8003706:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800370a:	e015      	b.n	8003738 <HAL_ADC_ConfigChannel+0x40c>
 800370c:	683b      	ldr	r3, [r7, #0]
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003712:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003714:	fa93 f3a3 	rbit	r3, r3
 8003718:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 800371a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800371c:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (value == 0U)
 800371e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003720:	2b00      	cmp	r3, #0
 8003722:	d101      	bne.n	8003728 <HAL_ADC_ConfigChannel+0x3fc>
    return 32U;
 8003724:	2320      	movs	r3, #32
 8003726:	e003      	b.n	8003730 <HAL_ADC_ConfigChannel+0x404>
  return __builtin_clz(value);
 8003728:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800372a:	fab3 f383 	clz	r3, r3
 800372e:	b2db      	uxtb	r3, r3
 8003730:	3301      	adds	r3, #1
 8003732:	069b      	lsls	r3, r3, #26
 8003734:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003738:	683b      	ldr	r3, [r7, #0]
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003740:	2b00      	cmp	r3, #0
 8003742:	d109      	bne.n	8003758 <HAL_ADC_ConfigChannel+0x42c>
 8003744:	683b      	ldr	r3, [r7, #0]
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	0e9b      	lsrs	r3, r3, #26
 800374a:	3301      	adds	r3, #1
 800374c:	f003 031f 	and.w	r3, r3, #31
 8003750:	2101      	movs	r1, #1
 8003752:	fa01 f303 	lsl.w	r3, r1, r3
 8003756:	e017      	b.n	8003788 <HAL_ADC_ConfigChannel+0x45c>
 8003758:	683b      	ldr	r3, [r7, #0]
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800375e:	69fb      	ldr	r3, [r7, #28]
 8003760:	fa93 f3a3 	rbit	r3, r3
 8003764:	61bb      	str	r3, [r7, #24]
  return result;
 8003766:	69bb      	ldr	r3, [r7, #24]
 8003768:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 800376a:	6a3b      	ldr	r3, [r7, #32]
 800376c:	2b00      	cmp	r3, #0
 800376e:	d101      	bne.n	8003774 <HAL_ADC_ConfigChannel+0x448>
    return 32U;
 8003770:	2320      	movs	r3, #32
 8003772:	e003      	b.n	800377c <HAL_ADC_ConfigChannel+0x450>
  return __builtin_clz(value);
 8003774:	6a3b      	ldr	r3, [r7, #32]
 8003776:	fab3 f383 	clz	r3, r3
 800377a:	b2db      	uxtb	r3, r3
 800377c:	3301      	adds	r3, #1
 800377e:	f003 031f 	and.w	r3, r3, #31
 8003782:	2101      	movs	r1, #1
 8003784:	fa01 f303 	lsl.w	r3, r1, r3
 8003788:	ea42 0103 	orr.w	r1, r2, r3
 800378c:	683b      	ldr	r3, [r7, #0]
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003794:	2b00      	cmp	r3, #0
 8003796:	d10d      	bne.n	80037b4 <HAL_ADC_ConfigChannel+0x488>
 8003798:	683b      	ldr	r3, [r7, #0]
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	0e9b      	lsrs	r3, r3, #26
 800379e:	3301      	adds	r3, #1
 80037a0:	f003 021f 	and.w	r2, r3, #31
 80037a4:	4613      	mov	r3, r2
 80037a6:	005b      	lsls	r3, r3, #1
 80037a8:	4413      	add	r3, r2
 80037aa:	3b1e      	subs	r3, #30
 80037ac:	051b      	lsls	r3, r3, #20
 80037ae:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80037b2:	e01b      	b.n	80037ec <HAL_ADC_ConfigChannel+0x4c0>
 80037b4:	683b      	ldr	r3, [r7, #0]
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80037ba:	693b      	ldr	r3, [r7, #16]
 80037bc:	fa93 f3a3 	rbit	r3, r3
 80037c0:	60fb      	str	r3, [r7, #12]
  return result;
 80037c2:	68fb      	ldr	r3, [r7, #12]
 80037c4:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 80037c6:	697b      	ldr	r3, [r7, #20]
 80037c8:	2b00      	cmp	r3, #0
 80037ca:	d101      	bne.n	80037d0 <HAL_ADC_ConfigChannel+0x4a4>
    return 32U;
 80037cc:	2320      	movs	r3, #32
 80037ce:	e003      	b.n	80037d8 <HAL_ADC_ConfigChannel+0x4ac>
  return __builtin_clz(value);
 80037d0:	697b      	ldr	r3, [r7, #20]
 80037d2:	fab3 f383 	clz	r3, r3
 80037d6:	b2db      	uxtb	r3, r3
 80037d8:	3301      	adds	r3, #1
 80037da:	f003 021f 	and.w	r2, r3, #31
 80037de:	4613      	mov	r3, r2
 80037e0:	005b      	lsls	r3, r3, #1
 80037e2:	4413      	add	r3, r2
 80037e4:	3b1e      	subs	r3, #30
 80037e6:	051b      	lsls	r3, r3, #20
 80037e8:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80037ec:	430b      	orrs	r3, r1
 80037ee:	683a      	ldr	r2, [r7, #0]
 80037f0:	6892      	ldr	r2, [r2, #8]
 80037f2:	4619      	mov	r1, r3
 80037f4:	f7ff fb20 	bl	8002e38 <LL_ADC_SetChannelSamplingTime>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 80037f8:	683b      	ldr	r3, [r7, #0]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	2b00      	cmp	r3, #0
 80037fe:	f280 80c6 	bge.w	800398e <HAL_ADC_ConfigChannel+0x662>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	4a67      	ldr	r2, [pc, #412]	; (80039a4 <HAL_ADC_ConfigChannel+0x678>)
 8003808:	4293      	cmp	r3, r2
 800380a:	d004      	beq.n	8003816 <HAL_ADC_ConfigChannel+0x4ea>
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	4a65      	ldr	r2, [pc, #404]	; (80039a8 <HAL_ADC_ConfigChannel+0x67c>)
 8003812:	4293      	cmp	r3, r2
 8003814:	d101      	bne.n	800381a <HAL_ADC_ConfigChannel+0x4ee>
 8003816:	4b65      	ldr	r3, [pc, #404]	; (80039ac <HAL_ADC_ConfigChannel+0x680>)
 8003818:	e000      	b.n	800381c <HAL_ADC_ConfigChannel+0x4f0>
 800381a:	4b65      	ldr	r3, [pc, #404]	; (80039b0 <HAL_ADC_ConfigChannel+0x684>)
 800381c:	4618      	mov	r0, r3
 800381e:	f7ff fa7d 	bl	8002d1c <LL_ADC_GetCommonPathInternalCh>
 8003822:	66f8      	str	r0, [r7, #108]	; 0x6c

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	4a5e      	ldr	r2, [pc, #376]	; (80039a4 <HAL_ADC_ConfigChannel+0x678>)
 800382a:	4293      	cmp	r3, r2
 800382c:	d004      	beq.n	8003838 <HAL_ADC_ConfigChannel+0x50c>
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	4a5d      	ldr	r2, [pc, #372]	; (80039a8 <HAL_ADC_ConfigChannel+0x67c>)
 8003834:	4293      	cmp	r3, r2
 8003836:	d10e      	bne.n	8003856 <HAL_ADC_ConfigChannel+0x52a>
 8003838:	485a      	ldr	r0, [pc, #360]	; (80039a4 <HAL_ADC_ConfigChannel+0x678>)
 800383a:	f7ff fb9b 	bl	8002f74 <LL_ADC_IsEnabled>
 800383e:	4604      	mov	r4, r0
 8003840:	4859      	ldr	r0, [pc, #356]	; (80039a8 <HAL_ADC_ConfigChannel+0x67c>)
 8003842:	f7ff fb97 	bl	8002f74 <LL_ADC_IsEnabled>
 8003846:	4603      	mov	r3, r0
 8003848:	4323      	orrs	r3, r4
 800384a:	2b00      	cmp	r3, #0
 800384c:	bf0c      	ite	eq
 800384e:	2301      	moveq	r3, #1
 8003850:	2300      	movne	r3, #0
 8003852:	b2db      	uxtb	r3, r3
 8003854:	e008      	b.n	8003868 <HAL_ADC_ConfigChannel+0x53c>
 8003856:	4857      	ldr	r0, [pc, #348]	; (80039b4 <HAL_ADC_ConfigChannel+0x688>)
 8003858:	f7ff fb8c 	bl	8002f74 <LL_ADC_IsEnabled>
 800385c:	4603      	mov	r3, r0
 800385e:	2b00      	cmp	r3, #0
 8003860:	bf0c      	ite	eq
 8003862:	2301      	moveq	r3, #1
 8003864:	2300      	movne	r3, #0
 8003866:	b2db      	uxtb	r3, r3
 8003868:	2b00      	cmp	r3, #0
 800386a:	d07d      	beq.n	8003968 <HAL_ADC_ConfigChannel+0x63c>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 800386c:	683b      	ldr	r3, [r7, #0]
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	4a51      	ldr	r2, [pc, #324]	; (80039b8 <HAL_ADC_ConfigChannel+0x68c>)
 8003872:	4293      	cmp	r3, r2
 8003874:	d130      	bne.n	80038d8 <HAL_ADC_ConfigChannel+0x5ac>
 8003876:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003878:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800387c:	2b00      	cmp	r3, #0
 800387e:	d12b      	bne.n	80038d8 <HAL_ADC_ConfigChannel+0x5ac>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	4a4b      	ldr	r2, [pc, #300]	; (80039b4 <HAL_ADC_ConfigChannel+0x688>)
 8003886:	4293      	cmp	r3, r2
 8003888:	f040 8081 	bne.w	800398e <HAL_ADC_ConfigChannel+0x662>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	4a44      	ldr	r2, [pc, #272]	; (80039a4 <HAL_ADC_ConfigChannel+0x678>)
 8003892:	4293      	cmp	r3, r2
 8003894:	d004      	beq.n	80038a0 <HAL_ADC_ConfigChannel+0x574>
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	4a43      	ldr	r2, [pc, #268]	; (80039a8 <HAL_ADC_ConfigChannel+0x67c>)
 800389c:	4293      	cmp	r3, r2
 800389e:	d101      	bne.n	80038a4 <HAL_ADC_ConfigChannel+0x578>
 80038a0:	4a42      	ldr	r2, [pc, #264]	; (80039ac <HAL_ADC_ConfigChannel+0x680>)
 80038a2:	e000      	b.n	80038a6 <HAL_ADC_ConfigChannel+0x57a>
 80038a4:	4a42      	ldr	r2, [pc, #264]	; (80039b0 <HAL_ADC_ConfigChannel+0x684>)
 80038a6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80038a8:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80038ac:	4619      	mov	r1, r3
 80038ae:	4610      	mov	r0, r2
 80038b0:	f7ff fa21 	bl	8002cf6 <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80038b4:	4b41      	ldr	r3, [pc, #260]	; (80039bc <HAL_ADC_ConfigChannel+0x690>)
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	099b      	lsrs	r3, r3, #6
 80038ba:	4a41      	ldr	r2, [pc, #260]	; (80039c0 <HAL_ADC_ConfigChannel+0x694>)
 80038bc:	fba2 2303 	umull	r2, r3, r2, r3
 80038c0:	099b      	lsrs	r3, r3, #6
 80038c2:	3301      	adds	r3, #1
 80038c4:	005b      	lsls	r3, r3, #1
 80038c6:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 80038c8:	e002      	b.n	80038d0 <HAL_ADC_ConfigChannel+0x5a4>
              {
                wait_loop_index--;
 80038ca:	68bb      	ldr	r3, [r7, #8]
 80038cc:	3b01      	subs	r3, #1
 80038ce:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 80038d0:	68bb      	ldr	r3, [r7, #8]
 80038d2:	2b00      	cmp	r3, #0
 80038d4:	d1f9      	bne.n	80038ca <HAL_ADC_ConfigChannel+0x59e>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80038d6:	e05a      	b.n	800398e <HAL_ADC_ConfigChannel+0x662>
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80038d8:	683b      	ldr	r3, [r7, #0]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	4a39      	ldr	r2, [pc, #228]	; (80039c4 <HAL_ADC_ConfigChannel+0x698>)
 80038de:	4293      	cmp	r3, r2
 80038e0:	d11e      	bne.n	8003920 <HAL_ADC_ConfigChannel+0x5f4>
 80038e2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80038e4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80038e8:	2b00      	cmp	r3, #0
 80038ea:	d119      	bne.n	8003920 <HAL_ADC_ConfigChannel+0x5f4>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	4a30      	ldr	r2, [pc, #192]	; (80039b4 <HAL_ADC_ConfigChannel+0x688>)
 80038f2:	4293      	cmp	r3, r2
 80038f4:	d14b      	bne.n	800398e <HAL_ADC_ConfigChannel+0x662>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	4a2a      	ldr	r2, [pc, #168]	; (80039a4 <HAL_ADC_ConfigChannel+0x678>)
 80038fc:	4293      	cmp	r3, r2
 80038fe:	d004      	beq.n	800390a <HAL_ADC_ConfigChannel+0x5de>
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	4a28      	ldr	r2, [pc, #160]	; (80039a8 <HAL_ADC_ConfigChannel+0x67c>)
 8003906:	4293      	cmp	r3, r2
 8003908:	d101      	bne.n	800390e <HAL_ADC_ConfigChannel+0x5e2>
 800390a:	4a28      	ldr	r2, [pc, #160]	; (80039ac <HAL_ADC_ConfigChannel+0x680>)
 800390c:	e000      	b.n	8003910 <HAL_ADC_ConfigChannel+0x5e4>
 800390e:	4a28      	ldr	r2, [pc, #160]	; (80039b0 <HAL_ADC_ConfigChannel+0x684>)
 8003910:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003912:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003916:	4619      	mov	r1, r3
 8003918:	4610      	mov	r0, r2
 800391a:	f7ff f9ec 	bl	8002cf6 <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800391e:	e036      	b.n	800398e <HAL_ADC_ConfigChannel+0x662>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8003920:	683b      	ldr	r3, [r7, #0]
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	4a28      	ldr	r2, [pc, #160]	; (80039c8 <HAL_ADC_ConfigChannel+0x69c>)
 8003926:	4293      	cmp	r3, r2
 8003928:	d131      	bne.n	800398e <HAL_ADC_ConfigChannel+0x662>
 800392a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800392c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003930:	2b00      	cmp	r3, #0
 8003932:	d12c      	bne.n	800398e <HAL_ADC_ConfigChannel+0x662>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	4a1e      	ldr	r2, [pc, #120]	; (80039b4 <HAL_ADC_ConfigChannel+0x688>)
 800393a:	4293      	cmp	r3, r2
 800393c:	d127      	bne.n	800398e <HAL_ADC_ConfigChannel+0x662>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	4a18      	ldr	r2, [pc, #96]	; (80039a4 <HAL_ADC_ConfigChannel+0x678>)
 8003944:	4293      	cmp	r3, r2
 8003946:	d004      	beq.n	8003952 <HAL_ADC_ConfigChannel+0x626>
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	4a16      	ldr	r2, [pc, #88]	; (80039a8 <HAL_ADC_ConfigChannel+0x67c>)
 800394e:	4293      	cmp	r3, r2
 8003950:	d101      	bne.n	8003956 <HAL_ADC_ConfigChannel+0x62a>
 8003952:	4a16      	ldr	r2, [pc, #88]	; (80039ac <HAL_ADC_ConfigChannel+0x680>)
 8003954:	e000      	b.n	8003958 <HAL_ADC_ConfigChannel+0x62c>
 8003956:	4a16      	ldr	r2, [pc, #88]	; (80039b0 <HAL_ADC_ConfigChannel+0x684>)
 8003958:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800395a:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800395e:	4619      	mov	r1, r3
 8003960:	4610      	mov	r0, r2
 8003962:	f7ff f9c8 	bl	8002cf6 <LL_ADC_SetCommonPathInternalCh>
 8003966:	e012      	b.n	800398e <HAL_ADC_ConfigChannel+0x662>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800396c:	f043 0220 	orr.w	r2, r3, #32
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	655a      	str	r2, [r3, #84]	; 0x54

          tmp_hal_status = HAL_ERROR;
 8003974:	2301      	movs	r3, #1
 8003976:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 800397a:	e008      	b.n	800398e <HAL_ADC_ConfigChannel+0x662>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003980:	f043 0220 	orr.w	r2, r3, #32
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8003988:	2301      	movs	r3, #1
 800398a:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	2200      	movs	r2, #0
 8003992:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8003996:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 800399a:	4618      	mov	r0, r3
 800399c:	3784      	adds	r7, #132	; 0x84
 800399e:	46bd      	mov	sp, r7
 80039a0:	bd90      	pop	{r4, r7, pc}
 80039a2:	bf00      	nop
 80039a4:	40022000 	.word	0x40022000
 80039a8:	40022100 	.word	0x40022100
 80039ac:	40022300 	.word	0x40022300
 80039b0:	58026300 	.word	0x58026300
 80039b4:	58026000 	.word	0x58026000
 80039b8:	cb840000 	.word	0xcb840000
 80039bc:	24000008 	.word	0x24000008
 80039c0:	053e2d63 	.word	0x053e2d63
 80039c4:	c7520000 	.word	0xc7520000
 80039c8:	cfb80000 	.word	0xcfb80000

080039cc <ADC_ConfigureBoostMode>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval None.
  */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef *hadc)
{
 80039cc:	b580      	push	{r7, lr}
 80039ce:	b084      	sub	sp, #16
 80039d0:	af00      	add	r7, sp, #0
 80039d2:	6078      	str	r0, [r7, #4]
  uint32_t freq;
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	4a7a      	ldr	r2, [pc, #488]	; (8003bc4 <ADC_ConfigureBoostMode+0x1f8>)
 80039da:	4293      	cmp	r3, r2
 80039dc:	d004      	beq.n	80039e8 <ADC_ConfigureBoostMode+0x1c>
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	4a79      	ldr	r2, [pc, #484]	; (8003bc8 <ADC_ConfigureBoostMode+0x1fc>)
 80039e4:	4293      	cmp	r3, r2
 80039e6:	d109      	bne.n	80039fc <ADC_ConfigureBoostMode+0x30>
 80039e8:	4b78      	ldr	r3, [pc, #480]	; (8003bcc <ADC_ConfigureBoostMode+0x200>)
 80039ea:	689b      	ldr	r3, [r3, #8]
 80039ec:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80039f0:	2b00      	cmp	r3, #0
 80039f2:	bf14      	ite	ne
 80039f4:	2301      	movne	r3, #1
 80039f6:	2300      	moveq	r3, #0
 80039f8:	b2db      	uxtb	r3, r3
 80039fa:	e008      	b.n	8003a0e <ADC_ConfigureBoostMode+0x42>
 80039fc:	4b74      	ldr	r3, [pc, #464]	; (8003bd0 <ADC_ConfigureBoostMode+0x204>)
 80039fe:	689b      	ldr	r3, [r3, #8]
 8003a00:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003a04:	2b00      	cmp	r3, #0
 8003a06:	bf14      	ite	ne
 8003a08:	2301      	movne	r3, #1
 8003a0a:	2300      	moveq	r3, #0
 8003a0c:	b2db      	uxtb	r3, r3
 8003a0e:	2b00      	cmp	r3, #0
 8003a10:	d01c      	beq.n	8003a4c <ADC_ConfigureBoostMode+0x80>
  {
    freq = HAL_RCC_GetHCLKFreq();
 8003a12:	f003 fe2f 	bl	8007674 <HAL_RCC_GetHCLKFreq>
 8003a16:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	685b      	ldr	r3, [r3, #4]
 8003a1c:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8003a20:	d010      	beq.n	8003a44 <ADC_ConfigureBoostMode+0x78>
 8003a22:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8003a26:	d873      	bhi.n	8003b10 <ADC_ConfigureBoostMode+0x144>
 8003a28:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003a2c:	d002      	beq.n	8003a34 <ADC_ConfigureBoostMode+0x68>
 8003a2e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003a32:	d16d      	bne.n	8003b10 <ADC_ConfigureBoostMode+0x144>
    {
      case ADC_CLOCK_SYNC_PCLK_DIV1:
      case ADC_CLOCK_SYNC_PCLK_DIV2:
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	685b      	ldr	r3, [r3, #4]
 8003a38:	0c1b      	lsrs	r3, r3, #16
 8003a3a:	68fa      	ldr	r2, [r7, #12]
 8003a3c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003a40:	60fb      	str	r3, [r7, #12]
        break;
 8003a42:	e068      	b.n	8003b16 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_SYNC_PCLK_DIV4:
        freq /= 4UL;
 8003a44:	68fb      	ldr	r3, [r7, #12]
 8003a46:	089b      	lsrs	r3, r3, #2
 8003a48:	60fb      	str	r3, [r7, #12]
        break;
 8003a4a:	e064      	b.n	8003b16 <ADC_ConfigureBoostMode+0x14a>
        break;
    }
  }
  else
  {
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 8003a4c:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8003a50:	f04f 0100 	mov.w	r1, #0
 8003a54:	f005 f874 	bl	8008b40 <HAL_RCCEx_GetPeriphCLKFreq>
 8003a58:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	685b      	ldr	r3, [r3, #4]
 8003a5e:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 8003a62:	d051      	beq.n	8003b08 <ADC_ConfigureBoostMode+0x13c>
 8003a64:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 8003a68:	d854      	bhi.n	8003b14 <ADC_ConfigureBoostMode+0x148>
 8003a6a:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 8003a6e:	d047      	beq.n	8003b00 <ADC_ConfigureBoostMode+0x134>
 8003a70:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 8003a74:	d84e      	bhi.n	8003b14 <ADC_ConfigureBoostMode+0x148>
 8003a76:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 8003a7a:	d03d      	beq.n	8003af8 <ADC_ConfigureBoostMode+0x12c>
 8003a7c:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 8003a80:	d848      	bhi.n	8003b14 <ADC_ConfigureBoostMode+0x148>
 8003a82:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003a86:	d033      	beq.n	8003af0 <ADC_ConfigureBoostMode+0x124>
 8003a88:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003a8c:	d842      	bhi.n	8003b14 <ADC_ConfigureBoostMode+0x148>
 8003a8e:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 8003a92:	d029      	beq.n	8003ae8 <ADC_ConfigureBoostMode+0x11c>
 8003a94:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 8003a98:	d83c      	bhi.n	8003b14 <ADC_ConfigureBoostMode+0x148>
 8003a9a:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 8003a9e:	d01a      	beq.n	8003ad6 <ADC_ConfigureBoostMode+0x10a>
 8003aa0:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 8003aa4:	d836      	bhi.n	8003b14 <ADC_ConfigureBoostMode+0x148>
 8003aa6:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 8003aaa:	d014      	beq.n	8003ad6 <ADC_ConfigureBoostMode+0x10a>
 8003aac:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 8003ab0:	d830      	bhi.n	8003b14 <ADC_ConfigureBoostMode+0x148>
 8003ab2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003ab6:	d00e      	beq.n	8003ad6 <ADC_ConfigureBoostMode+0x10a>
 8003ab8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003abc:	d82a      	bhi.n	8003b14 <ADC_ConfigureBoostMode+0x148>
 8003abe:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8003ac2:	d008      	beq.n	8003ad6 <ADC_ConfigureBoostMode+0x10a>
 8003ac4:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8003ac8:	d824      	bhi.n	8003b14 <ADC_ConfigureBoostMode+0x148>
 8003aca:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003ace:	d002      	beq.n	8003ad6 <ADC_ConfigureBoostMode+0x10a>
 8003ad0:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8003ad4:	d11e      	bne.n	8003b14 <ADC_ConfigureBoostMode+0x148>
      case ADC_CLOCK_ASYNC_DIV4:
      case ADC_CLOCK_ASYNC_DIV6:
      case ADC_CLOCK_ASYNC_DIV8:
      case ADC_CLOCK_ASYNC_DIV10:
      case ADC_CLOCK_ASYNC_DIV12:
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	685b      	ldr	r3, [r3, #4]
 8003ada:	0c9b      	lsrs	r3, r3, #18
 8003adc:	005b      	lsls	r3, r3, #1
 8003ade:	68fa      	ldr	r2, [r7, #12]
 8003ae0:	fbb2 f3f3 	udiv	r3, r2, r3
 8003ae4:	60fb      	str	r3, [r7, #12]
        break;
 8003ae6:	e016      	b.n	8003b16 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV16:
        freq /= 16UL;
 8003ae8:	68fb      	ldr	r3, [r7, #12]
 8003aea:	091b      	lsrs	r3, r3, #4
 8003aec:	60fb      	str	r3, [r7, #12]
        break;
 8003aee:	e012      	b.n	8003b16 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV32:
        freq /= 32UL;
 8003af0:	68fb      	ldr	r3, [r7, #12]
 8003af2:	095b      	lsrs	r3, r3, #5
 8003af4:	60fb      	str	r3, [r7, #12]
        break;
 8003af6:	e00e      	b.n	8003b16 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV64:
        freq /= 64UL;
 8003af8:	68fb      	ldr	r3, [r7, #12]
 8003afa:	099b      	lsrs	r3, r3, #6
 8003afc:	60fb      	str	r3, [r7, #12]
        break;
 8003afe:	e00a      	b.n	8003b16 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV128:
        freq /= 128UL;
 8003b00:	68fb      	ldr	r3, [r7, #12]
 8003b02:	09db      	lsrs	r3, r3, #7
 8003b04:	60fb      	str	r3, [r7, #12]
        break;
 8003b06:	e006      	b.n	8003b16 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV256:
        freq /= 256UL;
 8003b08:	68fb      	ldr	r3, [r7, #12]
 8003b0a:	0a1b      	lsrs	r3, r3, #8
 8003b0c:	60fb      	str	r3, [r7, #12]
        break;
 8003b0e:	e002      	b.n	8003b16 <ADC_ConfigureBoostMode+0x14a>
        break;
 8003b10:	bf00      	nop
 8003b12:	e000      	b.n	8003b16 <ADC_ConfigureBoostMode+0x14a>
      default:
        break;
 8003b14:	bf00      	nop
  else /* if(freq > 25000000UL) */
  {
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
  }
#else
  if (HAL_GetREVID() <= REV_ID_Y) /* STM32H7 silicon Rev.Y */
 8003b16:	f7ff f8a5 	bl	8002c64 <HAL_GetREVID>
 8003b1a:	4603      	mov	r3, r0
 8003b1c:	f241 0203 	movw	r2, #4099	; 0x1003
 8003b20:	4293      	cmp	r3, r2
 8003b22:	d815      	bhi.n	8003b50 <ADC_ConfigureBoostMode+0x184>
  {
    if (freq > 20000000UL)
 8003b24:	68fb      	ldr	r3, [r7, #12]
 8003b26:	4a2b      	ldr	r2, [pc, #172]	; (8003bd4 <ADC_ConfigureBoostMode+0x208>)
 8003b28:	4293      	cmp	r3, r2
 8003b2a:	d908      	bls.n	8003b3e <ADC_ConfigureBoostMode+0x172>
    {
      SET_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	689a      	ldr	r2, [r3, #8]
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003b3a:	609a      	str	r2, [r3, #8]
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
    }
  }
#endif /* ADC_VER_V5_3 */
}
 8003b3c:	e03e      	b.n	8003bbc <ADC_ConfigureBoostMode+0x1f0>
      CLEAR_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	689a      	ldr	r2, [r3, #8]
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003b4c:	609a      	str	r2, [r3, #8]
}
 8003b4e:	e035      	b.n	8003bbc <ADC_ConfigureBoostMode+0x1f0>
    freq /= 2U; /* divider by 2 for Rev.V */
 8003b50:	68fb      	ldr	r3, [r7, #12]
 8003b52:	085b      	lsrs	r3, r3, #1
 8003b54:	60fb      	str	r3, [r7, #12]
    if (freq <= 6250000UL)
 8003b56:	68fb      	ldr	r3, [r7, #12]
 8003b58:	4a1f      	ldr	r2, [pc, #124]	; (8003bd8 <ADC_ConfigureBoostMode+0x20c>)
 8003b5a:	4293      	cmp	r3, r2
 8003b5c:	d808      	bhi.n	8003b70 <ADC_ConfigureBoostMode+0x1a4>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	689a      	ldr	r2, [r3, #8]
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8003b6c:	609a      	str	r2, [r3, #8]
}
 8003b6e:	e025      	b.n	8003bbc <ADC_ConfigureBoostMode+0x1f0>
    else if (freq <= 12500000UL)
 8003b70:	68fb      	ldr	r3, [r7, #12]
 8003b72:	4a1a      	ldr	r2, [pc, #104]	; (8003bdc <ADC_ConfigureBoostMode+0x210>)
 8003b74:	4293      	cmp	r3, r2
 8003b76:	d80a      	bhi.n	8003b8e <ADC_ConfigureBoostMode+0x1c2>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	689b      	ldr	r3, [r3, #8]
 8003b7e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003b8a:	609a      	str	r2, [r3, #8]
}
 8003b8c:	e016      	b.n	8003bbc <ADC_ConfigureBoostMode+0x1f0>
    else if (freq <= 25000000UL)
 8003b8e:	68fb      	ldr	r3, [r7, #12]
 8003b90:	4a13      	ldr	r2, [pc, #76]	; (8003be0 <ADC_ConfigureBoostMode+0x214>)
 8003b92:	4293      	cmp	r3, r2
 8003b94:	d80a      	bhi.n	8003bac <ADC_ConfigureBoostMode+0x1e0>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	689b      	ldr	r3, [r3, #8]
 8003b9c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003ba8:	609a      	str	r2, [r3, #8]
}
 8003baa:	e007      	b.n	8003bbc <ADC_ConfigureBoostMode+0x1f0>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	689a      	ldr	r2, [r3, #8]
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 8003bba:	609a      	str	r2, [r3, #8]
}
 8003bbc:	bf00      	nop
 8003bbe:	3710      	adds	r7, #16
 8003bc0:	46bd      	mov	sp, r7
 8003bc2:	bd80      	pop	{r7, pc}
 8003bc4:	40022000 	.word	0x40022000
 8003bc8:	40022100 	.word	0x40022100
 8003bcc:	40022300 	.word	0x40022300
 8003bd0:	58026300 	.word	0x58026300
 8003bd4:	01312d00 	.word	0x01312d00
 8003bd8:	005f5e10 	.word	0x005f5e10
 8003bdc:	00bebc20 	.word	0x00bebc20
 8003be0:	017d7840 	.word	0x017d7840

08003be4 <LL_ADC_IsEnabled>:
{
 8003be4:	b480      	push	{r7}
 8003be6:	b083      	sub	sp, #12
 8003be8:	af00      	add	r7, sp, #0
 8003bea:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	689b      	ldr	r3, [r3, #8]
 8003bf0:	f003 0301 	and.w	r3, r3, #1
 8003bf4:	2b01      	cmp	r3, #1
 8003bf6:	d101      	bne.n	8003bfc <LL_ADC_IsEnabled+0x18>
 8003bf8:	2301      	movs	r3, #1
 8003bfa:	e000      	b.n	8003bfe <LL_ADC_IsEnabled+0x1a>
 8003bfc:	2300      	movs	r3, #0
}
 8003bfe:	4618      	mov	r0, r3
 8003c00:	370c      	adds	r7, #12
 8003c02:	46bd      	mov	sp, r7
 8003c04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c08:	4770      	bx	lr

08003c0a <LL_ADC_REG_IsConversionOngoing>:
{
 8003c0a:	b480      	push	{r7}
 8003c0c:	b083      	sub	sp, #12
 8003c0e:	af00      	add	r7, sp, #0
 8003c10:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	689b      	ldr	r3, [r3, #8]
 8003c16:	f003 0304 	and.w	r3, r3, #4
 8003c1a:	2b04      	cmp	r3, #4
 8003c1c:	d101      	bne.n	8003c22 <LL_ADC_REG_IsConversionOngoing+0x18>
 8003c1e:	2301      	movs	r3, #1
 8003c20:	e000      	b.n	8003c24 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8003c22:	2300      	movs	r3, #0
}
 8003c24:	4618      	mov	r0, r3
 8003c26:	370c      	adds	r7, #12
 8003c28:	46bd      	mov	sp, r7
 8003c2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c2e:	4770      	bx	lr

08003c30 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8003c30:	b590      	push	{r4, r7, lr}
 8003c32:	b09f      	sub	sp, #124	; 0x7c
 8003c34:	af00      	add	r7, sp, #0
 8003c36:	6078      	str	r0, [r7, #4]
 8003c38:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003c3a:	2300      	movs	r3, #0
 8003c3c:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
    assert_param(IS_ADC_DUAL_DATA_MODE(multimode->DualModeData));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003c46:	2b01      	cmp	r3, #1
 8003c48:	d101      	bne.n	8003c4e <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8003c4a:	2302      	movs	r3, #2
 8003c4c:	e0be      	b.n	8003dcc <HAL_ADCEx_MultiModeConfigChannel+0x19c>
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	2201      	movs	r2, #1
 8003c52:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  tmphadcSlave.State = HAL_ADC_STATE_RESET;
 8003c56:	2300      	movs	r3, #0
 8003c58:	65fb      	str	r3, [r7, #92]	; 0x5c
  tmphadcSlave.ErrorCode = HAL_ADC_ERROR_NONE;
 8003c5a:	2300      	movs	r3, #0
 8003c5c:	663b      	str	r3, [r7, #96]	; 0x60

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	4a5c      	ldr	r2, [pc, #368]	; (8003dd4 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8003c64:	4293      	cmp	r3, r2
 8003c66:	d102      	bne.n	8003c6e <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8003c68:	4b5b      	ldr	r3, [pc, #364]	; (8003dd8 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8003c6a:	60bb      	str	r3, [r7, #8]
 8003c6c:	e001      	b.n	8003c72 <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8003c6e:	2300      	movs	r3, #0
 8003c70:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 8003c72:	68bb      	ldr	r3, [r7, #8]
 8003c74:	2b00      	cmp	r3, #0
 8003c76:	d10b      	bne.n	8003c90 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003c7c:	f043 0220 	orr.w	r2, r3, #32
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	2200      	movs	r2, #0
 8003c88:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    return HAL_ERROR;
 8003c8c:	2301      	movs	r3, #1
 8003c8e:	e09d      	b.n	8003dcc <HAL_ADCEx_MultiModeConfigChannel+0x19c>

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DATA Format configuration                                   */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8003c90:	68bb      	ldr	r3, [r7, #8]
 8003c92:	4618      	mov	r0, r3
 8003c94:	f7ff ffb9 	bl	8003c0a <LL_ADC_REG_IsConversionOngoing>
 8003c98:	6738      	str	r0, [r7, #112]	; 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	4618      	mov	r0, r3
 8003ca0:	f7ff ffb3 	bl	8003c0a <LL_ADC_REG_IsConversionOngoing>
 8003ca4:	4603      	mov	r3, r0
 8003ca6:	2b00      	cmp	r3, #0
 8003ca8:	d17f      	bne.n	8003daa <HAL_ADCEx_MultiModeConfigChannel+0x17a>
      && (tmphadcSlave_conversion_on_going == 0UL))
 8003caa:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003cac:	2b00      	cmp	r3, #0
 8003cae:	d17c      	bne.n	8003daa <HAL_ADCEx_MultiModeConfigChannel+0x17a>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	4a47      	ldr	r2, [pc, #284]	; (8003dd4 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8003cb6:	4293      	cmp	r3, r2
 8003cb8:	d004      	beq.n	8003cc4 <HAL_ADCEx_MultiModeConfigChannel+0x94>
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	4a46      	ldr	r2, [pc, #280]	; (8003dd8 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8003cc0:	4293      	cmp	r3, r2
 8003cc2:	d101      	bne.n	8003cc8 <HAL_ADCEx_MultiModeConfigChannel+0x98>
 8003cc4:	4b45      	ldr	r3, [pc, #276]	; (8003ddc <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8003cc6:	e000      	b.n	8003cca <HAL_ADCEx_MultiModeConfigChannel+0x9a>
 8003cc8:	4b45      	ldr	r3, [pc, #276]	; (8003de0 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8003cca:	66fb      	str	r3, [r7, #108]	; 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8003ccc:	683b      	ldr	r3, [r7, #0]
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	2b00      	cmp	r3, #0
 8003cd2:	d039      	beq.n	8003d48 <HAL_ADCEx_MultiModeConfigChannel+0x118>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_DAMDF, multimode->DualModeData);
 8003cd4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003cd6:	689b      	ldr	r3, [r3, #8]
 8003cd8:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003cdc:	683b      	ldr	r3, [r7, #0]
 8003cde:	685b      	ldr	r3, [r3, #4]
 8003ce0:	431a      	orrs	r2, r3
 8003ce2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003ce4:	609a      	str	r2, [r3, #8]
      /*      from 1 to 8 clock cycles for 12 bits                              */
      /*      from 1 to 6 clock cycles for 10 and 8 bits                        */
      /*    If a higher delay is selected, it will be clipped to maximum delay  */
      /*    range                                                               */

      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	4a3a      	ldr	r2, [pc, #232]	; (8003dd4 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8003cec:	4293      	cmp	r3, r2
 8003cee:	d004      	beq.n	8003cfa <HAL_ADCEx_MultiModeConfigChannel+0xca>
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	4a38      	ldr	r2, [pc, #224]	; (8003dd8 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8003cf6:	4293      	cmp	r3, r2
 8003cf8:	d10e      	bne.n	8003d18 <HAL_ADCEx_MultiModeConfigChannel+0xe8>
 8003cfa:	4836      	ldr	r0, [pc, #216]	; (8003dd4 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8003cfc:	f7ff ff72 	bl	8003be4 <LL_ADC_IsEnabled>
 8003d00:	4604      	mov	r4, r0
 8003d02:	4835      	ldr	r0, [pc, #212]	; (8003dd8 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8003d04:	f7ff ff6e 	bl	8003be4 <LL_ADC_IsEnabled>
 8003d08:	4603      	mov	r3, r0
 8003d0a:	4323      	orrs	r3, r4
 8003d0c:	2b00      	cmp	r3, #0
 8003d0e:	bf0c      	ite	eq
 8003d10:	2301      	moveq	r3, #1
 8003d12:	2300      	movne	r3, #0
 8003d14:	b2db      	uxtb	r3, r3
 8003d16:	e008      	b.n	8003d2a <HAL_ADCEx_MultiModeConfigChannel+0xfa>
 8003d18:	4832      	ldr	r0, [pc, #200]	; (8003de4 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 8003d1a:	f7ff ff63 	bl	8003be4 <LL_ADC_IsEnabled>
 8003d1e:	4603      	mov	r3, r0
 8003d20:	2b00      	cmp	r3, #0
 8003d22:	bf0c      	ite	eq
 8003d24:	2301      	moveq	r3, #1
 8003d26:	2300      	movne	r3, #0
 8003d28:	b2db      	uxtb	r3, r3
 8003d2a:	2b00      	cmp	r3, #0
 8003d2c:	d047      	beq.n	8003dbe <HAL_ADCEx_MultiModeConfigChannel+0x18e>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8003d2e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003d30:	689a      	ldr	r2, [r3, #8]
 8003d32:	4b2d      	ldr	r3, [pc, #180]	; (8003de8 <HAL_ADCEx_MultiModeConfigChannel+0x1b8>)
 8003d34:	4013      	ands	r3, r2
 8003d36:	683a      	ldr	r2, [r7, #0]
 8003d38:	6811      	ldr	r1, [r2, #0]
 8003d3a:	683a      	ldr	r2, [r7, #0]
 8003d3c:	6892      	ldr	r2, [r2, #8]
 8003d3e:	430a      	orrs	r2, r1
 8003d40:	431a      	orrs	r2, r3
 8003d42:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003d44:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8003d46:	e03a      	b.n	8003dbe <HAL_ADCEx_MultiModeConfigChannel+0x18e>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DAMDF);
 8003d48:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003d4a:	689b      	ldr	r3, [r3, #8]
 8003d4c:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003d50:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003d52:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	4a1e      	ldr	r2, [pc, #120]	; (8003dd4 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8003d5a:	4293      	cmp	r3, r2
 8003d5c:	d004      	beq.n	8003d68 <HAL_ADCEx_MultiModeConfigChannel+0x138>
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	4a1d      	ldr	r2, [pc, #116]	; (8003dd8 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8003d64:	4293      	cmp	r3, r2
 8003d66:	d10e      	bne.n	8003d86 <HAL_ADCEx_MultiModeConfigChannel+0x156>
 8003d68:	481a      	ldr	r0, [pc, #104]	; (8003dd4 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8003d6a:	f7ff ff3b 	bl	8003be4 <LL_ADC_IsEnabled>
 8003d6e:	4604      	mov	r4, r0
 8003d70:	4819      	ldr	r0, [pc, #100]	; (8003dd8 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8003d72:	f7ff ff37 	bl	8003be4 <LL_ADC_IsEnabled>
 8003d76:	4603      	mov	r3, r0
 8003d78:	4323      	orrs	r3, r4
 8003d7a:	2b00      	cmp	r3, #0
 8003d7c:	bf0c      	ite	eq
 8003d7e:	2301      	moveq	r3, #1
 8003d80:	2300      	movne	r3, #0
 8003d82:	b2db      	uxtb	r3, r3
 8003d84:	e008      	b.n	8003d98 <HAL_ADCEx_MultiModeConfigChannel+0x168>
 8003d86:	4817      	ldr	r0, [pc, #92]	; (8003de4 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 8003d88:	f7ff ff2c 	bl	8003be4 <LL_ADC_IsEnabled>
 8003d8c:	4603      	mov	r3, r0
 8003d8e:	2b00      	cmp	r3, #0
 8003d90:	bf0c      	ite	eq
 8003d92:	2301      	moveq	r3, #1
 8003d94:	2300      	movne	r3, #0
 8003d96:	b2db      	uxtb	r3, r3
 8003d98:	2b00      	cmp	r3, #0
 8003d9a:	d010      	beq.n	8003dbe <HAL_ADCEx_MultiModeConfigChannel+0x18e>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8003d9c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003d9e:	689a      	ldr	r2, [r3, #8]
 8003da0:	4b11      	ldr	r3, [pc, #68]	; (8003de8 <HAL_ADCEx_MultiModeConfigChannel+0x1b8>)
 8003da2:	4013      	ands	r3, r2
 8003da4:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8003da6:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8003da8:	e009      	b.n	8003dbe <HAL_ADCEx_MultiModeConfigChannel+0x18e>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003dae:	f043 0220 	orr.w	r2, r3, #32
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8003db6:	2301      	movs	r3, #1
 8003db8:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 8003dbc:	e000      	b.n	8003dc0 <HAL_ADCEx_MultiModeConfigChannel+0x190>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8003dbe:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	2200      	movs	r2, #0
 8003dc4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8003dc8:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
}
 8003dcc:	4618      	mov	r0, r3
 8003dce:	377c      	adds	r7, #124	; 0x7c
 8003dd0:	46bd      	mov	sp, r7
 8003dd2:	bd90      	pop	{r4, r7, pc}
 8003dd4:	40022000 	.word	0x40022000
 8003dd8:	40022100 	.word	0x40022100
 8003ddc:	40022300 	.word	0x40022300
 8003de0:	58026300 	.word	0x58026300
 8003de4:	58026000 	.word	0x58026000
 8003de8:	fffff0e0 	.word	0xfffff0e0

08003dec <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003dec:	b480      	push	{r7}
 8003dee:	b085      	sub	sp, #20
 8003df0:	af00      	add	r7, sp, #0
 8003df2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	f003 0307 	and.w	r3, r3, #7
 8003dfa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003dfc:	4b0b      	ldr	r3, [pc, #44]	; (8003e2c <__NVIC_SetPriorityGrouping+0x40>)
 8003dfe:	68db      	ldr	r3, [r3, #12]
 8003e00:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003e02:	68ba      	ldr	r2, [r7, #8]
 8003e04:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003e08:	4013      	ands	r3, r2
 8003e0a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003e0c:	68fb      	ldr	r3, [r7, #12]
 8003e0e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003e10:	68bb      	ldr	r3, [r7, #8]
 8003e12:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8003e14:	4b06      	ldr	r3, [pc, #24]	; (8003e30 <__NVIC_SetPriorityGrouping+0x44>)
 8003e16:	4313      	orrs	r3, r2
 8003e18:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003e1a:	4a04      	ldr	r2, [pc, #16]	; (8003e2c <__NVIC_SetPriorityGrouping+0x40>)
 8003e1c:	68bb      	ldr	r3, [r7, #8]
 8003e1e:	60d3      	str	r3, [r2, #12]
}
 8003e20:	bf00      	nop
 8003e22:	3714      	adds	r7, #20
 8003e24:	46bd      	mov	sp, r7
 8003e26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e2a:	4770      	bx	lr
 8003e2c:	e000ed00 	.word	0xe000ed00
 8003e30:	05fa0000 	.word	0x05fa0000

08003e34 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003e34:	b480      	push	{r7}
 8003e36:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003e38:	4b04      	ldr	r3, [pc, #16]	; (8003e4c <__NVIC_GetPriorityGrouping+0x18>)
 8003e3a:	68db      	ldr	r3, [r3, #12]
 8003e3c:	0a1b      	lsrs	r3, r3, #8
 8003e3e:	f003 0307 	and.w	r3, r3, #7
}
 8003e42:	4618      	mov	r0, r3
 8003e44:	46bd      	mov	sp, r7
 8003e46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e4a:	4770      	bx	lr
 8003e4c:	e000ed00 	.word	0xe000ed00

08003e50 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003e50:	b480      	push	{r7}
 8003e52:	b083      	sub	sp, #12
 8003e54:	af00      	add	r7, sp, #0
 8003e56:	4603      	mov	r3, r0
 8003e58:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8003e5a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003e5e:	2b00      	cmp	r3, #0
 8003e60:	db0b      	blt.n	8003e7a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003e62:	88fb      	ldrh	r3, [r7, #6]
 8003e64:	f003 021f 	and.w	r2, r3, #31
 8003e68:	4907      	ldr	r1, [pc, #28]	; (8003e88 <__NVIC_EnableIRQ+0x38>)
 8003e6a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003e6e:	095b      	lsrs	r3, r3, #5
 8003e70:	2001      	movs	r0, #1
 8003e72:	fa00 f202 	lsl.w	r2, r0, r2
 8003e76:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8003e7a:	bf00      	nop
 8003e7c:	370c      	adds	r7, #12
 8003e7e:	46bd      	mov	sp, r7
 8003e80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e84:	4770      	bx	lr
 8003e86:	bf00      	nop
 8003e88:	e000e100 	.word	0xe000e100

08003e8c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003e8c:	b480      	push	{r7}
 8003e8e:	b083      	sub	sp, #12
 8003e90:	af00      	add	r7, sp, #0
 8003e92:	4603      	mov	r3, r0
 8003e94:	6039      	str	r1, [r7, #0]
 8003e96:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8003e98:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003e9c:	2b00      	cmp	r3, #0
 8003e9e:	db0a      	blt.n	8003eb6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003ea0:	683b      	ldr	r3, [r7, #0]
 8003ea2:	b2da      	uxtb	r2, r3
 8003ea4:	490c      	ldr	r1, [pc, #48]	; (8003ed8 <__NVIC_SetPriority+0x4c>)
 8003ea6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003eaa:	0112      	lsls	r2, r2, #4
 8003eac:	b2d2      	uxtb	r2, r2
 8003eae:	440b      	add	r3, r1
 8003eb0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003eb4:	e00a      	b.n	8003ecc <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003eb6:	683b      	ldr	r3, [r7, #0]
 8003eb8:	b2da      	uxtb	r2, r3
 8003eba:	4908      	ldr	r1, [pc, #32]	; (8003edc <__NVIC_SetPriority+0x50>)
 8003ebc:	88fb      	ldrh	r3, [r7, #6]
 8003ebe:	f003 030f 	and.w	r3, r3, #15
 8003ec2:	3b04      	subs	r3, #4
 8003ec4:	0112      	lsls	r2, r2, #4
 8003ec6:	b2d2      	uxtb	r2, r2
 8003ec8:	440b      	add	r3, r1
 8003eca:	761a      	strb	r2, [r3, #24]
}
 8003ecc:	bf00      	nop
 8003ece:	370c      	adds	r7, #12
 8003ed0:	46bd      	mov	sp, r7
 8003ed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ed6:	4770      	bx	lr
 8003ed8:	e000e100 	.word	0xe000e100
 8003edc:	e000ed00 	.word	0xe000ed00

08003ee0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003ee0:	b480      	push	{r7}
 8003ee2:	b089      	sub	sp, #36	; 0x24
 8003ee4:	af00      	add	r7, sp, #0
 8003ee6:	60f8      	str	r0, [r7, #12]
 8003ee8:	60b9      	str	r1, [r7, #8]
 8003eea:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003eec:	68fb      	ldr	r3, [r7, #12]
 8003eee:	f003 0307 	and.w	r3, r3, #7
 8003ef2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003ef4:	69fb      	ldr	r3, [r7, #28]
 8003ef6:	f1c3 0307 	rsb	r3, r3, #7
 8003efa:	2b04      	cmp	r3, #4
 8003efc:	bf28      	it	cs
 8003efe:	2304      	movcs	r3, #4
 8003f00:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003f02:	69fb      	ldr	r3, [r7, #28]
 8003f04:	3304      	adds	r3, #4
 8003f06:	2b06      	cmp	r3, #6
 8003f08:	d902      	bls.n	8003f10 <NVIC_EncodePriority+0x30>
 8003f0a:	69fb      	ldr	r3, [r7, #28]
 8003f0c:	3b03      	subs	r3, #3
 8003f0e:	e000      	b.n	8003f12 <NVIC_EncodePriority+0x32>
 8003f10:	2300      	movs	r3, #0
 8003f12:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003f14:	f04f 32ff 	mov.w	r2, #4294967295
 8003f18:	69bb      	ldr	r3, [r7, #24]
 8003f1a:	fa02 f303 	lsl.w	r3, r2, r3
 8003f1e:	43da      	mvns	r2, r3
 8003f20:	68bb      	ldr	r3, [r7, #8]
 8003f22:	401a      	ands	r2, r3
 8003f24:	697b      	ldr	r3, [r7, #20]
 8003f26:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003f28:	f04f 31ff 	mov.w	r1, #4294967295
 8003f2c:	697b      	ldr	r3, [r7, #20]
 8003f2e:	fa01 f303 	lsl.w	r3, r1, r3
 8003f32:	43d9      	mvns	r1, r3
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003f38:	4313      	orrs	r3, r2
         );
}
 8003f3a:	4618      	mov	r0, r3
 8003f3c:	3724      	adds	r7, #36	; 0x24
 8003f3e:	46bd      	mov	sp, r7
 8003f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f44:	4770      	bx	lr
	...

08003f48 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003f48:	b580      	push	{r7, lr}
 8003f4a:	b082      	sub	sp, #8
 8003f4c:	af00      	add	r7, sp, #0
 8003f4e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	3b01      	subs	r3, #1
 8003f54:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003f58:	d301      	bcc.n	8003f5e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003f5a:	2301      	movs	r3, #1
 8003f5c:	e00f      	b.n	8003f7e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003f5e:	4a0a      	ldr	r2, [pc, #40]	; (8003f88 <SysTick_Config+0x40>)
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	3b01      	subs	r3, #1
 8003f64:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003f66:	210f      	movs	r1, #15
 8003f68:	f04f 30ff 	mov.w	r0, #4294967295
 8003f6c:	f7ff ff8e 	bl	8003e8c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003f70:	4b05      	ldr	r3, [pc, #20]	; (8003f88 <SysTick_Config+0x40>)
 8003f72:	2200      	movs	r2, #0
 8003f74:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003f76:	4b04      	ldr	r3, [pc, #16]	; (8003f88 <SysTick_Config+0x40>)
 8003f78:	2207      	movs	r2, #7
 8003f7a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003f7c:	2300      	movs	r3, #0
}
 8003f7e:	4618      	mov	r0, r3
 8003f80:	3708      	adds	r7, #8
 8003f82:	46bd      	mov	sp, r7
 8003f84:	bd80      	pop	{r7, pc}
 8003f86:	bf00      	nop
 8003f88:	e000e010 	.word	0xe000e010

08003f8c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003f8c:	b580      	push	{r7, lr}
 8003f8e:	b082      	sub	sp, #8
 8003f90:	af00      	add	r7, sp, #0
 8003f92:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003f94:	6878      	ldr	r0, [r7, #4]
 8003f96:	f7ff ff29 	bl	8003dec <__NVIC_SetPriorityGrouping>
}
 8003f9a:	bf00      	nop
 8003f9c:	3708      	adds	r7, #8
 8003f9e:	46bd      	mov	sp, r7
 8003fa0:	bd80      	pop	{r7, pc}

08003fa2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003fa2:	b580      	push	{r7, lr}
 8003fa4:	b086      	sub	sp, #24
 8003fa6:	af00      	add	r7, sp, #0
 8003fa8:	4603      	mov	r3, r0
 8003faa:	60b9      	str	r1, [r7, #8]
 8003fac:	607a      	str	r2, [r7, #4]
 8003fae:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8003fb0:	f7ff ff40 	bl	8003e34 <__NVIC_GetPriorityGrouping>
 8003fb4:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003fb6:	687a      	ldr	r2, [r7, #4]
 8003fb8:	68b9      	ldr	r1, [r7, #8]
 8003fba:	6978      	ldr	r0, [r7, #20]
 8003fbc:	f7ff ff90 	bl	8003ee0 <NVIC_EncodePriority>
 8003fc0:	4602      	mov	r2, r0
 8003fc2:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8003fc6:	4611      	mov	r1, r2
 8003fc8:	4618      	mov	r0, r3
 8003fca:	f7ff ff5f 	bl	8003e8c <__NVIC_SetPriority>
}
 8003fce:	bf00      	nop
 8003fd0:	3718      	adds	r7, #24
 8003fd2:	46bd      	mov	sp, r7
 8003fd4:	bd80      	pop	{r7, pc}

08003fd6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003fd6:	b580      	push	{r7, lr}
 8003fd8:	b082      	sub	sp, #8
 8003fda:	af00      	add	r7, sp, #0
 8003fdc:	4603      	mov	r3, r0
 8003fde:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003fe0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003fe4:	4618      	mov	r0, r3
 8003fe6:	f7ff ff33 	bl	8003e50 <__NVIC_EnableIRQ>
}
 8003fea:	bf00      	nop
 8003fec:	3708      	adds	r7, #8
 8003fee:	46bd      	mov	sp, r7
 8003ff0:	bd80      	pop	{r7, pc}

08003ff2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003ff2:	b580      	push	{r7, lr}
 8003ff4:	b082      	sub	sp, #8
 8003ff6:	af00      	add	r7, sp, #0
 8003ff8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003ffa:	6878      	ldr	r0, [r7, #4]
 8003ffc:	f7ff ffa4 	bl	8003f48 <SysTick_Config>
 8004000:	4603      	mov	r3, r0
}
 8004002:	4618      	mov	r0, r3
 8004004:	3708      	adds	r7, #8
 8004006:	46bd      	mov	sp, r7
 8004008:	bd80      	pop	{r7, pc}
	...

0800400c <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800400c:	b580      	push	{r7, lr}
 800400e:	b086      	sub	sp, #24
 8004010:	af00      	add	r7, sp, #0
 8004012:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 8004014:	f7fe fdf6 	bl	8002c04 <HAL_GetTick>
 8004018:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	2b00      	cmp	r3, #0
 800401e:	d101      	bne.n	8004024 <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 8004020:	2301      	movs	r3, #1
 8004022:	e2dc      	b.n	80045de <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800402a:	b2db      	uxtb	r3, r3
 800402c:	2b02      	cmp	r3, #2
 800402e:	d008      	beq.n	8004042 <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	2280      	movs	r2, #128	; 0x80
 8004034:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	2200      	movs	r2, #0
 800403a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_ERROR;
 800403e:	2301      	movs	r3, #1
 8004040:	e2cd      	b.n	80045de <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	4a76      	ldr	r2, [pc, #472]	; (8004220 <HAL_DMA_Abort+0x214>)
 8004048:	4293      	cmp	r3, r2
 800404a:	d04a      	beq.n	80040e2 <HAL_DMA_Abort+0xd6>
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	4a74      	ldr	r2, [pc, #464]	; (8004224 <HAL_DMA_Abort+0x218>)
 8004052:	4293      	cmp	r3, r2
 8004054:	d045      	beq.n	80040e2 <HAL_DMA_Abort+0xd6>
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	4a73      	ldr	r2, [pc, #460]	; (8004228 <HAL_DMA_Abort+0x21c>)
 800405c:	4293      	cmp	r3, r2
 800405e:	d040      	beq.n	80040e2 <HAL_DMA_Abort+0xd6>
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	4a71      	ldr	r2, [pc, #452]	; (800422c <HAL_DMA_Abort+0x220>)
 8004066:	4293      	cmp	r3, r2
 8004068:	d03b      	beq.n	80040e2 <HAL_DMA_Abort+0xd6>
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	4a70      	ldr	r2, [pc, #448]	; (8004230 <HAL_DMA_Abort+0x224>)
 8004070:	4293      	cmp	r3, r2
 8004072:	d036      	beq.n	80040e2 <HAL_DMA_Abort+0xd6>
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	4a6e      	ldr	r2, [pc, #440]	; (8004234 <HAL_DMA_Abort+0x228>)
 800407a:	4293      	cmp	r3, r2
 800407c:	d031      	beq.n	80040e2 <HAL_DMA_Abort+0xd6>
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	4a6d      	ldr	r2, [pc, #436]	; (8004238 <HAL_DMA_Abort+0x22c>)
 8004084:	4293      	cmp	r3, r2
 8004086:	d02c      	beq.n	80040e2 <HAL_DMA_Abort+0xd6>
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	4a6b      	ldr	r2, [pc, #428]	; (800423c <HAL_DMA_Abort+0x230>)
 800408e:	4293      	cmp	r3, r2
 8004090:	d027      	beq.n	80040e2 <HAL_DMA_Abort+0xd6>
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	4a6a      	ldr	r2, [pc, #424]	; (8004240 <HAL_DMA_Abort+0x234>)
 8004098:	4293      	cmp	r3, r2
 800409a:	d022      	beq.n	80040e2 <HAL_DMA_Abort+0xd6>
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	4a68      	ldr	r2, [pc, #416]	; (8004244 <HAL_DMA_Abort+0x238>)
 80040a2:	4293      	cmp	r3, r2
 80040a4:	d01d      	beq.n	80040e2 <HAL_DMA_Abort+0xd6>
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	4a67      	ldr	r2, [pc, #412]	; (8004248 <HAL_DMA_Abort+0x23c>)
 80040ac:	4293      	cmp	r3, r2
 80040ae:	d018      	beq.n	80040e2 <HAL_DMA_Abort+0xd6>
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	4a65      	ldr	r2, [pc, #404]	; (800424c <HAL_DMA_Abort+0x240>)
 80040b6:	4293      	cmp	r3, r2
 80040b8:	d013      	beq.n	80040e2 <HAL_DMA_Abort+0xd6>
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	4a64      	ldr	r2, [pc, #400]	; (8004250 <HAL_DMA_Abort+0x244>)
 80040c0:	4293      	cmp	r3, r2
 80040c2:	d00e      	beq.n	80040e2 <HAL_DMA_Abort+0xd6>
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	4a62      	ldr	r2, [pc, #392]	; (8004254 <HAL_DMA_Abort+0x248>)
 80040ca:	4293      	cmp	r3, r2
 80040cc:	d009      	beq.n	80040e2 <HAL_DMA_Abort+0xd6>
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	4a61      	ldr	r2, [pc, #388]	; (8004258 <HAL_DMA_Abort+0x24c>)
 80040d4:	4293      	cmp	r3, r2
 80040d6:	d004      	beq.n	80040e2 <HAL_DMA_Abort+0xd6>
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	4a5f      	ldr	r2, [pc, #380]	; (800425c <HAL_DMA_Abort+0x250>)
 80040de:	4293      	cmp	r3, r2
 80040e0:	d101      	bne.n	80040e6 <HAL_DMA_Abort+0xda>
 80040e2:	2301      	movs	r3, #1
 80040e4:	e000      	b.n	80040e8 <HAL_DMA_Abort+0xdc>
 80040e6:	2300      	movs	r3, #0
 80040e8:	2b00      	cmp	r3, #0
 80040ea:	d013      	beq.n	8004114 <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	681a      	ldr	r2, [r3, #0]
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	f022 021e 	bic.w	r2, r2, #30
 80040fa:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	695a      	ldr	r2, [r3, #20]
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800410a:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	617b      	str	r3, [r7, #20]
 8004112:	e00a      	b.n	800412a <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	681a      	ldr	r2, [r3, #0]
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	f022 020e 	bic.w	r2, r2, #14
 8004122:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	4a3c      	ldr	r2, [pc, #240]	; (8004220 <HAL_DMA_Abort+0x214>)
 8004130:	4293      	cmp	r3, r2
 8004132:	d072      	beq.n	800421a <HAL_DMA_Abort+0x20e>
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	4a3a      	ldr	r2, [pc, #232]	; (8004224 <HAL_DMA_Abort+0x218>)
 800413a:	4293      	cmp	r3, r2
 800413c:	d06d      	beq.n	800421a <HAL_DMA_Abort+0x20e>
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	4a39      	ldr	r2, [pc, #228]	; (8004228 <HAL_DMA_Abort+0x21c>)
 8004144:	4293      	cmp	r3, r2
 8004146:	d068      	beq.n	800421a <HAL_DMA_Abort+0x20e>
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	4a37      	ldr	r2, [pc, #220]	; (800422c <HAL_DMA_Abort+0x220>)
 800414e:	4293      	cmp	r3, r2
 8004150:	d063      	beq.n	800421a <HAL_DMA_Abort+0x20e>
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	4a36      	ldr	r2, [pc, #216]	; (8004230 <HAL_DMA_Abort+0x224>)
 8004158:	4293      	cmp	r3, r2
 800415a:	d05e      	beq.n	800421a <HAL_DMA_Abort+0x20e>
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	4a34      	ldr	r2, [pc, #208]	; (8004234 <HAL_DMA_Abort+0x228>)
 8004162:	4293      	cmp	r3, r2
 8004164:	d059      	beq.n	800421a <HAL_DMA_Abort+0x20e>
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	4a33      	ldr	r2, [pc, #204]	; (8004238 <HAL_DMA_Abort+0x22c>)
 800416c:	4293      	cmp	r3, r2
 800416e:	d054      	beq.n	800421a <HAL_DMA_Abort+0x20e>
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	4a31      	ldr	r2, [pc, #196]	; (800423c <HAL_DMA_Abort+0x230>)
 8004176:	4293      	cmp	r3, r2
 8004178:	d04f      	beq.n	800421a <HAL_DMA_Abort+0x20e>
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	4a30      	ldr	r2, [pc, #192]	; (8004240 <HAL_DMA_Abort+0x234>)
 8004180:	4293      	cmp	r3, r2
 8004182:	d04a      	beq.n	800421a <HAL_DMA_Abort+0x20e>
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	4a2e      	ldr	r2, [pc, #184]	; (8004244 <HAL_DMA_Abort+0x238>)
 800418a:	4293      	cmp	r3, r2
 800418c:	d045      	beq.n	800421a <HAL_DMA_Abort+0x20e>
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	4a2d      	ldr	r2, [pc, #180]	; (8004248 <HAL_DMA_Abort+0x23c>)
 8004194:	4293      	cmp	r3, r2
 8004196:	d040      	beq.n	800421a <HAL_DMA_Abort+0x20e>
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	4a2b      	ldr	r2, [pc, #172]	; (800424c <HAL_DMA_Abort+0x240>)
 800419e:	4293      	cmp	r3, r2
 80041a0:	d03b      	beq.n	800421a <HAL_DMA_Abort+0x20e>
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	4a2a      	ldr	r2, [pc, #168]	; (8004250 <HAL_DMA_Abort+0x244>)
 80041a8:	4293      	cmp	r3, r2
 80041aa:	d036      	beq.n	800421a <HAL_DMA_Abort+0x20e>
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	4a28      	ldr	r2, [pc, #160]	; (8004254 <HAL_DMA_Abort+0x248>)
 80041b2:	4293      	cmp	r3, r2
 80041b4:	d031      	beq.n	800421a <HAL_DMA_Abort+0x20e>
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	4a27      	ldr	r2, [pc, #156]	; (8004258 <HAL_DMA_Abort+0x24c>)
 80041bc:	4293      	cmp	r3, r2
 80041be:	d02c      	beq.n	800421a <HAL_DMA_Abort+0x20e>
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	4a25      	ldr	r2, [pc, #148]	; (800425c <HAL_DMA_Abort+0x250>)
 80041c6:	4293      	cmp	r3, r2
 80041c8:	d027      	beq.n	800421a <HAL_DMA_Abort+0x20e>
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	4a24      	ldr	r2, [pc, #144]	; (8004260 <HAL_DMA_Abort+0x254>)
 80041d0:	4293      	cmp	r3, r2
 80041d2:	d022      	beq.n	800421a <HAL_DMA_Abort+0x20e>
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	4a22      	ldr	r2, [pc, #136]	; (8004264 <HAL_DMA_Abort+0x258>)
 80041da:	4293      	cmp	r3, r2
 80041dc:	d01d      	beq.n	800421a <HAL_DMA_Abort+0x20e>
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	4a21      	ldr	r2, [pc, #132]	; (8004268 <HAL_DMA_Abort+0x25c>)
 80041e4:	4293      	cmp	r3, r2
 80041e6:	d018      	beq.n	800421a <HAL_DMA_Abort+0x20e>
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	4a1f      	ldr	r2, [pc, #124]	; (800426c <HAL_DMA_Abort+0x260>)
 80041ee:	4293      	cmp	r3, r2
 80041f0:	d013      	beq.n	800421a <HAL_DMA_Abort+0x20e>
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	4a1e      	ldr	r2, [pc, #120]	; (8004270 <HAL_DMA_Abort+0x264>)
 80041f8:	4293      	cmp	r3, r2
 80041fa:	d00e      	beq.n	800421a <HAL_DMA_Abort+0x20e>
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	4a1c      	ldr	r2, [pc, #112]	; (8004274 <HAL_DMA_Abort+0x268>)
 8004202:	4293      	cmp	r3, r2
 8004204:	d009      	beq.n	800421a <HAL_DMA_Abort+0x20e>
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	4a1b      	ldr	r2, [pc, #108]	; (8004278 <HAL_DMA_Abort+0x26c>)
 800420c:	4293      	cmp	r3, r2
 800420e:	d004      	beq.n	800421a <HAL_DMA_Abort+0x20e>
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	4a19      	ldr	r2, [pc, #100]	; (800427c <HAL_DMA_Abort+0x270>)
 8004216:	4293      	cmp	r3, r2
 8004218:	d132      	bne.n	8004280 <HAL_DMA_Abort+0x274>
 800421a:	2301      	movs	r3, #1
 800421c:	e031      	b.n	8004282 <HAL_DMA_Abort+0x276>
 800421e:	bf00      	nop
 8004220:	40020010 	.word	0x40020010
 8004224:	40020028 	.word	0x40020028
 8004228:	40020040 	.word	0x40020040
 800422c:	40020058 	.word	0x40020058
 8004230:	40020070 	.word	0x40020070
 8004234:	40020088 	.word	0x40020088
 8004238:	400200a0 	.word	0x400200a0
 800423c:	400200b8 	.word	0x400200b8
 8004240:	40020410 	.word	0x40020410
 8004244:	40020428 	.word	0x40020428
 8004248:	40020440 	.word	0x40020440
 800424c:	40020458 	.word	0x40020458
 8004250:	40020470 	.word	0x40020470
 8004254:	40020488 	.word	0x40020488
 8004258:	400204a0 	.word	0x400204a0
 800425c:	400204b8 	.word	0x400204b8
 8004260:	58025408 	.word	0x58025408
 8004264:	5802541c 	.word	0x5802541c
 8004268:	58025430 	.word	0x58025430
 800426c:	58025444 	.word	0x58025444
 8004270:	58025458 	.word	0x58025458
 8004274:	5802546c 	.word	0x5802546c
 8004278:	58025480 	.word	0x58025480
 800427c:	58025494 	.word	0x58025494
 8004280:	2300      	movs	r3, #0
 8004282:	2b00      	cmp	r3, #0
 8004284:	d007      	beq.n	8004296 <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800428a:	681a      	ldr	r2, [r3, #0]
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004290:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004294:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	4a6d      	ldr	r2, [pc, #436]	; (8004450 <HAL_DMA_Abort+0x444>)
 800429c:	4293      	cmp	r3, r2
 800429e:	d04a      	beq.n	8004336 <HAL_DMA_Abort+0x32a>
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	4a6b      	ldr	r2, [pc, #428]	; (8004454 <HAL_DMA_Abort+0x448>)
 80042a6:	4293      	cmp	r3, r2
 80042a8:	d045      	beq.n	8004336 <HAL_DMA_Abort+0x32a>
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	4a6a      	ldr	r2, [pc, #424]	; (8004458 <HAL_DMA_Abort+0x44c>)
 80042b0:	4293      	cmp	r3, r2
 80042b2:	d040      	beq.n	8004336 <HAL_DMA_Abort+0x32a>
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	4a68      	ldr	r2, [pc, #416]	; (800445c <HAL_DMA_Abort+0x450>)
 80042ba:	4293      	cmp	r3, r2
 80042bc:	d03b      	beq.n	8004336 <HAL_DMA_Abort+0x32a>
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	4a67      	ldr	r2, [pc, #412]	; (8004460 <HAL_DMA_Abort+0x454>)
 80042c4:	4293      	cmp	r3, r2
 80042c6:	d036      	beq.n	8004336 <HAL_DMA_Abort+0x32a>
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	4a65      	ldr	r2, [pc, #404]	; (8004464 <HAL_DMA_Abort+0x458>)
 80042ce:	4293      	cmp	r3, r2
 80042d0:	d031      	beq.n	8004336 <HAL_DMA_Abort+0x32a>
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	4a64      	ldr	r2, [pc, #400]	; (8004468 <HAL_DMA_Abort+0x45c>)
 80042d8:	4293      	cmp	r3, r2
 80042da:	d02c      	beq.n	8004336 <HAL_DMA_Abort+0x32a>
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	4a62      	ldr	r2, [pc, #392]	; (800446c <HAL_DMA_Abort+0x460>)
 80042e2:	4293      	cmp	r3, r2
 80042e4:	d027      	beq.n	8004336 <HAL_DMA_Abort+0x32a>
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	4a61      	ldr	r2, [pc, #388]	; (8004470 <HAL_DMA_Abort+0x464>)
 80042ec:	4293      	cmp	r3, r2
 80042ee:	d022      	beq.n	8004336 <HAL_DMA_Abort+0x32a>
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	4a5f      	ldr	r2, [pc, #380]	; (8004474 <HAL_DMA_Abort+0x468>)
 80042f6:	4293      	cmp	r3, r2
 80042f8:	d01d      	beq.n	8004336 <HAL_DMA_Abort+0x32a>
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	4a5e      	ldr	r2, [pc, #376]	; (8004478 <HAL_DMA_Abort+0x46c>)
 8004300:	4293      	cmp	r3, r2
 8004302:	d018      	beq.n	8004336 <HAL_DMA_Abort+0x32a>
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	4a5c      	ldr	r2, [pc, #368]	; (800447c <HAL_DMA_Abort+0x470>)
 800430a:	4293      	cmp	r3, r2
 800430c:	d013      	beq.n	8004336 <HAL_DMA_Abort+0x32a>
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	4a5b      	ldr	r2, [pc, #364]	; (8004480 <HAL_DMA_Abort+0x474>)
 8004314:	4293      	cmp	r3, r2
 8004316:	d00e      	beq.n	8004336 <HAL_DMA_Abort+0x32a>
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	4a59      	ldr	r2, [pc, #356]	; (8004484 <HAL_DMA_Abort+0x478>)
 800431e:	4293      	cmp	r3, r2
 8004320:	d009      	beq.n	8004336 <HAL_DMA_Abort+0x32a>
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	4a58      	ldr	r2, [pc, #352]	; (8004488 <HAL_DMA_Abort+0x47c>)
 8004328:	4293      	cmp	r3, r2
 800432a:	d004      	beq.n	8004336 <HAL_DMA_Abort+0x32a>
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	4a56      	ldr	r2, [pc, #344]	; (800448c <HAL_DMA_Abort+0x480>)
 8004332:	4293      	cmp	r3, r2
 8004334:	d108      	bne.n	8004348 <HAL_DMA_Abort+0x33c>
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	681a      	ldr	r2, [r3, #0]
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	f022 0201 	bic.w	r2, r2, #1
 8004344:	601a      	str	r2, [r3, #0]
 8004346:	e007      	b.n	8004358 <HAL_DMA_Abort+0x34c>
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	681a      	ldr	r2, [r3, #0]
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	f022 0201 	bic.w	r2, r2, #1
 8004356:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8004358:	e013      	b.n	8004382 <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800435a:	f7fe fc53 	bl	8002c04 <HAL_GetTick>
 800435e:	4602      	mov	r2, r0
 8004360:	693b      	ldr	r3, [r7, #16]
 8004362:	1ad3      	subs	r3, r2, r3
 8004364:	2b05      	cmp	r3, #5
 8004366:	d90c      	bls.n	8004382 <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	2220      	movs	r2, #32
 800436c:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	2203      	movs	r2, #3
 8004372:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	2200      	movs	r2, #0
 800437a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_ERROR;
 800437e:	2301      	movs	r3, #1
 8004380:	e12d      	b.n	80045de <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8004382:	697b      	ldr	r3, [r7, #20]
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	f003 0301 	and.w	r3, r3, #1
 800438a:	2b00      	cmp	r3, #0
 800438c:	d1e5      	bne.n	800435a <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	4a2f      	ldr	r2, [pc, #188]	; (8004450 <HAL_DMA_Abort+0x444>)
 8004394:	4293      	cmp	r3, r2
 8004396:	d04a      	beq.n	800442e <HAL_DMA_Abort+0x422>
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	4a2d      	ldr	r2, [pc, #180]	; (8004454 <HAL_DMA_Abort+0x448>)
 800439e:	4293      	cmp	r3, r2
 80043a0:	d045      	beq.n	800442e <HAL_DMA_Abort+0x422>
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	4a2c      	ldr	r2, [pc, #176]	; (8004458 <HAL_DMA_Abort+0x44c>)
 80043a8:	4293      	cmp	r3, r2
 80043aa:	d040      	beq.n	800442e <HAL_DMA_Abort+0x422>
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	4a2a      	ldr	r2, [pc, #168]	; (800445c <HAL_DMA_Abort+0x450>)
 80043b2:	4293      	cmp	r3, r2
 80043b4:	d03b      	beq.n	800442e <HAL_DMA_Abort+0x422>
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	4a29      	ldr	r2, [pc, #164]	; (8004460 <HAL_DMA_Abort+0x454>)
 80043bc:	4293      	cmp	r3, r2
 80043be:	d036      	beq.n	800442e <HAL_DMA_Abort+0x422>
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	4a27      	ldr	r2, [pc, #156]	; (8004464 <HAL_DMA_Abort+0x458>)
 80043c6:	4293      	cmp	r3, r2
 80043c8:	d031      	beq.n	800442e <HAL_DMA_Abort+0x422>
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	4a26      	ldr	r2, [pc, #152]	; (8004468 <HAL_DMA_Abort+0x45c>)
 80043d0:	4293      	cmp	r3, r2
 80043d2:	d02c      	beq.n	800442e <HAL_DMA_Abort+0x422>
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	4a24      	ldr	r2, [pc, #144]	; (800446c <HAL_DMA_Abort+0x460>)
 80043da:	4293      	cmp	r3, r2
 80043dc:	d027      	beq.n	800442e <HAL_DMA_Abort+0x422>
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	4a23      	ldr	r2, [pc, #140]	; (8004470 <HAL_DMA_Abort+0x464>)
 80043e4:	4293      	cmp	r3, r2
 80043e6:	d022      	beq.n	800442e <HAL_DMA_Abort+0x422>
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	4a21      	ldr	r2, [pc, #132]	; (8004474 <HAL_DMA_Abort+0x468>)
 80043ee:	4293      	cmp	r3, r2
 80043f0:	d01d      	beq.n	800442e <HAL_DMA_Abort+0x422>
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	4a20      	ldr	r2, [pc, #128]	; (8004478 <HAL_DMA_Abort+0x46c>)
 80043f8:	4293      	cmp	r3, r2
 80043fa:	d018      	beq.n	800442e <HAL_DMA_Abort+0x422>
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	4a1e      	ldr	r2, [pc, #120]	; (800447c <HAL_DMA_Abort+0x470>)
 8004402:	4293      	cmp	r3, r2
 8004404:	d013      	beq.n	800442e <HAL_DMA_Abort+0x422>
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	4a1d      	ldr	r2, [pc, #116]	; (8004480 <HAL_DMA_Abort+0x474>)
 800440c:	4293      	cmp	r3, r2
 800440e:	d00e      	beq.n	800442e <HAL_DMA_Abort+0x422>
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	4a1b      	ldr	r2, [pc, #108]	; (8004484 <HAL_DMA_Abort+0x478>)
 8004416:	4293      	cmp	r3, r2
 8004418:	d009      	beq.n	800442e <HAL_DMA_Abort+0x422>
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	4a1a      	ldr	r2, [pc, #104]	; (8004488 <HAL_DMA_Abort+0x47c>)
 8004420:	4293      	cmp	r3, r2
 8004422:	d004      	beq.n	800442e <HAL_DMA_Abort+0x422>
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	4a18      	ldr	r2, [pc, #96]	; (800448c <HAL_DMA_Abort+0x480>)
 800442a:	4293      	cmp	r3, r2
 800442c:	d101      	bne.n	8004432 <HAL_DMA_Abort+0x426>
 800442e:	2301      	movs	r3, #1
 8004430:	e000      	b.n	8004434 <HAL_DMA_Abort+0x428>
 8004432:	2300      	movs	r3, #0
 8004434:	2b00      	cmp	r3, #0
 8004436:	d02b      	beq.n	8004490 <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800443c:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004442:	f003 031f 	and.w	r3, r3, #31
 8004446:	223f      	movs	r2, #63	; 0x3f
 8004448:	409a      	lsls	r2, r3
 800444a:	68bb      	ldr	r3, [r7, #8]
 800444c:	609a      	str	r2, [r3, #8]
 800444e:	e02a      	b.n	80044a6 <HAL_DMA_Abort+0x49a>
 8004450:	40020010 	.word	0x40020010
 8004454:	40020028 	.word	0x40020028
 8004458:	40020040 	.word	0x40020040
 800445c:	40020058 	.word	0x40020058
 8004460:	40020070 	.word	0x40020070
 8004464:	40020088 	.word	0x40020088
 8004468:	400200a0 	.word	0x400200a0
 800446c:	400200b8 	.word	0x400200b8
 8004470:	40020410 	.word	0x40020410
 8004474:	40020428 	.word	0x40020428
 8004478:	40020440 	.word	0x40020440
 800447c:	40020458 	.word	0x40020458
 8004480:	40020470 	.word	0x40020470
 8004484:	40020488 	.word	0x40020488
 8004488:	400204a0 	.word	0x400204a0
 800448c:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004494:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800449a:	f003 031f 	and.w	r3, r3, #31
 800449e:	2201      	movs	r2, #1
 80044a0:	409a      	lsls	r2, r3
 80044a2:	68fb      	ldr	r3, [r7, #12]
 80044a4:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	4a4f      	ldr	r2, [pc, #316]	; (80045e8 <HAL_DMA_Abort+0x5dc>)
 80044ac:	4293      	cmp	r3, r2
 80044ae:	d072      	beq.n	8004596 <HAL_DMA_Abort+0x58a>
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	4a4d      	ldr	r2, [pc, #308]	; (80045ec <HAL_DMA_Abort+0x5e0>)
 80044b6:	4293      	cmp	r3, r2
 80044b8:	d06d      	beq.n	8004596 <HAL_DMA_Abort+0x58a>
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	4a4c      	ldr	r2, [pc, #304]	; (80045f0 <HAL_DMA_Abort+0x5e4>)
 80044c0:	4293      	cmp	r3, r2
 80044c2:	d068      	beq.n	8004596 <HAL_DMA_Abort+0x58a>
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	4a4a      	ldr	r2, [pc, #296]	; (80045f4 <HAL_DMA_Abort+0x5e8>)
 80044ca:	4293      	cmp	r3, r2
 80044cc:	d063      	beq.n	8004596 <HAL_DMA_Abort+0x58a>
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	4a49      	ldr	r2, [pc, #292]	; (80045f8 <HAL_DMA_Abort+0x5ec>)
 80044d4:	4293      	cmp	r3, r2
 80044d6:	d05e      	beq.n	8004596 <HAL_DMA_Abort+0x58a>
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	4a47      	ldr	r2, [pc, #284]	; (80045fc <HAL_DMA_Abort+0x5f0>)
 80044de:	4293      	cmp	r3, r2
 80044e0:	d059      	beq.n	8004596 <HAL_DMA_Abort+0x58a>
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	4a46      	ldr	r2, [pc, #280]	; (8004600 <HAL_DMA_Abort+0x5f4>)
 80044e8:	4293      	cmp	r3, r2
 80044ea:	d054      	beq.n	8004596 <HAL_DMA_Abort+0x58a>
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	4a44      	ldr	r2, [pc, #272]	; (8004604 <HAL_DMA_Abort+0x5f8>)
 80044f2:	4293      	cmp	r3, r2
 80044f4:	d04f      	beq.n	8004596 <HAL_DMA_Abort+0x58a>
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	4a43      	ldr	r2, [pc, #268]	; (8004608 <HAL_DMA_Abort+0x5fc>)
 80044fc:	4293      	cmp	r3, r2
 80044fe:	d04a      	beq.n	8004596 <HAL_DMA_Abort+0x58a>
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	4a41      	ldr	r2, [pc, #260]	; (800460c <HAL_DMA_Abort+0x600>)
 8004506:	4293      	cmp	r3, r2
 8004508:	d045      	beq.n	8004596 <HAL_DMA_Abort+0x58a>
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	4a40      	ldr	r2, [pc, #256]	; (8004610 <HAL_DMA_Abort+0x604>)
 8004510:	4293      	cmp	r3, r2
 8004512:	d040      	beq.n	8004596 <HAL_DMA_Abort+0x58a>
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	4a3e      	ldr	r2, [pc, #248]	; (8004614 <HAL_DMA_Abort+0x608>)
 800451a:	4293      	cmp	r3, r2
 800451c:	d03b      	beq.n	8004596 <HAL_DMA_Abort+0x58a>
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	4a3d      	ldr	r2, [pc, #244]	; (8004618 <HAL_DMA_Abort+0x60c>)
 8004524:	4293      	cmp	r3, r2
 8004526:	d036      	beq.n	8004596 <HAL_DMA_Abort+0x58a>
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	4a3b      	ldr	r2, [pc, #236]	; (800461c <HAL_DMA_Abort+0x610>)
 800452e:	4293      	cmp	r3, r2
 8004530:	d031      	beq.n	8004596 <HAL_DMA_Abort+0x58a>
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	4a3a      	ldr	r2, [pc, #232]	; (8004620 <HAL_DMA_Abort+0x614>)
 8004538:	4293      	cmp	r3, r2
 800453a:	d02c      	beq.n	8004596 <HAL_DMA_Abort+0x58a>
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	4a38      	ldr	r2, [pc, #224]	; (8004624 <HAL_DMA_Abort+0x618>)
 8004542:	4293      	cmp	r3, r2
 8004544:	d027      	beq.n	8004596 <HAL_DMA_Abort+0x58a>
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	4a37      	ldr	r2, [pc, #220]	; (8004628 <HAL_DMA_Abort+0x61c>)
 800454c:	4293      	cmp	r3, r2
 800454e:	d022      	beq.n	8004596 <HAL_DMA_Abort+0x58a>
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	4a35      	ldr	r2, [pc, #212]	; (800462c <HAL_DMA_Abort+0x620>)
 8004556:	4293      	cmp	r3, r2
 8004558:	d01d      	beq.n	8004596 <HAL_DMA_Abort+0x58a>
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	4a34      	ldr	r2, [pc, #208]	; (8004630 <HAL_DMA_Abort+0x624>)
 8004560:	4293      	cmp	r3, r2
 8004562:	d018      	beq.n	8004596 <HAL_DMA_Abort+0x58a>
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	4a32      	ldr	r2, [pc, #200]	; (8004634 <HAL_DMA_Abort+0x628>)
 800456a:	4293      	cmp	r3, r2
 800456c:	d013      	beq.n	8004596 <HAL_DMA_Abort+0x58a>
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	4a31      	ldr	r2, [pc, #196]	; (8004638 <HAL_DMA_Abort+0x62c>)
 8004574:	4293      	cmp	r3, r2
 8004576:	d00e      	beq.n	8004596 <HAL_DMA_Abort+0x58a>
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	4a2f      	ldr	r2, [pc, #188]	; (800463c <HAL_DMA_Abort+0x630>)
 800457e:	4293      	cmp	r3, r2
 8004580:	d009      	beq.n	8004596 <HAL_DMA_Abort+0x58a>
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	4a2e      	ldr	r2, [pc, #184]	; (8004640 <HAL_DMA_Abort+0x634>)
 8004588:	4293      	cmp	r3, r2
 800458a:	d004      	beq.n	8004596 <HAL_DMA_Abort+0x58a>
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	4a2c      	ldr	r2, [pc, #176]	; (8004644 <HAL_DMA_Abort+0x638>)
 8004592:	4293      	cmp	r3, r2
 8004594:	d101      	bne.n	800459a <HAL_DMA_Abort+0x58e>
 8004596:	2301      	movs	r3, #1
 8004598:	e000      	b.n	800459c <HAL_DMA_Abort+0x590>
 800459a:	2300      	movs	r3, #0
 800459c:	2b00      	cmp	r3, #0
 800459e:	d015      	beq.n	80045cc <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80045a4:	687a      	ldr	r2, [r7, #4]
 80045a6:	6e92      	ldr	r2, [r2, #104]	; 0x68
 80045a8:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80045ae:	2b00      	cmp	r3, #0
 80045b0:	d00c      	beq.n	80045cc <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80045b6:	681a      	ldr	r2, [r3, #0]
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80045bc:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80045c0:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80045c6:	687a      	ldr	r2, [r7, #4]
 80045c8:	6f52      	ldr	r2, [r2, #116]	; 0x74
 80045ca:	605a      	str	r2, [r3, #4]
      }
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	2201      	movs	r2, #1
 80045d0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	2200      	movs	r2, #0
 80045d8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }

  return HAL_OK;
 80045dc:	2300      	movs	r3, #0
}
 80045de:	4618      	mov	r0, r3
 80045e0:	3718      	adds	r7, #24
 80045e2:	46bd      	mov	sp, r7
 80045e4:	bd80      	pop	{r7, pc}
 80045e6:	bf00      	nop
 80045e8:	40020010 	.word	0x40020010
 80045ec:	40020028 	.word	0x40020028
 80045f0:	40020040 	.word	0x40020040
 80045f4:	40020058 	.word	0x40020058
 80045f8:	40020070 	.word	0x40020070
 80045fc:	40020088 	.word	0x40020088
 8004600:	400200a0 	.word	0x400200a0
 8004604:	400200b8 	.word	0x400200b8
 8004608:	40020410 	.word	0x40020410
 800460c:	40020428 	.word	0x40020428
 8004610:	40020440 	.word	0x40020440
 8004614:	40020458 	.word	0x40020458
 8004618:	40020470 	.word	0x40020470
 800461c:	40020488 	.word	0x40020488
 8004620:	400204a0 	.word	0x400204a0
 8004624:	400204b8 	.word	0x400204b8
 8004628:	58025408 	.word	0x58025408
 800462c:	5802541c 	.word	0x5802541c
 8004630:	58025430 	.word	0x58025430
 8004634:	58025444 	.word	0x58025444
 8004638:	58025458 	.word	0x58025458
 800463c:	5802546c 	.word	0x5802546c
 8004640:	58025480 	.word	0x58025480
 8004644:	58025494 	.word	0x58025494

08004648 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8004648:	b580      	push	{r7, lr}
 800464a:	b084      	sub	sp, #16
 800464c:	af00      	add	r7, sp, #0
 800464e:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	2b00      	cmp	r3, #0
 8004654:	d101      	bne.n	800465a <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 8004656:	2301      	movs	r3, #1
 8004658:	e237      	b.n	8004aca <HAL_DMA_Abort_IT+0x482>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004660:	b2db      	uxtb	r3, r3
 8004662:	2b02      	cmp	r3, #2
 8004664:	d004      	beq.n	8004670 <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	2280      	movs	r2, #128	; 0x80
 800466a:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800466c:	2301      	movs	r3, #1
 800466e:	e22c      	b.n	8004aca <HAL_DMA_Abort_IT+0x482>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	4a5c      	ldr	r2, [pc, #368]	; (80047e8 <HAL_DMA_Abort_IT+0x1a0>)
 8004676:	4293      	cmp	r3, r2
 8004678:	d04a      	beq.n	8004710 <HAL_DMA_Abort_IT+0xc8>
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	4a5b      	ldr	r2, [pc, #364]	; (80047ec <HAL_DMA_Abort_IT+0x1a4>)
 8004680:	4293      	cmp	r3, r2
 8004682:	d045      	beq.n	8004710 <HAL_DMA_Abort_IT+0xc8>
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	4a59      	ldr	r2, [pc, #356]	; (80047f0 <HAL_DMA_Abort_IT+0x1a8>)
 800468a:	4293      	cmp	r3, r2
 800468c:	d040      	beq.n	8004710 <HAL_DMA_Abort_IT+0xc8>
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	4a58      	ldr	r2, [pc, #352]	; (80047f4 <HAL_DMA_Abort_IT+0x1ac>)
 8004694:	4293      	cmp	r3, r2
 8004696:	d03b      	beq.n	8004710 <HAL_DMA_Abort_IT+0xc8>
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	4a56      	ldr	r2, [pc, #344]	; (80047f8 <HAL_DMA_Abort_IT+0x1b0>)
 800469e:	4293      	cmp	r3, r2
 80046a0:	d036      	beq.n	8004710 <HAL_DMA_Abort_IT+0xc8>
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	4a55      	ldr	r2, [pc, #340]	; (80047fc <HAL_DMA_Abort_IT+0x1b4>)
 80046a8:	4293      	cmp	r3, r2
 80046aa:	d031      	beq.n	8004710 <HAL_DMA_Abort_IT+0xc8>
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	4a53      	ldr	r2, [pc, #332]	; (8004800 <HAL_DMA_Abort_IT+0x1b8>)
 80046b2:	4293      	cmp	r3, r2
 80046b4:	d02c      	beq.n	8004710 <HAL_DMA_Abort_IT+0xc8>
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	4a52      	ldr	r2, [pc, #328]	; (8004804 <HAL_DMA_Abort_IT+0x1bc>)
 80046bc:	4293      	cmp	r3, r2
 80046be:	d027      	beq.n	8004710 <HAL_DMA_Abort_IT+0xc8>
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	4a50      	ldr	r2, [pc, #320]	; (8004808 <HAL_DMA_Abort_IT+0x1c0>)
 80046c6:	4293      	cmp	r3, r2
 80046c8:	d022      	beq.n	8004710 <HAL_DMA_Abort_IT+0xc8>
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	4a4f      	ldr	r2, [pc, #316]	; (800480c <HAL_DMA_Abort_IT+0x1c4>)
 80046d0:	4293      	cmp	r3, r2
 80046d2:	d01d      	beq.n	8004710 <HAL_DMA_Abort_IT+0xc8>
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	4a4d      	ldr	r2, [pc, #308]	; (8004810 <HAL_DMA_Abort_IT+0x1c8>)
 80046da:	4293      	cmp	r3, r2
 80046dc:	d018      	beq.n	8004710 <HAL_DMA_Abort_IT+0xc8>
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	4a4c      	ldr	r2, [pc, #304]	; (8004814 <HAL_DMA_Abort_IT+0x1cc>)
 80046e4:	4293      	cmp	r3, r2
 80046e6:	d013      	beq.n	8004710 <HAL_DMA_Abort_IT+0xc8>
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	4a4a      	ldr	r2, [pc, #296]	; (8004818 <HAL_DMA_Abort_IT+0x1d0>)
 80046ee:	4293      	cmp	r3, r2
 80046f0:	d00e      	beq.n	8004710 <HAL_DMA_Abort_IT+0xc8>
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	4a49      	ldr	r2, [pc, #292]	; (800481c <HAL_DMA_Abort_IT+0x1d4>)
 80046f8:	4293      	cmp	r3, r2
 80046fa:	d009      	beq.n	8004710 <HAL_DMA_Abort_IT+0xc8>
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	4a47      	ldr	r2, [pc, #284]	; (8004820 <HAL_DMA_Abort_IT+0x1d8>)
 8004702:	4293      	cmp	r3, r2
 8004704:	d004      	beq.n	8004710 <HAL_DMA_Abort_IT+0xc8>
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	4a46      	ldr	r2, [pc, #280]	; (8004824 <HAL_DMA_Abort_IT+0x1dc>)
 800470c:	4293      	cmp	r3, r2
 800470e:	d101      	bne.n	8004714 <HAL_DMA_Abort_IT+0xcc>
 8004710:	2301      	movs	r3, #1
 8004712:	e000      	b.n	8004716 <HAL_DMA_Abort_IT+0xce>
 8004714:	2300      	movs	r3, #0
 8004716:	2b00      	cmp	r3, #0
 8004718:	f000 8086 	beq.w	8004828 <HAL_DMA_Abort_IT+0x1e0>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	2204      	movs	r2, #4
 8004720:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	4a2f      	ldr	r2, [pc, #188]	; (80047e8 <HAL_DMA_Abort_IT+0x1a0>)
 800472a:	4293      	cmp	r3, r2
 800472c:	d04a      	beq.n	80047c4 <HAL_DMA_Abort_IT+0x17c>
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	4a2e      	ldr	r2, [pc, #184]	; (80047ec <HAL_DMA_Abort_IT+0x1a4>)
 8004734:	4293      	cmp	r3, r2
 8004736:	d045      	beq.n	80047c4 <HAL_DMA_Abort_IT+0x17c>
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	4a2c      	ldr	r2, [pc, #176]	; (80047f0 <HAL_DMA_Abort_IT+0x1a8>)
 800473e:	4293      	cmp	r3, r2
 8004740:	d040      	beq.n	80047c4 <HAL_DMA_Abort_IT+0x17c>
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	4a2b      	ldr	r2, [pc, #172]	; (80047f4 <HAL_DMA_Abort_IT+0x1ac>)
 8004748:	4293      	cmp	r3, r2
 800474a:	d03b      	beq.n	80047c4 <HAL_DMA_Abort_IT+0x17c>
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	4a29      	ldr	r2, [pc, #164]	; (80047f8 <HAL_DMA_Abort_IT+0x1b0>)
 8004752:	4293      	cmp	r3, r2
 8004754:	d036      	beq.n	80047c4 <HAL_DMA_Abort_IT+0x17c>
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	4a28      	ldr	r2, [pc, #160]	; (80047fc <HAL_DMA_Abort_IT+0x1b4>)
 800475c:	4293      	cmp	r3, r2
 800475e:	d031      	beq.n	80047c4 <HAL_DMA_Abort_IT+0x17c>
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	4a26      	ldr	r2, [pc, #152]	; (8004800 <HAL_DMA_Abort_IT+0x1b8>)
 8004766:	4293      	cmp	r3, r2
 8004768:	d02c      	beq.n	80047c4 <HAL_DMA_Abort_IT+0x17c>
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	4a25      	ldr	r2, [pc, #148]	; (8004804 <HAL_DMA_Abort_IT+0x1bc>)
 8004770:	4293      	cmp	r3, r2
 8004772:	d027      	beq.n	80047c4 <HAL_DMA_Abort_IT+0x17c>
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	4a23      	ldr	r2, [pc, #140]	; (8004808 <HAL_DMA_Abort_IT+0x1c0>)
 800477a:	4293      	cmp	r3, r2
 800477c:	d022      	beq.n	80047c4 <HAL_DMA_Abort_IT+0x17c>
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	4a22      	ldr	r2, [pc, #136]	; (800480c <HAL_DMA_Abort_IT+0x1c4>)
 8004784:	4293      	cmp	r3, r2
 8004786:	d01d      	beq.n	80047c4 <HAL_DMA_Abort_IT+0x17c>
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	4a20      	ldr	r2, [pc, #128]	; (8004810 <HAL_DMA_Abort_IT+0x1c8>)
 800478e:	4293      	cmp	r3, r2
 8004790:	d018      	beq.n	80047c4 <HAL_DMA_Abort_IT+0x17c>
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	4a1f      	ldr	r2, [pc, #124]	; (8004814 <HAL_DMA_Abort_IT+0x1cc>)
 8004798:	4293      	cmp	r3, r2
 800479a:	d013      	beq.n	80047c4 <HAL_DMA_Abort_IT+0x17c>
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	4a1d      	ldr	r2, [pc, #116]	; (8004818 <HAL_DMA_Abort_IT+0x1d0>)
 80047a2:	4293      	cmp	r3, r2
 80047a4:	d00e      	beq.n	80047c4 <HAL_DMA_Abort_IT+0x17c>
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	4a1c      	ldr	r2, [pc, #112]	; (800481c <HAL_DMA_Abort_IT+0x1d4>)
 80047ac:	4293      	cmp	r3, r2
 80047ae:	d009      	beq.n	80047c4 <HAL_DMA_Abort_IT+0x17c>
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	4a1a      	ldr	r2, [pc, #104]	; (8004820 <HAL_DMA_Abort_IT+0x1d8>)
 80047b6:	4293      	cmp	r3, r2
 80047b8:	d004      	beq.n	80047c4 <HAL_DMA_Abort_IT+0x17c>
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	4a19      	ldr	r2, [pc, #100]	; (8004824 <HAL_DMA_Abort_IT+0x1dc>)
 80047c0:	4293      	cmp	r3, r2
 80047c2:	d108      	bne.n	80047d6 <HAL_DMA_Abort_IT+0x18e>
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	681a      	ldr	r2, [r3, #0]
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	f022 0201 	bic.w	r2, r2, #1
 80047d2:	601a      	str	r2, [r3, #0]
 80047d4:	e178      	b.n	8004ac8 <HAL_DMA_Abort_IT+0x480>
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	681a      	ldr	r2, [r3, #0]
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	f022 0201 	bic.w	r2, r2, #1
 80047e4:	601a      	str	r2, [r3, #0]
 80047e6:	e16f      	b.n	8004ac8 <HAL_DMA_Abort_IT+0x480>
 80047e8:	40020010 	.word	0x40020010
 80047ec:	40020028 	.word	0x40020028
 80047f0:	40020040 	.word	0x40020040
 80047f4:	40020058 	.word	0x40020058
 80047f8:	40020070 	.word	0x40020070
 80047fc:	40020088 	.word	0x40020088
 8004800:	400200a0 	.word	0x400200a0
 8004804:	400200b8 	.word	0x400200b8
 8004808:	40020410 	.word	0x40020410
 800480c:	40020428 	.word	0x40020428
 8004810:	40020440 	.word	0x40020440
 8004814:	40020458 	.word	0x40020458
 8004818:	40020470 	.word	0x40020470
 800481c:	40020488 	.word	0x40020488
 8004820:	400204a0 	.word	0x400204a0
 8004824:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	681a      	ldr	r2, [r3, #0]
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	f022 020e 	bic.w	r2, r2, #14
 8004836:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	4a6c      	ldr	r2, [pc, #432]	; (80049f0 <HAL_DMA_Abort_IT+0x3a8>)
 800483e:	4293      	cmp	r3, r2
 8004840:	d04a      	beq.n	80048d8 <HAL_DMA_Abort_IT+0x290>
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	4a6b      	ldr	r2, [pc, #428]	; (80049f4 <HAL_DMA_Abort_IT+0x3ac>)
 8004848:	4293      	cmp	r3, r2
 800484a:	d045      	beq.n	80048d8 <HAL_DMA_Abort_IT+0x290>
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	4a69      	ldr	r2, [pc, #420]	; (80049f8 <HAL_DMA_Abort_IT+0x3b0>)
 8004852:	4293      	cmp	r3, r2
 8004854:	d040      	beq.n	80048d8 <HAL_DMA_Abort_IT+0x290>
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	4a68      	ldr	r2, [pc, #416]	; (80049fc <HAL_DMA_Abort_IT+0x3b4>)
 800485c:	4293      	cmp	r3, r2
 800485e:	d03b      	beq.n	80048d8 <HAL_DMA_Abort_IT+0x290>
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	4a66      	ldr	r2, [pc, #408]	; (8004a00 <HAL_DMA_Abort_IT+0x3b8>)
 8004866:	4293      	cmp	r3, r2
 8004868:	d036      	beq.n	80048d8 <HAL_DMA_Abort_IT+0x290>
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	4a65      	ldr	r2, [pc, #404]	; (8004a04 <HAL_DMA_Abort_IT+0x3bc>)
 8004870:	4293      	cmp	r3, r2
 8004872:	d031      	beq.n	80048d8 <HAL_DMA_Abort_IT+0x290>
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	4a63      	ldr	r2, [pc, #396]	; (8004a08 <HAL_DMA_Abort_IT+0x3c0>)
 800487a:	4293      	cmp	r3, r2
 800487c:	d02c      	beq.n	80048d8 <HAL_DMA_Abort_IT+0x290>
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	4a62      	ldr	r2, [pc, #392]	; (8004a0c <HAL_DMA_Abort_IT+0x3c4>)
 8004884:	4293      	cmp	r3, r2
 8004886:	d027      	beq.n	80048d8 <HAL_DMA_Abort_IT+0x290>
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	4a60      	ldr	r2, [pc, #384]	; (8004a10 <HAL_DMA_Abort_IT+0x3c8>)
 800488e:	4293      	cmp	r3, r2
 8004890:	d022      	beq.n	80048d8 <HAL_DMA_Abort_IT+0x290>
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	4a5f      	ldr	r2, [pc, #380]	; (8004a14 <HAL_DMA_Abort_IT+0x3cc>)
 8004898:	4293      	cmp	r3, r2
 800489a:	d01d      	beq.n	80048d8 <HAL_DMA_Abort_IT+0x290>
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	4a5d      	ldr	r2, [pc, #372]	; (8004a18 <HAL_DMA_Abort_IT+0x3d0>)
 80048a2:	4293      	cmp	r3, r2
 80048a4:	d018      	beq.n	80048d8 <HAL_DMA_Abort_IT+0x290>
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	4a5c      	ldr	r2, [pc, #368]	; (8004a1c <HAL_DMA_Abort_IT+0x3d4>)
 80048ac:	4293      	cmp	r3, r2
 80048ae:	d013      	beq.n	80048d8 <HAL_DMA_Abort_IT+0x290>
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	4a5a      	ldr	r2, [pc, #360]	; (8004a20 <HAL_DMA_Abort_IT+0x3d8>)
 80048b6:	4293      	cmp	r3, r2
 80048b8:	d00e      	beq.n	80048d8 <HAL_DMA_Abort_IT+0x290>
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	4a59      	ldr	r2, [pc, #356]	; (8004a24 <HAL_DMA_Abort_IT+0x3dc>)
 80048c0:	4293      	cmp	r3, r2
 80048c2:	d009      	beq.n	80048d8 <HAL_DMA_Abort_IT+0x290>
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	4a57      	ldr	r2, [pc, #348]	; (8004a28 <HAL_DMA_Abort_IT+0x3e0>)
 80048ca:	4293      	cmp	r3, r2
 80048cc:	d004      	beq.n	80048d8 <HAL_DMA_Abort_IT+0x290>
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	4a56      	ldr	r2, [pc, #344]	; (8004a2c <HAL_DMA_Abort_IT+0x3e4>)
 80048d4:	4293      	cmp	r3, r2
 80048d6:	d108      	bne.n	80048ea <HAL_DMA_Abort_IT+0x2a2>
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	681a      	ldr	r2, [r3, #0]
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	681b      	ldr	r3, [r3, #0]
 80048e2:	f022 0201 	bic.w	r2, r2, #1
 80048e6:	601a      	str	r2, [r3, #0]
 80048e8:	e007      	b.n	80048fa <HAL_DMA_Abort_IT+0x2b2>
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	681a      	ldr	r2, [r3, #0]
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	f022 0201 	bic.w	r2, r2, #1
 80048f8:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	4a3c      	ldr	r2, [pc, #240]	; (80049f0 <HAL_DMA_Abort_IT+0x3a8>)
 8004900:	4293      	cmp	r3, r2
 8004902:	d072      	beq.n	80049ea <HAL_DMA_Abort_IT+0x3a2>
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	4a3a      	ldr	r2, [pc, #232]	; (80049f4 <HAL_DMA_Abort_IT+0x3ac>)
 800490a:	4293      	cmp	r3, r2
 800490c:	d06d      	beq.n	80049ea <HAL_DMA_Abort_IT+0x3a2>
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	4a39      	ldr	r2, [pc, #228]	; (80049f8 <HAL_DMA_Abort_IT+0x3b0>)
 8004914:	4293      	cmp	r3, r2
 8004916:	d068      	beq.n	80049ea <HAL_DMA_Abort_IT+0x3a2>
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	4a37      	ldr	r2, [pc, #220]	; (80049fc <HAL_DMA_Abort_IT+0x3b4>)
 800491e:	4293      	cmp	r3, r2
 8004920:	d063      	beq.n	80049ea <HAL_DMA_Abort_IT+0x3a2>
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	4a36      	ldr	r2, [pc, #216]	; (8004a00 <HAL_DMA_Abort_IT+0x3b8>)
 8004928:	4293      	cmp	r3, r2
 800492a:	d05e      	beq.n	80049ea <HAL_DMA_Abort_IT+0x3a2>
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	4a34      	ldr	r2, [pc, #208]	; (8004a04 <HAL_DMA_Abort_IT+0x3bc>)
 8004932:	4293      	cmp	r3, r2
 8004934:	d059      	beq.n	80049ea <HAL_DMA_Abort_IT+0x3a2>
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	4a33      	ldr	r2, [pc, #204]	; (8004a08 <HAL_DMA_Abort_IT+0x3c0>)
 800493c:	4293      	cmp	r3, r2
 800493e:	d054      	beq.n	80049ea <HAL_DMA_Abort_IT+0x3a2>
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	4a31      	ldr	r2, [pc, #196]	; (8004a0c <HAL_DMA_Abort_IT+0x3c4>)
 8004946:	4293      	cmp	r3, r2
 8004948:	d04f      	beq.n	80049ea <HAL_DMA_Abort_IT+0x3a2>
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	681b      	ldr	r3, [r3, #0]
 800494e:	4a30      	ldr	r2, [pc, #192]	; (8004a10 <HAL_DMA_Abort_IT+0x3c8>)
 8004950:	4293      	cmp	r3, r2
 8004952:	d04a      	beq.n	80049ea <HAL_DMA_Abort_IT+0x3a2>
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	4a2e      	ldr	r2, [pc, #184]	; (8004a14 <HAL_DMA_Abort_IT+0x3cc>)
 800495a:	4293      	cmp	r3, r2
 800495c:	d045      	beq.n	80049ea <HAL_DMA_Abort_IT+0x3a2>
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	4a2d      	ldr	r2, [pc, #180]	; (8004a18 <HAL_DMA_Abort_IT+0x3d0>)
 8004964:	4293      	cmp	r3, r2
 8004966:	d040      	beq.n	80049ea <HAL_DMA_Abort_IT+0x3a2>
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	4a2b      	ldr	r2, [pc, #172]	; (8004a1c <HAL_DMA_Abort_IT+0x3d4>)
 800496e:	4293      	cmp	r3, r2
 8004970:	d03b      	beq.n	80049ea <HAL_DMA_Abort_IT+0x3a2>
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	4a2a      	ldr	r2, [pc, #168]	; (8004a20 <HAL_DMA_Abort_IT+0x3d8>)
 8004978:	4293      	cmp	r3, r2
 800497a:	d036      	beq.n	80049ea <HAL_DMA_Abort_IT+0x3a2>
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	4a28      	ldr	r2, [pc, #160]	; (8004a24 <HAL_DMA_Abort_IT+0x3dc>)
 8004982:	4293      	cmp	r3, r2
 8004984:	d031      	beq.n	80049ea <HAL_DMA_Abort_IT+0x3a2>
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	4a27      	ldr	r2, [pc, #156]	; (8004a28 <HAL_DMA_Abort_IT+0x3e0>)
 800498c:	4293      	cmp	r3, r2
 800498e:	d02c      	beq.n	80049ea <HAL_DMA_Abort_IT+0x3a2>
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	4a25      	ldr	r2, [pc, #148]	; (8004a2c <HAL_DMA_Abort_IT+0x3e4>)
 8004996:	4293      	cmp	r3, r2
 8004998:	d027      	beq.n	80049ea <HAL_DMA_Abort_IT+0x3a2>
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	681b      	ldr	r3, [r3, #0]
 800499e:	4a24      	ldr	r2, [pc, #144]	; (8004a30 <HAL_DMA_Abort_IT+0x3e8>)
 80049a0:	4293      	cmp	r3, r2
 80049a2:	d022      	beq.n	80049ea <HAL_DMA_Abort_IT+0x3a2>
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	4a22      	ldr	r2, [pc, #136]	; (8004a34 <HAL_DMA_Abort_IT+0x3ec>)
 80049aa:	4293      	cmp	r3, r2
 80049ac:	d01d      	beq.n	80049ea <HAL_DMA_Abort_IT+0x3a2>
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	4a21      	ldr	r2, [pc, #132]	; (8004a38 <HAL_DMA_Abort_IT+0x3f0>)
 80049b4:	4293      	cmp	r3, r2
 80049b6:	d018      	beq.n	80049ea <HAL_DMA_Abort_IT+0x3a2>
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	4a1f      	ldr	r2, [pc, #124]	; (8004a3c <HAL_DMA_Abort_IT+0x3f4>)
 80049be:	4293      	cmp	r3, r2
 80049c0:	d013      	beq.n	80049ea <HAL_DMA_Abort_IT+0x3a2>
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	681b      	ldr	r3, [r3, #0]
 80049c6:	4a1e      	ldr	r2, [pc, #120]	; (8004a40 <HAL_DMA_Abort_IT+0x3f8>)
 80049c8:	4293      	cmp	r3, r2
 80049ca:	d00e      	beq.n	80049ea <HAL_DMA_Abort_IT+0x3a2>
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	4a1c      	ldr	r2, [pc, #112]	; (8004a44 <HAL_DMA_Abort_IT+0x3fc>)
 80049d2:	4293      	cmp	r3, r2
 80049d4:	d009      	beq.n	80049ea <HAL_DMA_Abort_IT+0x3a2>
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	681b      	ldr	r3, [r3, #0]
 80049da:	4a1b      	ldr	r2, [pc, #108]	; (8004a48 <HAL_DMA_Abort_IT+0x400>)
 80049dc:	4293      	cmp	r3, r2
 80049de:	d004      	beq.n	80049ea <HAL_DMA_Abort_IT+0x3a2>
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	4a19      	ldr	r2, [pc, #100]	; (8004a4c <HAL_DMA_Abort_IT+0x404>)
 80049e6:	4293      	cmp	r3, r2
 80049e8:	d132      	bne.n	8004a50 <HAL_DMA_Abort_IT+0x408>
 80049ea:	2301      	movs	r3, #1
 80049ec:	e031      	b.n	8004a52 <HAL_DMA_Abort_IT+0x40a>
 80049ee:	bf00      	nop
 80049f0:	40020010 	.word	0x40020010
 80049f4:	40020028 	.word	0x40020028
 80049f8:	40020040 	.word	0x40020040
 80049fc:	40020058 	.word	0x40020058
 8004a00:	40020070 	.word	0x40020070
 8004a04:	40020088 	.word	0x40020088
 8004a08:	400200a0 	.word	0x400200a0
 8004a0c:	400200b8 	.word	0x400200b8
 8004a10:	40020410 	.word	0x40020410
 8004a14:	40020428 	.word	0x40020428
 8004a18:	40020440 	.word	0x40020440
 8004a1c:	40020458 	.word	0x40020458
 8004a20:	40020470 	.word	0x40020470
 8004a24:	40020488 	.word	0x40020488
 8004a28:	400204a0 	.word	0x400204a0
 8004a2c:	400204b8 	.word	0x400204b8
 8004a30:	58025408 	.word	0x58025408
 8004a34:	5802541c 	.word	0x5802541c
 8004a38:	58025430 	.word	0x58025430
 8004a3c:	58025444 	.word	0x58025444
 8004a40:	58025458 	.word	0x58025458
 8004a44:	5802546c 	.word	0x5802546c
 8004a48:	58025480 	.word	0x58025480
 8004a4c:	58025494 	.word	0x58025494
 8004a50:	2300      	movs	r3, #0
 8004a52:	2b00      	cmp	r3, #0
 8004a54:	d028      	beq.n	8004aa8 <HAL_DMA_Abort_IT+0x460>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004a5a:	681a      	ldr	r2, [r3, #0]
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004a60:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004a64:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004a6a:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004a70:	f003 031f 	and.w	r3, r3, #31
 8004a74:	2201      	movs	r2, #1
 8004a76:	409a      	lsls	r2, r3
 8004a78:	68fb      	ldr	r3, [r7, #12]
 8004a7a:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004a80:	687a      	ldr	r2, [r7, #4]
 8004a82:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8004a84:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004a8a:	2b00      	cmp	r3, #0
 8004a8c:	d00c      	beq.n	8004aa8 <HAL_DMA_Abort_IT+0x460>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004a92:	681a      	ldr	r2, [r3, #0]
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004a98:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004a9c:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004aa2:	687a      	ldr	r2, [r7, #4]
 8004aa4:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8004aa6:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	2201      	movs	r2, #1
 8004aac:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	2200      	movs	r2, #0
 8004ab4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004abc:	2b00      	cmp	r3, #0
 8004abe:	d003      	beq.n	8004ac8 <HAL_DMA_Abort_IT+0x480>
      {
        hdma->XferAbortCallback(hdma);
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004ac4:	6878      	ldr	r0, [r7, #4]
 8004ac6:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 8004ac8:	2300      	movs	r3, #0
}
 8004aca:	4618      	mov	r0, r3
 8004acc:	3710      	adds	r7, #16
 8004ace:	46bd      	mov	sp, r7
 8004ad0:	bd80      	pop	{r7, pc}
 8004ad2:	bf00      	nop

08004ad4 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8004ad4:	b580      	push	{r7, lr}
 8004ad6:	b084      	sub	sp, #16
 8004ad8:	af00      	add	r7, sp, #0
 8004ada:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	2b00      	cmp	r3, #0
 8004ae0:	d101      	bne.n	8004ae6 <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 8004ae2:	2301      	movs	r3, #1
 8004ae4:	e0cf      	b.n	8004c86 <HAL_ETH_Init+0x1b2>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004aec:	2b00      	cmp	r3, #0
 8004aee:	d106      	bne.n	8004afe <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	2223      	movs	r2, #35	; 0x23
 8004af4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8004af8:	6878      	ldr	r0, [r7, #4]
 8004afa:	f7fc ff6f 	bl	80019dc <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004afe:	4b64      	ldr	r3, [pc, #400]	; (8004c90 <HAL_ETH_Init+0x1bc>)
 8004b00:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8004b04:	4a62      	ldr	r2, [pc, #392]	; (8004c90 <HAL_ETH_Init+0x1bc>)
 8004b06:	f043 0302 	orr.w	r3, r3, #2
 8004b0a:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8004b0e:	4b60      	ldr	r3, [pc, #384]	; (8004c90 <HAL_ETH_Init+0x1bc>)
 8004b10:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8004b14:	f003 0302 	and.w	r3, r3, #2
 8004b18:	60bb      	str	r3, [r7, #8]
 8004b1a:	68bb      	ldr	r3, [r7, #8]

  if (heth->Init.MediaInterface == HAL_ETH_MII_MODE)
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	7a1b      	ldrb	r3, [r3, #8]
 8004b20:	2b00      	cmp	r3, #0
 8004b22:	d103      	bne.n	8004b2c <HAL_ETH_Init+0x58>
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_MII);
 8004b24:	2000      	movs	r0, #0
 8004b26:	f7fe f8a9 	bl	8002c7c <HAL_SYSCFG_ETHInterfaceSelect>
 8004b2a:	e003      	b.n	8004b34 <HAL_ETH_Init+0x60>
  }
  else
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_RMII);
 8004b2c:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
 8004b30:	f7fe f8a4 	bl	8002c7c <HAL_SYSCFG_ETHInterfaceSelect>
  }

  /* Dummy read to sync with ETH */
  (void)SYSCFG->PMCR;
 8004b34:	4b57      	ldr	r3, [pc, #348]	; (8004c94 <HAL_ETH_Init+0x1c0>)
 8004b36:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR);
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	681b      	ldr	r3, [r3, #0]
 8004b3c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	687a      	ldr	r2, [r7, #4]
 8004b44:	6812      	ldr	r2, [r2, #0]
 8004b46:	f043 0301 	orr.w	r3, r3, #1
 8004b4a:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8004b4e:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004b50:	f7fe f858 	bl	8002c04 <HAL_GetTick>
 8004b54:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 8004b56:	e011      	b.n	8004b7c <HAL_ETH_Init+0xa8>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 8004b58:	f7fe f854 	bl	8002c04 <HAL_GetTick>
 8004b5c:	4602      	mov	r2, r0
 8004b5e:	68fb      	ldr	r3, [r7, #12]
 8004b60:	1ad3      	subs	r3, r2, r3
 8004b62:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8004b66:	d909      	bls.n	8004b7c <HAL_ETH_Init+0xa8>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	2204      	movs	r2, #4
 8004b6c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	22e0      	movs	r2, #224	; 0xe0
 8004b74:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      /* Return Error */
      return HAL_ERROR;
 8004b78:	2301      	movs	r3, #1
 8004b7a:	e084      	b.n	8004c86 <HAL_ETH_Init+0x1b2>
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	f003 0301 	and.w	r3, r3, #1
 8004b8a:	2b00      	cmp	r3, #0
 8004b8c:	d1e4      	bne.n	8004b58 <HAL_ETH_Init+0x84>
    }
  }

  /*------------------ MDIO CSR Clock Range Configuration --------------------*/
  HAL_ETH_SetMDIOClockRange(heth);
 8004b8e:	6878      	ldr	r0, [r7, #4]
 8004b90:	f000 f886 	bl	8004ca0 <HAL_ETH_SetMDIOClockRange>

  /*------------------ MAC LPI 1US Tic Counter Configuration --------------------*/
  WRITE_REG(heth->Instance->MAC1USTCR, (((uint32_t)HAL_RCC_GetHCLKFreq() / ETH_MAC_US_TICK) - 1U));
 8004b94:	f002 fd6e 	bl	8007674 <HAL_RCC_GetHCLKFreq>
 8004b98:	4603      	mov	r3, r0
 8004b9a:	4a3f      	ldr	r2, [pc, #252]	; (8004c98 <HAL_ETH_Init+0x1c4>)
 8004b9c:	fba2 2303 	umull	r2, r3, r2, r3
 8004ba0:	0c9a      	lsrs	r2, r3, #18
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	681b      	ldr	r3, [r3, #0]
 8004ba6:	3a01      	subs	r2, #1
 8004ba8:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc

  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 8004bac:	6878      	ldr	r0, [r7, #4]
 8004bae:	f000 fa71 	bl	8005094 <ETH_MACDMAConfig>

  /* SET DSL to 64 bit */
  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_DSL, ETH_DMACCR_DSL_64BIT);
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	681b      	ldr	r3, [r3, #0]
 8004bb6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004bba:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 8004bbe:	f423 13e0 	bic.w	r3, r3, #1835008	; 0x1c0000
 8004bc2:	687a      	ldr	r2, [r7, #4]
 8004bc4:	6812      	ldr	r2, [r2, #0]
 8004bc6:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004bca:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8004bce:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100

  /* Set Receive Buffers Length (must be a multiple of 4) */
  if ((heth->Init.RxBuffLen % 0x4U) != 0x0U)
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	695b      	ldr	r3, [r3, #20]
 8004bd6:	f003 0303 	and.w	r3, r3, #3
 8004bda:	2b00      	cmp	r3, #0
 8004bdc:	d009      	beq.n	8004bf2 <HAL_ETH_Init+0x11e>
  {
    /* Set Error Code */
    heth->ErrorCode = HAL_ETH_ERROR_PARAM;
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	2201      	movs	r2, #1
 8004be2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    /* Set State as Error */
    heth->gState = HAL_ETH_STATE_ERROR;
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	22e0      	movs	r2, #224	; 0xe0
 8004bea:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    /* Return Error */
    return HAL_ERROR;
 8004bee:	2301      	movs	r3, #1
 8004bf0:	e049      	b.n	8004c86 <HAL_ETH_Init+0x1b2>
  }
  else
  {
    MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_RBSZ, ((heth->Init.RxBuffLen) << 1));
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	681b      	ldr	r3, [r3, #0]
 8004bf6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004bfa:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
 8004bfe:	4b27      	ldr	r3, [pc, #156]	; (8004c9c <HAL_ETH_Init+0x1c8>)
 8004c00:	4013      	ands	r3, r2
 8004c02:	687a      	ldr	r2, [r7, #4]
 8004c04:	6952      	ldr	r2, [r2, #20]
 8004c06:	0051      	lsls	r1, r2, #1
 8004c08:	687a      	ldr	r2, [r7, #4]
 8004c0a:	6812      	ldr	r2, [r2, #0]
 8004c0c:	430b      	orrs	r3, r1
 8004c0e:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8004c12:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108
  }

  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 8004c16:	6878      	ldr	r0, [r7, #4]
 8004c18:	f000 fad9 	bl	80051ce <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 8004c1c:	6878      	ldr	r0, [r7, #4]
 8004c1e:	f000 fb1f 	bl	8005260 <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  /* Set MAC addr bits 32 to 47 */
  heth->Instance->MACA0HR = (((uint32_t)(heth->Init.MACAddr[5]) << 8) | (uint32_t)heth->Init.MACAddr[4]);
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	685b      	ldr	r3, [r3, #4]
 8004c26:	3305      	adds	r3, #5
 8004c28:	781b      	ldrb	r3, [r3, #0]
 8004c2a:	021a      	lsls	r2, r3, #8
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	685b      	ldr	r3, [r3, #4]
 8004c30:	3304      	adds	r3, #4
 8004c32:	781b      	ldrb	r3, [r3, #0]
 8004c34:	4619      	mov	r1, r3
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	681b      	ldr	r3, [r3, #0]
 8004c3a:	430a      	orrs	r2, r1
 8004c3c:	f8c3 2300 	str.w	r2, [r3, #768]	; 0x300
  /* Set MAC addr bits 0 to 31 */
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	685b      	ldr	r3, [r3, #4]
 8004c44:	3303      	adds	r3, #3
 8004c46:	781b      	ldrb	r3, [r3, #0]
 8004c48:	061a      	lsls	r2, r3, #24
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	685b      	ldr	r3, [r3, #4]
 8004c4e:	3302      	adds	r3, #2
 8004c50:	781b      	ldrb	r3, [r3, #0]
 8004c52:	041b      	lsls	r3, r3, #16
 8004c54:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	685b      	ldr	r3, [r3, #4]
 8004c5a:	3301      	adds	r3, #1
 8004c5c:	781b      	ldrb	r3, [r3, #0]
 8004c5e:	021b      	lsls	r3, r3, #8
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8004c60:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	685b      	ldr	r3, [r3, #4]
 8004c66:	781b      	ldrb	r3, [r3, #0]
 8004c68:	4619      	mov	r1, r3
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	681b      	ldr	r3, [r3, #0]
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 8004c6e:	430a      	orrs	r2, r1
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8004c70:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	2200      	movs	r2, #0
 8004c78:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  heth->gState = HAL_ETH_STATE_READY;
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	2210      	movs	r2, #16
 8004c80:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8004c84:	2300      	movs	r3, #0
}
 8004c86:	4618      	mov	r0, r3
 8004c88:	3710      	adds	r7, #16
 8004c8a:	46bd      	mov	sp, r7
 8004c8c:	bd80      	pop	{r7, pc}
 8004c8e:	bf00      	nop
 8004c90:	58024400 	.word	0x58024400
 8004c94:	58000400 	.word	0x58000400
 8004c98:	431bde83 	.word	0x431bde83
 8004c9c:	ffff8001 	.word	0xffff8001

08004ca0 <HAL_ETH_SetMDIOClockRange>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
void HAL_ETH_SetMDIOClockRange(ETH_HandleTypeDef *heth)
{
 8004ca0:	b580      	push	{r7, lr}
 8004ca2:	b084      	sub	sp, #16
 8004ca4:	af00      	add	r7, sp, #0
 8004ca6:	6078      	str	r0, [r7, #4]
  uint32_t hclk;
  uint32_t tmpreg;

  /* Get the ETHERNET MACMDIOAR value */
  tmpreg = (heth->Instance)->MACMDIOAR;
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8004cb0:	60fb      	str	r3, [r7, #12]

  /* Clear CSR Clock Range bits */
  tmpreg &= ~ETH_MACMDIOAR_CR;
 8004cb2:	68fb      	ldr	r3, [r7, #12]
 8004cb4:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8004cb8:	60fb      	str	r3, [r7, #12]

  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 8004cba:	f002 fcdb 	bl	8007674 <HAL_RCC_GetHCLKFreq>
 8004cbe:	60b8      	str	r0, [r7, #8]

  /* Set CR bits depending on hclk value */
  if ((hclk >= 20000000U) && (hclk < 35000000U))
 8004cc0:	68bb      	ldr	r3, [r7, #8]
 8004cc2:	4a1e      	ldr	r2, [pc, #120]	; (8004d3c <HAL_ETH_SetMDIOClockRange+0x9c>)
 8004cc4:	4293      	cmp	r3, r2
 8004cc6:	d908      	bls.n	8004cda <HAL_ETH_SetMDIOClockRange+0x3a>
 8004cc8:	68bb      	ldr	r3, [r7, #8]
 8004cca:	4a1d      	ldr	r2, [pc, #116]	; (8004d40 <HAL_ETH_SetMDIOClockRange+0xa0>)
 8004ccc:	4293      	cmp	r3, r2
 8004cce:	d804      	bhi.n	8004cda <HAL_ETH_SetMDIOClockRange+0x3a>
  {
    /* CSR Clock Range between 20-35 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV16;
 8004cd0:	68fb      	ldr	r3, [r7, #12]
 8004cd2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004cd6:	60fb      	str	r3, [r7, #12]
 8004cd8:	e027      	b.n	8004d2a <HAL_ETH_SetMDIOClockRange+0x8a>
  }
  else if ((hclk >= 35000000U) && (hclk < 60000000U))
 8004cda:	68bb      	ldr	r3, [r7, #8]
 8004cdc:	4a18      	ldr	r2, [pc, #96]	; (8004d40 <HAL_ETH_SetMDIOClockRange+0xa0>)
 8004cde:	4293      	cmp	r3, r2
 8004ce0:	d908      	bls.n	8004cf4 <HAL_ETH_SetMDIOClockRange+0x54>
 8004ce2:	68bb      	ldr	r3, [r7, #8]
 8004ce4:	4a17      	ldr	r2, [pc, #92]	; (8004d44 <HAL_ETH_SetMDIOClockRange+0xa4>)
 8004ce6:	4293      	cmp	r3, r2
 8004ce8:	d204      	bcs.n	8004cf4 <HAL_ETH_SetMDIOClockRange+0x54>
  {
    /* CSR Clock Range between 35-60 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV26;
 8004cea:	68fb      	ldr	r3, [r7, #12]
 8004cec:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8004cf0:	60fb      	str	r3, [r7, #12]
 8004cf2:	e01a      	b.n	8004d2a <HAL_ETH_SetMDIOClockRange+0x8a>
  }
  else if ((hclk >= 60000000U) && (hclk < 100000000U))
 8004cf4:	68bb      	ldr	r3, [r7, #8]
 8004cf6:	4a13      	ldr	r2, [pc, #76]	; (8004d44 <HAL_ETH_SetMDIOClockRange+0xa4>)
 8004cf8:	4293      	cmp	r3, r2
 8004cfa:	d303      	bcc.n	8004d04 <HAL_ETH_SetMDIOClockRange+0x64>
 8004cfc:	68bb      	ldr	r3, [r7, #8]
 8004cfe:	4a12      	ldr	r2, [pc, #72]	; (8004d48 <HAL_ETH_SetMDIOClockRange+0xa8>)
 8004d00:	4293      	cmp	r3, r2
 8004d02:	d911      	bls.n	8004d28 <HAL_ETH_SetMDIOClockRange+0x88>
  {
    /* CSR Clock Range between 60-100 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
  }
  else if ((hclk >= 100000000U) && (hclk < 150000000U))
 8004d04:	68bb      	ldr	r3, [r7, #8]
 8004d06:	4a10      	ldr	r2, [pc, #64]	; (8004d48 <HAL_ETH_SetMDIOClockRange+0xa8>)
 8004d08:	4293      	cmp	r3, r2
 8004d0a:	d908      	bls.n	8004d1e <HAL_ETH_SetMDIOClockRange+0x7e>
 8004d0c:	68bb      	ldr	r3, [r7, #8]
 8004d0e:	4a0f      	ldr	r2, [pc, #60]	; (8004d4c <HAL_ETH_SetMDIOClockRange+0xac>)
 8004d10:	4293      	cmp	r3, r2
 8004d12:	d804      	bhi.n	8004d1e <HAL_ETH_SetMDIOClockRange+0x7e>
  {
    /* CSR Clock Range between 100-150 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV62;
 8004d14:	68fb      	ldr	r3, [r7, #12]
 8004d16:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004d1a:	60fb      	str	r3, [r7, #12]
 8004d1c:	e005      	b.n	8004d2a <HAL_ETH_SetMDIOClockRange+0x8a>
  }
  else /* (hclk >= 150000000)&&(hclk <= 200000000) */
  {
    /* CSR Clock Range between 150-200 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV102;
 8004d1e:	68fb      	ldr	r3, [r7, #12]
 8004d20:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004d24:	60fb      	str	r3, [r7, #12]
 8004d26:	e000      	b.n	8004d2a <HAL_ETH_SetMDIOClockRange+0x8a>
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
 8004d28:	bf00      	nop
  }

  /* Configure the CSR Clock Range */
  (heth->Instance)->MACMDIOAR = (uint32_t)tmpreg;
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	681b      	ldr	r3, [r3, #0]
 8004d2e:	68fa      	ldr	r2, [r7, #12]
 8004d30:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
}
 8004d34:	bf00      	nop
 8004d36:	3710      	adds	r7, #16
 8004d38:	46bd      	mov	sp, r7
 8004d3a:	bd80      	pop	{r7, pc}
 8004d3c:	01312cff 	.word	0x01312cff
 8004d40:	02160ebf 	.word	0x02160ebf
 8004d44:	03938700 	.word	0x03938700
 8004d48:	05f5e0ff 	.word	0x05f5e0ff
 8004d4c:	08f0d17f 	.word	0x08f0d17f

08004d50 <ETH_SetMACConfig>:
  * @{
  */


static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 8004d50:	b480      	push	{r7}
 8004d52:	b085      	sub	sp, #20
 8004d54:	af00      	add	r7, sp, #0
 8004d56:	6078      	str	r0, [r7, #4]
 8004d58:	6039      	str	r1, [r7, #0]
  uint32_t macregval;

  /*------------------------ MACCR Configuration --------------------*/
  macregval = (macconf->InterPacketGapVal |
 8004d5a:	683b      	ldr	r3, [r7, #0]
 8004d5c:	689a      	ldr	r2, [r3, #8]
               macconf->SourceAddrControl |
 8004d5e:	683b      	ldr	r3, [r7, #0]
 8004d60:	681b      	ldr	r3, [r3, #0]
  macregval = (macconf->InterPacketGapVal |
 8004d62:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ChecksumOffload << 27) |
 8004d64:	683b      	ldr	r3, [r7, #0]
 8004d66:	791b      	ldrb	r3, [r3, #4]
 8004d68:	06db      	lsls	r3, r3, #27
               macconf->SourceAddrControl |
 8004d6a:	431a      	orrs	r2, r3
               ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 8004d6c:	683b      	ldr	r3, [r7, #0]
 8004d6e:	7b1b      	ldrb	r3, [r3, #12]
 8004d70:	05db      	lsls	r3, r3, #23
               ((uint32_t)macconf->ChecksumOffload << 27) |
 8004d72:	431a      	orrs	r2, r3
               ((uint32_t)macconf->Support2KPacket  << 22) |
 8004d74:	683b      	ldr	r3, [r7, #0]
 8004d76:	7b5b      	ldrb	r3, [r3, #13]
 8004d78:	059b      	lsls	r3, r3, #22
               ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 8004d7a:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CRCStripTypePacket << 21) |
 8004d7c:	683b      	ldr	r3, [r7, #0]
 8004d7e:	7b9b      	ldrb	r3, [r3, #14]
 8004d80:	055b      	lsls	r3, r3, #21
               ((uint32_t)macconf->Support2KPacket  << 22) |
 8004d82:	431a      	orrs	r2, r3
               ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 8004d84:	683b      	ldr	r3, [r7, #0]
 8004d86:	7bdb      	ldrb	r3, [r3, #15]
 8004d88:	051b      	lsls	r3, r3, #20
               ((uint32_t)macconf->CRCStripTypePacket << 21) |
 8004d8a:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 8004d8c:	683a      	ldr	r2, [r7, #0]
 8004d8e:	7c12      	ldrb	r2, [r2, #16]
 8004d90:	2a00      	cmp	r2, #0
 8004d92:	d102      	bne.n	8004d9a <ETH_SetMACConfig+0x4a>
 8004d94:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8004d98:	e000      	b.n	8004d9c <ETH_SetMACConfig+0x4c>
 8004d9a:	2200      	movs	r2, #0
               ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 8004d9c:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 8004d9e:	683a      	ldr	r2, [r7, #0]
 8004da0:	7c52      	ldrb	r2, [r2, #17]
 8004da2:	2a00      	cmp	r2, #0
 8004da4:	d102      	bne.n	8004dac <ETH_SetMACConfig+0x5c>
 8004da6:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8004daa:	e000      	b.n	8004dae <ETH_SetMACConfig+0x5e>
 8004dac:	2200      	movs	r2, #0
               ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 8004dae:	431a      	orrs	r2, r3
               ((uint32_t)macconf->JumboPacket << 16) |
 8004db0:	683b      	ldr	r3, [r7, #0]
 8004db2:	7c9b      	ldrb	r3, [r3, #18]
 8004db4:	041b      	lsls	r3, r3, #16
               ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 8004db6:	431a      	orrs	r2, r3
               macconf->Speed |
 8004db8:	683b      	ldr	r3, [r7, #0]
 8004dba:	695b      	ldr	r3, [r3, #20]
               ((uint32_t)macconf->JumboPacket << 16) |
 8004dbc:	431a      	orrs	r2, r3
               macconf->DuplexMode |
 8004dbe:	683b      	ldr	r3, [r7, #0]
 8004dc0:	699b      	ldr	r3, [r3, #24]
               macconf->Speed |
 8004dc2:	431a      	orrs	r2, r3
               ((uint32_t)macconf->LoopbackMode << 12) |
 8004dc4:	683b      	ldr	r3, [r7, #0]
 8004dc6:	7f1b      	ldrb	r3, [r3, #28]
 8004dc8:	031b      	lsls	r3, r3, #12
               macconf->DuplexMode |
 8004dca:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11) |
 8004dcc:	683b      	ldr	r3, [r7, #0]
 8004dce:	7f5b      	ldrb	r3, [r3, #29]
 8004dd0:	02db      	lsls	r3, r3, #11
               ((uint32_t)macconf->LoopbackMode << 12) |
 8004dd2:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10) |
 8004dd4:	683a      	ldr	r2, [r7, #0]
 8004dd6:	7f92      	ldrb	r2, [r2, #30]
 8004dd8:	2a00      	cmp	r2, #0
 8004dda:	d102      	bne.n	8004de2 <ETH_SetMACConfig+0x92>
 8004ddc:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004de0:	e000      	b.n	8004de4 <ETH_SetMACConfig+0x94>
 8004de2:	2200      	movs	r2, #0
               ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11) |
 8004de4:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CarrierSenseDuringTransmit << 9) |
 8004de6:	683b      	ldr	r3, [r7, #0]
 8004de8:	7fdb      	ldrb	r3, [r3, #31]
 8004dea:	025b      	lsls	r3, r3, #9
               ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10) |
 8004dec:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8) |
 8004dee:	683a      	ldr	r2, [r7, #0]
 8004df0:	f892 2020 	ldrb.w	r2, [r2, #32]
 8004df4:	2a00      	cmp	r2, #0
 8004df6:	d102      	bne.n	8004dfe <ETH_SetMACConfig+0xae>
 8004df8:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004dfc:	e000      	b.n	8004e00 <ETH_SetMACConfig+0xb0>
 8004dfe:	2200      	movs	r2, #0
               ((uint32_t)macconf->CarrierSenseDuringTransmit << 9) |
 8004e00:	431a      	orrs	r2, r3
               macconf->BackOffLimit |
 8004e02:	683b      	ldr	r3, [r7, #0]
 8004e04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
               ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8) |
 8004e06:	431a      	orrs	r2, r3
               ((uint32_t)macconf->DeferralCheck << 4) |
 8004e08:	683b      	ldr	r3, [r7, #0]
 8004e0a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004e0e:	011b      	lsls	r3, r3, #4
               macconf->BackOffLimit |
 8004e10:	431a      	orrs	r2, r3
               macconf->PreambleLength);
 8004e12:	683b      	ldr	r3, [r7, #0]
 8004e14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  macregval = (macconf->InterPacketGapVal |
 8004e16:	4313      	orrs	r3, r2
 8004e18:	60fb      	str	r3, [r7, #12]

  /* Write to MACCR */
  MODIFY_REG(heth->Instance->MACCR, ETH_MACCR_MASK, macregval);
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	681b      	ldr	r3, [r3, #0]
 8004e1e:	681a      	ldr	r2, [r3, #0]
 8004e20:	4b56      	ldr	r3, [pc, #344]	; (8004f7c <ETH_SetMACConfig+0x22c>)
 8004e22:	4013      	ands	r3, r2
 8004e24:	687a      	ldr	r2, [r7, #4]
 8004e26:	6812      	ldr	r2, [r2, #0]
 8004e28:	68f9      	ldr	r1, [r7, #12]
 8004e2a:	430b      	orrs	r3, r1
 8004e2c:	6013      	str	r3, [r2, #0]

  /*------------------------ MACECR Configuration --------------------*/
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 8004e2e:	683b      	ldr	r3, [r7, #0]
 8004e30:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004e32:	065a      	lsls	r2, r3, #25
               ((uint32_t)macconf->ExtendedInterPacketGap << 24) |
 8004e34:	683b      	ldr	r3, [r7, #0]
 8004e36:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8004e3a:	061b      	lsls	r3, r3, #24
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 8004e3c:	431a      	orrs	r2, r3
               ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18) |
 8004e3e:	683b      	ldr	r3, [r7, #0]
 8004e40:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8004e44:	049b      	lsls	r3, r3, #18
               ((uint32_t)macconf->ExtendedInterPacketGap << 24) |
 8004e46:	431a      	orrs	r2, r3
               ((uint32_t)macconf->SlowProtocolDetect << 17) |
 8004e48:	683b      	ldr	r3, [r7, #0]
 8004e4a:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8004e4e:	045b      	lsls	r3, r3, #17
               ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18) |
 8004e50:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->CRCCheckingRxPackets == DISABLE) ? 1U : 0U) << 16) |
 8004e52:	683a      	ldr	r2, [r7, #0]
 8004e54:	f892 2032 	ldrb.w	r2, [r2, #50]	; 0x32
 8004e58:	2a00      	cmp	r2, #0
 8004e5a:	d102      	bne.n	8004e62 <ETH_SetMACConfig+0x112>
 8004e5c:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8004e60:	e000      	b.n	8004e64 <ETH_SetMACConfig+0x114>
 8004e62:	2200      	movs	r2, #0
               ((uint32_t)macconf->SlowProtocolDetect << 17) |
 8004e64:	431a      	orrs	r2, r3
               macconf->GiantPacketSizeLimit);
 8004e66:	683b      	ldr	r3, [r7, #0]
 8004e68:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 8004e6a:	4313      	orrs	r3, r2
 8004e6c:	60fb      	str	r3, [r7, #12]

  /* Write to MACECR */
  MODIFY_REG(heth->Instance->MACECR, ETH_MACECR_MASK, macregval);
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	681b      	ldr	r3, [r3, #0]
 8004e72:	685a      	ldr	r2, [r3, #4]
 8004e74:	4b42      	ldr	r3, [pc, #264]	; (8004f80 <ETH_SetMACConfig+0x230>)
 8004e76:	4013      	ands	r3, r2
 8004e78:	687a      	ldr	r2, [r7, #4]
 8004e7a:	6812      	ldr	r2, [r2, #0]
 8004e7c:	68f9      	ldr	r1, [r7, #12]
 8004e7e:	430b      	orrs	r3, r1
 8004e80:	6053      	str	r3, [r2, #4]

  /*------------------------ MACWTR Configuration --------------------*/
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 8004e82:	683b      	ldr	r3, [r7, #0]
 8004e84:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004e88:	021a      	lsls	r2, r3, #8
               macconf->WatchdogTimeout);
 8004e8a:	683b      	ldr	r3, [r7, #0]
 8004e8c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 8004e8e:	4313      	orrs	r3, r2
 8004e90:	60fb      	str	r3, [r7, #12]

  /* Write to MACWTR */
  MODIFY_REG(heth->Instance->MACWTR, ETH_MACWTR_MASK, macregval);
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	681b      	ldr	r3, [r3, #0]
 8004e96:	68da      	ldr	r2, [r3, #12]
 8004e98:	4b3a      	ldr	r3, [pc, #232]	; (8004f84 <ETH_SetMACConfig+0x234>)
 8004e9a:	4013      	ands	r3, r2
 8004e9c:	687a      	ldr	r2, [r7, #4]
 8004e9e:	6812      	ldr	r2, [r2, #0]
 8004ea0:	68f9      	ldr	r1, [r7, #12]
 8004ea2:	430b      	orrs	r3, r1
 8004ea4:	60d3      	str	r3, [r2, #12]

  /*------------------------ MACTFCR Configuration --------------------*/
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8004ea6:	683b      	ldr	r3, [r7, #0]
 8004ea8:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8004eac:	005a      	lsls	r2, r3, #1
               macconf->PauseLowThreshold |
 8004eae:	683b      	ldr	r3, [r7, #0]
 8004eb0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8004eb2:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7) |
 8004eb4:	683a      	ldr	r2, [r7, #0]
 8004eb6:	f892 204c 	ldrb.w	r2, [r2, #76]	; 0x4c
 8004eba:	2a00      	cmp	r2, #0
 8004ebc:	d101      	bne.n	8004ec2 <ETH_SetMACConfig+0x172>
 8004ebe:	2280      	movs	r2, #128	; 0x80
 8004ec0:	e000      	b.n	8004ec4 <ETH_SetMACConfig+0x174>
 8004ec2:	2200      	movs	r2, #0
               macconf->PauseLowThreshold |
 8004ec4:	431a      	orrs	r2, r3
               (macconf->PauseTime << 16));
 8004ec6:	683b      	ldr	r3, [r7, #0]
 8004ec8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004eca:	041b      	lsls	r3, r3, #16
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8004ecc:	4313      	orrs	r3, r2
 8004ece:	60fb      	str	r3, [r7, #12]

  /* Write to MACTFCR */
  MODIFY_REG(heth->Instance->MACTFCR, ETH_MACTFCR_MASK, macregval);
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	681b      	ldr	r3, [r3, #0]
 8004ed4:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8004ed6:	f64f 730d 	movw	r3, #65293	; 0xff0d
 8004eda:	4013      	ands	r3, r2
 8004edc:	687a      	ldr	r2, [r7, #4]
 8004ede:	6812      	ldr	r2, [r2, #0]
 8004ee0:	68f9      	ldr	r1, [r7, #12]
 8004ee2:	430b      	orrs	r3, r1
 8004ee4:	6713      	str	r3, [r2, #112]	; 0x70

  /*------------------------ MACRFCR Configuration --------------------*/
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 8004ee6:	683b      	ldr	r3, [r7, #0]
 8004ee8:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 8004eec:	461a      	mov	r2, r3
               ((uint32_t)macconf->UnicastPausePacketDetect << 1));
 8004eee:	683b      	ldr	r3, [r7, #0]
 8004ef0:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 8004ef4:	005b      	lsls	r3, r3, #1
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 8004ef6:	4313      	orrs	r3, r2
 8004ef8:	60fb      	str	r3, [r7, #12]

  /* Write to MACRFCR */
  MODIFY_REG(heth->Instance->MACRFCR, ETH_MACRFCR_MASK, macregval);
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	681b      	ldr	r3, [r3, #0]
 8004efe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004f02:	f023 0103 	bic.w	r1, r3, #3
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	681b      	ldr	r3, [r3, #0]
 8004f0a:	68fa      	ldr	r2, [r7, #12]
 8004f0c:	430a      	orrs	r2, r1
 8004f0e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /*------------------------ MTLTQOMR Configuration --------------------*/
  /* Write to MTLTQOMR */
  MODIFY_REG(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_MASK, macconf->TransmitQueueMode);
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	681b      	ldr	r3, [r3, #0]
 8004f16:	f8d3 3d00 	ldr.w	r3, [r3, #3328]	; 0xd00
 8004f1a:	f023 0172 	bic.w	r1, r3, #114	; 0x72
 8004f1e:	683b      	ldr	r3, [r7, #0]
 8004f20:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	681b      	ldr	r3, [r3, #0]
 8004f26:	430a      	orrs	r2, r1
 8004f28:	f8c3 2d00 	str.w	r2, [r3, #3328]	; 0xd00

  /*------------------------ MTLRQOMR Configuration --------------------*/
  macregval = (macconf->ReceiveQueueMode |
 8004f2c:	683b      	ldr	r3, [r7, #0]
 8004f2e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 8004f30:	683a      	ldr	r2, [r7, #0]
 8004f32:	f892 2060 	ldrb.w	r2, [r2, #96]	; 0x60
 8004f36:	2a00      	cmp	r2, #0
 8004f38:	d101      	bne.n	8004f3e <ETH_SetMACConfig+0x1ee>
 8004f3a:	2240      	movs	r2, #64	; 0x40
 8004f3c:	e000      	b.n	8004f40 <ETH_SetMACConfig+0x1f0>
 8004f3e:	2200      	movs	r2, #0
  macregval = (macconf->ReceiveQueueMode |
 8004f40:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ForwardRxErrorPacket << 4) |
 8004f42:	683b      	ldr	r3, [r7, #0]
 8004f44:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 8004f48:	011b      	lsls	r3, r3, #4
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 8004f4a:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ForwardRxUndersizedGoodPacket << 3));
 8004f4c:	683b      	ldr	r3, [r7, #0]
 8004f4e:	f893 3062 	ldrb.w	r3, [r3, #98]	; 0x62
 8004f52:	00db      	lsls	r3, r3, #3
  macregval = (macconf->ReceiveQueueMode |
 8004f54:	4313      	orrs	r3, r2
 8004f56:	60fb      	str	r3, [r7, #12]

  /* Write to MTLRQOMR */
  MODIFY_REG(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_MASK, macregval);
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	681b      	ldr	r3, [r3, #0]
 8004f5c:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	; 0xd30
 8004f60:	f023 017b 	bic.w	r1, r3, #123	; 0x7b
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	681b      	ldr	r3, [r3, #0]
 8004f68:	68fa      	ldr	r2, [r7, #12]
 8004f6a:	430a      	orrs	r2, r1
 8004f6c:	f8c3 2d30 	str.w	r2, [r3, #3376]	; 0xd30
}
 8004f70:	bf00      	nop
 8004f72:	3714      	adds	r7, #20
 8004f74:	46bd      	mov	sp, r7
 8004f76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f7a:	4770      	bx	lr
 8004f7c:	00048083 	.word	0x00048083
 8004f80:	c0f88000 	.word	0xc0f88000
 8004f84:	fffffef0 	.word	0xfffffef0

08004f88 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 8004f88:	b480      	push	{r7}
 8004f8a:	b085      	sub	sp, #20
 8004f8c:	af00      	add	r7, sp, #0
 8004f8e:	6078      	str	r0, [r7, #4]
 8004f90:	6039      	str	r1, [r7, #0]
  uint32_t dmaregval;

  /*------------------------ DMAMR Configuration --------------------*/
  MODIFY_REG(heth->Instance->DMAMR, ETH_DMAMR_MASK, dmaconf->DMAArbitration);
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	681b      	ldr	r3, [r3, #0]
 8004f96:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004f9a:	681a      	ldr	r2, [r3, #0]
 8004f9c:	4b38      	ldr	r3, [pc, #224]	; (8005080 <ETH_SetDMAConfig+0xf8>)
 8004f9e:	4013      	ands	r3, r2
 8004fa0:	683a      	ldr	r2, [r7, #0]
 8004fa2:	6811      	ldr	r1, [r2, #0]
 8004fa4:	687a      	ldr	r2, [r7, #4]
 8004fa6:	6812      	ldr	r2, [r2, #0]
 8004fa8:	430b      	orrs	r3, r1
 8004faa:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8004fae:	6013      	str	r3, [r2, #0]

  /*------------------------ DMASBMR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8004fb0:	683b      	ldr	r3, [r7, #0]
 8004fb2:	791b      	ldrb	r3, [r3, #4]
 8004fb4:	031a      	lsls	r2, r3, #12
               dmaconf->BurstMode |
 8004fb6:	683b      	ldr	r3, [r7, #0]
 8004fb8:	689b      	ldr	r3, [r3, #8]
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8004fba:	431a      	orrs	r2, r3
               ((uint32_t)dmaconf->RebuildINCRxBurst << 15));
 8004fbc:	683b      	ldr	r3, [r7, #0]
 8004fbe:	7b1b      	ldrb	r3, [r3, #12]
 8004fc0:	03db      	lsls	r3, r3, #15
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8004fc2:	4313      	orrs	r3, r2
 8004fc4:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMASBMR, ETH_DMASBMR_MASK, dmaregval);
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	681b      	ldr	r3, [r3, #0]
 8004fca:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004fce:	685a      	ldr	r2, [r3, #4]
 8004fd0:	4b2c      	ldr	r3, [pc, #176]	; (8005084 <ETH_SetDMAConfig+0xfc>)
 8004fd2:	4013      	ands	r3, r2
 8004fd4:	687a      	ldr	r2, [r7, #4]
 8004fd6:	6812      	ldr	r2, [r2, #0]
 8004fd8:	68f9      	ldr	r1, [r7, #12]
 8004fda:	430b      	orrs	r3, r1
 8004fdc:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8004fe0:	6053      	str	r3, [r2, #4]

  /*------------------------ DMACCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 8004fe2:	683b      	ldr	r3, [r7, #0]
 8004fe4:	7b5b      	ldrb	r3, [r3, #13]
 8004fe6:	041a      	lsls	r2, r3, #16
               dmaconf->MaximumSegmentSize);
 8004fe8:	683b      	ldr	r3, [r7, #0]
 8004fea:	6a1b      	ldr	r3, [r3, #32]
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 8004fec:	4313      	orrs	r3, r2
 8004fee:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_MASK, dmaregval);
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	681b      	ldr	r3, [r3, #0]
 8004ff4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004ff8:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
 8004ffc:	4b22      	ldr	r3, [pc, #136]	; (8005088 <ETH_SetDMAConfig+0x100>)
 8004ffe:	4013      	ands	r3, r2
 8005000:	687a      	ldr	r2, [r7, #4]
 8005002:	6812      	ldr	r2, [r2, #0]
 8005004:	68f9      	ldr	r1, [r7, #12]
 8005006:	430b      	orrs	r3, r1
 8005008:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800500c:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100

  /*------------------------ DMACTCR Configuration --------------------*/
  dmaregval = (dmaconf->TxDMABurstLength |
 8005010:	683b      	ldr	r3, [r7, #0]
 8005012:	691a      	ldr	r2, [r3, #16]
               ((uint32_t)dmaconf->SecondPacketOperate << 4) |
 8005014:	683b      	ldr	r3, [r7, #0]
 8005016:	7d1b      	ldrb	r3, [r3, #20]
 8005018:	011b      	lsls	r3, r3, #4
  dmaregval = (dmaconf->TxDMABurstLength |
 800501a:	431a      	orrs	r2, r3
               ((uint32_t)dmaconf->TCPSegmentation << 12));
 800501c:	683b      	ldr	r3, [r7, #0]
 800501e:	7f5b      	ldrb	r3, [r3, #29]
 8005020:	031b      	lsls	r3, r3, #12
  dmaregval = (dmaconf->TxDMABurstLength |
 8005022:	4313      	orrs	r3, r2
 8005024:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACTCR, ETH_DMACTCR_MASK, dmaregval);
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	681b      	ldr	r3, [r3, #0]
 800502a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800502e:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
 8005032:	4b16      	ldr	r3, [pc, #88]	; (800508c <ETH_SetDMAConfig+0x104>)
 8005034:	4013      	ands	r3, r2
 8005036:	687a      	ldr	r2, [r7, #4]
 8005038:	6812      	ldr	r2, [r2, #0]
 800503a:	68f9      	ldr	r1, [r7, #12]
 800503c:	430b      	orrs	r3, r1
 800503e:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8005042:	f8c2 3104 	str.w	r3, [r2, #260]	; 0x104

  /*------------------------ DMACRCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 8005046:	683b      	ldr	r3, [r7, #0]
 8005048:	7f1b      	ldrb	r3, [r3, #28]
 800504a:	07da      	lsls	r2, r3, #31
               dmaconf->RxDMABurstLength);
 800504c:	683b      	ldr	r3, [r7, #0]
 800504e:	699b      	ldr	r3, [r3, #24]
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 8005050:	4313      	orrs	r3, r2
 8005052:	60fb      	str	r3, [r7, #12]

  /* Write to DMACRCR */
  MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_MASK, dmaregval);
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	681b      	ldr	r3, [r3, #0]
 8005058:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800505c:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
 8005060:	4b0b      	ldr	r3, [pc, #44]	; (8005090 <ETH_SetDMAConfig+0x108>)
 8005062:	4013      	ands	r3, r2
 8005064:	687a      	ldr	r2, [r7, #4]
 8005066:	6812      	ldr	r2, [r2, #0]
 8005068:	68f9      	ldr	r1, [r7, #12]
 800506a:	430b      	orrs	r3, r1
 800506c:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8005070:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108
}
 8005074:	bf00      	nop
 8005076:	3714      	adds	r7, #20
 8005078:	46bd      	mov	sp, r7
 800507a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800507e:	4770      	bx	lr
 8005080:	ffff87fd 	.word	0xffff87fd
 8005084:	ffff2ffe 	.word	0xffff2ffe
 8005088:	fffec000 	.word	0xfffec000
 800508c:	ffc0efef 	.word	0xffc0efef
 8005090:	7fc0ffff 	.word	0x7fc0ffff

08005094 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 8005094:	b580      	push	{r7, lr}
 8005096:	b0a4      	sub	sp, #144	; 0x90
 8005098:	af00      	add	r7, sp, #0
 800509a:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.AutomaticPadCRCStrip = ENABLE;
 800509c:	2301      	movs	r3, #1
 800509e:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 80050a2:	2300      	movs	r3, #0
 80050a4:	653b      	str	r3, [r7, #80]	; 0x50
  macDefaultConf.CarrierSenseBeforeTransmit = DISABLE;
 80050a6:	2300      	movs	r3, #0
 80050a8:	f887 3049 	strb.w	r3, [r7, #73]	; 0x49
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 80050ac:	2300      	movs	r3, #0
 80050ae:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
  macDefaultConf.ChecksumOffload = ENABLE;
 80050b2:	2301      	movs	r3, #1
 80050b4:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  macDefaultConf.CRCCheckingRxPackets = ENABLE;
 80050b8:	2301      	movs	r3, #1
 80050ba:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
  macDefaultConf.CRCStripTypePacket = ENABLE;
 80050be:	2301      	movs	r3, #1
 80050c0:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
  macDefaultConf.DeferralCheck = DISABLE;
 80050c4:	2300      	movs	r3, #0
 80050c6:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  macDefaultConf.DropTCPIPChecksumErrorPacket = ENABLE;
 80050ca:	2301      	movs	r3, #1
 80050cc:	f887 308c 	strb.w	r3, [r7, #140]	; 0x8c
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 80050d0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80050d4:	647b      	str	r3, [r7, #68]	; 0x44
  macDefaultConf.ExtendedInterPacketGap = DISABLE;
 80050d6:	2300      	movs	r3, #0
 80050d8:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64
  macDefaultConf.ExtendedInterPacketGapVal = 0x0;
 80050dc:	2300      	movs	r3, #0
 80050de:	66bb      	str	r3, [r7, #104]	; 0x68
  macDefaultConf.ForwardRxErrorPacket = DISABLE;
 80050e0:	2300      	movs	r3, #0
 80050e2:	f887 308d 	strb.w	r3, [r7, #141]	; 0x8d
  macDefaultConf.ForwardRxUndersizedGoodPacket = DISABLE;
 80050e6:	2300      	movs	r3, #0
 80050e8:	f887 308e 	strb.w	r3, [r7, #142]	; 0x8e
  macDefaultConf.GiantPacketSizeLimit = 0x618;
 80050ec:	f44f 63c3 	mov.w	r3, #1560	; 0x618
 80050f0:	663b      	str	r3, [r7, #96]	; 0x60
  macDefaultConf.GiantPacketSizeLimitControl = DISABLE;
 80050f2:	2300      	movs	r3, #0
 80050f4:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  macDefaultConf.InterPacketGapVal = ETH_INTERPACKETGAP_96BIT;
 80050f8:	2300      	movs	r3, #0
 80050fa:	637b      	str	r3, [r7, #52]	; 0x34
  macDefaultConf.Jabber = ENABLE;
 80050fc:	2301      	movs	r3, #1
 80050fe:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
  macDefaultConf.JumboPacket = DISABLE;
 8005102:	2300      	movs	r3, #0
 8005104:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
  macDefaultConf.LoopbackMode = DISABLE;
 8005108:	2300      	movs	r3, #0
 800510a:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS_4;
 800510e:	2300      	movs	r3, #0
 8005110:	67fb      	str	r3, [r7, #124]	; 0x7c
  macDefaultConf.PauseTime = 0x0;
 8005112:	2300      	movs	r3, #0
 8005114:	677b      	str	r3, [r7, #116]	; 0x74
  macDefaultConf.PreambleLength = ETH_PREAMBLELENGTH_7;
 8005116:	2300      	movs	r3, #0
 8005118:	65bb      	str	r3, [r7, #88]	; 0x58
  macDefaultConf.ProgrammableWatchdog = DISABLE;
 800511a:	2300      	movs	r3, #0
 800511c:	f887 306c 	strb.w	r3, [r7, #108]	; 0x6c
  macDefaultConf.ReceiveFlowControl = DISABLE;
 8005120:	2300      	movs	r3, #0
 8005122:	f887 3082 	strb.w	r3, [r7, #130]	; 0x82
  macDefaultConf.ReceiveOwn = ENABLE;
 8005126:	2301      	movs	r3, #1
 8005128:	f887 304a 	strb.w	r3, [r7, #74]	; 0x4a
  macDefaultConf.ReceiveQueueMode = ETH_RECEIVESTOREFORWARD;
 800512c:	2320      	movs	r3, #32
 800512e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  macDefaultConf.RetryTransmission = ENABLE;
 8005132:	2301      	movs	r3, #1
 8005134:	f887 304c 	strb.w	r3, [r7, #76]	; 0x4c
  macDefaultConf.SlowProtocolDetect = DISABLE;
 8005138:	2300      	movs	r3, #0
 800513a:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d
  macDefaultConf.SourceAddrControl = ETH_SOURCEADDRESS_REPLACE_ADDR0;
 800513e:	f04f 5340 	mov.w	r3, #805306368	; 0x30000000
 8005142:	62fb      	str	r3, [r7, #44]	; 0x2c
  macDefaultConf.Speed = ETH_SPEED_100M;
 8005144:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8005148:	643b      	str	r3, [r7, #64]	; 0x40
  macDefaultConf.Support2KPacket = DISABLE;
 800514a:	2300      	movs	r3, #0
 800514c:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
  macDefaultConf.TransmitQueueMode = ETH_TRANSMITSTOREFORWARD;
 8005150:	2302      	movs	r3, #2
 8005152:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macDefaultConf.TransmitFlowControl = DISABLE;
 8005156:	2300      	movs	r3, #0
 8005158:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 800515c:	2300      	movs	r3, #0
 800515e:	f887 3081 	strb.w	r3, [r7, #129]	; 0x81
  macDefaultConf.UnicastSlowProtocolPacketDetect = DISABLE;
 8005162:	2300      	movs	r3, #0
 8005164:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  macDefaultConf.Watchdog = ENABLE;
 8005168:	2301      	movs	r3, #1
 800516a:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
  macDefaultConf.WatchdogTimeout =  ETH_MACWTR_WTO_2KB;
 800516e:	2300      	movs	r3, #0
 8005170:	673b      	str	r3, [r7, #112]	; 0x70
  macDefaultConf.ZeroQuantaPause = ENABLE;
 8005172:	2301      	movs	r3, #1
 8005174:	f887 3078 	strb.w	r3, [r7, #120]	; 0x78

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 8005178:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800517c:	4619      	mov	r1, r3
 800517e:	6878      	ldr	r0, [r7, #4]
 8005180:	f7ff fde6 	bl	8004d50 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 8005184:	2301      	movs	r3, #1
 8005186:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 8005188:	2301      	movs	r3, #1
 800518a:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_RX1_TX1;
 800518c:	2300      	movs	r3, #0
 800518e:	60bb      	str	r3, [r7, #8]
  dmaDefaultConf.FlushRxPacket = DISABLE;
 8005190:	2300      	movs	r3, #0
 8005192:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  dmaDefaultConf.PBLx8Mode = DISABLE;
 8005196:	2300      	movs	r3, #0
 8005198:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.RebuildINCRxBurst = DISABLE;
 800519a:	2300      	movs	r3, #0
 800519c:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 800519e:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80051a2:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.SecondPacketOperate = DISABLE;
 80051a4:	2300      	movs	r3, #0
 80051a6:	773b      	strb	r3, [r7, #28]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 80051a8:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80051ac:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.TCPSegmentation = DISABLE;
 80051ae:	2300      	movs	r3, #0
 80051b0:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  dmaDefaultConf.MaximumSegmentSize = ETH_SEGMENT_SIZE_DEFAULT;
 80051b4:	f44f 7306 	mov.w	r3, #536	; 0x218
 80051b8:	62bb      	str	r3, [r7, #40]	; 0x28

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 80051ba:	f107 0308 	add.w	r3, r7, #8
 80051be:	4619      	mov	r1, r3
 80051c0:	6878      	ldr	r0, [r7, #4]
 80051c2:	f7ff fee1 	bl	8004f88 <ETH_SetDMAConfig>
}
 80051c6:	bf00      	nop
 80051c8:	3790      	adds	r7, #144	; 0x90
 80051ca:	46bd      	mov	sp, r7
 80051cc:	bd80      	pop	{r7, pc}

080051ce <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 80051ce:	b480      	push	{r7}
 80051d0:	b085      	sub	sp, #20
 80051d2:	af00      	add	r7, sp, #0
 80051d4:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 80051d6:	2300      	movs	r3, #0
 80051d8:	60fb      	str	r3, [r7, #12]
 80051da:	e01d      	b.n	8005218 <ETH_DMATxDescListInit+0x4a>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	68d9      	ldr	r1, [r3, #12]
 80051e0:	68fa      	ldr	r2, [r7, #12]
 80051e2:	4613      	mov	r3, r2
 80051e4:	005b      	lsls	r3, r3, #1
 80051e6:	4413      	add	r3, r2
 80051e8:	00db      	lsls	r3, r3, #3
 80051ea:	440b      	add	r3, r1
 80051ec:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0);
 80051ee:	68bb      	ldr	r3, [r7, #8]
 80051f0:	2200      	movs	r2, #0
 80051f2:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 80051f4:	68bb      	ldr	r3, [r7, #8]
 80051f6:	2200      	movs	r2, #0
 80051f8:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0);
 80051fa:	68bb      	ldr	r3, [r7, #8]
 80051fc:	2200      	movs	r2, #0
 80051fe:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0);
 8005200:	68bb      	ldr	r3, [r7, #8]
 8005202:	2200      	movs	r2, #0
 8005204:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 8005206:	68b9      	ldr	r1, [r7, #8]
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	68fa      	ldr	r2, [r7, #12]
 800520c:	3206      	adds	r2, #6
 800520e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8005212:	68fb      	ldr	r3, [r7, #12]
 8005214:	3301      	adds	r3, #1
 8005216:	60fb      	str	r3, [r7, #12]
 8005218:	68fb      	ldr	r3, [r7, #12]
 800521a:	2b03      	cmp	r3, #3
 800521c:	d9de      	bls.n	80051dc <ETH_DMATxDescListInit+0xe>

  }

  heth->TxDescList.CurTxDesc = 0;
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	2200      	movs	r2, #0
 8005222:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set Transmit Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACTDRLR, (ETH_TX_DESC_CNT - 1U));
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	681b      	ldr	r3, [r3, #0]
 8005228:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800522c:	461a      	mov	r2, r3
 800522e:	2303      	movs	r3, #3
 8005230:	f8c2 312c 	str.w	r3, [r2, #300]	; 0x12c

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMACTDLAR, (uint32_t) heth->Init.TxDesc);
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	68da      	ldr	r2, [r3, #12]
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	681b      	ldr	r3, [r3, #0]
 800523c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005240:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114

  /* Set Transmit Descriptor Tail pointer */
  WRITE_REG(heth->Instance->DMACTDTPR, (uint32_t) heth->Init.TxDesc);
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	68da      	ldr	r2, [r3, #12]
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	681b      	ldr	r3, [r3, #0]
 800524c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005250:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
}
 8005254:	bf00      	nop
 8005256:	3714      	adds	r7, #20
 8005258:	46bd      	mov	sp, r7
 800525a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800525e:	4770      	bx	lr

08005260 <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 8005260:	b480      	push	{r7}
 8005262:	b085      	sub	sp, #20
 8005264:	af00      	add	r7, sp, #0
 8005266:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8005268:	2300      	movs	r3, #0
 800526a:	60fb      	str	r3, [r7, #12]
 800526c:	e023      	b.n	80052b6 <ETH_DMARxDescListInit+0x56>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	6919      	ldr	r1, [r3, #16]
 8005272:	68fa      	ldr	r2, [r7, #12]
 8005274:	4613      	mov	r3, r2
 8005276:	005b      	lsls	r3, r3, #1
 8005278:	4413      	add	r3, r2
 800527a:	00db      	lsls	r3, r3, #3
 800527c:	440b      	add	r3, r1
 800527e:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0);
 8005280:	68bb      	ldr	r3, [r7, #8]
 8005282:	2200      	movs	r2, #0
 8005284:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0);
 8005286:	68bb      	ldr	r3, [r7, #8]
 8005288:	2200      	movs	r2, #0
 800528a:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0);
 800528c:	68bb      	ldr	r3, [r7, #8]
 800528e:	2200      	movs	r2, #0
 8005290:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0);
 8005292:	68bb      	ldr	r3, [r7, #8]
 8005294:	2200      	movs	r2, #0
 8005296:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0);
 8005298:	68bb      	ldr	r3, [r7, #8]
 800529a:	2200      	movs	r2, #0
 800529c:	611a      	str	r2, [r3, #16]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0);
 800529e:	68bb      	ldr	r3, [r7, #8]
 80052a0:	2200      	movs	r2, #0
 80052a2:	615a      	str	r2, [r3, #20]


    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 80052a4:	68b9      	ldr	r1, [r7, #8]
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	68fa      	ldr	r2, [r7, #12]
 80052aa:	3212      	adds	r2, #18
 80052ac:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 80052b0:	68fb      	ldr	r3, [r7, #12]
 80052b2:	3301      	adds	r3, #1
 80052b4:	60fb      	str	r3, [r7, #12]
 80052b6:	68fb      	ldr	r3, [r7, #12]
 80052b8:	2b03      	cmp	r3, #3
 80052ba:	d9d8      	bls.n	800526e <ETH_DMARxDescListInit+0xe>

  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0);
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	2200      	movs	r2, #0
 80052c0:	65da      	str	r2, [r3, #92]	; 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0);
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	2200      	movs	r2, #0
 80052c6:	661a      	str	r2, [r3, #96]	; 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0);
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	2200      	movs	r2, #0
 80052cc:	669a      	str	r2, [r3, #104]	; 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0);
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	2200      	movs	r2, #0
 80052d2:	66da      	str	r2, [r3, #108]	; 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0);
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	2200      	movs	r2, #0
 80052d8:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set Receive Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACRDRLR, ((uint32_t)(ETH_RX_DESC_CNT - 1U)));
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	681b      	ldr	r3, [r3, #0]
 80052de:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80052e2:	461a      	mov	r2, r3
 80052e4:	2303      	movs	r3, #3
 80052e6:	f8c2 3130 	str.w	r3, [r2, #304]	; 0x130

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMACRDLAR, (uint32_t) heth->Init.RxDesc);
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	691a      	ldr	r2, [r3, #16]
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	681b      	ldr	r3, [r3, #0]
 80052f2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80052f6:	f8c3 211c 	str.w	r2, [r3, #284]	; 0x11c

  /* Set Receive Descriptor Tail pointer Address */
  WRITE_REG(heth->Instance->DMACRDTPR, ((uint32_t)(heth->Init.RxDesc + (uint32_t)(ETH_RX_DESC_CNT - 1U))));
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	691b      	ldr	r3, [r3, #16]
 80052fe:	f103 0248 	add.w	r2, r3, #72	; 0x48
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	681b      	ldr	r3, [r3, #0]
 8005306:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800530a:	f8c3 2128 	str.w	r2, [r3, #296]	; 0x128
}
 800530e:	bf00      	nop
 8005310:	3714      	adds	r7, #20
 8005312:	46bd      	mov	sp, r7
 8005314:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005318:	4770      	bx	lr
	...

0800531c <HAL_FDCAN_Init>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Init(FDCAN_HandleTypeDef *hfdcan)
{
 800531c:	b580      	push	{r7, lr}
 800531e:	b098      	sub	sp, #96	; 0x60
 8005320:	af00      	add	r7, sp, #0
 8005322:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  const uint32_t CvtEltSize[] = {0, 0, 0, 0, 0, 1, 2, 3, 4, 0, 5, 0, 0, 0, 6, 0, 0, 0, 7};
 8005324:	4a84      	ldr	r2, [pc, #528]	; (8005538 <HAL_FDCAN_Init+0x21c>)
 8005326:	f107 030c 	add.w	r3, r7, #12
 800532a:	4611      	mov	r1, r2
 800532c:	224c      	movs	r2, #76	; 0x4c
 800532e:	4618      	mov	r0, r3
 8005330:	f008 fec0 	bl	800e0b4 <memcpy>

  /* Check FDCAN handle */
  if (hfdcan == NULL)
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	2b00      	cmp	r3, #0
 8005338:	d101      	bne.n	800533e <HAL_FDCAN_Init+0x22>
  {
    return HAL_ERROR;
 800533a:	2301      	movs	r3, #1
 800533c:	e1c6      	b.n	80056cc <HAL_FDCAN_Init+0x3b0>
  }

  /* Check FDCAN instance */
  if (hfdcan->Instance == FDCAN1)
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	681b      	ldr	r3, [r3, #0]
 8005342:	4a7e      	ldr	r2, [pc, #504]	; (800553c <HAL_FDCAN_Init+0x220>)
 8005344:	4293      	cmp	r3, r2
 8005346:	d106      	bne.n	8005356 <HAL_FDCAN_Init+0x3a>
  {
    hfdcan->ttcan = (TTCAN_TypeDef *)((uint32_t)hfdcan->Instance + 0x100U);
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	681b      	ldr	r3, [r3, #0]
 800534c:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8005350:	461a      	mov	r2, r3
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	605a      	str	r2, [r3, #4]

    /* Init the low level hardware: CLOCK, NVIC */
    hfdcan->MspInitCallback(hfdcan);
  }
#else
  if (hfdcan->State == HAL_FDCAN_STATE_RESET)
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 800535c:	b2db      	uxtb	r3, r3
 800535e:	2b00      	cmp	r3, #0
 8005360:	d106      	bne.n	8005370 <HAL_FDCAN_Init+0x54>
  {
    /* Allocate lock resource and initialize it */
    hfdcan->Lock = HAL_UNLOCKED;
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	2200      	movs	r2, #0
 8005366:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99

    /* Init the low level hardware: CLOCK, NVIC */
    HAL_FDCAN_MspInit(hfdcan);
 800536a:	6878      	ldr	r0, [r7, #4]
 800536c:	f7fc fc66 	bl	8001c3c <HAL_FDCAN_MspInit>
  }
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */

  /* Exit from Sleep mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	681b      	ldr	r3, [r3, #0]
 8005374:	699a      	ldr	r2, [r3, #24]
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	681b      	ldr	r3, [r3, #0]
 800537a:	f022 0210 	bic.w	r2, r2, #16
 800537e:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8005380:	f7fd fc40 	bl	8002c04 <HAL_GetTick>
 8005384:	65f8      	str	r0, [r7, #92]	; 0x5c

  /* Check Sleep mode acknowledge */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8005386:	e014      	b.n	80053b2 <HAL_FDCAN_Init+0x96>
  {
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8005388:	f7fd fc3c 	bl	8002c04 <HAL_GetTick>
 800538c:	4602      	mov	r2, r0
 800538e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005390:	1ad3      	subs	r3, r2, r3
 8005392:	2b0a      	cmp	r3, #10
 8005394:	d90d      	bls.n	80053b2 <HAL_FDCAN_Init+0x96>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800539c:	f043 0201 	orr.w	r2, r3, #1
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	2203      	movs	r2, #3
 80053aa:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

      return HAL_ERROR;
 80053ae:	2301      	movs	r3, #1
 80053b0:	e18c      	b.n	80056cc <HAL_FDCAN_Init+0x3b0>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	681b      	ldr	r3, [r3, #0]
 80053b6:	699b      	ldr	r3, [r3, #24]
 80053b8:	f003 0308 	and.w	r3, r3, #8
 80053bc:	2b08      	cmp	r3, #8
 80053be:	d0e3      	beq.n	8005388 <HAL_FDCAN_Init+0x6c>
    }
  }

  /* Request initialisation */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	681b      	ldr	r3, [r3, #0]
 80053c4:	699a      	ldr	r2, [r3, #24]
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	681b      	ldr	r3, [r3, #0]
 80053ca:	f042 0201 	orr.w	r2, r2, #1
 80053ce:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 80053d0:	f7fd fc18 	bl	8002c04 <HAL_GetTick>
 80053d4:	65f8      	str	r0, [r7, #92]	; 0x5c

  /* Wait until the INIT bit into CCCR register is set */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 80053d6:	e014      	b.n	8005402 <HAL_FDCAN_Init+0xe6>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 80053d8:	f7fd fc14 	bl	8002c04 <HAL_GetTick>
 80053dc:	4602      	mov	r2, r0
 80053de:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80053e0:	1ad3      	subs	r3, r2, r3
 80053e2:	2b0a      	cmp	r3, #10
 80053e4:	d90d      	bls.n	8005402 <HAL_FDCAN_Init+0xe6>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80053ec:	f043 0201 	orr.w	r2, r3, #1
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	2203      	movs	r2, #3
 80053fa:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

      return HAL_ERROR;
 80053fe:	2301      	movs	r3, #1
 8005400:	e164      	b.n	80056cc <HAL_FDCAN_Init+0x3b0>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	681b      	ldr	r3, [r3, #0]
 8005406:	699b      	ldr	r3, [r3, #24]
 8005408:	f003 0301 	and.w	r3, r3, #1
 800540c:	2b00      	cmp	r3, #0
 800540e:	d0e3      	beq.n	80053d8 <HAL_FDCAN_Init+0xbc>
    }
  }

  /* Enable configuration change */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	681b      	ldr	r3, [r3, #0]
 8005414:	699a      	ldr	r2, [r3, #24]
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	681b      	ldr	r3, [r3, #0]
 800541a:	f042 0202 	orr.w	r2, r2, #2
 800541e:	619a      	str	r2, [r3, #24]

  /* Set the no automatic retransmission */
  if (hfdcan->Init.AutoRetransmission == ENABLE)
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	7c1b      	ldrb	r3, [r3, #16]
 8005424:	2b01      	cmp	r3, #1
 8005426:	d108      	bne.n	800543a <HAL_FDCAN_Init+0x11e>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	681b      	ldr	r3, [r3, #0]
 800542c:	699a      	ldr	r2, [r3, #24]
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	681b      	ldr	r3, [r3, #0]
 8005432:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005436:	619a      	str	r2, [r3, #24]
 8005438:	e007      	b.n	800544a <HAL_FDCAN_Init+0x12e>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	681b      	ldr	r3, [r3, #0]
 800543e:	699a      	ldr	r2, [r3, #24]
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	681b      	ldr	r3, [r3, #0]
 8005444:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005448:	619a      	str	r2, [r3, #24]
  }

  /* Set the transmit pause feature */
  if (hfdcan->Init.TransmitPause == ENABLE)
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	7c5b      	ldrb	r3, [r3, #17]
 800544e:	2b01      	cmp	r3, #1
 8005450:	d108      	bne.n	8005464 <HAL_FDCAN_Init+0x148>
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	681b      	ldr	r3, [r3, #0]
 8005456:	699a      	ldr	r2, [r3, #24]
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	681b      	ldr	r3, [r3, #0]
 800545c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005460:	619a      	str	r2, [r3, #24]
 8005462:	e007      	b.n	8005474 <HAL_FDCAN_Init+0x158>
  }
  else
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	681b      	ldr	r3, [r3, #0]
 8005468:	699a      	ldr	r2, [r3, #24]
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	681b      	ldr	r3, [r3, #0]
 800546e:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8005472:	619a      	str	r2, [r3, #24]
  }

  /* Set the Protocol Exception Handling */
  if (hfdcan->Init.ProtocolException == ENABLE)
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	7c9b      	ldrb	r3, [r3, #18]
 8005478:	2b01      	cmp	r3, #1
 800547a:	d108      	bne.n	800548e <HAL_FDCAN_Init+0x172>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	681b      	ldr	r3, [r3, #0]
 8005480:	699a      	ldr	r2, [r3, #24]
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	681b      	ldr	r3, [r3, #0]
 8005486:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800548a:	619a      	str	r2, [r3, #24]
 800548c:	e007      	b.n	800549e <HAL_FDCAN_Init+0x182>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	681b      	ldr	r3, [r3, #0]
 8005492:	699a      	ldr	r2, [r3, #24]
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	681b      	ldr	r3, [r3, #0]
 8005498:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800549c:	619a      	str	r2, [r3, #24]
  }

  /* Set FDCAN Frame Format */
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	681b      	ldr	r3, [r3, #0]
 80054a2:	699b      	ldr	r3, [r3, #24]
 80054a4:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	689a      	ldr	r2, [r3, #8]
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	681b      	ldr	r3, [r3, #0]
 80054b0:	430a      	orrs	r2, r1
 80054b2:	619a      	str	r2, [r3, #24]

  /* Reset FDCAN Operation Mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, (FDCAN_CCCR_TEST | FDCAN_CCCR_MON | FDCAN_CCCR_ASM));
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	681b      	ldr	r3, [r3, #0]
 80054b8:	699a      	ldr	r2, [r3, #24]
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	681b      	ldr	r3, [r3, #0]
 80054be:	f022 02a4 	bic.w	r2, r2, #164	; 0xa4
 80054c2:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	681b      	ldr	r3, [r3, #0]
 80054c8:	691a      	ldr	r2, [r3, #16]
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	681b      	ldr	r3, [r3, #0]
 80054ce:	f022 0210 	bic.w	r2, r2, #16
 80054d2:	611a      	str	r2, [r3, #16]
     CCCR.TEST |   0    |     0      |     0      |    1     |    1
     CCCR.MON  |   0    |     0      |     1      |    1     |    0
     TEST.LBCK |   0    |     0      |     0      |    1     |    1
     CCCR.ASM  |   0    |     1      |     0      |    0     |    0
  */
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	68db      	ldr	r3, [r3, #12]
 80054d8:	2b01      	cmp	r3, #1
 80054da:	d108      	bne.n	80054ee <HAL_FDCAN_Init+0x1d2>
  {
    /* Enable Restricted Operation mode */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	681b      	ldr	r3, [r3, #0]
 80054e0:	699a      	ldr	r2, [r3, #24]
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	681b      	ldr	r3, [r3, #0]
 80054e6:	f042 0204 	orr.w	r2, r2, #4
 80054ea:	619a      	str	r2, [r3, #24]
 80054ec:	e030      	b.n	8005550 <HAL_FDCAN_Init+0x234>
  }
  else if (hfdcan->Init.Mode != FDCAN_MODE_NORMAL)
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	68db      	ldr	r3, [r3, #12]
 80054f2:	2b00      	cmp	r3, #0
 80054f4:	d02c      	beq.n	8005550 <HAL_FDCAN_Init+0x234>
  {
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	68db      	ldr	r3, [r3, #12]
 80054fa:	2b02      	cmp	r3, #2
 80054fc:	d020      	beq.n	8005540 <HAL_FDCAN_Init+0x224>
    {
      /* Enable write access to TEST register */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	681b      	ldr	r3, [r3, #0]
 8005502:	699a      	ldr	r2, [r3, #24]
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	681b      	ldr	r3, [r3, #0]
 8005508:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800550c:	619a      	str	r2, [r3, #24]

      /* Enable LoopBack mode */
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	681b      	ldr	r3, [r3, #0]
 8005512:	691a      	ldr	r2, [r3, #16]
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	681b      	ldr	r3, [r3, #0]
 8005518:	f042 0210 	orr.w	r2, r2, #16
 800551c:	611a      	str	r2, [r3, #16]

      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	68db      	ldr	r3, [r3, #12]
 8005522:	2b03      	cmp	r3, #3
 8005524:	d114      	bne.n	8005550 <HAL_FDCAN_Init+0x234>
      {
        SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	681b      	ldr	r3, [r3, #0]
 800552a:	699a      	ldr	r2, [r3, #24]
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	681b      	ldr	r3, [r3, #0]
 8005530:	f042 0220 	orr.w	r2, r2, #32
 8005534:	619a      	str	r2, [r3, #24]
 8005536:	e00b      	b.n	8005550 <HAL_FDCAN_Init+0x234>
 8005538:	0800e9f4 	.word	0x0800e9f4
 800553c:	4000a000 	.word	0x4000a000
      }
    }
    else
    {
      /* Enable bus monitoring mode */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	681b      	ldr	r3, [r3, #0]
 8005544:	699a      	ldr	r2, [r3, #24]
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	681b      	ldr	r3, [r3, #0]
 800554a:	f042 0220 	orr.w	r2, r2, #32
 800554e:	619a      	str	r2, [r3, #24]
  {
    /* Nothing to do: normal mode */
  }

  /* Set the nominal bit timing register */
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	699b      	ldr	r3, [r3, #24]
 8005554:	3b01      	subs	r3, #1
 8005556:	065a      	lsls	r2, r3, #25
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	69db      	ldr	r3, [r3, #28]
 800555c:	3b01      	subs	r3, #1
 800555e:	021b      	lsls	r3, r3, #8
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8005560:	431a      	orrs	r2, r3
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	6a1b      	ldr	r3, [r3, #32]
 8005566:	3b01      	subs	r3, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8005568:	ea42 0103 	orr.w	r1, r2, r3
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1U) << FDCAN_NBTP_NBRP_Pos));
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	695b      	ldr	r3, [r3, #20]
 8005570:	3b01      	subs	r3, #1
 8005572:	041a      	lsls	r2, r3, #16
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	681b      	ldr	r3, [r3, #0]
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8005578:	430a      	orrs	r2, r1
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 800557a:	61da      	str	r2, [r3, #28]

  /* If FD operation with BRS is selected, set the data bit timing register */
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	689b      	ldr	r3, [r3, #8]
 8005580:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005584:	d115      	bne.n	80055b2 <HAL_FDCAN_Init+0x296>
  {
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800558a:	1e5a      	subs	r2, r3, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)    | \
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005590:	3b01      	subs	r3, #1
 8005592:	021b      	lsls	r3, r3, #8
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 8005594:	431a      	orrs	r2, r3
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)    | \
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800559a:	3b01      	subs	r3, #1
 800559c:	011b      	lsls	r3, r3, #4
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)    | \
 800559e:	ea42 0103 	orr.w	r1, r2, r3
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1U) << FDCAN_DBTP_DBRP_Pos));
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055a6:	3b01      	subs	r3, #1
 80055a8:	041a      	lsls	r2, r3, #16
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	681b      	ldr	r3, [r3, #0]
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)    | \
 80055ae:	430a      	orrs	r2, r1
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 80055b0:	60da      	str	r2, [r3, #12]
  }

  if (hfdcan->Init.TxFifoQueueElmtsNbr > 0U)
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80055b6:	2b00      	cmp	r3, #0
 80055b8:	d00a      	beq.n	80055d0 <HAL_FDCAN_Init+0x2b4>
  {
    /* Select between Tx FIFO and Tx Queue operation modes */
    SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	681b      	ldr	r3, [r3, #0]
 80055be:	f8d3 10c0 	ldr.w	r1, [r3, #192]	; 0xc0
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	681b      	ldr	r3, [r3, #0]
 80055ca:	430a      	orrs	r2, r1
 80055cc:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
  }

  /* Configure Tx element size */
  if ((hfdcan->Init.TxBuffersNbr + hfdcan->Init.TxFifoQueueElmtsNbr) > 0U)
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80055d8:	4413      	add	r3, r2
 80055da:	2b00      	cmp	r3, #0
 80055dc:	d011      	beq.n	8005602 <HAL_FDCAN_Init+0x2e6>
  {
    MODIFY_REG(hfdcan->Instance->TXESC, FDCAN_TXESC_TBDS, CvtEltSize[hfdcan->Init.TxElmtSize]);
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	681b      	ldr	r3, [r3, #0]
 80055e2:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 80055e6:	f023 0107 	bic.w	r1, r3, #7
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80055ee:	009b      	lsls	r3, r3, #2
 80055f0:	3360      	adds	r3, #96	; 0x60
 80055f2:	443b      	add	r3, r7
 80055f4:	f853 2c54 	ldr.w	r2, [r3, #-84]
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	681b      	ldr	r3, [r3, #0]
 80055fc:	430a      	orrs	r2, r1
 80055fe:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  }

  /* Configure Rx FIFO 0 element size */
  if (hfdcan->Init.RxFifo0ElmtsNbr > 0U)
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005606:	2b00      	cmp	r3, #0
 8005608:	d011      	beq.n	800562e <HAL_FDCAN_Init+0x312>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_F0DS, (CvtEltSize[hfdcan->Init.RxFifo0ElmtSize] << FDCAN_RXESC_F0DS_Pos));
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	681b      	ldr	r3, [r3, #0]
 800560e:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8005612:	f023 0107 	bic.w	r1, r3, #7
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800561a:	009b      	lsls	r3, r3, #2
 800561c:	3360      	adds	r3, #96	; 0x60
 800561e:	443b      	add	r3, r7
 8005620:	f853 2c54 	ldr.w	r2, [r3, #-84]
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	681b      	ldr	r3, [r3, #0]
 8005628:	430a      	orrs	r2, r1
 800562a:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
  }

  /* Configure Rx FIFO 1 element size */
  if (hfdcan->Init.RxFifo1ElmtsNbr > 0U)
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005632:	2b00      	cmp	r3, #0
 8005634:	d012      	beq.n	800565c <HAL_FDCAN_Init+0x340>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_F1DS, (CvtEltSize[hfdcan->Init.RxFifo1ElmtSize] << FDCAN_RXESC_F1DS_Pos));
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	681b      	ldr	r3, [r3, #0]
 800563a:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 800563e:	f023 0170 	bic.w	r1, r3, #112	; 0x70
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005646:	009b      	lsls	r3, r3, #2
 8005648:	3360      	adds	r3, #96	; 0x60
 800564a:	443b      	add	r3, r7
 800564c:	f853 3c54 	ldr.w	r3, [r3, #-84]
 8005650:	011a      	lsls	r2, r3, #4
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	681b      	ldr	r3, [r3, #0]
 8005656:	430a      	orrs	r2, r1
 8005658:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
  }

  /* Configure Rx buffer element size */
  if (hfdcan->Init.RxBuffersNbr > 0U)
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005660:	2b00      	cmp	r3, #0
 8005662:	d012      	beq.n	800568a <HAL_FDCAN_Init+0x36e>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_RBDS, (CvtEltSize[hfdcan->Init.RxBufferSize] << FDCAN_RXESC_RBDS_Pos));
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	681b      	ldr	r3, [r3, #0]
 8005668:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 800566c:	f423 61e0 	bic.w	r1, r3, #1792	; 0x700
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005674:	009b      	lsls	r3, r3, #2
 8005676:	3360      	adds	r3, #96	; 0x60
 8005678:	443b      	add	r3, r7
 800567a:	f853 3c54 	ldr.w	r3, [r3, #-84]
 800567e:	021a      	lsls	r2, r3, #8
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	681b      	ldr	r3, [r3, #0]
 8005684:	430a      	orrs	r2, r1
 8005686:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
  }

  /* By default operation mode is set to Event-driven communication.
     If Time-triggered communication is needed, user should call the
     HAL_FDCAN_TT_ConfigOperation function just after the HAL_FDCAN_Init */
  if (hfdcan->Instance == FDCAN1)
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	681b      	ldr	r3, [r3, #0]
 800568e:	4a11      	ldr	r2, [pc, #68]	; (80056d4 <HAL_FDCAN_Init+0x3b8>)
 8005690:	4293      	cmp	r3, r2
 8005692:	d107      	bne.n	80056a4 <HAL_FDCAN_Init+0x388>
  {
    CLEAR_BIT(hfdcan->ttcan->TTOCF, FDCAN_TTOCF_OM);
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	685b      	ldr	r3, [r3, #4]
 8005698:	689a      	ldr	r2, [r3, #8]
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	685b      	ldr	r3, [r3, #4]
 800569e:	f022 0203 	bic.w	r2, r2, #3
 80056a2:	609a      	str	r2, [r3, #8]
  }

  /* Initialize the Latest Tx FIFO/Queue request buffer index */
  hfdcan->LatestTxFifoQRequest = 0U;
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	2200      	movs	r2, #0
 80056a8:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94

  /* Initialize the error code */
  hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	2200      	movs	r2, #0
 80056b0:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

  /* Initialize the FDCAN state */
  hfdcan->State = HAL_FDCAN_STATE_READY;
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	2201      	movs	r2, #1
 80056b8:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

  /* Calculate each RAM block address */
  status = FDCAN_CalcultateRamBlockAddresses(hfdcan);
 80056bc:	6878      	ldr	r0, [r7, #4]
 80056be:	f000 f80b 	bl	80056d8 <FDCAN_CalcultateRamBlockAddresses>
 80056c2:	4603      	mov	r3, r0
 80056c4:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b

  /* Return function status */
  return status;
 80056c8:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
}
 80056cc:	4618      	mov	r0, r3
 80056ce:	3760      	adds	r7, #96	; 0x60
 80056d0:	46bd      	mov	sp, r7
 80056d2:	bd80      	pop	{r7, pc}
 80056d4:	4000a000 	.word	0x4000a000

080056d8 <FDCAN_CalcultateRamBlockAddresses>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
 */
static HAL_StatusTypeDef FDCAN_CalcultateRamBlockAddresses(FDCAN_HandleTypeDef *hfdcan)
{
 80056d8:	b480      	push	{r7}
 80056da:	b085      	sub	sp, #20
 80056dc:	af00      	add	r7, sp, #0
 80056de:	6078      	str	r0, [r7, #4]
  uint32_t RAMcounter;
  uint32_t StartAddress;

  StartAddress = hfdcan->Init.MessageRAMOffset;
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80056e4:	60bb      	str	r3, [r7, #8]

  /* Standard filter list start address */
  MODIFY_REG(hfdcan->Instance->SIDFC, FDCAN_SIDFC_FLSSA, (StartAddress << FDCAN_SIDFC_FLSSA_Pos));
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	681b      	ldr	r3, [r3, #0]
 80056ea:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 80056ee:	4ba7      	ldr	r3, [pc, #668]	; (800598c <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 80056f0:	4013      	ands	r3, r2
 80056f2:	68ba      	ldr	r2, [r7, #8]
 80056f4:	0091      	lsls	r1, r2, #2
 80056f6:	687a      	ldr	r2, [r7, #4]
 80056f8:	6812      	ldr	r2, [r2, #0]
 80056fa:	430b      	orrs	r3, r1
 80056fc:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84

  /* Standard filter elements number */
  MODIFY_REG(hfdcan->Instance->SIDFC, FDCAN_SIDFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_SIDFC_LSS_Pos));
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	681b      	ldr	r3, [r3, #0]
 8005704:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005708:	f423 017f 	bic.w	r1, r3, #16711680	; 0xff0000
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005710:	041a      	lsls	r2, r3, #16
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	681b      	ldr	r3, [r3, #0]
 8005716:	430a      	orrs	r2, r1
 8005718:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Extended filter list start address */
  StartAddress += hfdcan->Init.StdFiltersNbr;
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005720:	68ba      	ldr	r2, [r7, #8]
 8005722:	4413      	add	r3, r2
 8005724:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->XIDFC, FDCAN_XIDFC_FLESA, (StartAddress << FDCAN_XIDFC_FLESA_Pos));
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	681b      	ldr	r3, [r3, #0]
 800572a:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 800572e:	4b97      	ldr	r3, [pc, #604]	; (800598c <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8005730:	4013      	ands	r3, r2
 8005732:	68ba      	ldr	r2, [r7, #8]
 8005734:	0091      	lsls	r1, r2, #2
 8005736:	687a      	ldr	r2, [r7, #4]
 8005738:	6812      	ldr	r2, [r2, #0]
 800573a:	430b      	orrs	r3, r1
 800573c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Extended filter elements number */
  MODIFY_REG(hfdcan->Instance->XIDFC, FDCAN_XIDFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_XIDFC_LSE_Pos));
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	681b      	ldr	r3, [r3, #0]
 8005744:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005748:	f423 01fe 	bic.w	r1, r3, #8323072	; 0x7f0000
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005750:	041a      	lsls	r2, r3, #16
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	681b      	ldr	r3, [r3, #0]
 8005756:	430a      	orrs	r2, r1
 8005758:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Rx FIFO 0 start address */
  StartAddress += (hfdcan->Init.ExtFiltersNbr * 2U);
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005760:	005b      	lsls	r3, r3, #1
 8005762:	68ba      	ldr	r2, [r7, #8]
 8005764:	4413      	add	r3, r2
 8005766:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXF0C, FDCAN_RXF0C_F0SA, (StartAddress << FDCAN_RXF0C_F0SA_Pos));
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	681b      	ldr	r3, [r3, #0]
 800576c:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
 8005770:	4b86      	ldr	r3, [pc, #536]	; (800598c <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8005772:	4013      	ands	r3, r2
 8005774:	68ba      	ldr	r2, [r7, #8]
 8005776:	0091      	lsls	r1, r2, #2
 8005778:	687a      	ldr	r2, [r7, #4]
 800577a:	6812      	ldr	r2, [r2, #0]
 800577c:	430b      	orrs	r3, r1
 800577e:	f8c2 30a0 	str.w	r3, [r2, #160]	; 0xa0

  /* Rx FIFO 0 elements number */
  MODIFY_REG(hfdcan->Instance->RXF0C, FDCAN_RXF0C_F0S, (hfdcan->Init.RxFifo0ElmtsNbr << FDCAN_RXF0C_F0S_Pos));
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	681b      	ldr	r3, [r3, #0]
 8005786:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800578a:	f423 01fe 	bic.w	r1, r3, #8323072	; 0x7f0000
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005792:	041a      	lsls	r2, r3, #16
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	681b      	ldr	r3, [r3, #0]
 8005798:	430a      	orrs	r2, r1
 800579a:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0

  /* Rx FIFO 1 start address */
  StartAddress += (hfdcan->Init.RxFifo0ElmtsNbr * hfdcan->Init.RxFifo0ElmtSize);
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80057a2:	687a      	ldr	r2, [r7, #4]
 80057a4:	6c52      	ldr	r2, [r2, #68]	; 0x44
 80057a6:	fb02 f303 	mul.w	r3, r2, r3
 80057aa:	68ba      	ldr	r2, [r7, #8]
 80057ac:	4413      	add	r3, r2
 80057ae:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXF1C, FDCAN_RXF1C_F1SA, (StartAddress << FDCAN_RXF1C_F1SA_Pos));
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	681b      	ldr	r3, [r3, #0]
 80057b4:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 80057b8:	4b74      	ldr	r3, [pc, #464]	; (800598c <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 80057ba:	4013      	ands	r3, r2
 80057bc:	68ba      	ldr	r2, [r7, #8]
 80057be:	0091      	lsls	r1, r2, #2
 80057c0:	687a      	ldr	r2, [r7, #4]
 80057c2:	6812      	ldr	r2, [r2, #0]
 80057c4:	430b      	orrs	r3, r1
 80057c6:	f8c2 30b0 	str.w	r3, [r2, #176]	; 0xb0

  /* Rx FIFO 1 elements number */
  MODIFY_REG(hfdcan->Instance->RXF1C, FDCAN_RXF1C_F1S, (hfdcan->Init.RxFifo1ElmtsNbr << FDCAN_RXF1C_F1S_Pos));
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	681b      	ldr	r3, [r3, #0]
 80057ce:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80057d2:	f423 01fe 	bic.w	r1, r3, #8323072	; 0x7f0000
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80057da:	041a      	lsls	r2, r3, #16
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	681b      	ldr	r3, [r3, #0]
 80057e0:	430a      	orrs	r2, r1
 80057e2:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0

  /* Rx buffer list start address */
  StartAddress += (hfdcan->Init.RxFifo1ElmtsNbr * hfdcan->Init.RxFifo1ElmtSize);
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80057ea:	687a      	ldr	r2, [r7, #4]
 80057ec:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 80057ee:	fb02 f303 	mul.w	r3, r2, r3
 80057f2:	68ba      	ldr	r2, [r7, #8]
 80057f4:	4413      	add	r3, r2
 80057f6:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXBC, FDCAN_RXBC_RBSA, (StartAddress << FDCAN_RXBC_RBSA_Pos));
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	681b      	ldr	r3, [r3, #0]
 80057fc:	f8d3 20ac 	ldr.w	r2, [r3, #172]	; 0xac
 8005800:	4b62      	ldr	r3, [pc, #392]	; (800598c <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8005802:	4013      	ands	r3, r2
 8005804:	68ba      	ldr	r2, [r7, #8]
 8005806:	0091      	lsls	r1, r2, #2
 8005808:	687a      	ldr	r2, [r7, #4]
 800580a:	6812      	ldr	r2, [r2, #0]
 800580c:	430b      	orrs	r3, r1
 800580e:	f8c2 30ac 	str.w	r3, [r2, #172]	; 0xac

  /* Tx event FIFO start address */
  StartAddress += (hfdcan->Init.RxBuffersNbr * hfdcan->Init.RxBufferSize);
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005816:	687a      	ldr	r2, [r7, #4]
 8005818:	6d52      	ldr	r2, [r2, #84]	; 0x54
 800581a:	fb02 f303 	mul.w	r3, r2, r3
 800581e:	68ba      	ldr	r2, [r7, #8]
 8005820:	4413      	add	r3, r2
 8005822:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->TXEFC, FDCAN_TXEFC_EFSA, (StartAddress << FDCAN_TXEFC_EFSA_Pos));
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	681b      	ldr	r3, [r3, #0]
 8005828:	f8d3 20f0 	ldr.w	r2, [r3, #240]	; 0xf0
 800582c:	4b57      	ldr	r3, [pc, #348]	; (800598c <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 800582e:	4013      	ands	r3, r2
 8005830:	68ba      	ldr	r2, [r7, #8]
 8005832:	0091      	lsls	r1, r2, #2
 8005834:	687a      	ldr	r2, [r7, #4]
 8005836:	6812      	ldr	r2, [r2, #0]
 8005838:	430b      	orrs	r3, r1
 800583a:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

  /* Tx event FIFO elements number */
  MODIFY_REG(hfdcan->Instance->TXEFC, FDCAN_TXEFC_EFS, (hfdcan->Init.TxEventsNbr << FDCAN_TXEFC_EFS_Pos));
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	681b      	ldr	r3, [r3, #0]
 8005842:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8005846:	f423 117c 	bic.w	r1, r3, #4128768	; 0x3f0000
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800584e:	041a      	lsls	r2, r3, #16
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	681b      	ldr	r3, [r3, #0]
 8005854:	430a      	orrs	r2, r1
 8005856:	f8c3 20f0 	str.w	r2, [r3, #240]	; 0xf0

  /* Tx buffer list start address */
  StartAddress += (hfdcan->Init.TxEventsNbr * 2U);
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800585e:	005b      	lsls	r3, r3, #1
 8005860:	68ba      	ldr	r2, [r7, #8]
 8005862:	4413      	add	r3, r2
 8005864:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_TBSA, (StartAddress << FDCAN_TXBC_TBSA_Pos));
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	681b      	ldr	r3, [r3, #0]
 800586a:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 800586e:	4b47      	ldr	r3, [pc, #284]	; (800598c <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8005870:	4013      	ands	r3, r2
 8005872:	68ba      	ldr	r2, [r7, #8]
 8005874:	0091      	lsls	r1, r2, #2
 8005876:	687a      	ldr	r2, [r7, #4]
 8005878:	6812      	ldr	r2, [r2, #0]
 800587a:	430b      	orrs	r3, r1
 800587c:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0

  /* Dedicated Tx buffers number */
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_NDTB, (hfdcan->Init.TxBuffersNbr << FDCAN_TXBC_NDTB_Pos));
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	681b      	ldr	r3, [r3, #0]
 8005884:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8005888:	f423 117c 	bic.w	r1, r3, #4128768	; 0x3f0000
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005890:	041a      	lsls	r2, r3, #16
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	681b      	ldr	r3, [r3, #0]
 8005896:	430a      	orrs	r2, r1
 8005898:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0

  /* Tx FIFO/queue elements number */
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_TFQS, (hfdcan->Init.TxFifoQueueElmtsNbr << FDCAN_TXBC_TFQS_Pos));
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	681b      	ldr	r3, [r3, #0]
 80058a0:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 80058a4:	f023 517c 	bic.w	r1, r3, #1056964608	; 0x3f000000
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80058ac:	061a      	lsls	r2, r3, #24
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	681b      	ldr	r3, [r3, #0]
 80058b2:	430a      	orrs	r2, r1
 80058b4:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0

  hfdcan->msgRam.StandardFilterSA = SRAMCAN_BASE + (hfdcan->Init.MessageRAMOffset * 4U);
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80058bc:	4b34      	ldr	r3, [pc, #208]	; (8005990 <FDCAN_CalcultateRamBlockAddresses+0x2b8>)
 80058be:	4413      	add	r3, r2
 80058c0:	009a      	lsls	r2, r3, #2
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	66da      	str	r2, [r3, #108]	; 0x6c
  hfdcan->msgRam.ExtendedFilterSA = hfdcan->msgRam.StandardFilterSA + (hfdcan->Init.StdFiltersNbr * 4U);
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80058ce:	009b      	lsls	r3, r3, #2
 80058d0:	441a      	add	r2, r3
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	671a      	str	r2, [r3, #112]	; 0x70
  hfdcan->msgRam.RxFIFO0SA = hfdcan->msgRam.ExtendedFilterSA + (hfdcan->Init.ExtFiltersNbr * 2U * 4U);
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80058de:	00db      	lsls	r3, r3, #3
 80058e0:	441a      	add	r2, r3
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	675a      	str	r2, [r3, #116]	; 0x74
  hfdcan->msgRam.RxFIFO1SA = hfdcan->msgRam.RxFIFO0SA + (hfdcan->Init.RxFifo0ElmtsNbr * hfdcan->Init.RxFifo0ElmtSize * 4U);
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80058ee:	6879      	ldr	r1, [r7, #4]
 80058f0:	6c49      	ldr	r1, [r1, #68]	; 0x44
 80058f2:	fb01 f303 	mul.w	r3, r1, r3
 80058f6:	009b      	lsls	r3, r3, #2
 80058f8:	441a      	add	r2, r3
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	679a      	str	r2, [r3, #120]	; 0x78
  hfdcan->msgRam.RxBufferSA = hfdcan->msgRam.RxFIFO1SA + (hfdcan->Init.RxFifo1ElmtsNbr * hfdcan->Init.RxFifo1ElmtSize * 4U);
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	6f9a      	ldr	r2, [r3, #120]	; 0x78
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005906:	6879      	ldr	r1, [r7, #4]
 8005908:	6cc9      	ldr	r1, [r1, #76]	; 0x4c
 800590a:	fb01 f303 	mul.w	r3, r1, r3
 800590e:	009b      	lsls	r3, r3, #2
 8005910:	441a      	add	r2, r3
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	67da      	str	r2, [r3, #124]	; 0x7c
  hfdcan->msgRam.TxEventFIFOSA = hfdcan->msgRam.RxBufferSA + (hfdcan->Init.RxBuffersNbr * hfdcan->Init.RxBufferSize * 4U);
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800591e:	6879      	ldr	r1, [r7, #4]
 8005920:	6d49      	ldr	r1, [r1, #84]	; 0x54
 8005922:	fb01 f303 	mul.w	r3, r1, r3
 8005926:	009b      	lsls	r3, r3, #2
 8005928:	441a      	add	r2, r3
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  hfdcan->msgRam.TxBufferSA = hfdcan->msgRam.TxEventFIFOSA + (hfdcan->Init.TxEventsNbr * 2U * 4U);
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800593a:	00db      	lsls	r3, r3, #3
 800593c:	441a      	add	r2, r3
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hfdcan->msgRam.TxFIFOQSA = hfdcan->msgRam.TxBufferSA + (hfdcan->Init.TxBuffersNbr * hfdcan->Init.TxElmtSize * 4U);
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800594e:	6879      	ldr	r1, [r7, #4]
 8005950:	6e89      	ldr	r1, [r1, #104]	; 0x68
 8005952:	fb01 f303 	mul.w	r3, r1, r3
 8005956:	009b      	lsls	r3, r3, #2
 8005958:	441a      	add	r2, r3
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  hfdcan->msgRam.EndAddress = hfdcan->msgRam.TxFIFOQSA + (hfdcan->Init.TxFifoQueueElmtsNbr * hfdcan->Init.TxElmtSize * 4U);
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800596a:	6879      	ldr	r1, [r7, #4]
 800596c:	6e89      	ldr	r1, [r1, #104]	; 0x68
 800596e:	fb01 f303 	mul.w	r3, r1, r3
 8005972:	009b      	lsls	r3, r3, #2
 8005974:	441a      	add	r2, r3
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  if (hfdcan->msgRam.EndAddress > FDCAN_MESSAGE_RAM_END_ADDRESS) /* Last address of the Message RAM */
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005982:	4a04      	ldr	r2, [pc, #16]	; (8005994 <FDCAN_CalcultateRamBlockAddresses+0x2bc>)
 8005984:	4293      	cmp	r3, r2
 8005986:	d915      	bls.n	80059b4 <FDCAN_CalcultateRamBlockAddresses+0x2dc>
 8005988:	e006      	b.n	8005998 <FDCAN_CalcultateRamBlockAddresses+0x2c0>
 800598a:	bf00      	nop
 800598c:	ffff0003 	.word	0xffff0003
 8005990:	10002b00 	.word	0x10002b00
 8005994:	4000d3fc 	.word	0x4000d3fc
  {
    /* Update error code.
       Message RAM overflow */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800599e:	f043 0220 	orr.w	r2, r3, #32
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    /* Change FDCAN state */
    hfdcan->State = HAL_FDCAN_STATE_ERROR;
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	2203      	movs	r2, #3
 80059ac:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

    return HAL_ERROR;
 80059b0:	2301      	movs	r3, #1
 80059b2:	e010      	b.n	80059d6 <FDCAN_CalcultateRamBlockAddresses+0x2fe>
  }
  else
  {
    /* Flush the allocated Message RAM area */
    for (RAMcounter = hfdcan->msgRam.StandardFilterSA; RAMcounter < hfdcan->msgRam.EndAddress; RAMcounter += 4U)
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80059b8:	60fb      	str	r3, [r7, #12]
 80059ba:	e005      	b.n	80059c8 <FDCAN_CalcultateRamBlockAddresses+0x2f0>
    {
      *(uint32_t *)(RAMcounter) = 0x00000000;
 80059bc:	68fb      	ldr	r3, [r7, #12]
 80059be:	2200      	movs	r2, #0
 80059c0:	601a      	str	r2, [r3, #0]
    for (RAMcounter = hfdcan->msgRam.StandardFilterSA; RAMcounter < hfdcan->msgRam.EndAddress; RAMcounter += 4U)
 80059c2:	68fb      	ldr	r3, [r7, #12]
 80059c4:	3304      	adds	r3, #4
 80059c6:	60fb      	str	r3, [r7, #12]
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80059ce:	68fa      	ldr	r2, [r7, #12]
 80059d0:	429a      	cmp	r2, r3
 80059d2:	d3f3      	bcc.n	80059bc <FDCAN_CalcultateRamBlockAddresses+0x2e4>
    }
  }

  /* Return function status */
  return HAL_OK;
 80059d4:	2300      	movs	r3, #0
}
 80059d6:	4618      	mov	r0, r3
 80059d8:	3714      	adds	r7, #20
 80059da:	46bd      	mov	sp, r7
 80059dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059e0:	4770      	bx	lr
 80059e2:	bf00      	nop

080059e4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80059e4:	b480      	push	{r7}
 80059e6:	b089      	sub	sp, #36	; 0x24
 80059e8:	af00      	add	r7, sp, #0
 80059ea:	6078      	str	r0, [r7, #4]
 80059ec:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80059ee:	2300      	movs	r3, #0
 80059f0:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 80059f2:	4b89      	ldr	r3, [pc, #548]	; (8005c18 <HAL_GPIO_Init+0x234>)
 80059f4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80059f6:	e194      	b.n	8005d22 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80059f8:	683b      	ldr	r3, [r7, #0]
 80059fa:	681a      	ldr	r2, [r3, #0]
 80059fc:	2101      	movs	r1, #1
 80059fe:	69fb      	ldr	r3, [r7, #28]
 8005a00:	fa01 f303 	lsl.w	r3, r1, r3
 8005a04:	4013      	ands	r3, r2
 8005a06:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8005a08:	693b      	ldr	r3, [r7, #16]
 8005a0a:	2b00      	cmp	r3, #0
 8005a0c:	f000 8186 	beq.w	8005d1c <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8005a10:	683b      	ldr	r3, [r7, #0]
 8005a12:	685b      	ldr	r3, [r3, #4]
 8005a14:	f003 0303 	and.w	r3, r3, #3
 8005a18:	2b01      	cmp	r3, #1
 8005a1a:	d005      	beq.n	8005a28 <HAL_GPIO_Init+0x44>
 8005a1c:	683b      	ldr	r3, [r7, #0]
 8005a1e:	685b      	ldr	r3, [r3, #4]
 8005a20:	f003 0303 	and.w	r3, r3, #3
 8005a24:	2b02      	cmp	r3, #2
 8005a26:	d130      	bne.n	8005a8a <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	689b      	ldr	r3, [r3, #8]
 8005a2c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8005a2e:	69fb      	ldr	r3, [r7, #28]
 8005a30:	005b      	lsls	r3, r3, #1
 8005a32:	2203      	movs	r2, #3
 8005a34:	fa02 f303 	lsl.w	r3, r2, r3
 8005a38:	43db      	mvns	r3, r3
 8005a3a:	69ba      	ldr	r2, [r7, #24]
 8005a3c:	4013      	ands	r3, r2
 8005a3e:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8005a40:	683b      	ldr	r3, [r7, #0]
 8005a42:	68da      	ldr	r2, [r3, #12]
 8005a44:	69fb      	ldr	r3, [r7, #28]
 8005a46:	005b      	lsls	r3, r3, #1
 8005a48:	fa02 f303 	lsl.w	r3, r2, r3
 8005a4c:	69ba      	ldr	r2, [r7, #24]
 8005a4e:	4313      	orrs	r3, r2
 8005a50:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	69ba      	ldr	r2, [r7, #24]
 8005a56:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	685b      	ldr	r3, [r3, #4]
 8005a5c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8005a5e:	2201      	movs	r2, #1
 8005a60:	69fb      	ldr	r3, [r7, #28]
 8005a62:	fa02 f303 	lsl.w	r3, r2, r3
 8005a66:	43db      	mvns	r3, r3
 8005a68:	69ba      	ldr	r2, [r7, #24]
 8005a6a:	4013      	ands	r3, r2
 8005a6c:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8005a6e:	683b      	ldr	r3, [r7, #0]
 8005a70:	685b      	ldr	r3, [r3, #4]
 8005a72:	091b      	lsrs	r3, r3, #4
 8005a74:	f003 0201 	and.w	r2, r3, #1
 8005a78:	69fb      	ldr	r3, [r7, #28]
 8005a7a:	fa02 f303 	lsl.w	r3, r2, r3
 8005a7e:	69ba      	ldr	r2, [r7, #24]
 8005a80:	4313      	orrs	r3, r2
 8005a82:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	69ba      	ldr	r2, [r7, #24]
 8005a88:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8005a8a:	683b      	ldr	r3, [r7, #0]
 8005a8c:	685b      	ldr	r3, [r3, #4]
 8005a8e:	f003 0303 	and.w	r3, r3, #3
 8005a92:	2b03      	cmp	r3, #3
 8005a94:	d017      	beq.n	8005ac6 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	68db      	ldr	r3, [r3, #12]
 8005a9a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8005a9c:	69fb      	ldr	r3, [r7, #28]
 8005a9e:	005b      	lsls	r3, r3, #1
 8005aa0:	2203      	movs	r2, #3
 8005aa2:	fa02 f303 	lsl.w	r3, r2, r3
 8005aa6:	43db      	mvns	r3, r3
 8005aa8:	69ba      	ldr	r2, [r7, #24]
 8005aaa:	4013      	ands	r3, r2
 8005aac:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8005aae:	683b      	ldr	r3, [r7, #0]
 8005ab0:	689a      	ldr	r2, [r3, #8]
 8005ab2:	69fb      	ldr	r3, [r7, #28]
 8005ab4:	005b      	lsls	r3, r3, #1
 8005ab6:	fa02 f303 	lsl.w	r3, r2, r3
 8005aba:	69ba      	ldr	r2, [r7, #24]
 8005abc:	4313      	orrs	r3, r2
 8005abe:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	69ba      	ldr	r2, [r7, #24]
 8005ac4:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005ac6:	683b      	ldr	r3, [r7, #0]
 8005ac8:	685b      	ldr	r3, [r3, #4]
 8005aca:	f003 0303 	and.w	r3, r3, #3
 8005ace:	2b02      	cmp	r3, #2
 8005ad0:	d123      	bne.n	8005b1a <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8005ad2:	69fb      	ldr	r3, [r7, #28]
 8005ad4:	08da      	lsrs	r2, r3, #3
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	3208      	adds	r2, #8
 8005ada:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005ade:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8005ae0:	69fb      	ldr	r3, [r7, #28]
 8005ae2:	f003 0307 	and.w	r3, r3, #7
 8005ae6:	009b      	lsls	r3, r3, #2
 8005ae8:	220f      	movs	r2, #15
 8005aea:	fa02 f303 	lsl.w	r3, r2, r3
 8005aee:	43db      	mvns	r3, r3
 8005af0:	69ba      	ldr	r2, [r7, #24]
 8005af2:	4013      	ands	r3, r2
 8005af4:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8005af6:	683b      	ldr	r3, [r7, #0]
 8005af8:	691a      	ldr	r2, [r3, #16]
 8005afa:	69fb      	ldr	r3, [r7, #28]
 8005afc:	f003 0307 	and.w	r3, r3, #7
 8005b00:	009b      	lsls	r3, r3, #2
 8005b02:	fa02 f303 	lsl.w	r3, r2, r3
 8005b06:	69ba      	ldr	r2, [r7, #24]
 8005b08:	4313      	orrs	r3, r2
 8005b0a:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8005b0c:	69fb      	ldr	r3, [r7, #28]
 8005b0e:	08da      	lsrs	r2, r3, #3
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	3208      	adds	r2, #8
 8005b14:	69b9      	ldr	r1, [r7, #24]
 8005b16:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	681b      	ldr	r3, [r3, #0]
 8005b1e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8005b20:	69fb      	ldr	r3, [r7, #28]
 8005b22:	005b      	lsls	r3, r3, #1
 8005b24:	2203      	movs	r2, #3
 8005b26:	fa02 f303 	lsl.w	r3, r2, r3
 8005b2a:	43db      	mvns	r3, r3
 8005b2c:	69ba      	ldr	r2, [r7, #24]
 8005b2e:	4013      	ands	r3, r2
 8005b30:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8005b32:	683b      	ldr	r3, [r7, #0]
 8005b34:	685b      	ldr	r3, [r3, #4]
 8005b36:	f003 0203 	and.w	r2, r3, #3
 8005b3a:	69fb      	ldr	r3, [r7, #28]
 8005b3c:	005b      	lsls	r3, r3, #1
 8005b3e:	fa02 f303 	lsl.w	r3, r2, r3
 8005b42:	69ba      	ldr	r2, [r7, #24]
 8005b44:	4313      	orrs	r3, r2
 8005b46:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	69ba      	ldr	r2, [r7, #24]
 8005b4c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8005b4e:	683b      	ldr	r3, [r7, #0]
 8005b50:	685b      	ldr	r3, [r3, #4]
 8005b52:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8005b56:	2b00      	cmp	r3, #0
 8005b58:	f000 80e0 	beq.w	8005d1c <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005b5c:	4b2f      	ldr	r3, [pc, #188]	; (8005c1c <HAL_GPIO_Init+0x238>)
 8005b5e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8005b62:	4a2e      	ldr	r2, [pc, #184]	; (8005c1c <HAL_GPIO_Init+0x238>)
 8005b64:	f043 0302 	orr.w	r3, r3, #2
 8005b68:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8005b6c:	4b2b      	ldr	r3, [pc, #172]	; (8005c1c <HAL_GPIO_Init+0x238>)
 8005b6e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8005b72:	f003 0302 	and.w	r3, r3, #2
 8005b76:	60fb      	str	r3, [r7, #12]
 8005b78:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8005b7a:	4a29      	ldr	r2, [pc, #164]	; (8005c20 <HAL_GPIO_Init+0x23c>)
 8005b7c:	69fb      	ldr	r3, [r7, #28]
 8005b7e:	089b      	lsrs	r3, r3, #2
 8005b80:	3302      	adds	r3, #2
 8005b82:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005b86:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8005b88:	69fb      	ldr	r3, [r7, #28]
 8005b8a:	f003 0303 	and.w	r3, r3, #3
 8005b8e:	009b      	lsls	r3, r3, #2
 8005b90:	220f      	movs	r2, #15
 8005b92:	fa02 f303 	lsl.w	r3, r2, r3
 8005b96:	43db      	mvns	r3, r3
 8005b98:	69ba      	ldr	r2, [r7, #24]
 8005b9a:	4013      	ands	r3, r2
 8005b9c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	4a20      	ldr	r2, [pc, #128]	; (8005c24 <HAL_GPIO_Init+0x240>)
 8005ba2:	4293      	cmp	r3, r2
 8005ba4:	d052      	beq.n	8005c4c <HAL_GPIO_Init+0x268>
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	4a1f      	ldr	r2, [pc, #124]	; (8005c28 <HAL_GPIO_Init+0x244>)
 8005baa:	4293      	cmp	r3, r2
 8005bac:	d031      	beq.n	8005c12 <HAL_GPIO_Init+0x22e>
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	4a1e      	ldr	r2, [pc, #120]	; (8005c2c <HAL_GPIO_Init+0x248>)
 8005bb2:	4293      	cmp	r3, r2
 8005bb4:	d02b      	beq.n	8005c0e <HAL_GPIO_Init+0x22a>
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	4a1d      	ldr	r2, [pc, #116]	; (8005c30 <HAL_GPIO_Init+0x24c>)
 8005bba:	4293      	cmp	r3, r2
 8005bbc:	d025      	beq.n	8005c0a <HAL_GPIO_Init+0x226>
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	4a1c      	ldr	r2, [pc, #112]	; (8005c34 <HAL_GPIO_Init+0x250>)
 8005bc2:	4293      	cmp	r3, r2
 8005bc4:	d01f      	beq.n	8005c06 <HAL_GPIO_Init+0x222>
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	4a1b      	ldr	r2, [pc, #108]	; (8005c38 <HAL_GPIO_Init+0x254>)
 8005bca:	4293      	cmp	r3, r2
 8005bcc:	d019      	beq.n	8005c02 <HAL_GPIO_Init+0x21e>
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	4a1a      	ldr	r2, [pc, #104]	; (8005c3c <HAL_GPIO_Init+0x258>)
 8005bd2:	4293      	cmp	r3, r2
 8005bd4:	d013      	beq.n	8005bfe <HAL_GPIO_Init+0x21a>
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	4a19      	ldr	r2, [pc, #100]	; (8005c40 <HAL_GPIO_Init+0x25c>)
 8005bda:	4293      	cmp	r3, r2
 8005bdc:	d00d      	beq.n	8005bfa <HAL_GPIO_Init+0x216>
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	4a18      	ldr	r2, [pc, #96]	; (8005c44 <HAL_GPIO_Init+0x260>)
 8005be2:	4293      	cmp	r3, r2
 8005be4:	d007      	beq.n	8005bf6 <HAL_GPIO_Init+0x212>
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	4a17      	ldr	r2, [pc, #92]	; (8005c48 <HAL_GPIO_Init+0x264>)
 8005bea:	4293      	cmp	r3, r2
 8005bec:	d101      	bne.n	8005bf2 <HAL_GPIO_Init+0x20e>
 8005bee:	2309      	movs	r3, #9
 8005bf0:	e02d      	b.n	8005c4e <HAL_GPIO_Init+0x26a>
 8005bf2:	230a      	movs	r3, #10
 8005bf4:	e02b      	b.n	8005c4e <HAL_GPIO_Init+0x26a>
 8005bf6:	2308      	movs	r3, #8
 8005bf8:	e029      	b.n	8005c4e <HAL_GPIO_Init+0x26a>
 8005bfa:	2307      	movs	r3, #7
 8005bfc:	e027      	b.n	8005c4e <HAL_GPIO_Init+0x26a>
 8005bfe:	2306      	movs	r3, #6
 8005c00:	e025      	b.n	8005c4e <HAL_GPIO_Init+0x26a>
 8005c02:	2305      	movs	r3, #5
 8005c04:	e023      	b.n	8005c4e <HAL_GPIO_Init+0x26a>
 8005c06:	2304      	movs	r3, #4
 8005c08:	e021      	b.n	8005c4e <HAL_GPIO_Init+0x26a>
 8005c0a:	2303      	movs	r3, #3
 8005c0c:	e01f      	b.n	8005c4e <HAL_GPIO_Init+0x26a>
 8005c0e:	2302      	movs	r3, #2
 8005c10:	e01d      	b.n	8005c4e <HAL_GPIO_Init+0x26a>
 8005c12:	2301      	movs	r3, #1
 8005c14:	e01b      	b.n	8005c4e <HAL_GPIO_Init+0x26a>
 8005c16:	bf00      	nop
 8005c18:	58000080 	.word	0x58000080
 8005c1c:	58024400 	.word	0x58024400
 8005c20:	58000400 	.word	0x58000400
 8005c24:	58020000 	.word	0x58020000
 8005c28:	58020400 	.word	0x58020400
 8005c2c:	58020800 	.word	0x58020800
 8005c30:	58020c00 	.word	0x58020c00
 8005c34:	58021000 	.word	0x58021000
 8005c38:	58021400 	.word	0x58021400
 8005c3c:	58021800 	.word	0x58021800
 8005c40:	58021c00 	.word	0x58021c00
 8005c44:	58022000 	.word	0x58022000
 8005c48:	58022400 	.word	0x58022400
 8005c4c:	2300      	movs	r3, #0
 8005c4e:	69fa      	ldr	r2, [r7, #28]
 8005c50:	f002 0203 	and.w	r2, r2, #3
 8005c54:	0092      	lsls	r2, r2, #2
 8005c56:	4093      	lsls	r3, r2
 8005c58:	69ba      	ldr	r2, [r7, #24]
 8005c5a:	4313      	orrs	r3, r2
 8005c5c:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8005c5e:	4938      	ldr	r1, [pc, #224]	; (8005d40 <HAL_GPIO_Init+0x35c>)
 8005c60:	69fb      	ldr	r3, [r7, #28]
 8005c62:	089b      	lsrs	r3, r3, #2
 8005c64:	3302      	adds	r3, #2
 8005c66:	69ba      	ldr	r2, [r7, #24]
 8005c68:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8005c6c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005c70:	681b      	ldr	r3, [r3, #0]
 8005c72:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8005c74:	693b      	ldr	r3, [r7, #16]
 8005c76:	43db      	mvns	r3, r3
 8005c78:	69ba      	ldr	r2, [r7, #24]
 8005c7a:	4013      	ands	r3, r2
 8005c7c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8005c7e:	683b      	ldr	r3, [r7, #0]
 8005c80:	685b      	ldr	r3, [r3, #4]
 8005c82:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005c86:	2b00      	cmp	r3, #0
 8005c88:	d003      	beq.n	8005c92 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8005c8a:	69ba      	ldr	r2, [r7, #24]
 8005c8c:	693b      	ldr	r3, [r7, #16]
 8005c8e:	4313      	orrs	r3, r2
 8005c90:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8005c92:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005c96:	69bb      	ldr	r3, [r7, #24]
 8005c98:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8005c9a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005c9e:	685b      	ldr	r3, [r3, #4]
 8005ca0:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8005ca2:	693b      	ldr	r3, [r7, #16]
 8005ca4:	43db      	mvns	r3, r3
 8005ca6:	69ba      	ldr	r2, [r7, #24]
 8005ca8:	4013      	ands	r3, r2
 8005caa:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8005cac:	683b      	ldr	r3, [r7, #0]
 8005cae:	685b      	ldr	r3, [r3, #4]
 8005cb0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005cb4:	2b00      	cmp	r3, #0
 8005cb6:	d003      	beq.n	8005cc0 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8005cb8:	69ba      	ldr	r2, [r7, #24]
 8005cba:	693b      	ldr	r3, [r7, #16]
 8005cbc:	4313      	orrs	r3, r2
 8005cbe:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8005cc0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005cc4:	69bb      	ldr	r3, [r7, #24]
 8005cc6:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8005cc8:	697b      	ldr	r3, [r7, #20]
 8005cca:	685b      	ldr	r3, [r3, #4]
 8005ccc:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8005cce:	693b      	ldr	r3, [r7, #16]
 8005cd0:	43db      	mvns	r3, r3
 8005cd2:	69ba      	ldr	r2, [r7, #24]
 8005cd4:	4013      	ands	r3, r2
 8005cd6:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8005cd8:	683b      	ldr	r3, [r7, #0]
 8005cda:	685b      	ldr	r3, [r3, #4]
 8005cdc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005ce0:	2b00      	cmp	r3, #0
 8005ce2:	d003      	beq.n	8005cec <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8005ce4:	69ba      	ldr	r2, [r7, #24]
 8005ce6:	693b      	ldr	r3, [r7, #16]
 8005ce8:	4313      	orrs	r3, r2
 8005cea:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8005cec:	697b      	ldr	r3, [r7, #20]
 8005cee:	69ba      	ldr	r2, [r7, #24]
 8005cf0:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8005cf2:	697b      	ldr	r3, [r7, #20]
 8005cf4:	681b      	ldr	r3, [r3, #0]
 8005cf6:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8005cf8:	693b      	ldr	r3, [r7, #16]
 8005cfa:	43db      	mvns	r3, r3
 8005cfc:	69ba      	ldr	r2, [r7, #24]
 8005cfe:	4013      	ands	r3, r2
 8005d00:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8005d02:	683b      	ldr	r3, [r7, #0]
 8005d04:	685b      	ldr	r3, [r3, #4]
 8005d06:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005d0a:	2b00      	cmp	r3, #0
 8005d0c:	d003      	beq.n	8005d16 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8005d0e:	69ba      	ldr	r2, [r7, #24]
 8005d10:	693b      	ldr	r3, [r7, #16]
 8005d12:	4313      	orrs	r3, r2
 8005d14:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8005d16:	697b      	ldr	r3, [r7, #20]
 8005d18:	69ba      	ldr	r2, [r7, #24]
 8005d1a:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8005d1c:	69fb      	ldr	r3, [r7, #28]
 8005d1e:	3301      	adds	r3, #1
 8005d20:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8005d22:	683b      	ldr	r3, [r7, #0]
 8005d24:	681a      	ldr	r2, [r3, #0]
 8005d26:	69fb      	ldr	r3, [r7, #28]
 8005d28:	fa22 f303 	lsr.w	r3, r2, r3
 8005d2c:	2b00      	cmp	r3, #0
 8005d2e:	f47f ae63 	bne.w	80059f8 <HAL_GPIO_Init+0x14>
  }
}
 8005d32:	bf00      	nop
 8005d34:	bf00      	nop
 8005d36:	3724      	adds	r7, #36	; 0x24
 8005d38:	46bd      	mov	sp, r7
 8005d3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d3e:	4770      	bx	lr
 8005d40:	58000400 	.word	0x58000400

08005d44 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005d44:	b480      	push	{r7}
 8005d46:	b083      	sub	sp, #12
 8005d48:	af00      	add	r7, sp, #0
 8005d4a:	6078      	str	r0, [r7, #4]
 8005d4c:	460b      	mov	r3, r1
 8005d4e:	807b      	strh	r3, [r7, #2]
 8005d50:	4613      	mov	r3, r2
 8005d52:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8005d54:	787b      	ldrb	r3, [r7, #1]
 8005d56:	2b00      	cmp	r3, #0
 8005d58:	d003      	beq.n	8005d62 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8005d5a:	887a      	ldrh	r2, [r7, #2]
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8005d60:	e003      	b.n	8005d6a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8005d62:	887b      	ldrh	r3, [r7, #2]
 8005d64:	041a      	lsls	r2, r3, #16
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	619a      	str	r2, [r3, #24]
}
 8005d6a:	bf00      	nop
 8005d6c:	370c      	adds	r7, #12
 8005d6e:	46bd      	mov	sp, r7
 8005d70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d74:	4770      	bx	lr
	...

08005d78 <HAL_LTDC_Init>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
 8005d78:	b580      	push	{r7, lr}
 8005d7a:	b084      	sub	sp, #16
 8005d7c:	af00      	add	r7, sp, #0
 8005d7e:	6078      	str	r0, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;

  /* Check the LTDC peripheral state */
  if (hltdc == NULL)
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	2b00      	cmp	r3, #0
 8005d84:	d101      	bne.n	8005d8a <HAL_LTDC_Init+0x12>
  {
    return HAL_ERROR;
 8005d86:	2301      	movs	r3, #1
 8005d88:	e0bf      	b.n	8005f0a <HAL_LTDC_Init+0x192>
    }
    /* Init the low level hardware */
    hltdc->MspInitCallback(hltdc);
  }
#else
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	f893 30a1 	ldrb.w	r3, [r3, #161]	; 0xa1
 8005d90:	b2db      	uxtb	r3, r3
 8005d92:	2b00      	cmp	r3, #0
 8005d94:	d106      	bne.n	8005da4 <HAL_LTDC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	2200      	movs	r2, #0
 8005d9a:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
 8005d9e:	6878      	ldr	r0, [r7, #4]
 8005da0:	f7fc f81c 	bl	8001ddc <HAL_LTDC_MspInit>
  }
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	2202      	movs	r2, #2
 8005da8:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Configure the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	681b      	ldr	r3, [r3, #0]
 8005db0:	699a      	ldr	r2, [r3, #24]
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	681b      	ldr	r3, [r3, #0]
 8005db6:	f022 4270 	bic.w	r2, r2, #4026531840	; 0xf0000000
 8005dba:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	681b      	ldr	r3, [r3, #0]
 8005dc0:	6999      	ldr	r1, [r3, #24]
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	685a      	ldr	r2, [r3, #4]
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	689b      	ldr	r3, [r3, #8]
 8005dca:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	68db      	ldr	r3, [r3, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8005dd0:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	691b      	ldr	r3, [r3, #16]
 8005dd6:	431a      	orrs	r2, r3
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	681b      	ldr	r3, [r3, #0]
 8005ddc:	430a      	orrs	r2, r1
 8005dde:	619a      	str	r2, [r3, #24]

  /* Set Synchronization size */
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	681b      	ldr	r3, [r3, #0]
 8005de4:	6899      	ldr	r1, [r3, #8]
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	681a      	ldr	r2, [r3, #0]
 8005dea:	4b4a      	ldr	r3, [pc, #296]	; (8005f14 <HAL_LTDC_Init+0x19c>)
 8005dec:	400b      	ands	r3, r1
 8005dee:	6093      	str	r3, [r2, #8]
  tmp = (hltdc->Init.HorizontalSync << 16U);
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	695b      	ldr	r3, [r3, #20]
 8005df4:	041b      	lsls	r3, r3, #16
 8005df6:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	681b      	ldr	r3, [r3, #0]
 8005dfc:	6899      	ldr	r1, [r3, #8]
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	699a      	ldr	r2, [r3, #24]
 8005e02:	68fb      	ldr	r3, [r7, #12]
 8005e04:	431a      	orrs	r2, r3
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	681b      	ldr	r3, [r3, #0]
 8005e0a:	430a      	orrs	r2, r1
 8005e0c:	609a      	str	r2, [r3, #8]

  /* Set Accumulated Back porch */
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	681b      	ldr	r3, [r3, #0]
 8005e12:	68d9      	ldr	r1, [r3, #12]
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	681a      	ldr	r2, [r3, #0]
 8005e18:	4b3e      	ldr	r3, [pc, #248]	; (8005f14 <HAL_LTDC_Init+0x19c>)
 8005e1a:	400b      	ands	r3, r1
 8005e1c:	60d3      	str	r3, [r2, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	69db      	ldr	r3, [r3, #28]
 8005e22:	041b      	lsls	r3, r3, #16
 8005e24:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	681b      	ldr	r3, [r3, #0]
 8005e2a:	68d9      	ldr	r1, [r3, #12]
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	6a1a      	ldr	r2, [r3, #32]
 8005e30:	68fb      	ldr	r3, [r7, #12]
 8005e32:	431a      	orrs	r2, r3
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	681b      	ldr	r3, [r3, #0]
 8005e38:	430a      	orrs	r2, r1
 8005e3a:	60da      	str	r2, [r3, #12]

  /* Set Accumulated Active Width */
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	681b      	ldr	r3, [r3, #0]
 8005e40:	6919      	ldr	r1, [r3, #16]
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	681a      	ldr	r2, [r3, #0]
 8005e46:	4b33      	ldr	r3, [pc, #204]	; (8005f14 <HAL_LTDC_Init+0x19c>)
 8005e48:	400b      	ands	r3, r1
 8005e4a:	6113      	str	r3, [r2, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e50:	041b      	lsls	r3, r3, #16
 8005e52:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	681b      	ldr	r3, [r3, #0]
 8005e58:	6919      	ldr	r1, [r3, #16]
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005e5e:	68fb      	ldr	r3, [r7, #12]
 8005e60:	431a      	orrs	r2, r3
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	681b      	ldr	r3, [r3, #0]
 8005e66:	430a      	orrs	r2, r1
 8005e68:	611a      	str	r2, [r3, #16]

  /* Set Total Width */
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	681b      	ldr	r3, [r3, #0]
 8005e6e:	6959      	ldr	r1, [r3, #20]
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	681a      	ldr	r2, [r3, #0]
 8005e74:	4b27      	ldr	r3, [pc, #156]	; (8005f14 <HAL_LTDC_Init+0x19c>)
 8005e76:	400b      	ands	r3, r1
 8005e78:	6153      	str	r3, [r2, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e7e:	041b      	lsls	r3, r3, #16
 8005e80:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	681b      	ldr	r3, [r3, #0]
 8005e86:	6959      	ldr	r1, [r3, #20]
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005e8c:	68fb      	ldr	r3, [r7, #12]
 8005e8e:	431a      	orrs	r2, r3
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	681b      	ldr	r3, [r3, #0]
 8005e94:	430a      	orrs	r2, r1
 8005e96:	615a      	str	r2, [r3, #20]

  /* Set the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005e9e:	021b      	lsls	r3, r3, #8
 8005ea0:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 8005ea8:	041b      	lsls	r3, r3, #16
 8005eaa:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	681b      	ldr	r3, [r3, #0]
 8005eb0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	681b      	ldr	r3, [r3, #0]
 8005eb6:	f002 427f 	and.w	r2, r2, #4278190080	; 0xff000000
 8005eba:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	681b      	ldr	r3, [r3, #0]
 8005ec0:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8005ec2:	68ba      	ldr	r2, [r7, #8]
 8005ec4:	68fb      	ldr	r3, [r7, #12]
 8005ec6:	4313      	orrs	r3, r2
 8005ec8:	687a      	ldr	r2, [r7, #4]
 8005eca:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
 8005ece:	431a      	orrs	r2, r3
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	681b      	ldr	r3, [r3, #0]
 8005ed4:	430a      	orrs	r2, r1
 8005ed6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Enable the Transfer Error and FIFO underrun interrupts */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	681b      	ldr	r3, [r3, #0]
 8005edc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	681b      	ldr	r3, [r3, #0]
 8005ee2:	f042 0206 	orr.w	r2, r2, #6
 8005ee6:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	681b      	ldr	r3, [r3, #0]
 8005eec:	699a      	ldr	r2, [r3, #24]
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	681b      	ldr	r3, [r3, #0]
 8005ef2:	f042 0201 	orr.w	r2, r2, #1
 8005ef6:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	2200      	movs	r2, #0
 8005efc:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	2201      	movs	r2, #1
 8005f04:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  return HAL_OK;
 8005f08:	2300      	movs	r3, #0
}
 8005f0a:	4618      	mov	r0, r3
 8005f0c:	3710      	adds	r7, #16
 8005f0e:	46bd      	mov	sp, r7
 8005f10:	bd80      	pop	{r7, pc}
 8005f12:	bf00      	nop
 8005f14:	f000f800 	.word	0xf000f800

08005f18 <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8005f18:	b5b0      	push	{r4, r5, r7, lr}
 8005f1a:	b084      	sub	sp, #16
 8005f1c:	af00      	add	r7, sp, #0
 8005f1e:	60f8      	str	r0, [r7, #12]
 8005f20:	60b9      	str	r1, [r7, #8]
 8005f22:	607a      	str	r2, [r7, #4]
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Process locked */
  __HAL_LOCK(hltdc);
 8005f24:	68fb      	ldr	r3, [r7, #12]
 8005f26:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 8005f2a:	2b01      	cmp	r3, #1
 8005f2c:	d101      	bne.n	8005f32 <HAL_LTDC_ConfigLayer+0x1a>
 8005f2e:	2302      	movs	r3, #2
 8005f30:	e02c      	b.n	8005f8c <HAL_LTDC_ConfigLayer+0x74>
 8005f32:	68fb      	ldr	r3, [r7, #12]
 8005f34:	2201      	movs	r2, #1
 8005f36:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8005f3a:	68fb      	ldr	r3, [r7, #12]
 8005f3c:	2202      	movs	r2, #2
 8005f3e:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 8005f42:	68fa      	ldr	r2, [r7, #12]
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	2134      	movs	r1, #52	; 0x34
 8005f48:	fb01 f303 	mul.w	r3, r1, r3
 8005f4c:	4413      	add	r3, r2
 8005f4e:	f103 0238 	add.w	r2, r3, #56	; 0x38
 8005f52:	68bb      	ldr	r3, [r7, #8]
 8005f54:	4614      	mov	r4, r2
 8005f56:	461d      	mov	r5, r3
 8005f58:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8005f5a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8005f5c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8005f5e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8005f60:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8005f62:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8005f64:	682b      	ldr	r3, [r5, #0]
 8005f66:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 8005f68:	687a      	ldr	r2, [r7, #4]
 8005f6a:	68b9      	ldr	r1, [r7, #8]
 8005f6c:	68f8      	ldr	r0, [r7, #12]
 8005f6e:	f000 f811 	bl	8005f94 <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 8005f72:	68fb      	ldr	r3, [r7, #12]
 8005f74:	681b      	ldr	r3, [r3, #0]
 8005f76:	2201      	movs	r2, #1
 8005f78:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
 8005f7a:	68fb      	ldr	r3, [r7, #12]
 8005f7c:	2201      	movs	r2, #1
 8005f7e:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 8005f82:	68fb      	ldr	r3, [r7, #12]
 8005f84:	2200      	movs	r2, #0
 8005f86:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 8005f8a:	2300      	movs	r3, #0
}
 8005f8c:	4618      	mov	r0, r3
 8005f8e:	3710      	adds	r7, #16
 8005f90:	46bd      	mov	sp, r7
 8005f92:	bdb0      	pop	{r4, r5, r7, pc}

08005f94 <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8005f94:	b480      	push	{r7}
 8005f96:	b089      	sub	sp, #36	; 0x24
 8005f98:	af00      	add	r7, sp, #0
 8005f9a:	60f8      	str	r0, [r7, #12]
 8005f9c:	60b9      	str	r1, [r7, #8]
 8005f9e:	607a      	str	r2, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 8005fa0:	68bb      	ldr	r3, [r7, #8]
 8005fa2:	685a      	ldr	r2, [r3, #4]
 8005fa4:	68fb      	ldr	r3, [r7, #12]
 8005fa6:	681b      	ldr	r3, [r3, #0]
 8005fa8:	68db      	ldr	r3, [r3, #12]
 8005faa:	0c1b      	lsrs	r3, r3, #16
 8005fac:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005fb0:	4413      	add	r3, r2
 8005fb2:	041b      	lsls	r3, r3, #16
 8005fb4:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 8005fb6:	68fb      	ldr	r3, [r7, #12]
 8005fb8:	681b      	ldr	r3, [r3, #0]
 8005fba:	461a      	mov	r2, r3
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	01db      	lsls	r3, r3, #7
 8005fc0:	4413      	add	r3, r2
 8005fc2:	3384      	adds	r3, #132	; 0x84
 8005fc4:	685b      	ldr	r3, [r3, #4]
 8005fc6:	68fa      	ldr	r2, [r7, #12]
 8005fc8:	6812      	ldr	r2, [r2, #0]
 8005fca:	4611      	mov	r1, r2
 8005fcc:	687a      	ldr	r2, [r7, #4]
 8005fce:	01d2      	lsls	r2, r2, #7
 8005fd0:	440a      	add	r2, r1
 8005fd2:	3284      	adds	r2, #132	; 0x84
 8005fd4:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 8005fd8:	6053      	str	r3, [r2, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8005fda:	68bb      	ldr	r3, [r7, #8]
 8005fdc:	681a      	ldr	r2, [r3, #0]
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8005fde:	68fb      	ldr	r3, [r7, #12]
 8005fe0:	681b      	ldr	r3, [r3, #0]
 8005fe2:	68db      	ldr	r3, [r3, #12]
 8005fe4:	0c1b      	lsrs	r3, r3, #16
 8005fe6:	f3c3 030b 	ubfx	r3, r3, #0, #12
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8005fea:	4413      	add	r3, r2
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8005fec:	1c5a      	adds	r2, r3, #1
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8005fee:	68fb      	ldr	r3, [r7, #12]
 8005ff0:	681b      	ldr	r3, [r3, #0]
 8005ff2:	4619      	mov	r1, r3
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	01db      	lsls	r3, r3, #7
 8005ff8:	440b      	add	r3, r1
 8005ffa:	3384      	adds	r3, #132	; 0x84
 8005ffc:	4619      	mov	r1, r3
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8005ffe:	69fb      	ldr	r3, [r7, #28]
 8006000:	4313      	orrs	r3, r2
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8006002:	604b      	str	r3, [r1, #4]

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 8006004:	68bb      	ldr	r3, [r7, #8]
 8006006:	68da      	ldr	r2, [r3, #12]
 8006008:	68fb      	ldr	r3, [r7, #12]
 800600a:	681b      	ldr	r3, [r3, #0]
 800600c:	68db      	ldr	r3, [r3, #12]
 800600e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006012:	4413      	add	r3, r2
 8006014:	041b      	lsls	r3, r3, #16
 8006016:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 8006018:	68fb      	ldr	r3, [r7, #12]
 800601a:	681b      	ldr	r3, [r3, #0]
 800601c:	461a      	mov	r2, r3
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	01db      	lsls	r3, r3, #7
 8006022:	4413      	add	r3, r2
 8006024:	3384      	adds	r3, #132	; 0x84
 8006026:	689b      	ldr	r3, [r3, #8]
 8006028:	68fa      	ldr	r2, [r7, #12]
 800602a:	6812      	ldr	r2, [r2, #0]
 800602c:	4611      	mov	r1, r2
 800602e:	687a      	ldr	r2, [r7, #4]
 8006030:	01d2      	lsls	r2, r2, #7
 8006032:	440a      	add	r2, r1
 8006034:	3284      	adds	r2, #132	; 0x84
 8006036:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 800603a:	6093      	str	r3, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 800603c:	68bb      	ldr	r3, [r7, #8]
 800603e:	689a      	ldr	r2, [r3, #8]
 8006040:	68fb      	ldr	r3, [r7, #12]
 8006042:	681b      	ldr	r3, [r3, #0]
 8006044:	68db      	ldr	r3, [r3, #12]
 8006046:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800604a:	4413      	add	r3, r2
 800604c:	1c5a      	adds	r2, r3, #1
 800604e:	68fb      	ldr	r3, [r7, #12]
 8006050:	681b      	ldr	r3, [r3, #0]
 8006052:	4619      	mov	r1, r3
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	01db      	lsls	r3, r3, #7
 8006058:	440b      	add	r3, r1
 800605a:	3384      	adds	r3, #132	; 0x84
 800605c:	4619      	mov	r1, r3
 800605e:	69fb      	ldr	r3, [r7, #28]
 8006060:	4313      	orrs	r3, r2
 8006062:	608b      	str	r3, [r1, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 8006064:	68fb      	ldr	r3, [r7, #12]
 8006066:	681b      	ldr	r3, [r3, #0]
 8006068:	461a      	mov	r2, r3
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	01db      	lsls	r3, r3, #7
 800606e:	4413      	add	r3, r2
 8006070:	3384      	adds	r3, #132	; 0x84
 8006072:	691b      	ldr	r3, [r3, #16]
 8006074:	68fa      	ldr	r2, [r7, #12]
 8006076:	6812      	ldr	r2, [r2, #0]
 8006078:	4611      	mov	r1, r2
 800607a:	687a      	ldr	r2, [r7, #4]
 800607c:	01d2      	lsls	r2, r2, #7
 800607e:	440a      	add	r2, r1
 8006080:	3284      	adds	r2, #132	; 0x84
 8006082:	f023 0307 	bic.w	r3, r3, #7
 8006086:	6113      	str	r3, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 8006088:	68fb      	ldr	r3, [r7, #12]
 800608a:	681b      	ldr	r3, [r3, #0]
 800608c:	461a      	mov	r2, r3
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	01db      	lsls	r3, r3, #7
 8006092:	4413      	add	r3, r2
 8006094:	3384      	adds	r3, #132	; 0x84
 8006096:	461a      	mov	r2, r3
 8006098:	68bb      	ldr	r3, [r7, #8]
 800609a:	691b      	ldr	r3, [r3, #16]
 800609c:	6113      	str	r3, [r2, #16]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 800609e:	68bb      	ldr	r3, [r7, #8]
 80060a0:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80060a4:	021b      	lsls	r3, r3, #8
 80060a6:	61fb      	str	r3, [r7, #28]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 80060a8:	68bb      	ldr	r3, [r7, #8]
 80060aa:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 80060ae:	041b      	lsls	r3, r3, #16
 80060b0:	61bb      	str	r3, [r7, #24]
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 80060b2:	68bb      	ldr	r3, [r7, #8]
 80060b4:	699b      	ldr	r3, [r3, #24]
 80060b6:	061b      	lsls	r3, r3, #24
 80060b8:	617b      	str	r3, [r7, #20]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED |
 80060ba:	68fb      	ldr	r3, [r7, #12]
 80060bc:	681b      	ldr	r3, [r3, #0]
 80060be:	461a      	mov	r2, r3
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	01db      	lsls	r3, r3, #7
 80060c4:	4413      	add	r3, r2
 80060c6:	3384      	adds	r3, #132	; 0x84
 80060c8:	699b      	ldr	r3, [r3, #24]
 80060ca:	68fb      	ldr	r3, [r7, #12]
 80060cc:	681b      	ldr	r3, [r3, #0]
 80060ce:	461a      	mov	r2, r3
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	01db      	lsls	r3, r3, #7
 80060d4:	4413      	add	r3, r2
 80060d6:	3384      	adds	r3, #132	; 0x84
 80060d8:	461a      	mov	r2, r3
 80060da:	2300      	movs	r3, #0
 80060dc:	6193      	str	r3, [r2, #24]
                                         LTDC_LxDCCR_DCALPHA);
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 80060de:	68bb      	ldr	r3, [r7, #8]
 80060e0:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80060e4:	461a      	mov	r2, r3
 80060e6:	69fb      	ldr	r3, [r7, #28]
 80060e8:	431a      	orrs	r2, r3
 80060ea:	69bb      	ldr	r3, [r7, #24]
 80060ec:	431a      	orrs	r2, r3
 80060ee:	68fb      	ldr	r3, [r7, #12]
 80060f0:	681b      	ldr	r3, [r3, #0]
 80060f2:	4619      	mov	r1, r3
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	01db      	lsls	r3, r3, #7
 80060f8:	440b      	add	r3, r1
 80060fa:	3384      	adds	r3, #132	; 0x84
 80060fc:	4619      	mov	r1, r3
 80060fe:	697b      	ldr	r3, [r7, #20]
 8006100:	4313      	orrs	r3, r2
 8006102:	618b      	str	r3, [r1, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 8006104:	68fb      	ldr	r3, [r7, #12]
 8006106:	681b      	ldr	r3, [r3, #0]
 8006108:	461a      	mov	r2, r3
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	01db      	lsls	r3, r3, #7
 800610e:	4413      	add	r3, r2
 8006110:	3384      	adds	r3, #132	; 0x84
 8006112:	695b      	ldr	r3, [r3, #20]
 8006114:	68fa      	ldr	r2, [r7, #12]
 8006116:	6812      	ldr	r2, [r2, #0]
 8006118:	4611      	mov	r1, r2
 800611a:	687a      	ldr	r2, [r7, #4]
 800611c:	01d2      	lsls	r2, r2, #7
 800611e:	440a      	add	r2, r1
 8006120:	3284      	adds	r2, #132	; 0x84
 8006122:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8006126:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 8006128:	68fb      	ldr	r3, [r7, #12]
 800612a:	681b      	ldr	r3, [r3, #0]
 800612c:	461a      	mov	r2, r3
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	01db      	lsls	r3, r3, #7
 8006132:	4413      	add	r3, r2
 8006134:	3384      	adds	r3, #132	; 0x84
 8006136:	461a      	mov	r2, r3
 8006138:	68bb      	ldr	r3, [r7, #8]
 800613a:	695b      	ldr	r3, [r3, #20]
 800613c:	6153      	str	r3, [r2, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 800613e:	68fb      	ldr	r3, [r7, #12]
 8006140:	681b      	ldr	r3, [r3, #0]
 8006142:	461a      	mov	r2, r3
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	01db      	lsls	r3, r3, #7
 8006148:	4413      	add	r3, r2
 800614a:	3384      	adds	r3, #132	; 0x84
 800614c:	69da      	ldr	r2, [r3, #28]
 800614e:	68fb      	ldr	r3, [r7, #12]
 8006150:	681b      	ldr	r3, [r3, #0]
 8006152:	4619      	mov	r1, r3
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	01db      	lsls	r3, r3, #7
 8006158:	440b      	add	r3, r1
 800615a:	3384      	adds	r3, #132	; 0x84
 800615c:	4619      	mov	r1, r3
 800615e:	4b58      	ldr	r3, [pc, #352]	; (80062c0 <LTDC_SetConfig+0x32c>)
 8006160:	4013      	ands	r3, r2
 8006162:	61cb      	str	r3, [r1, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 8006164:	68bb      	ldr	r3, [r7, #8]
 8006166:	69da      	ldr	r2, [r3, #28]
 8006168:	68bb      	ldr	r3, [r7, #8]
 800616a:	6a1b      	ldr	r3, [r3, #32]
 800616c:	68f9      	ldr	r1, [r7, #12]
 800616e:	6809      	ldr	r1, [r1, #0]
 8006170:	4608      	mov	r0, r1
 8006172:	6879      	ldr	r1, [r7, #4]
 8006174:	01c9      	lsls	r1, r1, #7
 8006176:	4401      	add	r1, r0
 8006178:	3184      	adds	r1, #132	; 0x84
 800617a:	4313      	orrs	r3, r2
 800617c:	61cb      	str	r3, [r1, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 800617e:	68fb      	ldr	r3, [r7, #12]
 8006180:	681b      	ldr	r3, [r3, #0]
 8006182:	461a      	mov	r2, r3
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	01db      	lsls	r3, r3, #7
 8006188:	4413      	add	r3, r2
 800618a:	3384      	adds	r3, #132	; 0x84
 800618c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800618e:	68fb      	ldr	r3, [r7, #12]
 8006190:	681b      	ldr	r3, [r3, #0]
 8006192:	461a      	mov	r2, r3
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	01db      	lsls	r3, r3, #7
 8006198:	4413      	add	r3, r2
 800619a:	3384      	adds	r3, #132	; 0x84
 800619c:	461a      	mov	r2, r3
 800619e:	2300      	movs	r3, #0
 80061a0:	6293      	str	r3, [r2, #40]	; 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 80061a2:	68fb      	ldr	r3, [r7, #12]
 80061a4:	681b      	ldr	r3, [r3, #0]
 80061a6:	461a      	mov	r2, r3
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	01db      	lsls	r3, r3, #7
 80061ac:	4413      	add	r3, r2
 80061ae:	3384      	adds	r3, #132	; 0x84
 80061b0:	461a      	mov	r2, r3
 80061b2:	68bb      	ldr	r3, [r7, #8]
 80061b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80061b6:	6293      	str	r3, [r2, #40]	; 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 80061b8:	68bb      	ldr	r3, [r7, #8]
 80061ba:	691b      	ldr	r3, [r3, #16]
 80061bc:	2b00      	cmp	r3, #0
 80061be:	d102      	bne.n	80061c6 <LTDC_SetConfig+0x232>
  {
    tmp = 4U;
 80061c0:	2304      	movs	r3, #4
 80061c2:	61fb      	str	r3, [r7, #28]
 80061c4:	e01b      	b.n	80061fe <LTDC_SetConfig+0x26a>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 80061c6:	68bb      	ldr	r3, [r7, #8]
 80061c8:	691b      	ldr	r3, [r3, #16]
 80061ca:	2b01      	cmp	r3, #1
 80061cc:	d102      	bne.n	80061d4 <LTDC_SetConfig+0x240>
  {
    tmp = 3U;
 80061ce:	2303      	movs	r3, #3
 80061d0:	61fb      	str	r3, [r7, #28]
 80061d2:	e014      	b.n	80061fe <LTDC_SetConfig+0x26a>
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 80061d4:	68bb      	ldr	r3, [r7, #8]
 80061d6:	691b      	ldr	r3, [r3, #16]
 80061d8:	2b04      	cmp	r3, #4
 80061da:	d00b      	beq.n	80061f4 <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 80061dc:	68bb      	ldr	r3, [r7, #8]
 80061de:	691b      	ldr	r3, [r3, #16]
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 80061e0:	2b02      	cmp	r3, #2
 80061e2:	d007      	beq.n	80061f4 <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 80061e4:	68bb      	ldr	r3, [r7, #8]
 80061e6:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 80061e8:	2b03      	cmp	r3, #3
 80061ea:	d003      	beq.n	80061f4 <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
 80061ec:	68bb      	ldr	r3, [r7, #8]
 80061ee:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 80061f0:	2b07      	cmp	r3, #7
 80061f2:	d102      	bne.n	80061fa <LTDC_SetConfig+0x266>
  {
    tmp = 2U;
 80061f4:	2302      	movs	r3, #2
 80061f6:	61fb      	str	r3, [r7, #28]
 80061f8:	e001      	b.n	80061fe <LTDC_SetConfig+0x26a>
  }
  else
  {
    tmp = 1U;
 80061fa:	2301      	movs	r3, #1
 80061fc:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 80061fe:	68fb      	ldr	r3, [r7, #12]
 8006200:	681b      	ldr	r3, [r3, #0]
 8006202:	461a      	mov	r2, r3
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	01db      	lsls	r3, r3, #7
 8006208:	4413      	add	r3, r2
 800620a:	3384      	adds	r3, #132	; 0x84
 800620c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800620e:	68fa      	ldr	r2, [r7, #12]
 8006210:	6812      	ldr	r2, [r2, #0]
 8006212:	4611      	mov	r1, r2
 8006214:	687a      	ldr	r2, [r7, #4]
 8006216:	01d2      	lsls	r2, r2, #7
 8006218:	440a      	add	r2, r1
 800621a:	3284      	adds	r2, #132	; 0x84
 800621c:	f003 23e0 	and.w	r3, r3, #3758153728	; 0xe000e000
 8006220:	62d3      	str	r3, [r2, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 7U));
 8006222:	68bb      	ldr	r3, [r7, #8]
 8006224:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006226:	69fa      	ldr	r2, [r7, #28]
 8006228:	fb02 f303 	mul.w	r3, r2, r3
 800622c:	041a      	lsls	r2, r3, #16
 800622e:	68bb      	ldr	r3, [r7, #8]
 8006230:	6859      	ldr	r1, [r3, #4]
 8006232:	68bb      	ldr	r3, [r7, #8]
 8006234:	681b      	ldr	r3, [r3, #0]
 8006236:	1acb      	subs	r3, r1, r3
 8006238:	69f9      	ldr	r1, [r7, #28]
 800623a:	fb01 f303 	mul.w	r3, r1, r3
 800623e:	3307      	adds	r3, #7
 8006240:	68f9      	ldr	r1, [r7, #12]
 8006242:	6809      	ldr	r1, [r1, #0]
 8006244:	4608      	mov	r0, r1
 8006246:	6879      	ldr	r1, [r7, #4]
 8006248:	01c9      	lsls	r1, r1, #7
 800624a:	4401      	add	r1, r0
 800624c:	3184      	adds	r1, #132	; 0x84
 800624e:	4313      	orrs	r3, r2
 8006250:	62cb      	str	r3, [r1, #44]	; 0x2c
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 8006252:	68fb      	ldr	r3, [r7, #12]
 8006254:	681b      	ldr	r3, [r3, #0]
 8006256:	461a      	mov	r2, r3
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	01db      	lsls	r3, r3, #7
 800625c:	4413      	add	r3, r2
 800625e:	3384      	adds	r3, #132	; 0x84
 8006260:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006262:	68fb      	ldr	r3, [r7, #12]
 8006264:	681b      	ldr	r3, [r3, #0]
 8006266:	4619      	mov	r1, r3
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	01db      	lsls	r3, r3, #7
 800626c:	440b      	add	r3, r1
 800626e:	3384      	adds	r3, #132	; 0x84
 8006270:	4619      	mov	r1, r3
 8006272:	4b14      	ldr	r3, [pc, #80]	; (80062c4 <LTDC_SetConfig+0x330>)
 8006274:	4013      	ands	r3, r2
 8006276:	630b      	str	r3, [r1, #48]	; 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 8006278:	68fb      	ldr	r3, [r7, #12]
 800627a:	681b      	ldr	r3, [r3, #0]
 800627c:	461a      	mov	r2, r3
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	01db      	lsls	r3, r3, #7
 8006282:	4413      	add	r3, r2
 8006284:	3384      	adds	r3, #132	; 0x84
 8006286:	461a      	mov	r2, r3
 8006288:	68bb      	ldr	r3, [r7, #8]
 800628a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800628c:	6313      	str	r3, [r2, #48]	; 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 800628e:	68fb      	ldr	r3, [r7, #12]
 8006290:	681b      	ldr	r3, [r3, #0]
 8006292:	461a      	mov	r2, r3
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	01db      	lsls	r3, r3, #7
 8006298:	4413      	add	r3, r2
 800629a:	3384      	adds	r3, #132	; 0x84
 800629c:	681b      	ldr	r3, [r3, #0]
 800629e:	68fa      	ldr	r2, [r7, #12]
 80062a0:	6812      	ldr	r2, [r2, #0]
 80062a2:	4611      	mov	r1, r2
 80062a4:	687a      	ldr	r2, [r7, #4]
 80062a6:	01d2      	lsls	r2, r2, #7
 80062a8:	440a      	add	r2, r1
 80062aa:	3284      	adds	r2, #132	; 0x84
 80062ac:	f043 0301 	orr.w	r3, r3, #1
 80062b0:	6013      	str	r3, [r2, #0]
}
 80062b2:	bf00      	nop
 80062b4:	3724      	adds	r7, #36	; 0x24
 80062b6:	46bd      	mov	sp, r7
 80062b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062bc:	4770      	bx	lr
 80062be:	bf00      	nop
 80062c0:	fffff8f8 	.word	0xfffff8f8
 80062c4:	fffff800 	.word	0xfffff800

080062c8 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80062c8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80062ca:	b08f      	sub	sp, #60	; 0x3c
 80062cc:	af0a      	add	r7, sp, #40	; 0x28
 80062ce:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	2b00      	cmp	r3, #0
 80062d4:	d101      	bne.n	80062da <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80062d6:	2301      	movs	r3, #1
 80062d8:	e116      	b.n	8006508 <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	681b      	ldr	r3, [r3, #0]
 80062de:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 80062e6:	b2db      	uxtb	r3, r3
 80062e8:	2b00      	cmp	r3, #0
 80062ea:	d106      	bne.n	80062fa <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	2200      	movs	r2, #0
 80062f0:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80062f4:	6878      	ldr	r0, [r7, #4]
 80062f6:	f7fc f8fd 	bl	80024f4 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	2203      	movs	r2, #3
 80062fe:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8006302:	68bb      	ldr	r3, [r7, #8]
 8006304:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006306:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800630a:	2b00      	cmp	r3, #0
 800630c:	d102      	bne.n	8006314 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	2200      	movs	r2, #0
 8006312:	60da      	str	r2, [r3, #12]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	681b      	ldr	r3, [r3, #0]
 8006318:	4618      	mov	r0, r3
 800631a:	f007 fc05 	bl	800db28 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	681b      	ldr	r3, [r3, #0]
 8006322:	603b      	str	r3, [r7, #0]
 8006324:	687e      	ldr	r6, [r7, #4]
 8006326:	466d      	mov	r5, sp
 8006328:	f106 0410 	add.w	r4, r6, #16
 800632c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800632e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8006330:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8006332:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8006334:	e894 0003 	ldmia.w	r4, {r0, r1}
 8006338:	e885 0003 	stmia.w	r5, {r0, r1}
 800633c:	1d33      	adds	r3, r6, #4
 800633e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8006340:	6838      	ldr	r0, [r7, #0]
 8006342:	f007 fb83 	bl	800da4c <USB_CoreInit>
 8006346:	4603      	mov	r3, r0
 8006348:	2b00      	cmp	r3, #0
 800634a:	d005      	beq.n	8006358 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	2202      	movs	r2, #2
 8006350:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8006354:	2301      	movs	r3, #1
 8006356:	e0d7      	b.n	8006508 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	681b      	ldr	r3, [r3, #0]
 800635c:	2100      	movs	r1, #0
 800635e:	4618      	mov	r0, r3
 8006360:	f007 fbf3 	bl	800db4a <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8006364:	2300      	movs	r3, #0
 8006366:	73fb      	strb	r3, [r7, #15]
 8006368:	e04a      	b.n	8006400 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800636a:	7bfa      	ldrb	r2, [r7, #15]
 800636c:	6879      	ldr	r1, [r7, #4]
 800636e:	4613      	mov	r3, r2
 8006370:	00db      	lsls	r3, r3, #3
 8006372:	4413      	add	r3, r2
 8006374:	009b      	lsls	r3, r3, #2
 8006376:	440b      	add	r3, r1
 8006378:	333d      	adds	r3, #61	; 0x3d
 800637a:	2201      	movs	r2, #1
 800637c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800637e:	7bfa      	ldrb	r2, [r7, #15]
 8006380:	6879      	ldr	r1, [r7, #4]
 8006382:	4613      	mov	r3, r2
 8006384:	00db      	lsls	r3, r3, #3
 8006386:	4413      	add	r3, r2
 8006388:	009b      	lsls	r3, r3, #2
 800638a:	440b      	add	r3, r1
 800638c:	333c      	adds	r3, #60	; 0x3c
 800638e:	7bfa      	ldrb	r2, [r7, #15]
 8006390:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8006392:	7bfa      	ldrb	r2, [r7, #15]
 8006394:	7bfb      	ldrb	r3, [r7, #15]
 8006396:	b298      	uxth	r0, r3
 8006398:	6879      	ldr	r1, [r7, #4]
 800639a:	4613      	mov	r3, r2
 800639c:	00db      	lsls	r3, r3, #3
 800639e:	4413      	add	r3, r2
 80063a0:	009b      	lsls	r3, r3, #2
 80063a2:	440b      	add	r3, r1
 80063a4:	3356      	adds	r3, #86	; 0x56
 80063a6:	4602      	mov	r2, r0
 80063a8:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80063aa:	7bfa      	ldrb	r2, [r7, #15]
 80063ac:	6879      	ldr	r1, [r7, #4]
 80063ae:	4613      	mov	r3, r2
 80063b0:	00db      	lsls	r3, r3, #3
 80063b2:	4413      	add	r3, r2
 80063b4:	009b      	lsls	r3, r3, #2
 80063b6:	440b      	add	r3, r1
 80063b8:	3340      	adds	r3, #64	; 0x40
 80063ba:	2200      	movs	r2, #0
 80063bc:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80063be:	7bfa      	ldrb	r2, [r7, #15]
 80063c0:	6879      	ldr	r1, [r7, #4]
 80063c2:	4613      	mov	r3, r2
 80063c4:	00db      	lsls	r3, r3, #3
 80063c6:	4413      	add	r3, r2
 80063c8:	009b      	lsls	r3, r3, #2
 80063ca:	440b      	add	r3, r1
 80063cc:	3344      	adds	r3, #68	; 0x44
 80063ce:	2200      	movs	r2, #0
 80063d0:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80063d2:	7bfa      	ldrb	r2, [r7, #15]
 80063d4:	6879      	ldr	r1, [r7, #4]
 80063d6:	4613      	mov	r3, r2
 80063d8:	00db      	lsls	r3, r3, #3
 80063da:	4413      	add	r3, r2
 80063dc:	009b      	lsls	r3, r3, #2
 80063de:	440b      	add	r3, r1
 80063e0:	3348      	adds	r3, #72	; 0x48
 80063e2:	2200      	movs	r2, #0
 80063e4:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80063e6:	7bfa      	ldrb	r2, [r7, #15]
 80063e8:	6879      	ldr	r1, [r7, #4]
 80063ea:	4613      	mov	r3, r2
 80063ec:	00db      	lsls	r3, r3, #3
 80063ee:	4413      	add	r3, r2
 80063f0:	009b      	lsls	r3, r3, #2
 80063f2:	440b      	add	r3, r1
 80063f4:	334c      	adds	r3, #76	; 0x4c
 80063f6:	2200      	movs	r2, #0
 80063f8:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80063fa:	7bfb      	ldrb	r3, [r7, #15]
 80063fc:	3301      	adds	r3, #1
 80063fe:	73fb      	strb	r3, [r7, #15]
 8006400:	7bfa      	ldrb	r2, [r7, #15]
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	685b      	ldr	r3, [r3, #4]
 8006406:	429a      	cmp	r2, r3
 8006408:	d3af      	bcc.n	800636a <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800640a:	2300      	movs	r3, #0
 800640c:	73fb      	strb	r3, [r7, #15]
 800640e:	e044      	b.n	800649a <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8006410:	7bfa      	ldrb	r2, [r7, #15]
 8006412:	6879      	ldr	r1, [r7, #4]
 8006414:	4613      	mov	r3, r2
 8006416:	00db      	lsls	r3, r3, #3
 8006418:	4413      	add	r3, r2
 800641a:	009b      	lsls	r3, r3, #2
 800641c:	440b      	add	r3, r1
 800641e:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8006422:	2200      	movs	r2, #0
 8006424:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8006426:	7bfa      	ldrb	r2, [r7, #15]
 8006428:	6879      	ldr	r1, [r7, #4]
 800642a:	4613      	mov	r3, r2
 800642c:	00db      	lsls	r3, r3, #3
 800642e:	4413      	add	r3, r2
 8006430:	009b      	lsls	r3, r3, #2
 8006432:	440b      	add	r3, r1
 8006434:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8006438:	7bfa      	ldrb	r2, [r7, #15]
 800643a:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800643c:	7bfa      	ldrb	r2, [r7, #15]
 800643e:	6879      	ldr	r1, [r7, #4]
 8006440:	4613      	mov	r3, r2
 8006442:	00db      	lsls	r3, r3, #3
 8006444:	4413      	add	r3, r2
 8006446:	009b      	lsls	r3, r3, #2
 8006448:	440b      	add	r3, r1
 800644a:	f503 7320 	add.w	r3, r3, #640	; 0x280
 800644e:	2200      	movs	r2, #0
 8006450:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8006452:	7bfa      	ldrb	r2, [r7, #15]
 8006454:	6879      	ldr	r1, [r7, #4]
 8006456:	4613      	mov	r3, r2
 8006458:	00db      	lsls	r3, r3, #3
 800645a:	4413      	add	r3, r2
 800645c:	009b      	lsls	r3, r3, #2
 800645e:	440b      	add	r3, r1
 8006460:	f503 7321 	add.w	r3, r3, #644	; 0x284
 8006464:	2200      	movs	r2, #0
 8006466:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8006468:	7bfa      	ldrb	r2, [r7, #15]
 800646a:	6879      	ldr	r1, [r7, #4]
 800646c:	4613      	mov	r3, r2
 800646e:	00db      	lsls	r3, r3, #3
 8006470:	4413      	add	r3, r2
 8006472:	009b      	lsls	r3, r3, #2
 8006474:	440b      	add	r3, r1
 8006476:	f503 7322 	add.w	r3, r3, #648	; 0x288
 800647a:	2200      	movs	r2, #0
 800647c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800647e:	7bfa      	ldrb	r2, [r7, #15]
 8006480:	6879      	ldr	r1, [r7, #4]
 8006482:	4613      	mov	r3, r2
 8006484:	00db      	lsls	r3, r3, #3
 8006486:	4413      	add	r3, r2
 8006488:	009b      	lsls	r3, r3, #2
 800648a:	440b      	add	r3, r1
 800648c:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8006490:	2200      	movs	r2, #0
 8006492:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8006494:	7bfb      	ldrb	r3, [r7, #15]
 8006496:	3301      	adds	r3, #1
 8006498:	73fb      	strb	r3, [r7, #15]
 800649a:	7bfa      	ldrb	r2, [r7, #15]
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	685b      	ldr	r3, [r3, #4]
 80064a0:	429a      	cmp	r2, r3
 80064a2:	d3b5      	bcc.n	8006410 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	681b      	ldr	r3, [r3, #0]
 80064a8:	603b      	str	r3, [r7, #0]
 80064aa:	687e      	ldr	r6, [r7, #4]
 80064ac:	466d      	mov	r5, sp
 80064ae:	f106 0410 	add.w	r4, r6, #16
 80064b2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80064b4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80064b6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80064b8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80064ba:	e894 0003 	ldmia.w	r4, {r0, r1}
 80064be:	e885 0003 	stmia.w	r5, {r0, r1}
 80064c2:	1d33      	adds	r3, r6, #4
 80064c4:	cb0e      	ldmia	r3, {r1, r2, r3}
 80064c6:	6838      	ldr	r0, [r7, #0]
 80064c8:	f007 fb8c 	bl	800dbe4 <USB_DevInit>
 80064cc:	4603      	mov	r3, r0
 80064ce:	2b00      	cmp	r3, #0
 80064d0:	d005      	beq.n	80064de <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	2202      	movs	r2, #2
 80064d6:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 80064da:	2301      	movs	r3, #1
 80064dc:	e014      	b.n	8006508 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	2200      	movs	r2, #0
 80064e2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	2201      	movs	r2, #1
 80064ea:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80064f2:	2b01      	cmp	r3, #1
 80064f4:	d102      	bne.n	80064fc <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 80064f6:	6878      	ldr	r0, [r7, #4]
 80064f8:	f000 f80a 	bl	8006510 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	681b      	ldr	r3, [r3, #0]
 8006500:	4618      	mov	r0, r3
 8006502:	f007 fd4a 	bl	800df9a <USB_DevDisconnect>

  return HAL_OK;
 8006506:	2300      	movs	r3, #0
}
 8006508:	4618      	mov	r0, r3
 800650a:	3714      	adds	r7, #20
 800650c:	46bd      	mov	sp, r7
 800650e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08006510 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8006510:	b480      	push	{r7}
 8006512:	b085      	sub	sp, #20
 8006514:	af00      	add	r7, sp, #0
 8006516:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	681b      	ldr	r3, [r3, #0]
 800651c:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	2201      	movs	r2, #1
 8006522:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  hpcd->LPM_State = LPM_L0;
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	2200      	movs	r2, #0
 800652a:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 800652e:	68fb      	ldr	r3, [r7, #12]
 8006530:	699b      	ldr	r3, [r3, #24]
 8006532:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8006536:	68fb      	ldr	r3, [r7, #12]
 8006538:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 800653a:	68fb      	ldr	r3, [r7, #12]
 800653c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800653e:	4b05      	ldr	r3, [pc, #20]	; (8006554 <HAL_PCDEx_ActivateLPM+0x44>)
 8006540:	4313      	orrs	r3, r2
 8006542:	68fa      	ldr	r2, [r7, #12]
 8006544:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 8006546:	2300      	movs	r3, #0
}
 8006548:	4618      	mov	r0, r3
 800654a:	3714      	adds	r7, #20
 800654c:	46bd      	mov	sp, r7
 800654e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006552:	4770      	bx	lr
 8006554:	10000003 	.word	0x10000003

08006558 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8006558:	b580      	push	{r7, lr}
 800655a:	b084      	sub	sp, #16
 800655c:	af00      	add	r7, sp, #0
 800655e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8006560:	4b19      	ldr	r3, [pc, #100]	; (80065c8 <HAL_PWREx_ConfigSupply+0x70>)
 8006562:	68db      	ldr	r3, [r3, #12]
 8006564:	f003 0304 	and.w	r3, r3, #4
 8006568:	2b04      	cmp	r3, #4
 800656a:	d00a      	beq.n	8006582 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 800656c:	4b16      	ldr	r3, [pc, #88]	; (80065c8 <HAL_PWREx_ConfigSupply+0x70>)
 800656e:	68db      	ldr	r3, [r3, #12]
 8006570:	f003 0307 	and.w	r3, r3, #7
 8006574:	687a      	ldr	r2, [r7, #4]
 8006576:	429a      	cmp	r2, r3
 8006578:	d001      	beq.n	800657e <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 800657a:	2301      	movs	r3, #1
 800657c:	e01f      	b.n	80065be <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 800657e:	2300      	movs	r3, #0
 8006580:	e01d      	b.n	80065be <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8006582:	4b11      	ldr	r3, [pc, #68]	; (80065c8 <HAL_PWREx_ConfigSupply+0x70>)
 8006584:	68db      	ldr	r3, [r3, #12]
 8006586:	f023 0207 	bic.w	r2, r3, #7
 800658a:	490f      	ldr	r1, [pc, #60]	; (80065c8 <HAL_PWREx_ConfigSupply+0x70>)
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	4313      	orrs	r3, r2
 8006590:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8006592:	f7fc fb37 	bl	8002c04 <HAL_GetTick>
 8006596:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8006598:	e009      	b.n	80065ae <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800659a:	f7fc fb33 	bl	8002c04 <HAL_GetTick>
 800659e:	4602      	mov	r2, r0
 80065a0:	68fb      	ldr	r3, [r7, #12]
 80065a2:	1ad3      	subs	r3, r2, r3
 80065a4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80065a8:	d901      	bls.n	80065ae <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 80065aa:	2301      	movs	r3, #1
 80065ac:	e007      	b.n	80065be <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80065ae:	4b06      	ldr	r3, [pc, #24]	; (80065c8 <HAL_PWREx_ConfigSupply+0x70>)
 80065b0:	685b      	ldr	r3, [r3, #4]
 80065b2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80065b6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80065ba:	d1ee      	bne.n	800659a <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 80065bc:	2300      	movs	r3, #0
}
 80065be:	4618      	mov	r0, r3
 80065c0:	3710      	adds	r7, #16
 80065c2:	46bd      	mov	sp, r7
 80065c4:	bd80      	pop	{r7, pc}
 80065c6:	bf00      	nop
 80065c8:	58024800 	.word	0x58024800

080065cc <HAL_PWREx_EnableUSBVoltageDetector>:
/**
  * @brief Enable the USB voltage level detector.
  * @retval None.
  */
void HAL_PWREx_EnableUSBVoltageDetector (void)
{
 80065cc:	b480      	push	{r7}
 80065ce:	af00      	add	r7, sp, #0
  /* Enable the USB voltage detector */
  SET_BIT (PWR->CR3, PWR_CR3_USB33DEN);
 80065d0:	4b05      	ldr	r3, [pc, #20]	; (80065e8 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 80065d2:	68db      	ldr	r3, [r3, #12]
 80065d4:	4a04      	ldr	r2, [pc, #16]	; (80065e8 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 80065d6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80065da:	60d3      	str	r3, [r2, #12]
}
 80065dc:	bf00      	nop
 80065de:	46bd      	mov	sp, r7
 80065e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065e4:	4770      	bx	lr
 80065e6:	bf00      	nop
 80065e8:	58024800 	.word	0x58024800

080065ec <HAL_QSPI_Init>:
  *        in the QSPI_InitTypeDef and initialize the associated handle.
  * @param hqspi QSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Init(QSPI_HandleTypeDef *hqspi)
{
 80065ec:	b580      	push	{r7, lr}
 80065ee:	b086      	sub	sp, #24
 80065f0:	af02      	add	r7, sp, #8
 80065f2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 80065f4:	f7fc fb06 	bl	8002c04 <HAL_GetTick>
 80065f8:	60f8      	str	r0, [r7, #12]

  /* Check the QSPI handle allocation */
  if(hqspi == NULL)
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	2b00      	cmp	r3, #0
 80065fe:	d101      	bne.n	8006604 <HAL_QSPI_Init+0x18>
  {
    return HAL_ERROR;
 8006600:	2301      	movs	r3, #1
 8006602:	e05f      	b.n	80066c4 <HAL_QSPI_Init+0xd8>
  if (hqspi->Init.DualFlash != QSPI_DUALFLASH_ENABLE )
  {
    assert_param(IS_QSPI_FLASH_ID(hqspi->Init.FlashID));
  }

  if(hqspi->State == HAL_QSPI_STATE_RESET)
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800660a:	b2db      	uxtb	r3, r3
 800660c:	2b00      	cmp	r3, #0
 800660e:	d107      	bne.n	8006620 <HAL_QSPI_Init+0x34>

    /* Init the low level hardware */
    hqspi->MspInitCallback(hqspi);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_QSPI_MspInit(hqspi);
 8006610:	6878      	ldr	r0, [r7, #4]
 8006612:	f7fb fcd1 	bl	8001fb8 <HAL_QSPI_MspInit>
#endif

    /* Configure the default timeout for the QSPI memory access */
    HAL_QSPI_SetTimeout(hqspi, HAL_QSPI_TIMEOUT_DEFAULT_VALUE);
 8006616:	f241 3188 	movw	r1, #5000	; 0x1388
 800661a:	6878      	ldr	r0, [r7, #4]
 800661c:	f000 f85a 	bl	80066d4 <HAL_QSPI_SetTimeout>
  }

  /* Configure QSPI FIFO Threshold */
  MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FTHRES,
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	681b      	ldr	r3, [r3, #0]
 8006624:	681b      	ldr	r3, [r3, #0]
 8006626:	f423 51f8 	bic.w	r1, r3, #7936	; 0x1f00
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	689b      	ldr	r3, [r3, #8]
 800662e:	3b01      	subs	r3, #1
 8006630:	021a      	lsls	r2, r3, #8
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	681b      	ldr	r3, [r3, #0]
 8006636:	430a      	orrs	r2, r1
 8006638:	601a      	str	r2, [r3, #0]
             ((hqspi->Init.FifoThreshold - 1U) << QUADSPI_CR_FTHRES_Pos));

  /* Wait till BUSY flag reset */
  status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800663e:	9300      	str	r3, [sp, #0]
 8006640:	68fb      	ldr	r3, [r7, #12]
 8006642:	2200      	movs	r2, #0
 8006644:	2120      	movs	r1, #32
 8006646:	6878      	ldr	r0, [r7, #4]
 8006648:	f000 f852 	bl	80066f0 <QSPI_WaitFlagStateUntilTimeout>
 800664c:	4603      	mov	r3, r0
 800664e:	72fb      	strb	r3, [r7, #11]

  if(status == HAL_OK)
 8006650:	7afb      	ldrb	r3, [r7, #11]
 8006652:	2b00      	cmp	r3, #0
 8006654:	d135      	bne.n	80066c2 <HAL_QSPI_Init+0xd6>
  {
    /* Configure QSPI Clock Prescaler and Sample Shift */
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT | QUADSPI_CR_FSEL | QUADSPI_CR_DFM),
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	681b      	ldr	r3, [r3, #0]
 800665a:	681a      	ldr	r2, [r3, #0]
 800665c:	4b1b      	ldr	r3, [pc, #108]	; (80066cc <HAL_QSPI_Init+0xe0>)
 800665e:	4013      	ands	r3, r2
 8006660:	687a      	ldr	r2, [r7, #4]
 8006662:	6852      	ldr	r2, [r2, #4]
 8006664:	0611      	lsls	r1, r2, #24
 8006666:	687a      	ldr	r2, [r7, #4]
 8006668:	68d2      	ldr	r2, [r2, #12]
 800666a:	4311      	orrs	r1, r2
 800666c:	687a      	ldr	r2, [r7, #4]
 800666e:	69d2      	ldr	r2, [r2, #28]
 8006670:	4311      	orrs	r1, r2
 8006672:	687a      	ldr	r2, [r7, #4]
 8006674:	6a12      	ldr	r2, [r2, #32]
 8006676:	4311      	orrs	r1, r2
 8006678:	687a      	ldr	r2, [r7, #4]
 800667a:	6812      	ldr	r2, [r2, #0]
 800667c:	430b      	orrs	r3, r1
 800667e:	6013      	str	r3, [r2, #0]
               ((hqspi->Init.ClockPrescaler << QUADSPI_CR_PRESCALER_Pos) |
                hqspi->Init.SampleShifting  | hqspi->Init.FlashID | hqspi->Init.DualFlash));

    /* Configure QSPI Flash Size, CS High Time and Clock Mode */
    MODIFY_REG(hqspi->Instance->DCR, (QUADSPI_DCR_FSIZE | QUADSPI_DCR_CSHT | QUADSPI_DCR_CKMODE),
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	681b      	ldr	r3, [r3, #0]
 8006684:	685a      	ldr	r2, [r3, #4]
 8006686:	4b12      	ldr	r3, [pc, #72]	; (80066d0 <HAL_QSPI_Init+0xe4>)
 8006688:	4013      	ands	r3, r2
 800668a:	687a      	ldr	r2, [r7, #4]
 800668c:	6912      	ldr	r2, [r2, #16]
 800668e:	0411      	lsls	r1, r2, #16
 8006690:	687a      	ldr	r2, [r7, #4]
 8006692:	6952      	ldr	r2, [r2, #20]
 8006694:	4311      	orrs	r1, r2
 8006696:	687a      	ldr	r2, [r7, #4]
 8006698:	6992      	ldr	r2, [r2, #24]
 800669a:	4311      	orrs	r1, r2
 800669c:	687a      	ldr	r2, [r7, #4]
 800669e:	6812      	ldr	r2, [r2, #0]
 80066a0:	430b      	orrs	r3, r1
 80066a2:	6053      	str	r3, [r2, #4]
               ((hqspi->Init.FlashSize << QUADSPI_DCR_FSIZE_Pos) |
                hqspi->Init.ChipSelectHighTime | hqspi->Init.ClockMode));

    /* Enable the QSPI peripheral */
    __HAL_QSPI_ENABLE(hqspi);
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	681b      	ldr	r3, [r3, #0]
 80066a8:	681a      	ldr	r2, [r3, #0]
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	681b      	ldr	r3, [r3, #0]
 80066ae:	f042 0201 	orr.w	r2, r2, #1
 80066b2:	601a      	str	r2, [r3, #0]

    /* Set QSPI error code to none */
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	2200      	movs	r2, #0
 80066b8:	645a      	str	r2, [r3, #68]	; 0x44

    /* Initialize the QSPI state */
    hqspi->State = HAL_QSPI_STATE_READY;
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	2201      	movs	r2, #1
 80066be:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }

  /* Return function status */
  return status;
 80066c2:	7afb      	ldrb	r3, [r7, #11]
}
 80066c4:	4618      	mov	r0, r3
 80066c6:	3710      	adds	r7, #16
 80066c8:	46bd      	mov	sp, r7
 80066ca:	bd80      	pop	{r7, pc}
 80066cc:	00ffff2f 	.word	0x00ffff2f
 80066d0:	ffe0f8fe 	.word	0xffe0f8fe

080066d4 <HAL_QSPI_SetTimeout>:
  * @param  hqspi QSPI handle.
  * @param  Timeout Timeout for the QSPI memory access.
  * @retval None
  */
void HAL_QSPI_SetTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Timeout)
{
 80066d4:	b480      	push	{r7}
 80066d6:	b083      	sub	sp, #12
 80066d8:	af00      	add	r7, sp, #0
 80066da:	6078      	str	r0, [r7, #4]
 80066dc:	6039      	str	r1, [r7, #0]
  hqspi->Timeout = Timeout;
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	683a      	ldr	r2, [r7, #0]
 80066e2:	649a      	str	r2, [r3, #72]	; 0x48
}
 80066e4:	bf00      	nop
 80066e6:	370c      	adds	r7, #12
 80066e8:	46bd      	mov	sp, r7
 80066ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066ee:	4770      	bx	lr

080066f0 <QSPI_WaitFlagStateUntilTimeout>:
  * @param  Timeout Duration of the timeout
  * @retval HAL status
  */
static HAL_StatusTypeDef QSPI_WaitFlagStateUntilTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Flag,
                                                        FlagStatus State, uint32_t Tickstart, uint32_t Timeout)
{
 80066f0:	b580      	push	{r7, lr}
 80066f2:	b084      	sub	sp, #16
 80066f4:	af00      	add	r7, sp, #0
 80066f6:	60f8      	str	r0, [r7, #12]
 80066f8:	60b9      	str	r1, [r7, #8]
 80066fa:	603b      	str	r3, [r7, #0]
 80066fc:	4613      	mov	r3, r2
 80066fe:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is in expected state */
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 8006700:	e01a      	b.n	8006738 <QSPI_WaitFlagStateUntilTimeout+0x48>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006702:	69bb      	ldr	r3, [r7, #24]
 8006704:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006708:	d016      	beq.n	8006738 <QSPI_WaitFlagStateUntilTimeout+0x48>
    {
      if(((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800670a:	f7fc fa7b 	bl	8002c04 <HAL_GetTick>
 800670e:	4602      	mov	r2, r0
 8006710:	683b      	ldr	r3, [r7, #0]
 8006712:	1ad3      	subs	r3, r2, r3
 8006714:	69ba      	ldr	r2, [r7, #24]
 8006716:	429a      	cmp	r2, r3
 8006718:	d302      	bcc.n	8006720 <QSPI_WaitFlagStateUntilTimeout+0x30>
 800671a:	69bb      	ldr	r3, [r7, #24]
 800671c:	2b00      	cmp	r3, #0
 800671e:	d10b      	bne.n	8006738 <QSPI_WaitFlagStateUntilTimeout+0x48>
      {
        hqspi->State     = HAL_QSPI_STATE_ERROR;
 8006720:	68fb      	ldr	r3, [r7, #12]
 8006722:	2204      	movs	r2, #4
 8006724:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hqspi->ErrorCode |= HAL_QSPI_ERROR_TIMEOUT;
 8006728:	68fb      	ldr	r3, [r7, #12]
 800672a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800672c:	f043 0201 	orr.w	r2, r3, #1
 8006730:	68fb      	ldr	r3, [r7, #12]
 8006732:	645a      	str	r2, [r3, #68]	; 0x44

        return HAL_ERROR;
 8006734:	2301      	movs	r3, #1
 8006736:	e00e      	b.n	8006756 <QSPI_WaitFlagStateUntilTimeout+0x66>
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 8006738:	68fb      	ldr	r3, [r7, #12]
 800673a:	681b      	ldr	r3, [r3, #0]
 800673c:	689a      	ldr	r2, [r3, #8]
 800673e:	68bb      	ldr	r3, [r7, #8]
 8006740:	4013      	ands	r3, r2
 8006742:	2b00      	cmp	r3, #0
 8006744:	bf14      	ite	ne
 8006746:	2301      	movne	r3, #1
 8006748:	2300      	moveq	r3, #0
 800674a:	b2db      	uxtb	r3, r3
 800674c:	461a      	mov	r2, r3
 800674e:	79fb      	ldrb	r3, [r7, #7]
 8006750:	429a      	cmp	r2, r3
 8006752:	d1d6      	bne.n	8006702 <QSPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8006754:	2300      	movs	r3, #0
}
 8006756:	4618      	mov	r0, r3
 8006758:	3710      	adds	r7, #16
 800675a:	46bd      	mov	sp, r7
 800675c:	bd80      	pop	{r7, pc}
	...

08006760 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006760:	b580      	push	{r7, lr}
 8006762:	b08c      	sub	sp, #48	; 0x30
 8006764:	af00      	add	r7, sp, #0
 8006766:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	2b00      	cmp	r3, #0
 800676c:	d102      	bne.n	8006774 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800676e:	2301      	movs	r3, #1
 8006770:	f000 bc48 	b.w	8007004 <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	681b      	ldr	r3, [r3, #0]
 8006778:	f003 0301 	and.w	r3, r3, #1
 800677c:	2b00      	cmp	r3, #0
 800677e:	f000 8088 	beq.w	8006892 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006782:	4b99      	ldr	r3, [pc, #612]	; (80069e8 <HAL_RCC_OscConfig+0x288>)
 8006784:	691b      	ldr	r3, [r3, #16]
 8006786:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800678a:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800678c:	4b96      	ldr	r3, [pc, #600]	; (80069e8 <HAL_RCC_OscConfig+0x288>)
 800678e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006790:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8006792:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006794:	2b10      	cmp	r3, #16
 8006796:	d007      	beq.n	80067a8 <HAL_RCC_OscConfig+0x48>
 8006798:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800679a:	2b18      	cmp	r3, #24
 800679c:	d111      	bne.n	80067c2 <HAL_RCC_OscConfig+0x62>
 800679e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80067a0:	f003 0303 	and.w	r3, r3, #3
 80067a4:	2b02      	cmp	r3, #2
 80067a6:	d10c      	bne.n	80067c2 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80067a8:	4b8f      	ldr	r3, [pc, #572]	; (80069e8 <HAL_RCC_OscConfig+0x288>)
 80067aa:	681b      	ldr	r3, [r3, #0]
 80067ac:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80067b0:	2b00      	cmp	r3, #0
 80067b2:	d06d      	beq.n	8006890 <HAL_RCC_OscConfig+0x130>
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	685b      	ldr	r3, [r3, #4]
 80067b8:	2b00      	cmp	r3, #0
 80067ba:	d169      	bne.n	8006890 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 80067bc:	2301      	movs	r3, #1
 80067be:	f000 bc21 	b.w	8007004 <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	685b      	ldr	r3, [r3, #4]
 80067c6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80067ca:	d106      	bne.n	80067da <HAL_RCC_OscConfig+0x7a>
 80067cc:	4b86      	ldr	r3, [pc, #536]	; (80069e8 <HAL_RCC_OscConfig+0x288>)
 80067ce:	681b      	ldr	r3, [r3, #0]
 80067d0:	4a85      	ldr	r2, [pc, #532]	; (80069e8 <HAL_RCC_OscConfig+0x288>)
 80067d2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80067d6:	6013      	str	r3, [r2, #0]
 80067d8:	e02e      	b.n	8006838 <HAL_RCC_OscConfig+0xd8>
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	685b      	ldr	r3, [r3, #4]
 80067de:	2b00      	cmp	r3, #0
 80067e0:	d10c      	bne.n	80067fc <HAL_RCC_OscConfig+0x9c>
 80067e2:	4b81      	ldr	r3, [pc, #516]	; (80069e8 <HAL_RCC_OscConfig+0x288>)
 80067e4:	681b      	ldr	r3, [r3, #0]
 80067e6:	4a80      	ldr	r2, [pc, #512]	; (80069e8 <HAL_RCC_OscConfig+0x288>)
 80067e8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80067ec:	6013      	str	r3, [r2, #0]
 80067ee:	4b7e      	ldr	r3, [pc, #504]	; (80069e8 <HAL_RCC_OscConfig+0x288>)
 80067f0:	681b      	ldr	r3, [r3, #0]
 80067f2:	4a7d      	ldr	r2, [pc, #500]	; (80069e8 <HAL_RCC_OscConfig+0x288>)
 80067f4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80067f8:	6013      	str	r3, [r2, #0]
 80067fa:	e01d      	b.n	8006838 <HAL_RCC_OscConfig+0xd8>
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	685b      	ldr	r3, [r3, #4]
 8006800:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006804:	d10c      	bne.n	8006820 <HAL_RCC_OscConfig+0xc0>
 8006806:	4b78      	ldr	r3, [pc, #480]	; (80069e8 <HAL_RCC_OscConfig+0x288>)
 8006808:	681b      	ldr	r3, [r3, #0]
 800680a:	4a77      	ldr	r2, [pc, #476]	; (80069e8 <HAL_RCC_OscConfig+0x288>)
 800680c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006810:	6013      	str	r3, [r2, #0]
 8006812:	4b75      	ldr	r3, [pc, #468]	; (80069e8 <HAL_RCC_OscConfig+0x288>)
 8006814:	681b      	ldr	r3, [r3, #0]
 8006816:	4a74      	ldr	r2, [pc, #464]	; (80069e8 <HAL_RCC_OscConfig+0x288>)
 8006818:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800681c:	6013      	str	r3, [r2, #0]
 800681e:	e00b      	b.n	8006838 <HAL_RCC_OscConfig+0xd8>
 8006820:	4b71      	ldr	r3, [pc, #452]	; (80069e8 <HAL_RCC_OscConfig+0x288>)
 8006822:	681b      	ldr	r3, [r3, #0]
 8006824:	4a70      	ldr	r2, [pc, #448]	; (80069e8 <HAL_RCC_OscConfig+0x288>)
 8006826:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800682a:	6013      	str	r3, [r2, #0]
 800682c:	4b6e      	ldr	r3, [pc, #440]	; (80069e8 <HAL_RCC_OscConfig+0x288>)
 800682e:	681b      	ldr	r3, [r3, #0]
 8006830:	4a6d      	ldr	r2, [pc, #436]	; (80069e8 <HAL_RCC_OscConfig+0x288>)
 8006832:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006836:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	685b      	ldr	r3, [r3, #4]
 800683c:	2b00      	cmp	r3, #0
 800683e:	d013      	beq.n	8006868 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006840:	f7fc f9e0 	bl	8002c04 <HAL_GetTick>
 8006844:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8006846:	e008      	b.n	800685a <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006848:	f7fc f9dc 	bl	8002c04 <HAL_GetTick>
 800684c:	4602      	mov	r2, r0
 800684e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006850:	1ad3      	subs	r3, r2, r3
 8006852:	2b64      	cmp	r3, #100	; 0x64
 8006854:	d901      	bls.n	800685a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8006856:	2303      	movs	r3, #3
 8006858:	e3d4      	b.n	8007004 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800685a:	4b63      	ldr	r3, [pc, #396]	; (80069e8 <HAL_RCC_OscConfig+0x288>)
 800685c:	681b      	ldr	r3, [r3, #0]
 800685e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006862:	2b00      	cmp	r3, #0
 8006864:	d0f0      	beq.n	8006848 <HAL_RCC_OscConfig+0xe8>
 8006866:	e014      	b.n	8006892 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006868:	f7fc f9cc 	bl	8002c04 <HAL_GetTick>
 800686c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800686e:	e008      	b.n	8006882 <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006870:	f7fc f9c8 	bl	8002c04 <HAL_GetTick>
 8006874:	4602      	mov	r2, r0
 8006876:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006878:	1ad3      	subs	r3, r2, r3
 800687a:	2b64      	cmp	r3, #100	; 0x64
 800687c:	d901      	bls.n	8006882 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 800687e:	2303      	movs	r3, #3
 8006880:	e3c0      	b.n	8007004 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8006882:	4b59      	ldr	r3, [pc, #356]	; (80069e8 <HAL_RCC_OscConfig+0x288>)
 8006884:	681b      	ldr	r3, [r3, #0]
 8006886:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800688a:	2b00      	cmp	r3, #0
 800688c:	d1f0      	bne.n	8006870 <HAL_RCC_OscConfig+0x110>
 800688e:	e000      	b.n	8006892 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006890:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	681b      	ldr	r3, [r3, #0]
 8006896:	f003 0302 	and.w	r3, r3, #2
 800689a:	2b00      	cmp	r3, #0
 800689c:	f000 80ca 	beq.w	8006a34 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80068a0:	4b51      	ldr	r3, [pc, #324]	; (80069e8 <HAL_RCC_OscConfig+0x288>)
 80068a2:	691b      	ldr	r3, [r3, #16]
 80068a4:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80068a8:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80068aa:	4b4f      	ldr	r3, [pc, #316]	; (80069e8 <HAL_RCC_OscConfig+0x288>)
 80068ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80068ae:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 80068b0:	6a3b      	ldr	r3, [r7, #32]
 80068b2:	2b00      	cmp	r3, #0
 80068b4:	d007      	beq.n	80068c6 <HAL_RCC_OscConfig+0x166>
 80068b6:	6a3b      	ldr	r3, [r7, #32]
 80068b8:	2b18      	cmp	r3, #24
 80068ba:	d156      	bne.n	800696a <HAL_RCC_OscConfig+0x20a>
 80068bc:	69fb      	ldr	r3, [r7, #28]
 80068be:	f003 0303 	and.w	r3, r3, #3
 80068c2:	2b00      	cmp	r3, #0
 80068c4:	d151      	bne.n	800696a <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80068c6:	4b48      	ldr	r3, [pc, #288]	; (80069e8 <HAL_RCC_OscConfig+0x288>)
 80068c8:	681b      	ldr	r3, [r3, #0]
 80068ca:	f003 0304 	and.w	r3, r3, #4
 80068ce:	2b00      	cmp	r3, #0
 80068d0:	d005      	beq.n	80068de <HAL_RCC_OscConfig+0x17e>
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	68db      	ldr	r3, [r3, #12]
 80068d6:	2b00      	cmp	r3, #0
 80068d8:	d101      	bne.n	80068de <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 80068da:	2301      	movs	r3, #1
 80068dc:	e392      	b.n	8007004 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80068de:	4b42      	ldr	r3, [pc, #264]	; (80069e8 <HAL_RCC_OscConfig+0x288>)
 80068e0:	681b      	ldr	r3, [r3, #0]
 80068e2:	f023 0219 	bic.w	r2, r3, #25
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	68db      	ldr	r3, [r3, #12]
 80068ea:	493f      	ldr	r1, [pc, #252]	; (80069e8 <HAL_RCC_OscConfig+0x288>)
 80068ec:	4313      	orrs	r3, r2
 80068ee:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80068f0:	f7fc f988 	bl	8002c04 <HAL_GetTick>
 80068f4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80068f6:	e008      	b.n	800690a <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80068f8:	f7fc f984 	bl	8002c04 <HAL_GetTick>
 80068fc:	4602      	mov	r2, r0
 80068fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006900:	1ad3      	subs	r3, r2, r3
 8006902:	2b02      	cmp	r3, #2
 8006904:	d901      	bls.n	800690a <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8006906:	2303      	movs	r3, #3
 8006908:	e37c      	b.n	8007004 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800690a:	4b37      	ldr	r3, [pc, #220]	; (80069e8 <HAL_RCC_OscConfig+0x288>)
 800690c:	681b      	ldr	r3, [r3, #0]
 800690e:	f003 0304 	and.w	r3, r3, #4
 8006912:	2b00      	cmp	r3, #0
 8006914:	d0f0      	beq.n	80068f8 <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006916:	f7fc f9a5 	bl	8002c64 <HAL_GetREVID>
 800691a:	4603      	mov	r3, r0
 800691c:	f241 0203 	movw	r2, #4099	; 0x1003
 8006920:	4293      	cmp	r3, r2
 8006922:	d817      	bhi.n	8006954 <HAL_RCC_OscConfig+0x1f4>
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	691b      	ldr	r3, [r3, #16]
 8006928:	2b40      	cmp	r3, #64	; 0x40
 800692a:	d108      	bne.n	800693e <HAL_RCC_OscConfig+0x1de>
 800692c:	4b2e      	ldr	r3, [pc, #184]	; (80069e8 <HAL_RCC_OscConfig+0x288>)
 800692e:	685b      	ldr	r3, [r3, #4]
 8006930:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8006934:	4a2c      	ldr	r2, [pc, #176]	; (80069e8 <HAL_RCC_OscConfig+0x288>)
 8006936:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800693a:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800693c:	e07a      	b.n	8006a34 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800693e:	4b2a      	ldr	r3, [pc, #168]	; (80069e8 <HAL_RCC_OscConfig+0x288>)
 8006940:	685b      	ldr	r3, [r3, #4]
 8006942:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	691b      	ldr	r3, [r3, #16]
 800694a:	031b      	lsls	r3, r3, #12
 800694c:	4926      	ldr	r1, [pc, #152]	; (80069e8 <HAL_RCC_OscConfig+0x288>)
 800694e:	4313      	orrs	r3, r2
 8006950:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006952:	e06f      	b.n	8006a34 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006954:	4b24      	ldr	r3, [pc, #144]	; (80069e8 <HAL_RCC_OscConfig+0x288>)
 8006956:	685b      	ldr	r3, [r3, #4]
 8006958:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	691b      	ldr	r3, [r3, #16]
 8006960:	061b      	lsls	r3, r3, #24
 8006962:	4921      	ldr	r1, [pc, #132]	; (80069e8 <HAL_RCC_OscConfig+0x288>)
 8006964:	4313      	orrs	r3, r2
 8006966:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006968:	e064      	b.n	8006a34 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	68db      	ldr	r3, [r3, #12]
 800696e:	2b00      	cmp	r3, #0
 8006970:	d047      	beq.n	8006a02 <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8006972:	4b1d      	ldr	r3, [pc, #116]	; (80069e8 <HAL_RCC_OscConfig+0x288>)
 8006974:	681b      	ldr	r3, [r3, #0]
 8006976:	f023 0219 	bic.w	r2, r3, #25
 800697a:	687b      	ldr	r3, [r7, #4]
 800697c:	68db      	ldr	r3, [r3, #12]
 800697e:	491a      	ldr	r1, [pc, #104]	; (80069e8 <HAL_RCC_OscConfig+0x288>)
 8006980:	4313      	orrs	r3, r2
 8006982:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006984:	f7fc f93e 	bl	8002c04 <HAL_GetTick>
 8006988:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800698a:	e008      	b.n	800699e <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800698c:	f7fc f93a 	bl	8002c04 <HAL_GetTick>
 8006990:	4602      	mov	r2, r0
 8006992:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006994:	1ad3      	subs	r3, r2, r3
 8006996:	2b02      	cmp	r3, #2
 8006998:	d901      	bls.n	800699e <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 800699a:	2303      	movs	r3, #3
 800699c:	e332      	b.n	8007004 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800699e:	4b12      	ldr	r3, [pc, #72]	; (80069e8 <HAL_RCC_OscConfig+0x288>)
 80069a0:	681b      	ldr	r3, [r3, #0]
 80069a2:	f003 0304 	and.w	r3, r3, #4
 80069a6:	2b00      	cmp	r3, #0
 80069a8:	d0f0      	beq.n	800698c <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80069aa:	f7fc f95b 	bl	8002c64 <HAL_GetREVID>
 80069ae:	4603      	mov	r3, r0
 80069b0:	f241 0203 	movw	r2, #4099	; 0x1003
 80069b4:	4293      	cmp	r3, r2
 80069b6:	d819      	bhi.n	80069ec <HAL_RCC_OscConfig+0x28c>
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	691b      	ldr	r3, [r3, #16]
 80069bc:	2b40      	cmp	r3, #64	; 0x40
 80069be:	d108      	bne.n	80069d2 <HAL_RCC_OscConfig+0x272>
 80069c0:	4b09      	ldr	r3, [pc, #36]	; (80069e8 <HAL_RCC_OscConfig+0x288>)
 80069c2:	685b      	ldr	r3, [r3, #4]
 80069c4:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 80069c8:	4a07      	ldr	r2, [pc, #28]	; (80069e8 <HAL_RCC_OscConfig+0x288>)
 80069ca:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80069ce:	6053      	str	r3, [r2, #4]
 80069d0:	e030      	b.n	8006a34 <HAL_RCC_OscConfig+0x2d4>
 80069d2:	4b05      	ldr	r3, [pc, #20]	; (80069e8 <HAL_RCC_OscConfig+0x288>)
 80069d4:	685b      	ldr	r3, [r3, #4]
 80069d6:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 80069da:	687b      	ldr	r3, [r7, #4]
 80069dc:	691b      	ldr	r3, [r3, #16]
 80069de:	031b      	lsls	r3, r3, #12
 80069e0:	4901      	ldr	r1, [pc, #4]	; (80069e8 <HAL_RCC_OscConfig+0x288>)
 80069e2:	4313      	orrs	r3, r2
 80069e4:	604b      	str	r3, [r1, #4]
 80069e6:	e025      	b.n	8006a34 <HAL_RCC_OscConfig+0x2d4>
 80069e8:	58024400 	.word	0x58024400
 80069ec:	4b9a      	ldr	r3, [pc, #616]	; (8006c58 <HAL_RCC_OscConfig+0x4f8>)
 80069ee:	685b      	ldr	r3, [r3, #4]
 80069f0:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	691b      	ldr	r3, [r3, #16]
 80069f8:	061b      	lsls	r3, r3, #24
 80069fa:	4997      	ldr	r1, [pc, #604]	; (8006c58 <HAL_RCC_OscConfig+0x4f8>)
 80069fc:	4313      	orrs	r3, r2
 80069fe:	604b      	str	r3, [r1, #4]
 8006a00:	e018      	b.n	8006a34 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006a02:	4b95      	ldr	r3, [pc, #596]	; (8006c58 <HAL_RCC_OscConfig+0x4f8>)
 8006a04:	681b      	ldr	r3, [r3, #0]
 8006a06:	4a94      	ldr	r2, [pc, #592]	; (8006c58 <HAL_RCC_OscConfig+0x4f8>)
 8006a08:	f023 0301 	bic.w	r3, r3, #1
 8006a0c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006a0e:	f7fc f8f9 	bl	8002c04 <HAL_GetTick>
 8006a12:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8006a14:	e008      	b.n	8006a28 <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006a16:	f7fc f8f5 	bl	8002c04 <HAL_GetTick>
 8006a1a:	4602      	mov	r2, r0
 8006a1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a1e:	1ad3      	subs	r3, r2, r3
 8006a20:	2b02      	cmp	r3, #2
 8006a22:	d901      	bls.n	8006a28 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 8006a24:	2303      	movs	r3, #3
 8006a26:	e2ed      	b.n	8007004 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8006a28:	4b8b      	ldr	r3, [pc, #556]	; (8006c58 <HAL_RCC_OscConfig+0x4f8>)
 8006a2a:	681b      	ldr	r3, [r3, #0]
 8006a2c:	f003 0304 	and.w	r3, r3, #4
 8006a30:	2b00      	cmp	r3, #0
 8006a32:	d1f0      	bne.n	8006a16 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	681b      	ldr	r3, [r3, #0]
 8006a38:	f003 0310 	and.w	r3, r3, #16
 8006a3c:	2b00      	cmp	r3, #0
 8006a3e:	f000 80a9 	beq.w	8006b94 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006a42:	4b85      	ldr	r3, [pc, #532]	; (8006c58 <HAL_RCC_OscConfig+0x4f8>)
 8006a44:	691b      	ldr	r3, [r3, #16]
 8006a46:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006a4a:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8006a4c:	4b82      	ldr	r3, [pc, #520]	; (8006c58 <HAL_RCC_OscConfig+0x4f8>)
 8006a4e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006a50:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8006a52:	69bb      	ldr	r3, [r7, #24]
 8006a54:	2b08      	cmp	r3, #8
 8006a56:	d007      	beq.n	8006a68 <HAL_RCC_OscConfig+0x308>
 8006a58:	69bb      	ldr	r3, [r7, #24]
 8006a5a:	2b18      	cmp	r3, #24
 8006a5c:	d13a      	bne.n	8006ad4 <HAL_RCC_OscConfig+0x374>
 8006a5e:	697b      	ldr	r3, [r7, #20]
 8006a60:	f003 0303 	and.w	r3, r3, #3
 8006a64:	2b01      	cmp	r3, #1
 8006a66:	d135      	bne.n	8006ad4 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8006a68:	4b7b      	ldr	r3, [pc, #492]	; (8006c58 <HAL_RCC_OscConfig+0x4f8>)
 8006a6a:	681b      	ldr	r3, [r3, #0]
 8006a6c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006a70:	2b00      	cmp	r3, #0
 8006a72:	d005      	beq.n	8006a80 <HAL_RCC_OscConfig+0x320>
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	69db      	ldr	r3, [r3, #28]
 8006a78:	2b80      	cmp	r3, #128	; 0x80
 8006a7a:	d001      	beq.n	8006a80 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 8006a7c:	2301      	movs	r3, #1
 8006a7e:	e2c1      	b.n	8007004 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8006a80:	f7fc f8f0 	bl	8002c64 <HAL_GetREVID>
 8006a84:	4603      	mov	r3, r0
 8006a86:	f241 0203 	movw	r2, #4099	; 0x1003
 8006a8a:	4293      	cmp	r3, r2
 8006a8c:	d817      	bhi.n	8006abe <HAL_RCC_OscConfig+0x35e>
 8006a8e:	687b      	ldr	r3, [r7, #4]
 8006a90:	6a1b      	ldr	r3, [r3, #32]
 8006a92:	2b20      	cmp	r3, #32
 8006a94:	d108      	bne.n	8006aa8 <HAL_RCC_OscConfig+0x348>
 8006a96:	4b70      	ldr	r3, [pc, #448]	; (8006c58 <HAL_RCC_OscConfig+0x4f8>)
 8006a98:	685b      	ldr	r3, [r3, #4]
 8006a9a:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8006a9e:	4a6e      	ldr	r2, [pc, #440]	; (8006c58 <HAL_RCC_OscConfig+0x4f8>)
 8006aa0:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006aa4:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8006aa6:	e075      	b.n	8006b94 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8006aa8:	4b6b      	ldr	r3, [pc, #428]	; (8006c58 <HAL_RCC_OscConfig+0x4f8>)
 8006aaa:	685b      	ldr	r3, [r3, #4]
 8006aac:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	6a1b      	ldr	r3, [r3, #32]
 8006ab4:	069b      	lsls	r3, r3, #26
 8006ab6:	4968      	ldr	r1, [pc, #416]	; (8006c58 <HAL_RCC_OscConfig+0x4f8>)
 8006ab8:	4313      	orrs	r3, r2
 8006aba:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8006abc:	e06a      	b.n	8006b94 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8006abe:	4b66      	ldr	r3, [pc, #408]	; (8006c58 <HAL_RCC_OscConfig+0x4f8>)
 8006ac0:	68db      	ldr	r3, [r3, #12]
 8006ac2:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8006ac6:	687b      	ldr	r3, [r7, #4]
 8006ac8:	6a1b      	ldr	r3, [r3, #32]
 8006aca:	061b      	lsls	r3, r3, #24
 8006acc:	4962      	ldr	r1, [pc, #392]	; (8006c58 <HAL_RCC_OscConfig+0x4f8>)
 8006ace:	4313      	orrs	r3, r2
 8006ad0:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8006ad2:	e05f      	b.n	8006b94 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8006ad4:	687b      	ldr	r3, [r7, #4]
 8006ad6:	69db      	ldr	r3, [r3, #28]
 8006ad8:	2b00      	cmp	r3, #0
 8006ada:	d042      	beq.n	8006b62 <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8006adc:	4b5e      	ldr	r3, [pc, #376]	; (8006c58 <HAL_RCC_OscConfig+0x4f8>)
 8006ade:	681b      	ldr	r3, [r3, #0]
 8006ae0:	4a5d      	ldr	r2, [pc, #372]	; (8006c58 <HAL_RCC_OscConfig+0x4f8>)
 8006ae2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006ae6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006ae8:	f7fc f88c 	bl	8002c04 <HAL_GetTick>
 8006aec:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8006aee:	e008      	b.n	8006b02 <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8006af0:	f7fc f888 	bl	8002c04 <HAL_GetTick>
 8006af4:	4602      	mov	r2, r0
 8006af6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006af8:	1ad3      	subs	r3, r2, r3
 8006afa:	2b02      	cmp	r3, #2
 8006afc:	d901      	bls.n	8006b02 <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 8006afe:	2303      	movs	r3, #3
 8006b00:	e280      	b.n	8007004 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8006b02:	4b55      	ldr	r3, [pc, #340]	; (8006c58 <HAL_RCC_OscConfig+0x4f8>)
 8006b04:	681b      	ldr	r3, [r3, #0]
 8006b06:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006b0a:	2b00      	cmp	r3, #0
 8006b0c:	d0f0      	beq.n	8006af0 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8006b0e:	f7fc f8a9 	bl	8002c64 <HAL_GetREVID>
 8006b12:	4603      	mov	r3, r0
 8006b14:	f241 0203 	movw	r2, #4099	; 0x1003
 8006b18:	4293      	cmp	r3, r2
 8006b1a:	d817      	bhi.n	8006b4c <HAL_RCC_OscConfig+0x3ec>
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	6a1b      	ldr	r3, [r3, #32]
 8006b20:	2b20      	cmp	r3, #32
 8006b22:	d108      	bne.n	8006b36 <HAL_RCC_OscConfig+0x3d6>
 8006b24:	4b4c      	ldr	r3, [pc, #304]	; (8006c58 <HAL_RCC_OscConfig+0x4f8>)
 8006b26:	685b      	ldr	r3, [r3, #4]
 8006b28:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8006b2c:	4a4a      	ldr	r2, [pc, #296]	; (8006c58 <HAL_RCC_OscConfig+0x4f8>)
 8006b2e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006b32:	6053      	str	r3, [r2, #4]
 8006b34:	e02e      	b.n	8006b94 <HAL_RCC_OscConfig+0x434>
 8006b36:	4b48      	ldr	r3, [pc, #288]	; (8006c58 <HAL_RCC_OscConfig+0x4f8>)
 8006b38:	685b      	ldr	r3, [r3, #4]
 8006b3a:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8006b3e:	687b      	ldr	r3, [r7, #4]
 8006b40:	6a1b      	ldr	r3, [r3, #32]
 8006b42:	069b      	lsls	r3, r3, #26
 8006b44:	4944      	ldr	r1, [pc, #272]	; (8006c58 <HAL_RCC_OscConfig+0x4f8>)
 8006b46:	4313      	orrs	r3, r2
 8006b48:	604b      	str	r3, [r1, #4]
 8006b4a:	e023      	b.n	8006b94 <HAL_RCC_OscConfig+0x434>
 8006b4c:	4b42      	ldr	r3, [pc, #264]	; (8006c58 <HAL_RCC_OscConfig+0x4f8>)
 8006b4e:	68db      	ldr	r3, [r3, #12]
 8006b50:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8006b54:	687b      	ldr	r3, [r7, #4]
 8006b56:	6a1b      	ldr	r3, [r3, #32]
 8006b58:	061b      	lsls	r3, r3, #24
 8006b5a:	493f      	ldr	r1, [pc, #252]	; (8006c58 <HAL_RCC_OscConfig+0x4f8>)
 8006b5c:	4313      	orrs	r3, r2
 8006b5e:	60cb      	str	r3, [r1, #12]
 8006b60:	e018      	b.n	8006b94 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8006b62:	4b3d      	ldr	r3, [pc, #244]	; (8006c58 <HAL_RCC_OscConfig+0x4f8>)
 8006b64:	681b      	ldr	r3, [r3, #0]
 8006b66:	4a3c      	ldr	r2, [pc, #240]	; (8006c58 <HAL_RCC_OscConfig+0x4f8>)
 8006b68:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006b6c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006b6e:	f7fc f849 	bl	8002c04 <HAL_GetTick>
 8006b72:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8006b74:	e008      	b.n	8006b88 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8006b76:	f7fc f845 	bl	8002c04 <HAL_GetTick>
 8006b7a:	4602      	mov	r2, r0
 8006b7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b7e:	1ad3      	subs	r3, r2, r3
 8006b80:	2b02      	cmp	r3, #2
 8006b82:	d901      	bls.n	8006b88 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8006b84:	2303      	movs	r3, #3
 8006b86:	e23d      	b.n	8007004 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8006b88:	4b33      	ldr	r3, [pc, #204]	; (8006c58 <HAL_RCC_OscConfig+0x4f8>)
 8006b8a:	681b      	ldr	r3, [r3, #0]
 8006b8c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006b90:	2b00      	cmp	r3, #0
 8006b92:	d1f0      	bne.n	8006b76 <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	681b      	ldr	r3, [r3, #0]
 8006b98:	f003 0308 	and.w	r3, r3, #8
 8006b9c:	2b00      	cmp	r3, #0
 8006b9e:	d036      	beq.n	8006c0e <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	695b      	ldr	r3, [r3, #20]
 8006ba4:	2b00      	cmp	r3, #0
 8006ba6:	d019      	beq.n	8006bdc <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006ba8:	4b2b      	ldr	r3, [pc, #172]	; (8006c58 <HAL_RCC_OscConfig+0x4f8>)
 8006baa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006bac:	4a2a      	ldr	r2, [pc, #168]	; (8006c58 <HAL_RCC_OscConfig+0x4f8>)
 8006bae:	f043 0301 	orr.w	r3, r3, #1
 8006bb2:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006bb4:	f7fc f826 	bl	8002c04 <HAL_GetTick>
 8006bb8:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8006bba:	e008      	b.n	8006bce <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006bbc:	f7fc f822 	bl	8002c04 <HAL_GetTick>
 8006bc0:	4602      	mov	r2, r0
 8006bc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006bc4:	1ad3      	subs	r3, r2, r3
 8006bc6:	2b02      	cmp	r3, #2
 8006bc8:	d901      	bls.n	8006bce <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 8006bca:	2303      	movs	r3, #3
 8006bcc:	e21a      	b.n	8007004 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8006bce:	4b22      	ldr	r3, [pc, #136]	; (8006c58 <HAL_RCC_OscConfig+0x4f8>)
 8006bd0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006bd2:	f003 0302 	and.w	r3, r3, #2
 8006bd6:	2b00      	cmp	r3, #0
 8006bd8:	d0f0      	beq.n	8006bbc <HAL_RCC_OscConfig+0x45c>
 8006bda:	e018      	b.n	8006c0e <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006bdc:	4b1e      	ldr	r3, [pc, #120]	; (8006c58 <HAL_RCC_OscConfig+0x4f8>)
 8006bde:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006be0:	4a1d      	ldr	r2, [pc, #116]	; (8006c58 <HAL_RCC_OscConfig+0x4f8>)
 8006be2:	f023 0301 	bic.w	r3, r3, #1
 8006be6:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006be8:	f7fc f80c 	bl	8002c04 <HAL_GetTick>
 8006bec:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8006bee:	e008      	b.n	8006c02 <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006bf0:	f7fc f808 	bl	8002c04 <HAL_GetTick>
 8006bf4:	4602      	mov	r2, r0
 8006bf6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006bf8:	1ad3      	subs	r3, r2, r3
 8006bfa:	2b02      	cmp	r3, #2
 8006bfc:	d901      	bls.n	8006c02 <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 8006bfe:	2303      	movs	r3, #3
 8006c00:	e200      	b.n	8007004 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8006c02:	4b15      	ldr	r3, [pc, #84]	; (8006c58 <HAL_RCC_OscConfig+0x4f8>)
 8006c04:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006c06:	f003 0302 	and.w	r3, r3, #2
 8006c0a:	2b00      	cmp	r3, #0
 8006c0c:	d1f0      	bne.n	8006bf0 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8006c0e:	687b      	ldr	r3, [r7, #4]
 8006c10:	681b      	ldr	r3, [r3, #0]
 8006c12:	f003 0320 	and.w	r3, r3, #32
 8006c16:	2b00      	cmp	r3, #0
 8006c18:	d039      	beq.n	8006c8e <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	699b      	ldr	r3, [r3, #24]
 8006c1e:	2b00      	cmp	r3, #0
 8006c20:	d01c      	beq.n	8006c5c <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8006c22:	4b0d      	ldr	r3, [pc, #52]	; (8006c58 <HAL_RCC_OscConfig+0x4f8>)
 8006c24:	681b      	ldr	r3, [r3, #0]
 8006c26:	4a0c      	ldr	r2, [pc, #48]	; (8006c58 <HAL_RCC_OscConfig+0x4f8>)
 8006c28:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8006c2c:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8006c2e:	f7fb ffe9 	bl	8002c04 <HAL_GetTick>
 8006c32:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8006c34:	e008      	b.n	8006c48 <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8006c36:	f7fb ffe5 	bl	8002c04 <HAL_GetTick>
 8006c3a:	4602      	mov	r2, r0
 8006c3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c3e:	1ad3      	subs	r3, r2, r3
 8006c40:	2b02      	cmp	r3, #2
 8006c42:	d901      	bls.n	8006c48 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 8006c44:	2303      	movs	r3, #3
 8006c46:	e1dd      	b.n	8007004 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8006c48:	4b03      	ldr	r3, [pc, #12]	; (8006c58 <HAL_RCC_OscConfig+0x4f8>)
 8006c4a:	681b      	ldr	r3, [r3, #0]
 8006c4c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006c50:	2b00      	cmp	r3, #0
 8006c52:	d0f0      	beq.n	8006c36 <HAL_RCC_OscConfig+0x4d6>
 8006c54:	e01b      	b.n	8006c8e <HAL_RCC_OscConfig+0x52e>
 8006c56:	bf00      	nop
 8006c58:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8006c5c:	4b9b      	ldr	r3, [pc, #620]	; (8006ecc <HAL_RCC_OscConfig+0x76c>)
 8006c5e:	681b      	ldr	r3, [r3, #0]
 8006c60:	4a9a      	ldr	r2, [pc, #616]	; (8006ecc <HAL_RCC_OscConfig+0x76c>)
 8006c62:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006c66:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8006c68:	f7fb ffcc 	bl	8002c04 <HAL_GetTick>
 8006c6c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8006c6e:	e008      	b.n	8006c82 <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8006c70:	f7fb ffc8 	bl	8002c04 <HAL_GetTick>
 8006c74:	4602      	mov	r2, r0
 8006c76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c78:	1ad3      	subs	r3, r2, r3
 8006c7a:	2b02      	cmp	r3, #2
 8006c7c:	d901      	bls.n	8006c82 <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 8006c7e:	2303      	movs	r3, #3
 8006c80:	e1c0      	b.n	8007004 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8006c82:	4b92      	ldr	r3, [pc, #584]	; (8006ecc <HAL_RCC_OscConfig+0x76c>)
 8006c84:	681b      	ldr	r3, [r3, #0]
 8006c86:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006c8a:	2b00      	cmp	r3, #0
 8006c8c:	d1f0      	bne.n	8006c70 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006c8e:	687b      	ldr	r3, [r7, #4]
 8006c90:	681b      	ldr	r3, [r3, #0]
 8006c92:	f003 0304 	and.w	r3, r3, #4
 8006c96:	2b00      	cmp	r3, #0
 8006c98:	f000 8081 	beq.w	8006d9e <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8006c9c:	4b8c      	ldr	r3, [pc, #560]	; (8006ed0 <HAL_RCC_OscConfig+0x770>)
 8006c9e:	681b      	ldr	r3, [r3, #0]
 8006ca0:	4a8b      	ldr	r2, [pc, #556]	; (8006ed0 <HAL_RCC_OscConfig+0x770>)
 8006ca2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006ca6:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8006ca8:	f7fb ffac 	bl	8002c04 <HAL_GetTick>
 8006cac:	6278      	str	r0, [r7, #36]	; 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006cae:	e008      	b.n	8006cc2 <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006cb0:	f7fb ffa8 	bl	8002c04 <HAL_GetTick>
 8006cb4:	4602      	mov	r2, r0
 8006cb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006cb8:	1ad3      	subs	r3, r2, r3
 8006cba:	2b64      	cmp	r3, #100	; 0x64
 8006cbc:	d901      	bls.n	8006cc2 <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 8006cbe:	2303      	movs	r3, #3
 8006cc0:	e1a0      	b.n	8007004 <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006cc2:	4b83      	ldr	r3, [pc, #524]	; (8006ed0 <HAL_RCC_OscConfig+0x770>)
 8006cc4:	681b      	ldr	r3, [r3, #0]
 8006cc6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006cca:	2b00      	cmp	r3, #0
 8006ccc:	d0f0      	beq.n	8006cb0 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006cce:	687b      	ldr	r3, [r7, #4]
 8006cd0:	689b      	ldr	r3, [r3, #8]
 8006cd2:	2b01      	cmp	r3, #1
 8006cd4:	d106      	bne.n	8006ce4 <HAL_RCC_OscConfig+0x584>
 8006cd6:	4b7d      	ldr	r3, [pc, #500]	; (8006ecc <HAL_RCC_OscConfig+0x76c>)
 8006cd8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006cda:	4a7c      	ldr	r2, [pc, #496]	; (8006ecc <HAL_RCC_OscConfig+0x76c>)
 8006cdc:	f043 0301 	orr.w	r3, r3, #1
 8006ce0:	6713      	str	r3, [r2, #112]	; 0x70
 8006ce2:	e02d      	b.n	8006d40 <HAL_RCC_OscConfig+0x5e0>
 8006ce4:	687b      	ldr	r3, [r7, #4]
 8006ce6:	689b      	ldr	r3, [r3, #8]
 8006ce8:	2b00      	cmp	r3, #0
 8006cea:	d10c      	bne.n	8006d06 <HAL_RCC_OscConfig+0x5a6>
 8006cec:	4b77      	ldr	r3, [pc, #476]	; (8006ecc <HAL_RCC_OscConfig+0x76c>)
 8006cee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006cf0:	4a76      	ldr	r2, [pc, #472]	; (8006ecc <HAL_RCC_OscConfig+0x76c>)
 8006cf2:	f023 0301 	bic.w	r3, r3, #1
 8006cf6:	6713      	str	r3, [r2, #112]	; 0x70
 8006cf8:	4b74      	ldr	r3, [pc, #464]	; (8006ecc <HAL_RCC_OscConfig+0x76c>)
 8006cfa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006cfc:	4a73      	ldr	r2, [pc, #460]	; (8006ecc <HAL_RCC_OscConfig+0x76c>)
 8006cfe:	f023 0304 	bic.w	r3, r3, #4
 8006d02:	6713      	str	r3, [r2, #112]	; 0x70
 8006d04:	e01c      	b.n	8006d40 <HAL_RCC_OscConfig+0x5e0>
 8006d06:	687b      	ldr	r3, [r7, #4]
 8006d08:	689b      	ldr	r3, [r3, #8]
 8006d0a:	2b05      	cmp	r3, #5
 8006d0c:	d10c      	bne.n	8006d28 <HAL_RCC_OscConfig+0x5c8>
 8006d0e:	4b6f      	ldr	r3, [pc, #444]	; (8006ecc <HAL_RCC_OscConfig+0x76c>)
 8006d10:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006d12:	4a6e      	ldr	r2, [pc, #440]	; (8006ecc <HAL_RCC_OscConfig+0x76c>)
 8006d14:	f043 0304 	orr.w	r3, r3, #4
 8006d18:	6713      	str	r3, [r2, #112]	; 0x70
 8006d1a:	4b6c      	ldr	r3, [pc, #432]	; (8006ecc <HAL_RCC_OscConfig+0x76c>)
 8006d1c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006d1e:	4a6b      	ldr	r2, [pc, #428]	; (8006ecc <HAL_RCC_OscConfig+0x76c>)
 8006d20:	f043 0301 	orr.w	r3, r3, #1
 8006d24:	6713      	str	r3, [r2, #112]	; 0x70
 8006d26:	e00b      	b.n	8006d40 <HAL_RCC_OscConfig+0x5e0>
 8006d28:	4b68      	ldr	r3, [pc, #416]	; (8006ecc <HAL_RCC_OscConfig+0x76c>)
 8006d2a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006d2c:	4a67      	ldr	r2, [pc, #412]	; (8006ecc <HAL_RCC_OscConfig+0x76c>)
 8006d2e:	f023 0301 	bic.w	r3, r3, #1
 8006d32:	6713      	str	r3, [r2, #112]	; 0x70
 8006d34:	4b65      	ldr	r3, [pc, #404]	; (8006ecc <HAL_RCC_OscConfig+0x76c>)
 8006d36:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006d38:	4a64      	ldr	r2, [pc, #400]	; (8006ecc <HAL_RCC_OscConfig+0x76c>)
 8006d3a:	f023 0304 	bic.w	r3, r3, #4
 8006d3e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8006d40:	687b      	ldr	r3, [r7, #4]
 8006d42:	689b      	ldr	r3, [r3, #8]
 8006d44:	2b00      	cmp	r3, #0
 8006d46:	d015      	beq.n	8006d74 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006d48:	f7fb ff5c 	bl	8002c04 <HAL_GetTick>
 8006d4c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8006d4e:	e00a      	b.n	8006d66 <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006d50:	f7fb ff58 	bl	8002c04 <HAL_GetTick>
 8006d54:	4602      	mov	r2, r0
 8006d56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d58:	1ad3      	subs	r3, r2, r3
 8006d5a:	f241 3288 	movw	r2, #5000	; 0x1388
 8006d5e:	4293      	cmp	r3, r2
 8006d60:	d901      	bls.n	8006d66 <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 8006d62:	2303      	movs	r3, #3
 8006d64:	e14e      	b.n	8007004 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8006d66:	4b59      	ldr	r3, [pc, #356]	; (8006ecc <HAL_RCC_OscConfig+0x76c>)
 8006d68:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006d6a:	f003 0302 	and.w	r3, r3, #2
 8006d6e:	2b00      	cmp	r3, #0
 8006d70:	d0ee      	beq.n	8006d50 <HAL_RCC_OscConfig+0x5f0>
 8006d72:	e014      	b.n	8006d9e <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006d74:	f7fb ff46 	bl	8002c04 <HAL_GetTick>
 8006d78:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8006d7a:	e00a      	b.n	8006d92 <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006d7c:	f7fb ff42 	bl	8002c04 <HAL_GetTick>
 8006d80:	4602      	mov	r2, r0
 8006d82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d84:	1ad3      	subs	r3, r2, r3
 8006d86:	f241 3288 	movw	r2, #5000	; 0x1388
 8006d8a:	4293      	cmp	r3, r2
 8006d8c:	d901      	bls.n	8006d92 <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 8006d8e:	2303      	movs	r3, #3
 8006d90:	e138      	b.n	8007004 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8006d92:	4b4e      	ldr	r3, [pc, #312]	; (8006ecc <HAL_RCC_OscConfig+0x76c>)
 8006d94:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006d96:	f003 0302 	and.w	r3, r3, #2
 8006d9a:	2b00      	cmp	r3, #0
 8006d9c:	d1ee      	bne.n	8006d7c <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006d9e:	687b      	ldr	r3, [r7, #4]
 8006da0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006da2:	2b00      	cmp	r3, #0
 8006da4:	f000 812d 	beq.w	8007002 <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8006da8:	4b48      	ldr	r3, [pc, #288]	; (8006ecc <HAL_RCC_OscConfig+0x76c>)
 8006daa:	691b      	ldr	r3, [r3, #16]
 8006dac:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006db0:	2b18      	cmp	r3, #24
 8006db2:	f000 80bd 	beq.w	8006f30 <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006db6:	687b      	ldr	r3, [r7, #4]
 8006db8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006dba:	2b02      	cmp	r3, #2
 8006dbc:	f040 809e 	bne.w	8006efc <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006dc0:	4b42      	ldr	r3, [pc, #264]	; (8006ecc <HAL_RCC_OscConfig+0x76c>)
 8006dc2:	681b      	ldr	r3, [r3, #0]
 8006dc4:	4a41      	ldr	r2, [pc, #260]	; (8006ecc <HAL_RCC_OscConfig+0x76c>)
 8006dc6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006dca:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006dcc:	f7fb ff1a 	bl	8002c04 <HAL_GetTick>
 8006dd0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8006dd2:	e008      	b.n	8006de6 <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006dd4:	f7fb ff16 	bl	8002c04 <HAL_GetTick>
 8006dd8:	4602      	mov	r2, r0
 8006dda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ddc:	1ad3      	subs	r3, r2, r3
 8006dde:	2b02      	cmp	r3, #2
 8006de0:	d901      	bls.n	8006de6 <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 8006de2:	2303      	movs	r3, #3
 8006de4:	e10e      	b.n	8007004 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8006de6:	4b39      	ldr	r3, [pc, #228]	; (8006ecc <HAL_RCC_OscConfig+0x76c>)
 8006de8:	681b      	ldr	r3, [r3, #0]
 8006dea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006dee:	2b00      	cmp	r3, #0
 8006df0:	d1f0      	bne.n	8006dd4 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8006df2:	4b36      	ldr	r3, [pc, #216]	; (8006ecc <HAL_RCC_OscConfig+0x76c>)
 8006df4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006df6:	4b37      	ldr	r3, [pc, #220]	; (8006ed4 <HAL_RCC_OscConfig+0x774>)
 8006df8:	4013      	ands	r3, r2
 8006dfa:	687a      	ldr	r2, [r7, #4]
 8006dfc:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8006dfe:	687a      	ldr	r2, [r7, #4]
 8006e00:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8006e02:	0112      	lsls	r2, r2, #4
 8006e04:	430a      	orrs	r2, r1
 8006e06:	4931      	ldr	r1, [pc, #196]	; (8006ecc <HAL_RCC_OscConfig+0x76c>)
 8006e08:	4313      	orrs	r3, r2
 8006e0a:	628b      	str	r3, [r1, #40]	; 0x28
 8006e0c:	687b      	ldr	r3, [r7, #4]
 8006e0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006e10:	3b01      	subs	r3, #1
 8006e12:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8006e16:	687b      	ldr	r3, [r7, #4]
 8006e18:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006e1a:	3b01      	subs	r3, #1
 8006e1c:	025b      	lsls	r3, r3, #9
 8006e1e:	b29b      	uxth	r3, r3
 8006e20:	431a      	orrs	r2, r3
 8006e22:	687b      	ldr	r3, [r7, #4]
 8006e24:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006e26:	3b01      	subs	r3, #1
 8006e28:	041b      	lsls	r3, r3, #16
 8006e2a:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8006e2e:	431a      	orrs	r2, r3
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006e34:	3b01      	subs	r3, #1
 8006e36:	061b      	lsls	r3, r3, #24
 8006e38:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8006e3c:	4923      	ldr	r1, [pc, #140]	; (8006ecc <HAL_RCC_OscConfig+0x76c>)
 8006e3e:	4313      	orrs	r3, r2
 8006e40:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8006e42:	4b22      	ldr	r3, [pc, #136]	; (8006ecc <HAL_RCC_OscConfig+0x76c>)
 8006e44:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006e46:	4a21      	ldr	r2, [pc, #132]	; (8006ecc <HAL_RCC_OscConfig+0x76c>)
 8006e48:	f023 0301 	bic.w	r3, r3, #1
 8006e4c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8006e4e:	4b1f      	ldr	r3, [pc, #124]	; (8006ecc <HAL_RCC_OscConfig+0x76c>)
 8006e50:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006e52:	4b21      	ldr	r3, [pc, #132]	; (8006ed8 <HAL_RCC_OscConfig+0x778>)
 8006e54:	4013      	ands	r3, r2
 8006e56:	687a      	ldr	r2, [r7, #4]
 8006e58:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8006e5a:	00d2      	lsls	r2, r2, #3
 8006e5c:	491b      	ldr	r1, [pc, #108]	; (8006ecc <HAL_RCC_OscConfig+0x76c>)
 8006e5e:	4313      	orrs	r3, r2
 8006e60:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8006e62:	4b1a      	ldr	r3, [pc, #104]	; (8006ecc <HAL_RCC_OscConfig+0x76c>)
 8006e64:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006e66:	f023 020c 	bic.w	r2, r3, #12
 8006e6a:	687b      	ldr	r3, [r7, #4]
 8006e6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e6e:	4917      	ldr	r1, [pc, #92]	; (8006ecc <HAL_RCC_OscConfig+0x76c>)
 8006e70:	4313      	orrs	r3, r2
 8006e72:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8006e74:	4b15      	ldr	r3, [pc, #84]	; (8006ecc <HAL_RCC_OscConfig+0x76c>)
 8006e76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006e78:	f023 0202 	bic.w	r2, r3, #2
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006e80:	4912      	ldr	r1, [pc, #72]	; (8006ecc <HAL_RCC_OscConfig+0x76c>)
 8006e82:	4313      	orrs	r3, r2
 8006e84:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8006e86:	4b11      	ldr	r3, [pc, #68]	; (8006ecc <HAL_RCC_OscConfig+0x76c>)
 8006e88:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006e8a:	4a10      	ldr	r2, [pc, #64]	; (8006ecc <HAL_RCC_OscConfig+0x76c>)
 8006e8c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006e90:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006e92:	4b0e      	ldr	r3, [pc, #56]	; (8006ecc <HAL_RCC_OscConfig+0x76c>)
 8006e94:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006e96:	4a0d      	ldr	r2, [pc, #52]	; (8006ecc <HAL_RCC_OscConfig+0x76c>)
 8006e98:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006e9c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8006e9e:	4b0b      	ldr	r3, [pc, #44]	; (8006ecc <HAL_RCC_OscConfig+0x76c>)
 8006ea0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006ea2:	4a0a      	ldr	r2, [pc, #40]	; (8006ecc <HAL_RCC_OscConfig+0x76c>)
 8006ea4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006ea8:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8006eaa:	4b08      	ldr	r3, [pc, #32]	; (8006ecc <HAL_RCC_OscConfig+0x76c>)
 8006eac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006eae:	4a07      	ldr	r2, [pc, #28]	; (8006ecc <HAL_RCC_OscConfig+0x76c>)
 8006eb0:	f043 0301 	orr.w	r3, r3, #1
 8006eb4:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006eb6:	4b05      	ldr	r3, [pc, #20]	; (8006ecc <HAL_RCC_OscConfig+0x76c>)
 8006eb8:	681b      	ldr	r3, [r3, #0]
 8006eba:	4a04      	ldr	r2, [pc, #16]	; (8006ecc <HAL_RCC_OscConfig+0x76c>)
 8006ebc:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006ec0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006ec2:	f7fb fe9f 	bl	8002c04 <HAL_GetTick>
 8006ec6:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8006ec8:	e011      	b.n	8006eee <HAL_RCC_OscConfig+0x78e>
 8006eca:	bf00      	nop
 8006ecc:	58024400 	.word	0x58024400
 8006ed0:	58024800 	.word	0x58024800
 8006ed4:	fffffc0c 	.word	0xfffffc0c
 8006ed8:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006edc:	f7fb fe92 	bl	8002c04 <HAL_GetTick>
 8006ee0:	4602      	mov	r2, r0
 8006ee2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ee4:	1ad3      	subs	r3, r2, r3
 8006ee6:	2b02      	cmp	r3, #2
 8006ee8:	d901      	bls.n	8006eee <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 8006eea:	2303      	movs	r3, #3
 8006eec:	e08a      	b.n	8007004 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8006eee:	4b47      	ldr	r3, [pc, #284]	; (800700c <HAL_RCC_OscConfig+0x8ac>)
 8006ef0:	681b      	ldr	r3, [r3, #0]
 8006ef2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006ef6:	2b00      	cmp	r3, #0
 8006ef8:	d0f0      	beq.n	8006edc <HAL_RCC_OscConfig+0x77c>
 8006efa:	e082      	b.n	8007002 <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006efc:	4b43      	ldr	r3, [pc, #268]	; (800700c <HAL_RCC_OscConfig+0x8ac>)
 8006efe:	681b      	ldr	r3, [r3, #0]
 8006f00:	4a42      	ldr	r2, [pc, #264]	; (800700c <HAL_RCC_OscConfig+0x8ac>)
 8006f02:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006f06:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006f08:	f7fb fe7c 	bl	8002c04 <HAL_GetTick>
 8006f0c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8006f0e:	e008      	b.n	8006f22 <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006f10:	f7fb fe78 	bl	8002c04 <HAL_GetTick>
 8006f14:	4602      	mov	r2, r0
 8006f16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f18:	1ad3      	subs	r3, r2, r3
 8006f1a:	2b02      	cmp	r3, #2
 8006f1c:	d901      	bls.n	8006f22 <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 8006f1e:	2303      	movs	r3, #3
 8006f20:	e070      	b.n	8007004 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8006f22:	4b3a      	ldr	r3, [pc, #232]	; (800700c <HAL_RCC_OscConfig+0x8ac>)
 8006f24:	681b      	ldr	r3, [r3, #0]
 8006f26:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006f2a:	2b00      	cmp	r3, #0
 8006f2c:	d1f0      	bne.n	8006f10 <HAL_RCC_OscConfig+0x7b0>
 8006f2e:	e068      	b.n	8007002 <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8006f30:	4b36      	ldr	r3, [pc, #216]	; (800700c <HAL_RCC_OscConfig+0x8ac>)
 8006f32:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006f34:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8006f36:	4b35      	ldr	r3, [pc, #212]	; (800700c <HAL_RCC_OscConfig+0x8ac>)
 8006f38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006f3a:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006f3c:	687b      	ldr	r3, [r7, #4]
 8006f3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f40:	2b01      	cmp	r3, #1
 8006f42:	d031      	beq.n	8006fa8 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006f44:	693b      	ldr	r3, [r7, #16]
 8006f46:	f003 0203 	and.w	r2, r3, #3
 8006f4a:	687b      	ldr	r3, [r7, #4]
 8006f4c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006f4e:	429a      	cmp	r2, r3
 8006f50:	d12a      	bne.n	8006fa8 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8006f52:	693b      	ldr	r3, [r7, #16]
 8006f54:	091b      	lsrs	r3, r3, #4
 8006f56:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8006f5a:	687b      	ldr	r3, [r7, #4]
 8006f5c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006f5e:	429a      	cmp	r2, r3
 8006f60:	d122      	bne.n	8006fa8 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8006f62:	68fb      	ldr	r3, [r7, #12]
 8006f64:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8006f68:	687b      	ldr	r3, [r7, #4]
 8006f6a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006f6c:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8006f6e:	429a      	cmp	r2, r3
 8006f70:	d11a      	bne.n	8006fa8 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8006f72:	68fb      	ldr	r3, [r7, #12]
 8006f74:	0a5b      	lsrs	r3, r3, #9
 8006f76:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8006f7a:	687b      	ldr	r3, [r7, #4]
 8006f7c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006f7e:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8006f80:	429a      	cmp	r2, r3
 8006f82:	d111      	bne.n	8006fa8 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8006f84:	68fb      	ldr	r3, [r7, #12]
 8006f86:	0c1b      	lsrs	r3, r3, #16
 8006f88:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006f90:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8006f92:	429a      	cmp	r2, r3
 8006f94:	d108      	bne.n	8006fa8 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8006f96:	68fb      	ldr	r3, [r7, #12]
 8006f98:	0e1b      	lsrs	r3, r3, #24
 8006f9a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8006f9e:	687b      	ldr	r3, [r7, #4]
 8006fa0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006fa2:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8006fa4:	429a      	cmp	r2, r3
 8006fa6:	d001      	beq.n	8006fac <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 8006fa8:	2301      	movs	r3, #1
 8006faa:	e02b      	b.n	8007004 <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8006fac:	4b17      	ldr	r3, [pc, #92]	; (800700c <HAL_RCC_OscConfig+0x8ac>)
 8006fae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006fb0:	08db      	lsrs	r3, r3, #3
 8006fb2:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8006fb6:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8006fb8:	687b      	ldr	r3, [r7, #4]
 8006fba:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006fbc:	693a      	ldr	r2, [r7, #16]
 8006fbe:	429a      	cmp	r2, r3
 8006fc0:	d01f      	beq.n	8007002 <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 8006fc2:	4b12      	ldr	r3, [pc, #72]	; (800700c <HAL_RCC_OscConfig+0x8ac>)
 8006fc4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006fc6:	4a11      	ldr	r2, [pc, #68]	; (800700c <HAL_RCC_OscConfig+0x8ac>)
 8006fc8:	f023 0301 	bic.w	r3, r3, #1
 8006fcc:	62d3      	str	r3, [r2, #44]	; 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8006fce:	f7fb fe19 	bl	8002c04 <HAL_GetTick>
 8006fd2:	6278      	str	r0, [r7, #36]	; 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8006fd4:	bf00      	nop
 8006fd6:	f7fb fe15 	bl	8002c04 <HAL_GetTick>
 8006fda:	4602      	mov	r2, r0
 8006fdc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006fde:	4293      	cmp	r3, r2
 8006fe0:	d0f9      	beq.n	8006fd6 <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8006fe2:	4b0a      	ldr	r3, [pc, #40]	; (800700c <HAL_RCC_OscConfig+0x8ac>)
 8006fe4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006fe6:	4b0a      	ldr	r3, [pc, #40]	; (8007010 <HAL_RCC_OscConfig+0x8b0>)
 8006fe8:	4013      	ands	r3, r2
 8006fea:	687a      	ldr	r2, [r7, #4]
 8006fec:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8006fee:	00d2      	lsls	r2, r2, #3
 8006ff0:	4906      	ldr	r1, [pc, #24]	; (800700c <HAL_RCC_OscConfig+0x8ac>)
 8006ff2:	4313      	orrs	r3, r2
 8006ff4:	634b      	str	r3, [r1, #52]	; 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 8006ff6:	4b05      	ldr	r3, [pc, #20]	; (800700c <HAL_RCC_OscConfig+0x8ac>)
 8006ff8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006ffa:	4a04      	ldr	r2, [pc, #16]	; (800700c <HAL_RCC_OscConfig+0x8ac>)
 8006ffc:	f043 0301 	orr.w	r3, r3, #1
 8007000:	62d3      	str	r3, [r2, #44]	; 0x2c
        }
      }
    }
  }
  return HAL_OK;
 8007002:	2300      	movs	r3, #0
}
 8007004:	4618      	mov	r0, r3
 8007006:	3730      	adds	r7, #48	; 0x30
 8007008:	46bd      	mov	sp, r7
 800700a:	bd80      	pop	{r7, pc}
 800700c:	58024400 	.word	0x58024400
 8007010:	ffff0007 	.word	0xffff0007

08007014 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8007014:	b580      	push	{r7, lr}
 8007016:	b086      	sub	sp, #24
 8007018:	af00      	add	r7, sp, #0
 800701a:	6078      	str	r0, [r7, #4]
 800701c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800701e:	687b      	ldr	r3, [r7, #4]
 8007020:	2b00      	cmp	r3, #0
 8007022:	d101      	bne.n	8007028 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8007024:	2301      	movs	r3, #1
 8007026:	e19c      	b.n	8007362 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8007028:	4b8a      	ldr	r3, [pc, #552]	; (8007254 <HAL_RCC_ClockConfig+0x240>)
 800702a:	681b      	ldr	r3, [r3, #0]
 800702c:	f003 030f 	and.w	r3, r3, #15
 8007030:	683a      	ldr	r2, [r7, #0]
 8007032:	429a      	cmp	r2, r3
 8007034:	d910      	bls.n	8007058 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007036:	4b87      	ldr	r3, [pc, #540]	; (8007254 <HAL_RCC_ClockConfig+0x240>)
 8007038:	681b      	ldr	r3, [r3, #0]
 800703a:	f023 020f 	bic.w	r2, r3, #15
 800703e:	4985      	ldr	r1, [pc, #532]	; (8007254 <HAL_RCC_ClockConfig+0x240>)
 8007040:	683b      	ldr	r3, [r7, #0]
 8007042:	4313      	orrs	r3, r2
 8007044:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8007046:	4b83      	ldr	r3, [pc, #524]	; (8007254 <HAL_RCC_ClockConfig+0x240>)
 8007048:	681b      	ldr	r3, [r3, #0]
 800704a:	f003 030f 	and.w	r3, r3, #15
 800704e:	683a      	ldr	r2, [r7, #0]
 8007050:	429a      	cmp	r2, r3
 8007052:	d001      	beq.n	8007058 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8007054:	2301      	movs	r3, #1
 8007056:	e184      	b.n	8007362 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8007058:	687b      	ldr	r3, [r7, #4]
 800705a:	681b      	ldr	r3, [r3, #0]
 800705c:	f003 0304 	and.w	r3, r3, #4
 8007060:	2b00      	cmp	r3, #0
 8007062:	d010      	beq.n	8007086 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8007064:	687b      	ldr	r3, [r7, #4]
 8007066:	691a      	ldr	r2, [r3, #16]
 8007068:	4b7b      	ldr	r3, [pc, #492]	; (8007258 <HAL_RCC_ClockConfig+0x244>)
 800706a:	699b      	ldr	r3, [r3, #24]
 800706c:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8007070:	429a      	cmp	r2, r3
 8007072:	d908      	bls.n	8007086 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8007074:	4b78      	ldr	r3, [pc, #480]	; (8007258 <HAL_RCC_ClockConfig+0x244>)
 8007076:	699b      	ldr	r3, [r3, #24]
 8007078:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800707c:	687b      	ldr	r3, [r7, #4]
 800707e:	691b      	ldr	r3, [r3, #16]
 8007080:	4975      	ldr	r1, [pc, #468]	; (8007258 <HAL_RCC_ClockConfig+0x244>)
 8007082:	4313      	orrs	r3, r2
 8007084:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007086:	687b      	ldr	r3, [r7, #4]
 8007088:	681b      	ldr	r3, [r3, #0]
 800708a:	f003 0308 	and.w	r3, r3, #8
 800708e:	2b00      	cmp	r3, #0
 8007090:	d010      	beq.n	80070b4 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8007092:	687b      	ldr	r3, [r7, #4]
 8007094:	695a      	ldr	r2, [r3, #20]
 8007096:	4b70      	ldr	r3, [pc, #448]	; (8007258 <HAL_RCC_ClockConfig+0x244>)
 8007098:	69db      	ldr	r3, [r3, #28]
 800709a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800709e:	429a      	cmp	r2, r3
 80070a0:	d908      	bls.n	80070b4 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80070a2:	4b6d      	ldr	r3, [pc, #436]	; (8007258 <HAL_RCC_ClockConfig+0x244>)
 80070a4:	69db      	ldr	r3, [r3, #28]
 80070a6:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80070aa:	687b      	ldr	r3, [r7, #4]
 80070ac:	695b      	ldr	r3, [r3, #20]
 80070ae:	496a      	ldr	r1, [pc, #424]	; (8007258 <HAL_RCC_ClockConfig+0x244>)
 80070b0:	4313      	orrs	r3, r2
 80070b2:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80070b4:	687b      	ldr	r3, [r7, #4]
 80070b6:	681b      	ldr	r3, [r3, #0]
 80070b8:	f003 0310 	and.w	r3, r3, #16
 80070bc:	2b00      	cmp	r3, #0
 80070be:	d010      	beq.n	80070e2 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80070c0:	687b      	ldr	r3, [r7, #4]
 80070c2:	699a      	ldr	r2, [r3, #24]
 80070c4:	4b64      	ldr	r3, [pc, #400]	; (8007258 <HAL_RCC_ClockConfig+0x244>)
 80070c6:	69db      	ldr	r3, [r3, #28]
 80070c8:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80070cc:	429a      	cmp	r2, r3
 80070ce:	d908      	bls.n	80070e2 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80070d0:	4b61      	ldr	r3, [pc, #388]	; (8007258 <HAL_RCC_ClockConfig+0x244>)
 80070d2:	69db      	ldr	r3, [r3, #28]
 80070d4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80070d8:	687b      	ldr	r3, [r7, #4]
 80070da:	699b      	ldr	r3, [r3, #24]
 80070dc:	495e      	ldr	r1, [pc, #376]	; (8007258 <HAL_RCC_ClockConfig+0x244>)
 80070de:	4313      	orrs	r3, r2
 80070e0:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80070e2:	687b      	ldr	r3, [r7, #4]
 80070e4:	681b      	ldr	r3, [r3, #0]
 80070e6:	f003 0320 	and.w	r3, r3, #32
 80070ea:	2b00      	cmp	r3, #0
 80070ec:	d010      	beq.n	8007110 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80070ee:	687b      	ldr	r3, [r7, #4]
 80070f0:	69da      	ldr	r2, [r3, #28]
 80070f2:	4b59      	ldr	r3, [pc, #356]	; (8007258 <HAL_RCC_ClockConfig+0x244>)
 80070f4:	6a1b      	ldr	r3, [r3, #32]
 80070f6:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80070fa:	429a      	cmp	r2, r3
 80070fc:	d908      	bls.n	8007110 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 80070fe:	4b56      	ldr	r3, [pc, #344]	; (8007258 <HAL_RCC_ClockConfig+0x244>)
 8007100:	6a1b      	ldr	r3, [r3, #32]
 8007102:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8007106:	687b      	ldr	r3, [r7, #4]
 8007108:	69db      	ldr	r3, [r3, #28]
 800710a:	4953      	ldr	r1, [pc, #332]	; (8007258 <HAL_RCC_ClockConfig+0x244>)
 800710c:	4313      	orrs	r3, r2
 800710e:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007110:	687b      	ldr	r3, [r7, #4]
 8007112:	681b      	ldr	r3, [r3, #0]
 8007114:	f003 0302 	and.w	r3, r3, #2
 8007118:	2b00      	cmp	r3, #0
 800711a:	d010      	beq.n	800713e <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800711c:	687b      	ldr	r3, [r7, #4]
 800711e:	68da      	ldr	r2, [r3, #12]
 8007120:	4b4d      	ldr	r3, [pc, #308]	; (8007258 <HAL_RCC_ClockConfig+0x244>)
 8007122:	699b      	ldr	r3, [r3, #24]
 8007124:	f003 030f 	and.w	r3, r3, #15
 8007128:	429a      	cmp	r2, r3
 800712a:	d908      	bls.n	800713e <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800712c:	4b4a      	ldr	r3, [pc, #296]	; (8007258 <HAL_RCC_ClockConfig+0x244>)
 800712e:	699b      	ldr	r3, [r3, #24]
 8007130:	f023 020f 	bic.w	r2, r3, #15
 8007134:	687b      	ldr	r3, [r7, #4]
 8007136:	68db      	ldr	r3, [r3, #12]
 8007138:	4947      	ldr	r1, [pc, #284]	; (8007258 <HAL_RCC_ClockConfig+0x244>)
 800713a:	4313      	orrs	r3, r2
 800713c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800713e:	687b      	ldr	r3, [r7, #4]
 8007140:	681b      	ldr	r3, [r3, #0]
 8007142:	f003 0301 	and.w	r3, r3, #1
 8007146:	2b00      	cmp	r3, #0
 8007148:	d055      	beq.n	80071f6 <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 800714a:	4b43      	ldr	r3, [pc, #268]	; (8007258 <HAL_RCC_ClockConfig+0x244>)
 800714c:	699b      	ldr	r3, [r3, #24]
 800714e:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8007152:	687b      	ldr	r3, [r7, #4]
 8007154:	689b      	ldr	r3, [r3, #8]
 8007156:	4940      	ldr	r1, [pc, #256]	; (8007258 <HAL_RCC_ClockConfig+0x244>)
 8007158:	4313      	orrs	r3, r2
 800715a:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800715c:	687b      	ldr	r3, [r7, #4]
 800715e:	685b      	ldr	r3, [r3, #4]
 8007160:	2b02      	cmp	r3, #2
 8007162:	d107      	bne.n	8007174 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8007164:	4b3c      	ldr	r3, [pc, #240]	; (8007258 <HAL_RCC_ClockConfig+0x244>)
 8007166:	681b      	ldr	r3, [r3, #0]
 8007168:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800716c:	2b00      	cmp	r3, #0
 800716e:	d121      	bne.n	80071b4 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8007170:	2301      	movs	r3, #1
 8007172:	e0f6      	b.n	8007362 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8007174:	687b      	ldr	r3, [r7, #4]
 8007176:	685b      	ldr	r3, [r3, #4]
 8007178:	2b03      	cmp	r3, #3
 800717a:	d107      	bne.n	800718c <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800717c:	4b36      	ldr	r3, [pc, #216]	; (8007258 <HAL_RCC_ClockConfig+0x244>)
 800717e:	681b      	ldr	r3, [r3, #0]
 8007180:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007184:	2b00      	cmp	r3, #0
 8007186:	d115      	bne.n	80071b4 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8007188:	2301      	movs	r3, #1
 800718a:	e0ea      	b.n	8007362 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 800718c:	687b      	ldr	r3, [r7, #4]
 800718e:	685b      	ldr	r3, [r3, #4]
 8007190:	2b01      	cmp	r3, #1
 8007192:	d107      	bne.n	80071a4 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8007194:	4b30      	ldr	r3, [pc, #192]	; (8007258 <HAL_RCC_ClockConfig+0x244>)
 8007196:	681b      	ldr	r3, [r3, #0]
 8007198:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800719c:	2b00      	cmp	r3, #0
 800719e:	d109      	bne.n	80071b4 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80071a0:	2301      	movs	r3, #1
 80071a2:	e0de      	b.n	8007362 <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80071a4:	4b2c      	ldr	r3, [pc, #176]	; (8007258 <HAL_RCC_ClockConfig+0x244>)
 80071a6:	681b      	ldr	r3, [r3, #0]
 80071a8:	f003 0304 	and.w	r3, r3, #4
 80071ac:	2b00      	cmp	r3, #0
 80071ae:	d101      	bne.n	80071b4 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80071b0:	2301      	movs	r3, #1
 80071b2:	e0d6      	b.n	8007362 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80071b4:	4b28      	ldr	r3, [pc, #160]	; (8007258 <HAL_RCC_ClockConfig+0x244>)
 80071b6:	691b      	ldr	r3, [r3, #16]
 80071b8:	f023 0207 	bic.w	r2, r3, #7
 80071bc:	687b      	ldr	r3, [r7, #4]
 80071be:	685b      	ldr	r3, [r3, #4]
 80071c0:	4925      	ldr	r1, [pc, #148]	; (8007258 <HAL_RCC_ClockConfig+0x244>)
 80071c2:	4313      	orrs	r3, r2
 80071c4:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80071c6:	f7fb fd1d 	bl	8002c04 <HAL_GetTick>
 80071ca:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80071cc:	e00a      	b.n	80071e4 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80071ce:	f7fb fd19 	bl	8002c04 <HAL_GetTick>
 80071d2:	4602      	mov	r2, r0
 80071d4:	697b      	ldr	r3, [r7, #20]
 80071d6:	1ad3      	subs	r3, r2, r3
 80071d8:	f241 3288 	movw	r2, #5000	; 0x1388
 80071dc:	4293      	cmp	r3, r2
 80071de:	d901      	bls.n	80071e4 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 80071e0:	2303      	movs	r3, #3
 80071e2:	e0be      	b.n	8007362 <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80071e4:	4b1c      	ldr	r3, [pc, #112]	; (8007258 <HAL_RCC_ClockConfig+0x244>)
 80071e6:	691b      	ldr	r3, [r3, #16]
 80071e8:	f003 0238 	and.w	r2, r3, #56	; 0x38
 80071ec:	687b      	ldr	r3, [r7, #4]
 80071ee:	685b      	ldr	r3, [r3, #4]
 80071f0:	00db      	lsls	r3, r3, #3
 80071f2:	429a      	cmp	r2, r3
 80071f4:	d1eb      	bne.n	80071ce <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80071f6:	687b      	ldr	r3, [r7, #4]
 80071f8:	681b      	ldr	r3, [r3, #0]
 80071fa:	f003 0302 	and.w	r3, r3, #2
 80071fe:	2b00      	cmp	r3, #0
 8007200:	d010      	beq.n	8007224 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8007202:	687b      	ldr	r3, [r7, #4]
 8007204:	68da      	ldr	r2, [r3, #12]
 8007206:	4b14      	ldr	r3, [pc, #80]	; (8007258 <HAL_RCC_ClockConfig+0x244>)
 8007208:	699b      	ldr	r3, [r3, #24]
 800720a:	f003 030f 	and.w	r3, r3, #15
 800720e:	429a      	cmp	r2, r3
 8007210:	d208      	bcs.n	8007224 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007212:	4b11      	ldr	r3, [pc, #68]	; (8007258 <HAL_RCC_ClockConfig+0x244>)
 8007214:	699b      	ldr	r3, [r3, #24]
 8007216:	f023 020f 	bic.w	r2, r3, #15
 800721a:	687b      	ldr	r3, [r7, #4]
 800721c:	68db      	ldr	r3, [r3, #12]
 800721e:	490e      	ldr	r1, [pc, #56]	; (8007258 <HAL_RCC_ClockConfig+0x244>)
 8007220:	4313      	orrs	r3, r2
 8007222:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8007224:	4b0b      	ldr	r3, [pc, #44]	; (8007254 <HAL_RCC_ClockConfig+0x240>)
 8007226:	681b      	ldr	r3, [r3, #0]
 8007228:	f003 030f 	and.w	r3, r3, #15
 800722c:	683a      	ldr	r2, [r7, #0]
 800722e:	429a      	cmp	r2, r3
 8007230:	d214      	bcs.n	800725c <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007232:	4b08      	ldr	r3, [pc, #32]	; (8007254 <HAL_RCC_ClockConfig+0x240>)
 8007234:	681b      	ldr	r3, [r3, #0]
 8007236:	f023 020f 	bic.w	r2, r3, #15
 800723a:	4906      	ldr	r1, [pc, #24]	; (8007254 <HAL_RCC_ClockConfig+0x240>)
 800723c:	683b      	ldr	r3, [r7, #0]
 800723e:	4313      	orrs	r3, r2
 8007240:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8007242:	4b04      	ldr	r3, [pc, #16]	; (8007254 <HAL_RCC_ClockConfig+0x240>)
 8007244:	681b      	ldr	r3, [r3, #0]
 8007246:	f003 030f 	and.w	r3, r3, #15
 800724a:	683a      	ldr	r2, [r7, #0]
 800724c:	429a      	cmp	r2, r3
 800724e:	d005      	beq.n	800725c <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8007250:	2301      	movs	r3, #1
 8007252:	e086      	b.n	8007362 <HAL_RCC_ClockConfig+0x34e>
 8007254:	52002000 	.word	0x52002000
 8007258:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800725c:	687b      	ldr	r3, [r7, #4]
 800725e:	681b      	ldr	r3, [r3, #0]
 8007260:	f003 0304 	and.w	r3, r3, #4
 8007264:	2b00      	cmp	r3, #0
 8007266:	d010      	beq.n	800728a <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8007268:	687b      	ldr	r3, [r7, #4]
 800726a:	691a      	ldr	r2, [r3, #16]
 800726c:	4b3f      	ldr	r3, [pc, #252]	; (800736c <HAL_RCC_ClockConfig+0x358>)
 800726e:	699b      	ldr	r3, [r3, #24]
 8007270:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8007274:	429a      	cmp	r2, r3
 8007276:	d208      	bcs.n	800728a <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8007278:	4b3c      	ldr	r3, [pc, #240]	; (800736c <HAL_RCC_ClockConfig+0x358>)
 800727a:	699b      	ldr	r3, [r3, #24]
 800727c:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8007280:	687b      	ldr	r3, [r7, #4]
 8007282:	691b      	ldr	r3, [r3, #16]
 8007284:	4939      	ldr	r1, [pc, #228]	; (800736c <HAL_RCC_ClockConfig+0x358>)
 8007286:	4313      	orrs	r3, r2
 8007288:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800728a:	687b      	ldr	r3, [r7, #4]
 800728c:	681b      	ldr	r3, [r3, #0]
 800728e:	f003 0308 	and.w	r3, r3, #8
 8007292:	2b00      	cmp	r3, #0
 8007294:	d010      	beq.n	80072b8 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8007296:	687b      	ldr	r3, [r7, #4]
 8007298:	695a      	ldr	r2, [r3, #20]
 800729a:	4b34      	ldr	r3, [pc, #208]	; (800736c <HAL_RCC_ClockConfig+0x358>)
 800729c:	69db      	ldr	r3, [r3, #28]
 800729e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80072a2:	429a      	cmp	r2, r3
 80072a4:	d208      	bcs.n	80072b8 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80072a6:	4b31      	ldr	r3, [pc, #196]	; (800736c <HAL_RCC_ClockConfig+0x358>)
 80072a8:	69db      	ldr	r3, [r3, #28]
 80072aa:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80072ae:	687b      	ldr	r3, [r7, #4]
 80072b0:	695b      	ldr	r3, [r3, #20]
 80072b2:	492e      	ldr	r1, [pc, #184]	; (800736c <HAL_RCC_ClockConfig+0x358>)
 80072b4:	4313      	orrs	r3, r2
 80072b6:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80072b8:	687b      	ldr	r3, [r7, #4]
 80072ba:	681b      	ldr	r3, [r3, #0]
 80072bc:	f003 0310 	and.w	r3, r3, #16
 80072c0:	2b00      	cmp	r3, #0
 80072c2:	d010      	beq.n	80072e6 <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80072c4:	687b      	ldr	r3, [r7, #4]
 80072c6:	699a      	ldr	r2, [r3, #24]
 80072c8:	4b28      	ldr	r3, [pc, #160]	; (800736c <HAL_RCC_ClockConfig+0x358>)
 80072ca:	69db      	ldr	r3, [r3, #28]
 80072cc:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80072d0:	429a      	cmp	r2, r3
 80072d2:	d208      	bcs.n	80072e6 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80072d4:	4b25      	ldr	r3, [pc, #148]	; (800736c <HAL_RCC_ClockConfig+0x358>)
 80072d6:	69db      	ldr	r3, [r3, #28]
 80072d8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80072dc:	687b      	ldr	r3, [r7, #4]
 80072de:	699b      	ldr	r3, [r3, #24]
 80072e0:	4922      	ldr	r1, [pc, #136]	; (800736c <HAL_RCC_ClockConfig+0x358>)
 80072e2:	4313      	orrs	r3, r2
 80072e4:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80072e6:	687b      	ldr	r3, [r7, #4]
 80072e8:	681b      	ldr	r3, [r3, #0]
 80072ea:	f003 0320 	and.w	r3, r3, #32
 80072ee:	2b00      	cmp	r3, #0
 80072f0:	d010      	beq.n	8007314 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80072f2:	687b      	ldr	r3, [r7, #4]
 80072f4:	69da      	ldr	r2, [r3, #28]
 80072f6:	4b1d      	ldr	r3, [pc, #116]	; (800736c <HAL_RCC_ClockConfig+0x358>)
 80072f8:	6a1b      	ldr	r3, [r3, #32]
 80072fa:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80072fe:	429a      	cmp	r2, r3
 8007300:	d208      	bcs.n	8007314 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8007302:	4b1a      	ldr	r3, [pc, #104]	; (800736c <HAL_RCC_ClockConfig+0x358>)
 8007304:	6a1b      	ldr	r3, [r3, #32]
 8007306:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800730a:	687b      	ldr	r3, [r7, #4]
 800730c:	69db      	ldr	r3, [r3, #28]
 800730e:	4917      	ldr	r1, [pc, #92]	; (800736c <HAL_RCC_ClockConfig+0x358>)
 8007310:	4313      	orrs	r3, r2
 8007312:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8007314:	f000 f834 	bl	8007380 <HAL_RCC_GetSysClockFreq>
 8007318:	4602      	mov	r2, r0
 800731a:	4b14      	ldr	r3, [pc, #80]	; (800736c <HAL_RCC_ClockConfig+0x358>)
 800731c:	699b      	ldr	r3, [r3, #24]
 800731e:	0a1b      	lsrs	r3, r3, #8
 8007320:	f003 030f 	and.w	r3, r3, #15
 8007324:	4912      	ldr	r1, [pc, #72]	; (8007370 <HAL_RCC_ClockConfig+0x35c>)
 8007326:	5ccb      	ldrb	r3, [r1, r3]
 8007328:	f003 031f 	and.w	r3, r3, #31
 800732c:	fa22 f303 	lsr.w	r3, r2, r3
 8007330:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8007332:	4b0e      	ldr	r3, [pc, #56]	; (800736c <HAL_RCC_ClockConfig+0x358>)
 8007334:	699b      	ldr	r3, [r3, #24]
 8007336:	f003 030f 	and.w	r3, r3, #15
 800733a:	4a0d      	ldr	r2, [pc, #52]	; (8007370 <HAL_RCC_ClockConfig+0x35c>)
 800733c:	5cd3      	ldrb	r3, [r2, r3]
 800733e:	f003 031f 	and.w	r3, r3, #31
 8007342:	693a      	ldr	r2, [r7, #16]
 8007344:	fa22 f303 	lsr.w	r3, r2, r3
 8007348:	4a0a      	ldr	r2, [pc, #40]	; (8007374 <HAL_RCC_ClockConfig+0x360>)
 800734a:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800734c:	4a0a      	ldr	r2, [pc, #40]	; (8007378 <HAL_RCC_ClockConfig+0x364>)
 800734e:	693b      	ldr	r3, [r7, #16]
 8007350:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8007352:	4b0a      	ldr	r3, [pc, #40]	; (800737c <HAL_RCC_ClockConfig+0x368>)
 8007354:	681b      	ldr	r3, [r3, #0]
 8007356:	4618      	mov	r0, r3
 8007358:	f7fb fc0a 	bl	8002b70 <HAL_InitTick>
 800735c:	4603      	mov	r3, r0
 800735e:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8007360:	7bfb      	ldrb	r3, [r7, #15]
}
 8007362:	4618      	mov	r0, r3
 8007364:	3718      	adds	r7, #24
 8007366:	46bd      	mov	sp, r7
 8007368:	bd80      	pop	{r7, pc}
 800736a:	bf00      	nop
 800736c:	58024400 	.word	0x58024400
 8007370:	0800ea40 	.word	0x0800ea40
 8007374:	2400000c 	.word	0x2400000c
 8007378:	24000008 	.word	0x24000008
 800737c:	24000010 	.word	0x24000010

08007380 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8007380:	b480      	push	{r7}
 8007382:	b089      	sub	sp, #36	; 0x24
 8007384:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8007386:	4bb3      	ldr	r3, [pc, #716]	; (8007654 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007388:	691b      	ldr	r3, [r3, #16]
 800738a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800738e:	2b18      	cmp	r3, #24
 8007390:	f200 8155 	bhi.w	800763e <HAL_RCC_GetSysClockFreq+0x2be>
 8007394:	a201      	add	r2, pc, #4	; (adr r2, 800739c <HAL_RCC_GetSysClockFreq+0x1c>)
 8007396:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800739a:	bf00      	nop
 800739c:	08007401 	.word	0x08007401
 80073a0:	0800763f 	.word	0x0800763f
 80073a4:	0800763f 	.word	0x0800763f
 80073a8:	0800763f 	.word	0x0800763f
 80073ac:	0800763f 	.word	0x0800763f
 80073b0:	0800763f 	.word	0x0800763f
 80073b4:	0800763f 	.word	0x0800763f
 80073b8:	0800763f 	.word	0x0800763f
 80073bc:	08007427 	.word	0x08007427
 80073c0:	0800763f 	.word	0x0800763f
 80073c4:	0800763f 	.word	0x0800763f
 80073c8:	0800763f 	.word	0x0800763f
 80073cc:	0800763f 	.word	0x0800763f
 80073d0:	0800763f 	.word	0x0800763f
 80073d4:	0800763f 	.word	0x0800763f
 80073d8:	0800763f 	.word	0x0800763f
 80073dc:	0800742d 	.word	0x0800742d
 80073e0:	0800763f 	.word	0x0800763f
 80073e4:	0800763f 	.word	0x0800763f
 80073e8:	0800763f 	.word	0x0800763f
 80073ec:	0800763f 	.word	0x0800763f
 80073f0:	0800763f 	.word	0x0800763f
 80073f4:	0800763f 	.word	0x0800763f
 80073f8:	0800763f 	.word	0x0800763f
 80073fc:	08007433 	.word	0x08007433
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007400:	4b94      	ldr	r3, [pc, #592]	; (8007654 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007402:	681b      	ldr	r3, [r3, #0]
 8007404:	f003 0320 	and.w	r3, r3, #32
 8007408:	2b00      	cmp	r3, #0
 800740a:	d009      	beq.n	8007420 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800740c:	4b91      	ldr	r3, [pc, #580]	; (8007654 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800740e:	681b      	ldr	r3, [r3, #0]
 8007410:	08db      	lsrs	r3, r3, #3
 8007412:	f003 0303 	and.w	r3, r3, #3
 8007416:	4a90      	ldr	r2, [pc, #576]	; (8007658 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8007418:	fa22 f303 	lsr.w	r3, r2, r3
 800741c:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 800741e:	e111      	b.n	8007644 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8007420:	4b8d      	ldr	r3, [pc, #564]	; (8007658 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8007422:	61bb      	str	r3, [r7, #24]
      break;
 8007424:	e10e      	b.n	8007644 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 8007426:	4b8d      	ldr	r3, [pc, #564]	; (800765c <HAL_RCC_GetSysClockFreq+0x2dc>)
 8007428:	61bb      	str	r3, [r7, #24]
      break;
 800742a:	e10b      	b.n	8007644 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 800742c:	4b8c      	ldr	r3, [pc, #560]	; (8007660 <HAL_RCC_GetSysClockFreq+0x2e0>)
 800742e:	61bb      	str	r3, [r7, #24]
      break;
 8007430:	e108      	b.n	8007644 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8007432:	4b88      	ldr	r3, [pc, #544]	; (8007654 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007434:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007436:	f003 0303 	and.w	r3, r3, #3
 800743a:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 800743c:	4b85      	ldr	r3, [pc, #532]	; (8007654 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800743e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007440:	091b      	lsrs	r3, r3, #4
 8007442:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007446:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8007448:	4b82      	ldr	r3, [pc, #520]	; (8007654 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800744a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800744c:	f003 0301 	and.w	r3, r3, #1
 8007450:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8007452:	4b80      	ldr	r3, [pc, #512]	; (8007654 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007454:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007456:	08db      	lsrs	r3, r3, #3
 8007458:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800745c:	68fa      	ldr	r2, [r7, #12]
 800745e:	fb02 f303 	mul.w	r3, r2, r3
 8007462:	ee07 3a90 	vmov	s15, r3
 8007466:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800746a:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 800746e:	693b      	ldr	r3, [r7, #16]
 8007470:	2b00      	cmp	r3, #0
 8007472:	f000 80e1 	beq.w	8007638 <HAL_RCC_GetSysClockFreq+0x2b8>
 8007476:	697b      	ldr	r3, [r7, #20]
 8007478:	2b02      	cmp	r3, #2
 800747a:	f000 8083 	beq.w	8007584 <HAL_RCC_GetSysClockFreq+0x204>
 800747e:	697b      	ldr	r3, [r7, #20]
 8007480:	2b02      	cmp	r3, #2
 8007482:	f200 80a1 	bhi.w	80075c8 <HAL_RCC_GetSysClockFreq+0x248>
 8007486:	697b      	ldr	r3, [r7, #20]
 8007488:	2b00      	cmp	r3, #0
 800748a:	d003      	beq.n	8007494 <HAL_RCC_GetSysClockFreq+0x114>
 800748c:	697b      	ldr	r3, [r7, #20]
 800748e:	2b01      	cmp	r3, #1
 8007490:	d056      	beq.n	8007540 <HAL_RCC_GetSysClockFreq+0x1c0>
 8007492:	e099      	b.n	80075c8 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007494:	4b6f      	ldr	r3, [pc, #444]	; (8007654 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007496:	681b      	ldr	r3, [r3, #0]
 8007498:	f003 0320 	and.w	r3, r3, #32
 800749c:	2b00      	cmp	r3, #0
 800749e:	d02d      	beq.n	80074fc <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80074a0:	4b6c      	ldr	r3, [pc, #432]	; (8007654 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80074a2:	681b      	ldr	r3, [r3, #0]
 80074a4:	08db      	lsrs	r3, r3, #3
 80074a6:	f003 0303 	and.w	r3, r3, #3
 80074aa:	4a6b      	ldr	r2, [pc, #428]	; (8007658 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80074ac:	fa22 f303 	lsr.w	r3, r2, r3
 80074b0:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80074b2:	687b      	ldr	r3, [r7, #4]
 80074b4:	ee07 3a90 	vmov	s15, r3
 80074b8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80074bc:	693b      	ldr	r3, [r7, #16]
 80074be:	ee07 3a90 	vmov	s15, r3
 80074c2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80074c6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80074ca:	4b62      	ldr	r3, [pc, #392]	; (8007654 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80074cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80074ce:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80074d2:	ee07 3a90 	vmov	s15, r3
 80074d6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80074da:	ed97 6a02 	vldr	s12, [r7, #8]
 80074de:	eddf 5a61 	vldr	s11, [pc, #388]	; 8007664 <HAL_RCC_GetSysClockFreq+0x2e4>
 80074e2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80074e6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80074ea:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80074ee:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80074f2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80074f6:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 80074fa:	e087      	b.n	800760c <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80074fc:	693b      	ldr	r3, [r7, #16]
 80074fe:	ee07 3a90 	vmov	s15, r3
 8007502:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007506:	eddf 6a58 	vldr	s13, [pc, #352]	; 8007668 <HAL_RCC_GetSysClockFreq+0x2e8>
 800750a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800750e:	4b51      	ldr	r3, [pc, #324]	; (8007654 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007510:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007512:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007516:	ee07 3a90 	vmov	s15, r3
 800751a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800751e:	ed97 6a02 	vldr	s12, [r7, #8]
 8007522:	eddf 5a50 	vldr	s11, [pc, #320]	; 8007664 <HAL_RCC_GetSysClockFreq+0x2e4>
 8007526:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800752a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800752e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007532:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007536:	ee67 7a27 	vmul.f32	s15, s14, s15
 800753a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800753e:	e065      	b.n	800760c <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8007540:	693b      	ldr	r3, [r7, #16]
 8007542:	ee07 3a90 	vmov	s15, r3
 8007546:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800754a:	eddf 6a48 	vldr	s13, [pc, #288]	; 800766c <HAL_RCC_GetSysClockFreq+0x2ec>
 800754e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007552:	4b40      	ldr	r3, [pc, #256]	; (8007654 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007554:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007556:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800755a:	ee07 3a90 	vmov	s15, r3
 800755e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007562:	ed97 6a02 	vldr	s12, [r7, #8]
 8007566:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8007664 <HAL_RCC_GetSysClockFreq+0x2e4>
 800756a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800756e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007572:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007576:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800757a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800757e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8007582:	e043      	b.n	800760c <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8007584:	693b      	ldr	r3, [r7, #16]
 8007586:	ee07 3a90 	vmov	s15, r3
 800758a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800758e:	eddf 6a38 	vldr	s13, [pc, #224]	; 8007670 <HAL_RCC_GetSysClockFreq+0x2f0>
 8007592:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007596:	4b2f      	ldr	r3, [pc, #188]	; (8007654 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007598:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800759a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800759e:	ee07 3a90 	vmov	s15, r3
 80075a2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80075a6:	ed97 6a02 	vldr	s12, [r7, #8]
 80075aa:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8007664 <HAL_RCC_GetSysClockFreq+0x2e4>
 80075ae:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80075b2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80075b6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80075ba:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80075be:	ee67 7a27 	vmul.f32	s15, s14, s15
 80075c2:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80075c6:	e021      	b.n	800760c <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80075c8:	693b      	ldr	r3, [r7, #16]
 80075ca:	ee07 3a90 	vmov	s15, r3
 80075ce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80075d2:	eddf 6a26 	vldr	s13, [pc, #152]	; 800766c <HAL_RCC_GetSysClockFreq+0x2ec>
 80075d6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80075da:	4b1e      	ldr	r3, [pc, #120]	; (8007654 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80075dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80075de:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80075e2:	ee07 3a90 	vmov	s15, r3
 80075e6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80075ea:	ed97 6a02 	vldr	s12, [r7, #8]
 80075ee:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8007664 <HAL_RCC_GetSysClockFreq+0x2e4>
 80075f2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80075f6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80075fa:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80075fe:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007602:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007606:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800760a:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 800760c:	4b11      	ldr	r3, [pc, #68]	; (8007654 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800760e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007610:	0a5b      	lsrs	r3, r3, #9
 8007612:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007616:	3301      	adds	r3, #1
 8007618:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 800761a:	683b      	ldr	r3, [r7, #0]
 800761c:	ee07 3a90 	vmov	s15, r3
 8007620:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8007624:	edd7 6a07 	vldr	s13, [r7, #28]
 8007628:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800762c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007630:	ee17 3a90 	vmov	r3, s15
 8007634:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 8007636:	e005      	b.n	8007644 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8007638:	2300      	movs	r3, #0
 800763a:	61bb      	str	r3, [r7, #24]
      break;
 800763c:	e002      	b.n	8007644 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 800763e:	4b07      	ldr	r3, [pc, #28]	; (800765c <HAL_RCC_GetSysClockFreq+0x2dc>)
 8007640:	61bb      	str	r3, [r7, #24]
      break;
 8007642:	bf00      	nop
  }

  return sysclockfreq;
 8007644:	69bb      	ldr	r3, [r7, #24]
}
 8007646:	4618      	mov	r0, r3
 8007648:	3724      	adds	r7, #36	; 0x24
 800764a:	46bd      	mov	sp, r7
 800764c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007650:	4770      	bx	lr
 8007652:	bf00      	nop
 8007654:	58024400 	.word	0x58024400
 8007658:	03d09000 	.word	0x03d09000
 800765c:	003d0900 	.word	0x003d0900
 8007660:	017d7840 	.word	0x017d7840
 8007664:	46000000 	.word	0x46000000
 8007668:	4c742400 	.word	0x4c742400
 800766c:	4a742400 	.word	0x4a742400
 8007670:	4bbebc20 	.word	0x4bbebc20

08007674 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8007674:	b580      	push	{r7, lr}
 8007676:	b082      	sub	sp, #8
 8007678:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800767a:	f7ff fe81 	bl	8007380 <HAL_RCC_GetSysClockFreq>
 800767e:	4602      	mov	r2, r0
 8007680:	4b10      	ldr	r3, [pc, #64]	; (80076c4 <HAL_RCC_GetHCLKFreq+0x50>)
 8007682:	699b      	ldr	r3, [r3, #24]
 8007684:	0a1b      	lsrs	r3, r3, #8
 8007686:	f003 030f 	and.w	r3, r3, #15
 800768a:	490f      	ldr	r1, [pc, #60]	; (80076c8 <HAL_RCC_GetHCLKFreq+0x54>)
 800768c:	5ccb      	ldrb	r3, [r1, r3]
 800768e:	f003 031f 	and.w	r3, r3, #31
 8007692:	fa22 f303 	lsr.w	r3, r2, r3
 8007696:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8007698:	4b0a      	ldr	r3, [pc, #40]	; (80076c4 <HAL_RCC_GetHCLKFreq+0x50>)
 800769a:	699b      	ldr	r3, [r3, #24]
 800769c:	f003 030f 	and.w	r3, r3, #15
 80076a0:	4a09      	ldr	r2, [pc, #36]	; (80076c8 <HAL_RCC_GetHCLKFreq+0x54>)
 80076a2:	5cd3      	ldrb	r3, [r2, r3]
 80076a4:	f003 031f 	and.w	r3, r3, #31
 80076a8:	687a      	ldr	r2, [r7, #4]
 80076aa:	fa22 f303 	lsr.w	r3, r2, r3
 80076ae:	4a07      	ldr	r2, [pc, #28]	; (80076cc <HAL_RCC_GetHCLKFreq+0x58>)
 80076b0:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80076b2:	4a07      	ldr	r2, [pc, #28]	; (80076d0 <HAL_RCC_GetHCLKFreq+0x5c>)
 80076b4:	687b      	ldr	r3, [r7, #4]
 80076b6:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 80076b8:	4b04      	ldr	r3, [pc, #16]	; (80076cc <HAL_RCC_GetHCLKFreq+0x58>)
 80076ba:	681b      	ldr	r3, [r3, #0]
}
 80076bc:	4618      	mov	r0, r3
 80076be:	3708      	adds	r7, #8
 80076c0:	46bd      	mov	sp, r7
 80076c2:	bd80      	pop	{r7, pc}
 80076c4:	58024400 	.word	0x58024400
 80076c8:	0800ea40 	.word	0x0800ea40
 80076cc:	2400000c 	.word	0x2400000c
 80076d0:	24000008 	.word	0x24000008

080076d4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80076d4:	b580      	push	{r7, lr}
 80076d6:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 80076d8:	f7ff ffcc 	bl	8007674 <HAL_RCC_GetHCLKFreq>
 80076dc:	4602      	mov	r2, r0
 80076de:	4b06      	ldr	r3, [pc, #24]	; (80076f8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80076e0:	69db      	ldr	r3, [r3, #28]
 80076e2:	091b      	lsrs	r3, r3, #4
 80076e4:	f003 0307 	and.w	r3, r3, #7
 80076e8:	4904      	ldr	r1, [pc, #16]	; (80076fc <HAL_RCC_GetPCLK1Freq+0x28>)
 80076ea:	5ccb      	ldrb	r3, [r1, r3]
 80076ec:	f003 031f 	and.w	r3, r3, #31
 80076f0:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 80076f4:	4618      	mov	r0, r3
 80076f6:	bd80      	pop	{r7, pc}
 80076f8:	58024400 	.word	0x58024400
 80076fc:	0800ea40 	.word	0x0800ea40

08007700 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8007700:	b580      	push	{r7, lr}
 8007702:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8007704:	f7ff ffb6 	bl	8007674 <HAL_RCC_GetHCLKFreq>
 8007708:	4602      	mov	r2, r0
 800770a:	4b06      	ldr	r3, [pc, #24]	; (8007724 <HAL_RCC_GetPCLK2Freq+0x24>)
 800770c:	69db      	ldr	r3, [r3, #28]
 800770e:	0a1b      	lsrs	r3, r3, #8
 8007710:	f003 0307 	and.w	r3, r3, #7
 8007714:	4904      	ldr	r1, [pc, #16]	; (8007728 <HAL_RCC_GetPCLK2Freq+0x28>)
 8007716:	5ccb      	ldrb	r3, [r1, r3]
 8007718:	f003 031f 	and.w	r3, r3, #31
 800771c:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8007720:	4618      	mov	r0, r3
 8007722:	bd80      	pop	{r7, pc}
 8007724:	58024400 	.word	0x58024400
 8007728:	0800ea40 	.word	0x0800ea40

0800772c <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800772c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007730:	b0ca      	sub	sp, #296	; 0x128
 8007732:	af00      	add	r7, sp, #0
 8007734:	f8c7 0114 	str.w	r0, [r7, #276]	; 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8007738:	2300      	movs	r3, #0
 800773a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800773e:	2300      	movs	r3, #0
 8007740:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8007744:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007748:	e9d3 2300 	ldrd	r2, r3, [r3]
 800774c:	f002 6400 	and.w	r4, r2, #134217728	; 0x8000000
 8007750:	2500      	movs	r5, #0
 8007752:	ea54 0305 	orrs.w	r3, r4, r5
 8007756:	d049      	beq.n	80077ec <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8007758:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800775c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800775e:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8007762:	d02f      	beq.n	80077c4 <HAL_RCCEx_PeriphCLKConfig+0x98>
 8007764:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8007768:	d828      	bhi.n	80077bc <HAL_RCCEx_PeriphCLKConfig+0x90>
 800776a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800776e:	d01a      	beq.n	80077a6 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8007770:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8007774:	d822      	bhi.n	80077bc <HAL_RCCEx_PeriphCLKConfig+0x90>
 8007776:	2b00      	cmp	r3, #0
 8007778:	d003      	beq.n	8007782 <HAL_RCCEx_PeriphCLKConfig+0x56>
 800777a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800777e:	d007      	beq.n	8007790 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8007780:	e01c      	b.n	80077bc <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007782:	4bb8      	ldr	r3, [pc, #736]	; (8007a64 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8007784:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007786:	4ab7      	ldr	r2, [pc, #732]	; (8007a64 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8007788:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800778c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800778e:	e01a      	b.n	80077c6 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8007790:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007794:	3308      	adds	r3, #8
 8007796:	2102      	movs	r1, #2
 8007798:	4618      	mov	r0, r3
 800779a:	f002 fb61 	bl	8009e60 <RCCEx_PLL2_Config>
 800779e:	4603      	mov	r3, r0
 80077a0:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80077a4:	e00f      	b.n	80077c6 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80077a6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80077aa:	3328      	adds	r3, #40	; 0x28
 80077ac:	2102      	movs	r1, #2
 80077ae:	4618      	mov	r0, r3
 80077b0:	f002 fc08 	bl	8009fc4 <RCCEx_PLL3_Config>
 80077b4:	4603      	mov	r3, r0
 80077b6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80077ba:	e004      	b.n	80077c6 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80077bc:	2301      	movs	r3, #1
 80077be:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80077c2:	e000      	b.n	80077c6 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 80077c4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80077c6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80077ca:	2b00      	cmp	r3, #0
 80077cc:	d10a      	bne.n	80077e4 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 80077ce:	4ba5      	ldr	r3, [pc, #660]	; (8007a64 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80077d0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80077d2:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 80077d6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80077da:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80077dc:	4aa1      	ldr	r2, [pc, #644]	; (8007a64 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80077de:	430b      	orrs	r3, r1
 80077e0:	6513      	str	r3, [r2, #80]	; 0x50
 80077e2:	e003      	b.n	80077ec <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80077e4:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80077e8:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80077ec:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80077f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80077f4:	f402 7880 	and.w	r8, r2, #256	; 0x100
 80077f8:	f04f 0900 	mov.w	r9, #0
 80077fc:	ea58 0309 	orrs.w	r3, r8, r9
 8007800:	d047      	beq.n	8007892 <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 8007802:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007806:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007808:	2b04      	cmp	r3, #4
 800780a:	d82a      	bhi.n	8007862 <HAL_RCCEx_PeriphCLKConfig+0x136>
 800780c:	a201      	add	r2, pc, #4	; (adr r2, 8007814 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 800780e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007812:	bf00      	nop
 8007814:	08007829 	.word	0x08007829
 8007818:	08007837 	.word	0x08007837
 800781c:	0800784d 	.word	0x0800784d
 8007820:	0800786b 	.word	0x0800786b
 8007824:	0800786b 	.word	0x0800786b
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007828:	4b8e      	ldr	r3, [pc, #568]	; (8007a64 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800782a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800782c:	4a8d      	ldr	r2, [pc, #564]	; (8007a64 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800782e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007832:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8007834:	e01a      	b.n	800786c <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8007836:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800783a:	3308      	adds	r3, #8
 800783c:	2100      	movs	r1, #0
 800783e:	4618      	mov	r0, r3
 8007840:	f002 fb0e 	bl	8009e60 <RCCEx_PLL2_Config>
 8007844:	4603      	mov	r3, r0
 8007846:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800784a:	e00f      	b.n	800786c <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800784c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007850:	3328      	adds	r3, #40	; 0x28
 8007852:	2100      	movs	r1, #0
 8007854:	4618      	mov	r0, r3
 8007856:	f002 fbb5 	bl	8009fc4 <RCCEx_PLL3_Config>
 800785a:	4603      	mov	r3, r0
 800785c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8007860:	e004      	b.n	800786c <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007862:	2301      	movs	r3, #1
 8007864:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8007868:	e000      	b.n	800786c <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 800786a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800786c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007870:	2b00      	cmp	r3, #0
 8007872:	d10a      	bne.n	800788a <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8007874:	4b7b      	ldr	r3, [pc, #492]	; (8007a64 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8007876:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007878:	f023 0107 	bic.w	r1, r3, #7
 800787c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007880:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007882:	4a78      	ldr	r2, [pc, #480]	; (8007a64 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8007884:	430b      	orrs	r3, r1
 8007886:	6513      	str	r3, [r2, #80]	; 0x50
 8007888:	e003      	b.n	8007892 <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800788a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800788e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8007892:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007896:	e9d3 2300 	ldrd	r2, r3, [r3]
 800789a:	f402 7a00 	and.w	sl, r2, #512	; 0x200
 800789e:	f04f 0b00 	mov.w	fp, #0
 80078a2:	ea5a 030b 	orrs.w	r3, sl, fp
 80078a6:	d04c      	beq.n	8007942 <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 80078a8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80078ac:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80078ae:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80078b2:	d030      	beq.n	8007916 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 80078b4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80078b8:	d829      	bhi.n	800790e <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 80078ba:	2bc0      	cmp	r3, #192	; 0xc0
 80078bc:	d02d      	beq.n	800791a <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 80078be:	2bc0      	cmp	r3, #192	; 0xc0
 80078c0:	d825      	bhi.n	800790e <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 80078c2:	2b80      	cmp	r3, #128	; 0x80
 80078c4:	d018      	beq.n	80078f8 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 80078c6:	2b80      	cmp	r3, #128	; 0x80
 80078c8:	d821      	bhi.n	800790e <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 80078ca:	2b00      	cmp	r3, #0
 80078cc:	d002      	beq.n	80078d4 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 80078ce:	2b40      	cmp	r3, #64	; 0x40
 80078d0:	d007      	beq.n	80078e2 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 80078d2:	e01c      	b.n	800790e <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80078d4:	4b63      	ldr	r3, [pc, #396]	; (8007a64 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80078d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80078d8:	4a62      	ldr	r2, [pc, #392]	; (8007a64 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80078da:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80078de:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 80078e0:	e01c      	b.n	800791c <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80078e2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80078e6:	3308      	adds	r3, #8
 80078e8:	2100      	movs	r1, #0
 80078ea:	4618      	mov	r0, r3
 80078ec:	f002 fab8 	bl	8009e60 <RCCEx_PLL2_Config>
 80078f0:	4603      	mov	r3, r0
 80078f2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 80078f6:	e011      	b.n	800791c <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80078f8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80078fc:	3328      	adds	r3, #40	; 0x28
 80078fe:	2100      	movs	r1, #0
 8007900:	4618      	mov	r0, r3
 8007902:	f002 fb5f 	bl	8009fc4 <RCCEx_PLL3_Config>
 8007906:	4603      	mov	r3, r0
 8007908:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 800790c:	e006      	b.n	800791c <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800790e:	2301      	movs	r3, #1
 8007910:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8007914:	e002      	b.n	800791c <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8007916:	bf00      	nop
 8007918:	e000      	b.n	800791c <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 800791a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800791c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007920:	2b00      	cmp	r3, #0
 8007922:	d10a      	bne.n	800793a <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8007924:	4b4f      	ldr	r3, [pc, #316]	; (8007a64 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8007926:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007928:	f423 71e0 	bic.w	r1, r3, #448	; 0x1c0
 800792c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007930:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007932:	4a4c      	ldr	r2, [pc, #304]	; (8007a64 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8007934:	430b      	orrs	r3, r1
 8007936:	6513      	str	r3, [r2, #80]	; 0x50
 8007938:	e003      	b.n	8007942 <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800793a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800793e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8007942:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007946:	e9d3 2300 	ldrd	r2, r3, [r3]
 800794a:	f402 6380 	and.w	r3, r2, #1024	; 0x400
 800794e:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8007952:	2300      	movs	r3, #0
 8007954:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8007958:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	; 0x108
 800795c:	460b      	mov	r3, r1
 800795e:	4313      	orrs	r3, r2
 8007960:	d053      	beq.n	8007a0a <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 8007962:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007966:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800796a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800796e:	d035      	beq.n	80079dc <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 8007970:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8007974:	d82e      	bhi.n	80079d4 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8007976:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800797a:	d031      	beq.n	80079e0 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 800797c:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8007980:	d828      	bhi.n	80079d4 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8007982:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007986:	d01a      	beq.n	80079be <HAL_RCCEx_PeriphCLKConfig+0x292>
 8007988:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800798c:	d822      	bhi.n	80079d4 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 800798e:	2b00      	cmp	r3, #0
 8007990:	d003      	beq.n	800799a <HAL_RCCEx_PeriphCLKConfig+0x26e>
 8007992:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8007996:	d007      	beq.n	80079a8 <HAL_RCCEx_PeriphCLKConfig+0x27c>
 8007998:	e01c      	b.n	80079d4 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800799a:	4b32      	ldr	r3, [pc, #200]	; (8007a64 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800799c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800799e:	4a31      	ldr	r2, [pc, #196]	; (8007a64 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80079a0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80079a4:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80079a6:	e01c      	b.n	80079e2 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80079a8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80079ac:	3308      	adds	r3, #8
 80079ae:	2100      	movs	r1, #0
 80079b0:	4618      	mov	r0, r3
 80079b2:	f002 fa55 	bl	8009e60 <RCCEx_PLL2_Config>
 80079b6:	4603      	mov	r3, r0
 80079b8:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 80079bc:	e011      	b.n	80079e2 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80079be:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80079c2:	3328      	adds	r3, #40	; 0x28
 80079c4:	2100      	movs	r1, #0
 80079c6:	4618      	mov	r0, r3
 80079c8:	f002 fafc 	bl	8009fc4 <RCCEx_PLL3_Config>
 80079cc:	4603      	mov	r3, r0
 80079ce:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80079d2:	e006      	b.n	80079e2 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 80079d4:	2301      	movs	r3, #1
 80079d6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80079da:	e002      	b.n	80079e2 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 80079dc:	bf00      	nop
 80079de:	e000      	b.n	80079e2 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 80079e0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80079e2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80079e6:	2b00      	cmp	r3, #0
 80079e8:	d10b      	bne.n	8007a02 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 80079ea:	4b1e      	ldr	r3, [pc, #120]	; (8007a64 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80079ec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80079ee:	f423 0160 	bic.w	r1, r3, #14680064	; 0xe00000
 80079f2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80079f6:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80079fa:	4a1a      	ldr	r2, [pc, #104]	; (8007a64 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80079fc:	430b      	orrs	r3, r1
 80079fe:	6593      	str	r3, [r2, #88]	; 0x58
 8007a00:	e003      	b.n	8007a0a <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007a02:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007a06:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8007a0a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007a0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007a12:	f402 6300 	and.w	r3, r2, #2048	; 0x800
 8007a16:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8007a1a:	2300      	movs	r3, #0
 8007a1c:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8007a20:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	; 0x100
 8007a24:	460b      	mov	r3, r1
 8007a26:	4313      	orrs	r3, r2
 8007a28:	d056      	beq.n	8007ad8 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 8007a2a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007a2e:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8007a32:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8007a36:	d038      	beq.n	8007aaa <HAL_RCCEx_PeriphCLKConfig+0x37e>
 8007a38:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8007a3c:	d831      	bhi.n	8007aa2 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8007a3e:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8007a42:	d034      	beq.n	8007aae <HAL_RCCEx_PeriphCLKConfig+0x382>
 8007a44:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8007a48:	d82b      	bhi.n	8007aa2 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8007a4a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007a4e:	d01d      	beq.n	8007a8c <HAL_RCCEx_PeriphCLKConfig+0x360>
 8007a50:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007a54:	d825      	bhi.n	8007aa2 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8007a56:	2b00      	cmp	r3, #0
 8007a58:	d006      	beq.n	8007a68 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 8007a5a:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8007a5e:	d00a      	beq.n	8007a76 <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8007a60:	e01f      	b.n	8007aa2 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8007a62:	bf00      	nop
 8007a64:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007a68:	4ba2      	ldr	r3, [pc, #648]	; (8007cf4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8007a6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007a6c:	4aa1      	ldr	r2, [pc, #644]	; (8007cf4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8007a6e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007a72:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8007a74:	e01c      	b.n	8007ab0 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8007a76:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007a7a:	3308      	adds	r3, #8
 8007a7c:	2100      	movs	r1, #0
 8007a7e:	4618      	mov	r0, r3
 8007a80:	f002 f9ee 	bl	8009e60 <RCCEx_PLL2_Config>
 8007a84:	4603      	mov	r3, r0
 8007a86:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8007a8a:	e011      	b.n	8007ab0 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8007a8c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007a90:	3328      	adds	r3, #40	; 0x28
 8007a92:	2100      	movs	r1, #0
 8007a94:	4618      	mov	r0, r3
 8007a96:	f002 fa95 	bl	8009fc4 <RCCEx_PLL3_Config>
 8007a9a:	4603      	mov	r3, r0
 8007a9c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8007aa0:	e006      	b.n	8007ab0 <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8007aa2:	2301      	movs	r3, #1
 8007aa4:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8007aa8:	e002      	b.n	8007ab0 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8007aaa:	bf00      	nop
 8007aac:	e000      	b.n	8007ab0 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8007aae:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007ab0:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007ab4:	2b00      	cmp	r3, #0
 8007ab6:	d10b      	bne.n	8007ad0 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8007ab8:	4b8e      	ldr	r3, [pc, #568]	; (8007cf4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8007aba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007abc:	f023 61e0 	bic.w	r1, r3, #117440512	; 0x7000000
 8007ac0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007ac4:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8007ac8:	4a8a      	ldr	r2, [pc, #552]	; (8007cf4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8007aca:	430b      	orrs	r3, r1
 8007acc:	6593      	str	r3, [r2, #88]	; 0x58
 8007ace:	e003      	b.n	8007ad8 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007ad0:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007ad4:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8007ad8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007adc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ae0:	f002 7300 	and.w	r3, r2, #33554432	; 0x2000000
 8007ae4:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8007ae8:	2300      	movs	r3, #0
 8007aea:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8007aee:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	; 0xf8
 8007af2:	460b      	mov	r3, r1
 8007af4:	4313      	orrs	r3, r2
 8007af6:	d03a      	beq.n	8007b6e <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 8007af8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007afc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007afe:	2b30      	cmp	r3, #48	; 0x30
 8007b00:	d01f      	beq.n	8007b42 <HAL_RCCEx_PeriphCLKConfig+0x416>
 8007b02:	2b30      	cmp	r3, #48	; 0x30
 8007b04:	d819      	bhi.n	8007b3a <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8007b06:	2b20      	cmp	r3, #32
 8007b08:	d00c      	beq.n	8007b24 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 8007b0a:	2b20      	cmp	r3, #32
 8007b0c:	d815      	bhi.n	8007b3a <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8007b0e:	2b00      	cmp	r3, #0
 8007b10:	d019      	beq.n	8007b46 <HAL_RCCEx_PeriphCLKConfig+0x41a>
 8007b12:	2b10      	cmp	r3, #16
 8007b14:	d111      	bne.n	8007b3a <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007b16:	4b77      	ldr	r3, [pc, #476]	; (8007cf4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8007b18:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007b1a:	4a76      	ldr	r2, [pc, #472]	; (8007cf4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8007b1c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007b20:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8007b22:	e011      	b.n	8007b48 <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8007b24:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007b28:	3308      	adds	r3, #8
 8007b2a:	2102      	movs	r1, #2
 8007b2c:	4618      	mov	r0, r3
 8007b2e:	f002 f997 	bl	8009e60 <RCCEx_PLL2_Config>
 8007b32:	4603      	mov	r3, r0
 8007b34:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8007b38:	e006      	b.n	8007b48 <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8007b3a:	2301      	movs	r3, #1
 8007b3c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8007b40:	e002      	b.n	8007b48 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8007b42:	bf00      	nop
 8007b44:	e000      	b.n	8007b48 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8007b46:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007b48:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007b4c:	2b00      	cmp	r3, #0
 8007b4e:	d10a      	bne.n	8007b66 <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8007b50:	4b68      	ldr	r3, [pc, #416]	; (8007cf4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8007b52:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007b54:	f023 0130 	bic.w	r1, r3, #48	; 0x30
 8007b58:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007b5c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007b5e:	4a65      	ldr	r2, [pc, #404]	; (8007cf4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8007b60:	430b      	orrs	r3, r1
 8007b62:	64d3      	str	r3, [r2, #76]	; 0x4c
 8007b64:	e003      	b.n	8007b6e <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007b66:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007b6a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8007b6e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007b72:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b76:	f402 5380 	and.w	r3, r2, #4096	; 0x1000
 8007b7a:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8007b7e:	2300      	movs	r3, #0
 8007b80:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8007b84:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	; 0xf0
 8007b88:	460b      	mov	r3, r1
 8007b8a:	4313      	orrs	r3, r2
 8007b8c:	d051      	beq.n	8007c32 <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 8007b8e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007b92:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007b94:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007b98:	d035      	beq.n	8007c06 <HAL_RCCEx_PeriphCLKConfig+0x4da>
 8007b9a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007b9e:	d82e      	bhi.n	8007bfe <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8007ba0:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8007ba4:	d031      	beq.n	8007c0a <HAL_RCCEx_PeriphCLKConfig+0x4de>
 8007ba6:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8007baa:	d828      	bhi.n	8007bfe <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8007bac:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007bb0:	d01a      	beq.n	8007be8 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 8007bb2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007bb6:	d822      	bhi.n	8007bfe <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8007bb8:	2b00      	cmp	r3, #0
 8007bba:	d003      	beq.n	8007bc4 <HAL_RCCEx_PeriphCLKConfig+0x498>
 8007bbc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007bc0:	d007      	beq.n	8007bd2 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 8007bc2:	e01c      	b.n	8007bfe <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007bc4:	4b4b      	ldr	r3, [pc, #300]	; (8007cf4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8007bc6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007bc8:	4a4a      	ldr	r2, [pc, #296]	; (8007cf4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8007bca:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007bce:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8007bd0:	e01c      	b.n	8007c0c <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8007bd2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007bd6:	3308      	adds	r3, #8
 8007bd8:	2100      	movs	r1, #0
 8007bda:	4618      	mov	r0, r3
 8007bdc:	f002 f940 	bl	8009e60 <RCCEx_PLL2_Config>
 8007be0:	4603      	mov	r3, r0
 8007be2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8007be6:	e011      	b.n	8007c0c <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8007be8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007bec:	3328      	adds	r3, #40	; 0x28
 8007bee:	2100      	movs	r1, #0
 8007bf0:	4618      	mov	r0, r3
 8007bf2:	f002 f9e7 	bl	8009fc4 <RCCEx_PLL3_Config>
 8007bf6:	4603      	mov	r3, r0
 8007bf8:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8007bfc:	e006      	b.n	8007c0c <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007bfe:	2301      	movs	r3, #1
 8007c00:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8007c04:	e002      	b.n	8007c0c <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8007c06:	bf00      	nop
 8007c08:	e000      	b.n	8007c0c <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8007c0a:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007c0c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007c10:	2b00      	cmp	r3, #0
 8007c12:	d10a      	bne.n	8007c2a <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8007c14:	4b37      	ldr	r3, [pc, #220]	; (8007cf4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8007c16:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007c18:	f423 41e0 	bic.w	r1, r3, #28672	; 0x7000
 8007c1c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007c20:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007c22:	4a34      	ldr	r2, [pc, #208]	; (8007cf4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8007c24:	430b      	orrs	r3, r1
 8007c26:	6513      	str	r3, [r2, #80]	; 0x50
 8007c28:	e003      	b.n	8007c32 <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007c2a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007c2e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8007c32:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007c36:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c3a:	f402 5300 	and.w	r3, r2, #8192	; 0x2000
 8007c3e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8007c42:	2300      	movs	r3, #0
 8007c44:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8007c48:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	; 0xe8
 8007c4c:	460b      	mov	r3, r1
 8007c4e:	4313      	orrs	r3, r2
 8007c50:	d056      	beq.n	8007d00 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 8007c52:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007c56:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007c58:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8007c5c:	d033      	beq.n	8007cc6 <HAL_RCCEx_PeriphCLKConfig+0x59a>
 8007c5e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8007c62:	d82c      	bhi.n	8007cbe <HAL_RCCEx_PeriphCLKConfig+0x592>
 8007c64:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8007c68:	d02f      	beq.n	8007cca <HAL_RCCEx_PeriphCLKConfig+0x59e>
 8007c6a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8007c6e:	d826      	bhi.n	8007cbe <HAL_RCCEx_PeriphCLKConfig+0x592>
 8007c70:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8007c74:	d02b      	beq.n	8007cce <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 8007c76:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8007c7a:	d820      	bhi.n	8007cbe <HAL_RCCEx_PeriphCLKConfig+0x592>
 8007c7c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007c80:	d012      	beq.n	8007ca8 <HAL_RCCEx_PeriphCLKConfig+0x57c>
 8007c82:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007c86:	d81a      	bhi.n	8007cbe <HAL_RCCEx_PeriphCLKConfig+0x592>
 8007c88:	2b00      	cmp	r3, #0
 8007c8a:	d022      	beq.n	8007cd2 <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 8007c8c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007c90:	d115      	bne.n	8007cbe <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8007c92:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007c96:	3308      	adds	r3, #8
 8007c98:	2101      	movs	r1, #1
 8007c9a:	4618      	mov	r0, r3
 8007c9c:	f002 f8e0 	bl	8009e60 <RCCEx_PLL2_Config>
 8007ca0:	4603      	mov	r3, r0
 8007ca2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8007ca6:	e015      	b.n	8007cd4 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8007ca8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007cac:	3328      	adds	r3, #40	; 0x28
 8007cae:	2101      	movs	r1, #1
 8007cb0:	4618      	mov	r0, r3
 8007cb2:	f002 f987 	bl	8009fc4 <RCCEx_PLL3_Config>
 8007cb6:	4603      	mov	r3, r0
 8007cb8:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8007cbc:	e00a      	b.n	8007cd4 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007cbe:	2301      	movs	r3, #1
 8007cc0:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8007cc4:	e006      	b.n	8007cd4 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8007cc6:	bf00      	nop
 8007cc8:	e004      	b.n	8007cd4 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8007cca:	bf00      	nop
 8007ccc:	e002      	b.n	8007cd4 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8007cce:	bf00      	nop
 8007cd0:	e000      	b.n	8007cd4 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8007cd2:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007cd4:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007cd8:	2b00      	cmp	r3, #0
 8007cda:	d10d      	bne.n	8007cf8 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8007cdc:	4b05      	ldr	r3, [pc, #20]	; (8007cf4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8007cde:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007ce0:	f423 21e0 	bic.w	r1, r3, #458752	; 0x70000
 8007ce4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007ce8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007cea:	4a02      	ldr	r2, [pc, #8]	; (8007cf4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8007cec:	430b      	orrs	r3, r1
 8007cee:	6513      	str	r3, [r2, #80]	; 0x50
 8007cf0:	e006      	b.n	8007d00 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 8007cf2:	bf00      	nop
 8007cf4:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007cf8:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007cfc:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8007d00:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007d04:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007d08:	f402 4380 	and.w	r3, r2, #16384	; 0x4000
 8007d0c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8007d10:	2300      	movs	r3, #0
 8007d12:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8007d16:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	; 0xe0
 8007d1a:	460b      	mov	r3, r1
 8007d1c:	4313      	orrs	r3, r2
 8007d1e:	d055      	beq.n	8007dcc <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 8007d20:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007d24:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8007d28:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8007d2c:	d033      	beq.n	8007d96 <HAL_RCCEx_PeriphCLKConfig+0x66a>
 8007d2e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8007d32:	d82c      	bhi.n	8007d8e <HAL_RCCEx_PeriphCLKConfig+0x662>
 8007d34:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007d38:	d02f      	beq.n	8007d9a <HAL_RCCEx_PeriphCLKConfig+0x66e>
 8007d3a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007d3e:	d826      	bhi.n	8007d8e <HAL_RCCEx_PeriphCLKConfig+0x662>
 8007d40:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8007d44:	d02b      	beq.n	8007d9e <HAL_RCCEx_PeriphCLKConfig+0x672>
 8007d46:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8007d4a:	d820      	bhi.n	8007d8e <HAL_RCCEx_PeriphCLKConfig+0x662>
 8007d4c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007d50:	d012      	beq.n	8007d78 <HAL_RCCEx_PeriphCLKConfig+0x64c>
 8007d52:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007d56:	d81a      	bhi.n	8007d8e <HAL_RCCEx_PeriphCLKConfig+0x662>
 8007d58:	2b00      	cmp	r3, #0
 8007d5a:	d022      	beq.n	8007da2 <HAL_RCCEx_PeriphCLKConfig+0x676>
 8007d5c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007d60:	d115      	bne.n	8007d8e <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8007d62:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007d66:	3308      	adds	r3, #8
 8007d68:	2101      	movs	r1, #1
 8007d6a:	4618      	mov	r0, r3
 8007d6c:	f002 f878 	bl	8009e60 <RCCEx_PLL2_Config>
 8007d70:	4603      	mov	r3, r0
 8007d72:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8007d76:	e015      	b.n	8007da4 <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8007d78:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007d7c:	3328      	adds	r3, #40	; 0x28
 8007d7e:	2101      	movs	r1, #1
 8007d80:	4618      	mov	r0, r3
 8007d82:	f002 f91f 	bl	8009fc4 <RCCEx_PLL3_Config>
 8007d86:	4603      	mov	r3, r0
 8007d88:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8007d8c:	e00a      	b.n	8007da4 <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 8007d8e:	2301      	movs	r3, #1
 8007d90:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8007d94:	e006      	b.n	8007da4 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8007d96:	bf00      	nop
 8007d98:	e004      	b.n	8007da4 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8007d9a:	bf00      	nop
 8007d9c:	e002      	b.n	8007da4 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8007d9e:	bf00      	nop
 8007da0:	e000      	b.n	8007da4 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8007da2:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007da4:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007da8:	2b00      	cmp	r3, #0
 8007daa:	d10b      	bne.n	8007dc4 <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8007dac:	4ba3      	ldr	r3, [pc, #652]	; (800803c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007dae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007db0:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 8007db4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007db8:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8007dbc:	4a9f      	ldr	r2, [pc, #636]	; (800803c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007dbe:	430b      	orrs	r3, r1
 8007dc0:	6593      	str	r3, [r2, #88]	; 0x58
 8007dc2:	e003      	b.n	8007dcc <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007dc4:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007dc8:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8007dcc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007dd0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007dd4:	f402 4300 	and.w	r3, r2, #32768	; 0x8000
 8007dd8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8007ddc:	2300      	movs	r3, #0
 8007dde:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8007de2:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8007de6:	460b      	mov	r3, r1
 8007de8:	4313      	orrs	r3, r2
 8007dea:	d037      	beq.n	8007e5c <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8007dec:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007df0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007df2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007df6:	d00e      	beq.n	8007e16 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 8007df8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007dfc:	d816      	bhi.n	8007e2c <HAL_RCCEx_PeriphCLKConfig+0x700>
 8007dfe:	2b00      	cmp	r3, #0
 8007e00:	d018      	beq.n	8007e34 <HAL_RCCEx_PeriphCLKConfig+0x708>
 8007e02:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007e06:	d111      	bne.n	8007e2c <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007e08:	4b8c      	ldr	r3, [pc, #560]	; (800803c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007e0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007e0c:	4a8b      	ldr	r2, [pc, #556]	; (800803c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007e0e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007e12:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8007e14:	e00f      	b.n	8007e36 <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8007e16:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007e1a:	3308      	adds	r3, #8
 8007e1c:	2101      	movs	r1, #1
 8007e1e:	4618      	mov	r0, r3
 8007e20:	f002 f81e 	bl	8009e60 <RCCEx_PLL2_Config>
 8007e24:	4603      	mov	r3, r0
 8007e26:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8007e2a:	e004      	b.n	8007e36 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007e2c:	2301      	movs	r3, #1
 8007e2e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8007e32:	e000      	b.n	8007e36 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 8007e34:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007e36:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007e3a:	2b00      	cmp	r3, #0
 8007e3c:	d10a      	bne.n	8007e54 <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8007e3e:	4b7f      	ldr	r3, [pc, #508]	; (800803c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007e40:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007e42:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 8007e46:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007e4a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007e4c:	4a7b      	ldr	r2, [pc, #492]	; (800803c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007e4e:	430b      	orrs	r3, r1
 8007e50:	6513      	str	r3, [r2, #80]	; 0x50
 8007e52:	e003      	b.n	8007e5c <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007e54:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007e58:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8007e5c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007e60:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e64:	f002 7380 	and.w	r3, r2, #16777216	; 0x1000000
 8007e68:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8007e6c:	2300      	movs	r3, #0
 8007e6e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8007e72:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	; 0xd0
 8007e76:	460b      	mov	r3, r1
 8007e78:	4313      	orrs	r3, r2
 8007e7a:	d039      	beq.n	8007ef0 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8007e7c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007e80:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007e82:	2b03      	cmp	r3, #3
 8007e84:	d81c      	bhi.n	8007ec0 <HAL_RCCEx_PeriphCLKConfig+0x794>
 8007e86:	a201      	add	r2, pc, #4	; (adr r2, 8007e8c <HAL_RCCEx_PeriphCLKConfig+0x760>)
 8007e88:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007e8c:	08007ec9 	.word	0x08007ec9
 8007e90:	08007e9d 	.word	0x08007e9d
 8007e94:	08007eab 	.word	0x08007eab
 8007e98:	08007ec9 	.word	0x08007ec9
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007e9c:	4b67      	ldr	r3, [pc, #412]	; (800803c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007e9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007ea0:	4a66      	ldr	r2, [pc, #408]	; (800803c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007ea2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007ea6:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8007ea8:	e00f      	b.n	8007eca <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8007eaa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007eae:	3308      	adds	r3, #8
 8007eb0:	2102      	movs	r1, #2
 8007eb2:	4618      	mov	r0, r3
 8007eb4:	f001 ffd4 	bl	8009e60 <RCCEx_PLL2_Config>
 8007eb8:	4603      	mov	r3, r0
 8007eba:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 8007ebe:	e004      	b.n	8007eca <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8007ec0:	2301      	movs	r3, #1
 8007ec2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8007ec6:	e000      	b.n	8007eca <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 8007ec8:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007eca:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007ece:	2b00      	cmp	r3, #0
 8007ed0:	d10a      	bne.n	8007ee8 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8007ed2:	4b5a      	ldr	r3, [pc, #360]	; (800803c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007ed4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007ed6:	f023 0103 	bic.w	r1, r3, #3
 8007eda:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007ede:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007ee0:	4a56      	ldr	r2, [pc, #344]	; (800803c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007ee2:	430b      	orrs	r3, r1
 8007ee4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8007ee6:	e003      	b.n	8007ef0 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007ee8:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007eec:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8007ef0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007ef4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ef8:	f402 0380 	and.w	r3, r2, #4194304	; 0x400000
 8007efc:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8007f00:	2300      	movs	r3, #0
 8007f02:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8007f06:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	; 0xc8
 8007f0a:	460b      	mov	r3, r1
 8007f0c:	4313      	orrs	r3, r2
 8007f0e:	f000 809f 	beq.w	8008050 <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8007f12:	4b4b      	ldr	r3, [pc, #300]	; (8008040 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8007f14:	681b      	ldr	r3, [r3, #0]
 8007f16:	4a4a      	ldr	r2, [pc, #296]	; (8008040 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8007f18:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007f1c:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8007f1e:	f7fa fe71 	bl	8002c04 <HAL_GetTick>
 8007f22:	f8c7 0120 	str.w	r0, [r7, #288]	; 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8007f26:	e00b      	b.n	8007f40 <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007f28:	f7fa fe6c 	bl	8002c04 <HAL_GetTick>
 8007f2c:	4602      	mov	r2, r0
 8007f2e:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8007f32:	1ad3      	subs	r3, r2, r3
 8007f34:	2b64      	cmp	r3, #100	; 0x64
 8007f36:	d903      	bls.n	8007f40 <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 8007f38:	2303      	movs	r3, #3
 8007f3a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8007f3e:	e005      	b.n	8007f4c <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8007f40:	4b3f      	ldr	r3, [pc, #252]	; (8008040 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8007f42:	681b      	ldr	r3, [r3, #0]
 8007f44:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007f48:	2b00      	cmp	r3, #0
 8007f4a:	d0ed      	beq.n	8007f28 <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 8007f4c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007f50:	2b00      	cmp	r3, #0
 8007f52:	d179      	bne.n	8008048 <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8007f54:	4b39      	ldr	r3, [pc, #228]	; (800803c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007f56:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8007f58:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007f5c:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8007f60:	4053      	eors	r3, r2
 8007f62:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007f66:	2b00      	cmp	r3, #0
 8007f68:	d015      	beq.n	8007f96 <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8007f6a:	4b34      	ldr	r3, [pc, #208]	; (800803c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007f6c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007f6e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007f72:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8007f76:	4b31      	ldr	r3, [pc, #196]	; (800803c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007f78:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007f7a:	4a30      	ldr	r2, [pc, #192]	; (800803c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007f7c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007f80:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8007f82:	4b2e      	ldr	r3, [pc, #184]	; (800803c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007f84:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007f86:	4a2d      	ldr	r2, [pc, #180]	; (800803c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007f88:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007f8c:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8007f8e:	4a2b      	ldr	r2, [pc, #172]	; (800803c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007f90:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8007f94:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8007f96:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007f9a:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8007f9e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007fa2:	d118      	bne.n	8007fd6 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007fa4:	f7fa fe2e 	bl	8002c04 <HAL_GetTick>
 8007fa8:	f8c7 0120 	str.w	r0, [r7, #288]	; 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8007fac:	e00d      	b.n	8007fca <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007fae:	f7fa fe29 	bl	8002c04 <HAL_GetTick>
 8007fb2:	4602      	mov	r2, r0
 8007fb4:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8007fb8:	1ad2      	subs	r2, r2, r3
 8007fba:	f241 3388 	movw	r3, #5000	; 0x1388
 8007fbe:	429a      	cmp	r2, r3
 8007fc0:	d903      	bls.n	8007fca <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 8007fc2:	2303      	movs	r3, #3
 8007fc4:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
            break;
 8007fc8:	e005      	b.n	8007fd6 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8007fca:	4b1c      	ldr	r3, [pc, #112]	; (800803c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007fcc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007fce:	f003 0302 	and.w	r3, r3, #2
 8007fd2:	2b00      	cmp	r3, #0
 8007fd4:	d0eb      	beq.n	8007fae <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 8007fd6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8007fda:	2b00      	cmp	r3, #0
 8007fdc:	d129      	bne.n	8008032 <HAL_RCCEx_PeriphCLKConfig+0x906>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8007fde:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007fe2:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8007fe6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007fea:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007fee:	d10e      	bne.n	800800e <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 8007ff0:	4b12      	ldr	r3, [pc, #72]	; (800803c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8007ff2:	691b      	ldr	r3, [r3, #16]
 8007ff4:	f423 517c 	bic.w	r1, r3, #16128	; 0x3f00
 8007ff8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8007ffc:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8008000:	091a      	lsrs	r2, r3, #4
 8008002:	4b10      	ldr	r3, [pc, #64]	; (8008044 <HAL_RCCEx_PeriphCLKConfig+0x918>)
 8008004:	4013      	ands	r3, r2
 8008006:	4a0d      	ldr	r2, [pc, #52]	; (800803c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8008008:	430b      	orrs	r3, r1
 800800a:	6113      	str	r3, [r2, #16]
 800800c:	e005      	b.n	800801a <HAL_RCCEx_PeriphCLKConfig+0x8ee>
 800800e:	4b0b      	ldr	r3, [pc, #44]	; (800803c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8008010:	691b      	ldr	r3, [r3, #16]
 8008012:	4a0a      	ldr	r2, [pc, #40]	; (800803c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8008014:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8008018:	6113      	str	r3, [r2, #16]
 800801a:	4b08      	ldr	r3, [pc, #32]	; (800803c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800801c:	6f19      	ldr	r1, [r3, #112]	; 0x70
 800801e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008022:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8008026:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800802a:	4a04      	ldr	r2, [pc, #16]	; (800803c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800802c:	430b      	orrs	r3, r1
 800802e:	6713      	str	r3, [r2, #112]	; 0x70
 8008030:	e00e      	b.n	8008050 <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8008032:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008036:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
 800803a:	e009      	b.n	8008050 <HAL_RCCEx_PeriphCLKConfig+0x924>
 800803c:	58024400 	.word	0x58024400
 8008040:	58024800 	.word	0x58024800
 8008044:	00ffffcf 	.word	0x00ffffcf
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008048:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800804c:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8008050:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008054:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008058:	f002 0301 	and.w	r3, r2, #1
 800805c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8008060:	2300      	movs	r3, #0
 8008062:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8008066:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800806a:	460b      	mov	r3, r1
 800806c:	4313      	orrs	r3, r2
 800806e:	f000 8089 	beq.w	8008184 <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 8008072:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008076:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008078:	2b28      	cmp	r3, #40	; 0x28
 800807a:	d86b      	bhi.n	8008154 <HAL_RCCEx_PeriphCLKConfig+0xa28>
 800807c:	a201      	add	r2, pc, #4	; (adr r2, 8008084 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 800807e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008082:	bf00      	nop
 8008084:	0800815d 	.word	0x0800815d
 8008088:	08008155 	.word	0x08008155
 800808c:	08008155 	.word	0x08008155
 8008090:	08008155 	.word	0x08008155
 8008094:	08008155 	.word	0x08008155
 8008098:	08008155 	.word	0x08008155
 800809c:	08008155 	.word	0x08008155
 80080a0:	08008155 	.word	0x08008155
 80080a4:	08008129 	.word	0x08008129
 80080a8:	08008155 	.word	0x08008155
 80080ac:	08008155 	.word	0x08008155
 80080b0:	08008155 	.word	0x08008155
 80080b4:	08008155 	.word	0x08008155
 80080b8:	08008155 	.word	0x08008155
 80080bc:	08008155 	.word	0x08008155
 80080c0:	08008155 	.word	0x08008155
 80080c4:	0800813f 	.word	0x0800813f
 80080c8:	08008155 	.word	0x08008155
 80080cc:	08008155 	.word	0x08008155
 80080d0:	08008155 	.word	0x08008155
 80080d4:	08008155 	.word	0x08008155
 80080d8:	08008155 	.word	0x08008155
 80080dc:	08008155 	.word	0x08008155
 80080e0:	08008155 	.word	0x08008155
 80080e4:	0800815d 	.word	0x0800815d
 80080e8:	08008155 	.word	0x08008155
 80080ec:	08008155 	.word	0x08008155
 80080f0:	08008155 	.word	0x08008155
 80080f4:	08008155 	.word	0x08008155
 80080f8:	08008155 	.word	0x08008155
 80080fc:	08008155 	.word	0x08008155
 8008100:	08008155 	.word	0x08008155
 8008104:	0800815d 	.word	0x0800815d
 8008108:	08008155 	.word	0x08008155
 800810c:	08008155 	.word	0x08008155
 8008110:	08008155 	.word	0x08008155
 8008114:	08008155 	.word	0x08008155
 8008118:	08008155 	.word	0x08008155
 800811c:	08008155 	.word	0x08008155
 8008120:	08008155 	.word	0x08008155
 8008124:	0800815d 	.word	0x0800815d
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8008128:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800812c:	3308      	adds	r3, #8
 800812e:	2101      	movs	r1, #1
 8008130:	4618      	mov	r0, r3
 8008132:	f001 fe95 	bl	8009e60 <RCCEx_PLL2_Config>
 8008136:	4603      	mov	r3, r0
 8008138:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 800813c:	e00f      	b.n	800815e <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800813e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008142:	3328      	adds	r3, #40	; 0x28
 8008144:	2101      	movs	r1, #1
 8008146:	4618      	mov	r0, r3
 8008148:	f001 ff3c 	bl	8009fc4 <RCCEx_PLL3_Config>
 800814c:	4603      	mov	r3, r0
 800814e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8008152:	e004      	b.n	800815e <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008154:	2301      	movs	r3, #1
 8008156:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800815a:	e000      	b.n	800815e <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 800815c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800815e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008162:	2b00      	cmp	r3, #0
 8008164:	d10a      	bne.n	800817c <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8008166:	4bbf      	ldr	r3, [pc, #764]	; (8008464 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8008168:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800816a:	f023 0138 	bic.w	r1, r3, #56	; 0x38
 800816e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008172:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008174:	4abb      	ldr	r2, [pc, #748]	; (8008464 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8008176:	430b      	orrs	r3, r1
 8008178:	6553      	str	r3, [r2, #84]	; 0x54
 800817a:	e003      	b.n	8008184 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800817c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008180:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8008184:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008188:	e9d3 2300 	ldrd	r2, r3, [r3]
 800818c:	f002 0302 	and.w	r3, r2, #2
 8008190:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8008194:	2300      	movs	r3, #0
 8008196:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 800819a:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	; 0xb8
 800819e:	460b      	mov	r3, r1
 80081a0:	4313      	orrs	r3, r2
 80081a2:	d041      	beq.n	8008228 <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 80081a4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80081a8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80081aa:	2b05      	cmp	r3, #5
 80081ac:	d824      	bhi.n	80081f8 <HAL_RCCEx_PeriphCLKConfig+0xacc>
 80081ae:	a201      	add	r2, pc, #4	; (adr r2, 80081b4 <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 80081b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80081b4:	08008201 	.word	0x08008201
 80081b8:	080081cd 	.word	0x080081cd
 80081bc:	080081e3 	.word	0x080081e3
 80081c0:	08008201 	.word	0x08008201
 80081c4:	08008201 	.word	0x08008201
 80081c8:	08008201 	.word	0x08008201
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80081cc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80081d0:	3308      	adds	r3, #8
 80081d2:	2101      	movs	r1, #1
 80081d4:	4618      	mov	r0, r3
 80081d6:	f001 fe43 	bl	8009e60 <RCCEx_PLL2_Config>
 80081da:	4603      	mov	r3, r0
 80081dc:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 80081e0:	e00f      	b.n	8008202 <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80081e2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80081e6:	3328      	adds	r3, #40	; 0x28
 80081e8:	2101      	movs	r1, #1
 80081ea:	4618      	mov	r0, r3
 80081ec:	f001 feea 	bl	8009fc4 <RCCEx_PLL3_Config>
 80081f0:	4603      	mov	r3, r0
 80081f2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 80081f6:	e004      	b.n	8008202 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80081f8:	2301      	movs	r3, #1
 80081fa:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80081fe:	e000      	b.n	8008202 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 8008200:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008202:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008206:	2b00      	cmp	r3, #0
 8008208:	d10a      	bne.n	8008220 <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 800820a:	4b96      	ldr	r3, [pc, #600]	; (8008464 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800820c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800820e:	f023 0107 	bic.w	r1, r3, #7
 8008212:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008216:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008218:	4a92      	ldr	r2, [pc, #584]	; (8008464 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800821a:	430b      	orrs	r3, r1
 800821c:	6553      	str	r3, [r2, #84]	; 0x54
 800821e:	e003      	b.n	8008228 <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008220:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008224:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8008228:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800822c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008230:	f002 0304 	and.w	r3, r2, #4
 8008234:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8008238:	2300      	movs	r3, #0
 800823a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800823e:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	; 0xb0
 8008242:	460b      	mov	r3, r1
 8008244:	4313      	orrs	r3, r2
 8008246:	d044      	beq.n	80082d2 <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8008248:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800824c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8008250:	2b05      	cmp	r3, #5
 8008252:	d825      	bhi.n	80082a0 <HAL_RCCEx_PeriphCLKConfig+0xb74>
 8008254:	a201      	add	r2, pc, #4	; (adr r2, 800825c <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 8008256:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800825a:	bf00      	nop
 800825c:	080082a9 	.word	0x080082a9
 8008260:	08008275 	.word	0x08008275
 8008264:	0800828b 	.word	0x0800828b
 8008268:	080082a9 	.word	0x080082a9
 800826c:	080082a9 	.word	0x080082a9
 8008270:	080082a9 	.word	0x080082a9
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8008274:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008278:	3308      	adds	r3, #8
 800827a:	2101      	movs	r1, #1
 800827c:	4618      	mov	r0, r3
 800827e:	f001 fdef 	bl	8009e60 <RCCEx_PLL2_Config>
 8008282:	4603      	mov	r3, r0
 8008284:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8008288:	e00f      	b.n	80082aa <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800828a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800828e:	3328      	adds	r3, #40	; 0x28
 8008290:	2101      	movs	r1, #1
 8008292:	4618      	mov	r0, r3
 8008294:	f001 fe96 	bl	8009fc4 <RCCEx_PLL3_Config>
 8008298:	4603      	mov	r3, r0
 800829a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800829e:	e004      	b.n	80082aa <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80082a0:	2301      	movs	r3, #1
 80082a2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80082a6:	e000      	b.n	80082aa <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 80082a8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80082aa:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80082ae:	2b00      	cmp	r3, #0
 80082b0:	d10b      	bne.n	80082ca <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80082b2:	4b6c      	ldr	r3, [pc, #432]	; (8008464 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80082b4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80082b6:	f023 0107 	bic.w	r1, r3, #7
 80082ba:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80082be:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80082c2:	4a68      	ldr	r2, [pc, #416]	; (8008464 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80082c4:	430b      	orrs	r3, r1
 80082c6:	6593      	str	r3, [r2, #88]	; 0x58
 80082c8:	e003      	b.n	80082d2 <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80082ca:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80082ce:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80082d2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80082d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80082da:	f002 0320 	and.w	r3, r2, #32
 80082de:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80082e2:	2300      	movs	r3, #0
 80082e4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80082e8:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 80082ec:	460b      	mov	r3, r1
 80082ee:	4313      	orrs	r3, r2
 80082f0:	d055      	beq.n	800839e <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 80082f2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80082f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80082fa:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80082fe:	d033      	beq.n	8008368 <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 8008300:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8008304:	d82c      	bhi.n	8008360 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8008306:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800830a:	d02f      	beq.n	800836c <HAL_RCCEx_PeriphCLKConfig+0xc40>
 800830c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008310:	d826      	bhi.n	8008360 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8008312:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8008316:	d02b      	beq.n	8008370 <HAL_RCCEx_PeriphCLKConfig+0xc44>
 8008318:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800831c:	d820      	bhi.n	8008360 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800831e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008322:	d012      	beq.n	800834a <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 8008324:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008328:	d81a      	bhi.n	8008360 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800832a:	2b00      	cmp	r3, #0
 800832c:	d022      	beq.n	8008374 <HAL_RCCEx_PeriphCLKConfig+0xc48>
 800832e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008332:	d115      	bne.n	8008360 <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8008334:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008338:	3308      	adds	r3, #8
 800833a:	2100      	movs	r1, #0
 800833c:	4618      	mov	r0, r3
 800833e:	f001 fd8f 	bl	8009e60 <RCCEx_PLL2_Config>
 8008342:	4603      	mov	r3, r0
 8008344:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8008348:	e015      	b.n	8008376 <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800834a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800834e:	3328      	adds	r3, #40	; 0x28
 8008350:	2102      	movs	r1, #2
 8008352:	4618      	mov	r0, r3
 8008354:	f001 fe36 	bl	8009fc4 <RCCEx_PLL3_Config>
 8008358:	4603      	mov	r3, r0
 800835a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800835e:	e00a      	b.n	8008376 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008360:	2301      	movs	r3, #1
 8008362:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8008366:	e006      	b.n	8008376 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8008368:	bf00      	nop
 800836a:	e004      	b.n	8008376 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 800836c:	bf00      	nop
 800836e:	e002      	b.n	8008376 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8008370:	bf00      	nop
 8008372:	e000      	b.n	8008376 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8008374:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008376:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800837a:	2b00      	cmp	r3, #0
 800837c:	d10b      	bne.n	8008396 <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800837e:	4b39      	ldr	r3, [pc, #228]	; (8008464 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8008380:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008382:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 8008386:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800838a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800838e:	4a35      	ldr	r2, [pc, #212]	; (8008464 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8008390:	430b      	orrs	r3, r1
 8008392:	6553      	str	r3, [r2, #84]	; 0x54
 8008394:	e003      	b.n	800839e <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008396:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800839a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 800839e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80083a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80083a6:	f002 0340 	and.w	r3, r2, #64	; 0x40
 80083aa:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80083ae:	2300      	movs	r3, #0
 80083b0:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 80083b4:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	; 0xa0
 80083b8:	460b      	mov	r3, r1
 80083ba:	4313      	orrs	r3, r2
 80083bc:	d058      	beq.n	8008470 <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 80083be:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80083c2:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80083c6:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 80083ca:	d033      	beq.n	8008434 <HAL_RCCEx_PeriphCLKConfig+0xd08>
 80083cc:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 80083d0:	d82c      	bhi.n	800842c <HAL_RCCEx_PeriphCLKConfig+0xd00>
 80083d2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80083d6:	d02f      	beq.n	8008438 <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 80083d8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80083dc:	d826      	bhi.n	800842c <HAL_RCCEx_PeriphCLKConfig+0xd00>
 80083de:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80083e2:	d02b      	beq.n	800843c <HAL_RCCEx_PeriphCLKConfig+0xd10>
 80083e4:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80083e8:	d820      	bhi.n	800842c <HAL_RCCEx_PeriphCLKConfig+0xd00>
 80083ea:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80083ee:	d012      	beq.n	8008416 <HAL_RCCEx_PeriphCLKConfig+0xcea>
 80083f0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80083f4:	d81a      	bhi.n	800842c <HAL_RCCEx_PeriphCLKConfig+0xd00>
 80083f6:	2b00      	cmp	r3, #0
 80083f8:	d022      	beq.n	8008440 <HAL_RCCEx_PeriphCLKConfig+0xd14>
 80083fa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80083fe:	d115      	bne.n	800842c <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8008400:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008404:	3308      	adds	r3, #8
 8008406:	2100      	movs	r1, #0
 8008408:	4618      	mov	r0, r3
 800840a:	f001 fd29 	bl	8009e60 <RCCEx_PLL2_Config>
 800840e:	4603      	mov	r3, r0
 8008410:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8008414:	e015      	b.n	8008442 <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8008416:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800841a:	3328      	adds	r3, #40	; 0x28
 800841c:	2102      	movs	r1, #2
 800841e:	4618      	mov	r0, r3
 8008420:	f001 fdd0 	bl	8009fc4 <RCCEx_PLL3_Config>
 8008424:	4603      	mov	r3, r0
 8008426:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800842a:	e00a      	b.n	8008442 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800842c:	2301      	movs	r3, #1
 800842e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8008432:	e006      	b.n	8008442 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8008434:	bf00      	nop
 8008436:	e004      	b.n	8008442 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8008438:	bf00      	nop
 800843a:	e002      	b.n	8008442 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 800843c:	bf00      	nop
 800843e:	e000      	b.n	8008442 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8008440:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008442:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008446:	2b00      	cmp	r3, #0
 8008448:	d10e      	bne.n	8008468 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800844a:	4b06      	ldr	r3, [pc, #24]	; (8008464 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800844c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800844e:	f423 51e0 	bic.w	r1, r3, #7168	; 0x1c00
 8008452:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008456:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800845a:	4a02      	ldr	r2, [pc, #8]	; (8008464 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800845c:	430b      	orrs	r3, r1
 800845e:	6593      	str	r3, [r2, #88]	; 0x58
 8008460:	e006      	b.n	8008470 <HAL_RCCEx_PeriphCLKConfig+0xd44>
 8008462:	bf00      	nop
 8008464:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008468:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800846c:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8008470:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008474:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008478:	f002 0380 	and.w	r3, r2, #128	; 0x80
 800847c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8008480:	2300      	movs	r3, #0
 8008482:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8008486:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	; 0x98
 800848a:	460b      	mov	r3, r1
 800848c:	4313      	orrs	r3, r2
 800848e:	d055      	beq.n	800853c <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 8008490:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008494:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8008498:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800849c:	d033      	beq.n	8008506 <HAL_RCCEx_PeriphCLKConfig+0xdda>
 800849e:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 80084a2:	d82c      	bhi.n	80084fe <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 80084a4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80084a8:	d02f      	beq.n	800850a <HAL_RCCEx_PeriphCLKConfig+0xdde>
 80084aa:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80084ae:	d826      	bhi.n	80084fe <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 80084b0:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 80084b4:	d02b      	beq.n	800850e <HAL_RCCEx_PeriphCLKConfig+0xde2>
 80084b6:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 80084ba:	d820      	bhi.n	80084fe <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 80084bc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80084c0:	d012      	beq.n	80084e8 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 80084c2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80084c6:	d81a      	bhi.n	80084fe <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 80084c8:	2b00      	cmp	r3, #0
 80084ca:	d022      	beq.n	8008512 <HAL_RCCEx_PeriphCLKConfig+0xde6>
 80084cc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80084d0:	d115      	bne.n	80084fe <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80084d2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80084d6:	3308      	adds	r3, #8
 80084d8:	2100      	movs	r1, #0
 80084da:	4618      	mov	r0, r3
 80084dc:	f001 fcc0 	bl	8009e60 <RCCEx_PLL2_Config>
 80084e0:	4603      	mov	r3, r0
 80084e2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 80084e6:	e015      	b.n	8008514 <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80084e8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80084ec:	3328      	adds	r3, #40	; 0x28
 80084ee:	2102      	movs	r1, #2
 80084f0:	4618      	mov	r0, r3
 80084f2:	f001 fd67 	bl	8009fc4 <RCCEx_PLL3_Config>
 80084f6:	4603      	mov	r3, r0
 80084f8:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 80084fc:	e00a      	b.n	8008514 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80084fe:	2301      	movs	r3, #1
 8008500:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8008504:	e006      	b.n	8008514 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8008506:	bf00      	nop
 8008508:	e004      	b.n	8008514 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800850a:	bf00      	nop
 800850c:	e002      	b.n	8008514 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800850e:	bf00      	nop
 8008510:	e000      	b.n	8008514 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8008512:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008514:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008518:	2b00      	cmp	r3, #0
 800851a:	d10b      	bne.n	8008534 <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 800851c:	4ba1      	ldr	r3, [pc, #644]	; (80087a4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800851e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008520:	f423 4160 	bic.w	r1, r3, #57344	; 0xe000
 8008524:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008528:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800852c:	4a9d      	ldr	r2, [pc, #628]	; (80087a4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800852e:	430b      	orrs	r3, r1
 8008530:	6593      	str	r3, [r2, #88]	; 0x58
 8008532:	e003      	b.n	800853c <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008534:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008538:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 800853c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008540:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008544:	f002 0308 	and.w	r3, r2, #8
 8008548:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800854c:	2300      	movs	r3, #0
 800854e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8008552:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	; 0x90
 8008556:	460b      	mov	r3, r1
 8008558:	4313      	orrs	r3, r2
 800855a:	d01e      	beq.n	800859a <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 800855c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008560:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008564:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008568:	d10c      	bne.n	8008584 <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800856a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800856e:	3328      	adds	r3, #40	; 0x28
 8008570:	2102      	movs	r1, #2
 8008572:	4618      	mov	r0, r3
 8008574:	f001 fd26 	bl	8009fc4 <RCCEx_PLL3_Config>
 8008578:	4603      	mov	r3, r0
 800857a:	2b00      	cmp	r3, #0
 800857c:	d002      	beq.n	8008584 <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 800857e:	2301      	movs	r3, #1
 8008580:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8008584:	4b87      	ldr	r3, [pc, #540]	; (80087a4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8008586:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008588:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800858c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008590:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008594:	4a83      	ldr	r2, [pc, #524]	; (80087a4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8008596:	430b      	orrs	r3, r1
 8008598:	6553      	str	r3, [r2, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800859a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800859e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80085a2:	f002 0310 	and.w	r3, r2, #16
 80085a6:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80085aa:	2300      	movs	r3, #0
 80085ac:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 80085b0:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	; 0x88
 80085b4:	460b      	mov	r3, r1
 80085b6:	4313      	orrs	r3, r2
 80085b8:	d01e      	beq.n	80085f8 <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 80085ba:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80085be:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80085c2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80085c6:	d10c      	bne.n	80085e2 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80085c8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80085cc:	3328      	adds	r3, #40	; 0x28
 80085ce:	2102      	movs	r1, #2
 80085d0:	4618      	mov	r0, r3
 80085d2:	f001 fcf7 	bl	8009fc4 <RCCEx_PLL3_Config>
 80085d6:	4603      	mov	r3, r0
 80085d8:	2b00      	cmp	r3, #0
 80085da:	d002      	beq.n	80085e2 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 80085dc:	2301      	movs	r3, #1
 80085de:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80085e2:	4b70      	ldr	r3, [pc, #448]	; (80087a4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80085e4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80085e6:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80085ea:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80085ee:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80085f2:	4a6c      	ldr	r2, [pc, #432]	; (80087a4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80085f4:	430b      	orrs	r3, r1
 80085f6:	6593      	str	r3, [r2, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80085f8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80085fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008600:	f402 2300 	and.w	r3, r2, #524288	; 0x80000
 8008604:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8008608:	2300      	movs	r3, #0
 800860a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800860e:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	; 0x80
 8008612:	460b      	mov	r3, r1
 8008614:	4313      	orrs	r3, r2
 8008616:	d03e      	beq.n	8008696 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 8008618:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800861c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8008620:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008624:	d022      	beq.n	800866c <HAL_RCCEx_PeriphCLKConfig+0xf40>
 8008626:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800862a:	d81b      	bhi.n	8008664 <HAL_RCCEx_PeriphCLKConfig+0xf38>
 800862c:	2b00      	cmp	r3, #0
 800862e:	d003      	beq.n	8008638 <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 8008630:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008634:	d00b      	beq.n	800864e <HAL_RCCEx_PeriphCLKConfig+0xf22>
 8008636:	e015      	b.n	8008664 <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8008638:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800863c:	3308      	adds	r3, #8
 800863e:	2100      	movs	r1, #0
 8008640:	4618      	mov	r0, r3
 8008642:	f001 fc0d 	bl	8009e60 <RCCEx_PLL2_Config>
 8008646:	4603      	mov	r3, r0
 8008648:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 800864c:	e00f      	b.n	800866e <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800864e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008652:	3328      	adds	r3, #40	; 0x28
 8008654:	2102      	movs	r1, #2
 8008656:	4618      	mov	r0, r3
 8008658:	f001 fcb4 	bl	8009fc4 <RCCEx_PLL3_Config>
 800865c:	4603      	mov	r3, r0
 800865e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 8008662:	e004      	b.n	800866e <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008664:	2301      	movs	r3, #1
 8008666:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800866a:	e000      	b.n	800866e <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 800866c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800866e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008672:	2b00      	cmp	r3, #0
 8008674:	d10b      	bne.n	800868e <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8008676:	4b4b      	ldr	r3, [pc, #300]	; (80087a4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8008678:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800867a:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 800867e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008682:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8008686:	4a47      	ldr	r2, [pc, #284]	; (80087a4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8008688:	430b      	orrs	r3, r1
 800868a:	6593      	str	r3, [r2, #88]	; 0x58
 800868c:	e003      	b.n	8008696 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800868e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008692:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8008696:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800869a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800869e:	f402 2380 	and.w	r3, r2, #262144	; 0x40000
 80086a2:	67bb      	str	r3, [r7, #120]	; 0x78
 80086a4:	2300      	movs	r3, #0
 80086a6:	67fb      	str	r3, [r7, #124]	; 0x7c
 80086a8:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	; 0x78
 80086ac:	460b      	mov	r3, r1
 80086ae:	4313      	orrs	r3, r2
 80086b0:	d03b      	beq.n	800872a <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 80086b2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80086b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80086ba:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80086be:	d01f      	beq.n	8008700 <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 80086c0:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80086c4:	d818      	bhi.n	80086f8 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 80086c6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80086ca:	d003      	beq.n	80086d4 <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 80086cc:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80086d0:	d007      	beq.n	80086e2 <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 80086d2:	e011      	b.n	80086f8 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80086d4:	4b33      	ldr	r3, [pc, #204]	; (80087a4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80086d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80086d8:	4a32      	ldr	r2, [pc, #200]	; (80087a4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80086da:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80086de:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 80086e0:	e00f      	b.n	8008702 <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80086e2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80086e6:	3328      	adds	r3, #40	; 0x28
 80086e8:	2101      	movs	r1, #1
 80086ea:	4618      	mov	r0, r3
 80086ec:	f001 fc6a 	bl	8009fc4 <RCCEx_PLL3_Config>
 80086f0:	4603      	mov	r3, r0
 80086f2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 80086f6:	e004      	b.n	8008702 <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80086f8:	2301      	movs	r3, #1
 80086fa:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80086fe:	e000      	b.n	8008702 <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 8008700:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008702:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008706:	2b00      	cmp	r3, #0
 8008708:	d10b      	bne.n	8008722 <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800870a:	4b26      	ldr	r3, [pc, #152]	; (80087a4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800870c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800870e:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 8008712:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008716:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800871a:	4a22      	ldr	r2, [pc, #136]	; (80087a4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800871c:	430b      	orrs	r3, r1
 800871e:	6553      	str	r3, [r2, #84]	; 0x54
 8008720:	e003      	b.n	800872a <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008722:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008726:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800872a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800872e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008732:	f402 3380 	and.w	r3, r2, #65536	; 0x10000
 8008736:	673b      	str	r3, [r7, #112]	; 0x70
 8008738:	2300      	movs	r3, #0
 800873a:	677b      	str	r3, [r7, #116]	; 0x74
 800873c:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	; 0x70
 8008740:	460b      	mov	r3, r1
 8008742:	4313      	orrs	r3, r2
 8008744:	d034      	beq.n	80087b0 <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 8008746:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800874a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800874c:	2b00      	cmp	r3, #0
 800874e:	d003      	beq.n	8008758 <HAL_RCCEx_PeriphCLKConfig+0x102c>
 8008750:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008754:	d007      	beq.n	8008766 <HAL_RCCEx_PeriphCLKConfig+0x103a>
 8008756:	e011      	b.n	800877c <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008758:	4b12      	ldr	r3, [pc, #72]	; (80087a4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800875a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800875c:	4a11      	ldr	r2, [pc, #68]	; (80087a4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800875e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008762:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8008764:	e00e      	b.n	8008784 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8008766:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800876a:	3308      	adds	r3, #8
 800876c:	2102      	movs	r1, #2
 800876e:	4618      	mov	r0, r3
 8008770:	f001 fb76 	bl	8009e60 <RCCEx_PLL2_Config>
 8008774:	4603      	mov	r3, r0
 8008776:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800877a:	e003      	b.n	8008784 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 800877c:	2301      	movs	r3, #1
 800877e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8008782:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008784:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008788:	2b00      	cmp	r3, #0
 800878a:	d10d      	bne.n	80087a8 <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 800878c:	4b05      	ldr	r3, [pc, #20]	; (80087a4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800878e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008790:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8008794:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008798:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800879a:	4a02      	ldr	r2, [pc, #8]	; (80087a4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800879c:	430b      	orrs	r3, r1
 800879e:	64d3      	str	r3, [r2, #76]	; 0x4c
 80087a0:	e006      	b.n	80087b0 <HAL_RCCEx_PeriphCLKConfig+0x1084>
 80087a2:	bf00      	nop
 80087a4:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80087a8:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80087ac:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80087b0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80087b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80087b8:	f002 5300 	and.w	r3, r2, #536870912	; 0x20000000
 80087bc:	66bb      	str	r3, [r7, #104]	; 0x68
 80087be:	2300      	movs	r3, #0
 80087c0:	66fb      	str	r3, [r7, #108]	; 0x6c
 80087c2:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	; 0x68
 80087c6:	460b      	mov	r3, r1
 80087c8:	4313      	orrs	r3, r2
 80087ca:	d00c      	beq.n	80087e6 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80087cc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80087d0:	3328      	adds	r3, #40	; 0x28
 80087d2:	2102      	movs	r1, #2
 80087d4:	4618      	mov	r0, r3
 80087d6:	f001 fbf5 	bl	8009fc4 <RCCEx_PLL3_Config>
 80087da:	4603      	mov	r3, r0
 80087dc:	2b00      	cmp	r3, #0
 80087de:	d002      	beq.n	80087e6 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 80087e0:	2301      	movs	r3, #1
 80087e2:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 80087e6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80087ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80087ee:	f402 3300 	and.w	r3, r2, #131072	; 0x20000
 80087f2:	663b      	str	r3, [r7, #96]	; 0x60
 80087f4:	2300      	movs	r3, #0
 80087f6:	667b      	str	r3, [r7, #100]	; 0x64
 80087f8:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	; 0x60
 80087fc:	460b      	mov	r3, r1
 80087fe:	4313      	orrs	r3, r2
 8008800:	d038      	beq.n	8008874 <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 8008802:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008806:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800880a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800880e:	d018      	beq.n	8008842 <HAL_RCCEx_PeriphCLKConfig+0x1116>
 8008810:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008814:	d811      	bhi.n	800883a <HAL_RCCEx_PeriphCLKConfig+0x110e>
 8008816:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800881a:	d014      	beq.n	8008846 <HAL_RCCEx_PeriphCLKConfig+0x111a>
 800881c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008820:	d80b      	bhi.n	800883a <HAL_RCCEx_PeriphCLKConfig+0x110e>
 8008822:	2b00      	cmp	r3, #0
 8008824:	d011      	beq.n	800884a <HAL_RCCEx_PeriphCLKConfig+0x111e>
 8008826:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800882a:	d106      	bne.n	800883a <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800882c:	4bc3      	ldr	r3, [pc, #780]	; (8008b3c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800882e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008830:	4ac2      	ldr	r2, [pc, #776]	; (8008b3c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008832:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008836:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 8008838:	e008      	b.n	800884c <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800883a:	2301      	movs	r3, #1
 800883c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8008840:	e004      	b.n	800884c <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8008842:	bf00      	nop
 8008844:	e002      	b.n	800884c <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8008846:	bf00      	nop
 8008848:	e000      	b.n	800884c <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 800884a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800884c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008850:	2b00      	cmp	r3, #0
 8008852:	d10b      	bne.n	800886c <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8008854:	4bb9      	ldr	r3, [pc, #740]	; (8008b3c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008856:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008858:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800885c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008860:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008864:	4ab5      	ldr	r2, [pc, #724]	; (8008b3c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008866:	430b      	orrs	r3, r1
 8008868:	6553      	str	r3, [r2, #84]	; 0x54
 800886a:	e003      	b.n	8008874 <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800886c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008870:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8008874:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008878:	e9d3 2300 	ldrd	r2, r3, [r3]
 800887c:	f402 1380 	and.w	r3, r2, #1048576	; 0x100000
 8008880:	65bb      	str	r3, [r7, #88]	; 0x58
 8008882:	2300      	movs	r3, #0
 8008884:	65fb      	str	r3, [r7, #92]	; 0x5c
 8008886:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	; 0x58
 800888a:	460b      	mov	r3, r1
 800888c:	4313      	orrs	r3, r2
 800888e:	d009      	beq.n	80088a4 <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8008890:	4baa      	ldr	r3, [pc, #680]	; (8008b3c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008892:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008894:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8008898:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800889c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800889e:	4aa7      	ldr	r2, [pc, #668]	; (8008b3c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80088a0:	430b      	orrs	r3, r1
 80088a2:	6513      	str	r3, [r2, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 80088a4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80088a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80088ac:	f002 5380 	and.w	r3, r2, #268435456	; 0x10000000
 80088b0:	653b      	str	r3, [r7, #80]	; 0x50
 80088b2:	2300      	movs	r3, #0
 80088b4:	657b      	str	r3, [r7, #84]	; 0x54
 80088b6:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	; 0x50
 80088ba:	460b      	mov	r3, r1
 80088bc:	4313      	orrs	r3, r2
 80088be:	d00a      	beq.n	80088d6 <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 80088c0:	4b9e      	ldr	r3, [pc, #632]	; (8008b3c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80088c2:	691b      	ldr	r3, [r3, #16]
 80088c4:	f423 4180 	bic.w	r1, r3, #16384	; 0x4000
 80088c8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80088cc:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 80088d0:	4a9a      	ldr	r2, [pc, #616]	; (8008b3c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80088d2:	430b      	orrs	r3, r1
 80088d4:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80088d6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80088da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80088de:	f402 1300 	and.w	r3, r2, #2097152	; 0x200000
 80088e2:	64bb      	str	r3, [r7, #72]	; 0x48
 80088e4:	2300      	movs	r3, #0
 80088e6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80088e8:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	; 0x48
 80088ec:	460b      	mov	r3, r1
 80088ee:	4313      	orrs	r3, r2
 80088f0:	d009      	beq.n	8008906 <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80088f2:	4b92      	ldr	r3, [pc, #584]	; (8008b3c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80088f4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80088f6:	f023 7180 	bic.w	r1, r3, #16777216	; 0x1000000
 80088fa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80088fe:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008900:	4a8e      	ldr	r2, [pc, #568]	; (8008b3c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008902:	430b      	orrs	r3, r1
 8008904:	6513      	str	r3, [r2, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8008906:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800890a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800890e:	f002 4380 	and.w	r3, r2, #1073741824	; 0x40000000
 8008912:	643b      	str	r3, [r7, #64]	; 0x40
 8008914:	2300      	movs	r3, #0
 8008916:	647b      	str	r3, [r7, #68]	; 0x44
 8008918:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	; 0x40
 800891c:	460b      	mov	r3, r1
 800891e:	4313      	orrs	r3, r2
 8008920:	d00e      	beq.n	8008940 <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8008922:	4b86      	ldr	r3, [pc, #536]	; (8008b3c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008924:	691b      	ldr	r3, [r3, #16]
 8008926:	4a85      	ldr	r2, [pc, #532]	; (8008b3c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008928:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800892c:	6113      	str	r3, [r2, #16]
 800892e:	4b83      	ldr	r3, [pc, #524]	; (8008b3c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8008930:	6919      	ldr	r1, [r3, #16]
 8008932:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008936:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 800893a:	4a80      	ldr	r2, [pc, #512]	; (8008b3c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800893c:	430b      	orrs	r3, r1
 800893e:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8008940:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008944:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008948:	f002 4300 	and.w	r3, r2, #2147483648	; 0x80000000
 800894c:	63bb      	str	r3, [r7, #56]	; 0x38
 800894e:	2300      	movs	r3, #0
 8008950:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008952:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
 8008956:	460b      	mov	r3, r1
 8008958:	4313      	orrs	r3, r2
 800895a:	d009      	beq.n	8008970 <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 800895c:	4b77      	ldr	r3, [pc, #476]	; (8008b3c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800895e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008960:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 8008964:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008968:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800896a:	4a74      	ldr	r2, [pc, #464]	; (8008b3c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800896c:	430b      	orrs	r3, r1
 800896e:	64d3      	str	r3, [r2, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8008970:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008974:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008978:	f402 0300 	and.w	r3, r2, #8388608	; 0x800000
 800897c:	633b      	str	r3, [r7, #48]	; 0x30
 800897e:	2300      	movs	r3, #0
 8008980:	637b      	str	r3, [r7, #52]	; 0x34
 8008982:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 8008986:	460b      	mov	r3, r1
 8008988:	4313      	orrs	r3, r2
 800898a:	d00a      	beq.n	80089a2 <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800898c:	4b6b      	ldr	r3, [pc, #428]	; (8008b3c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800898e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008990:	f423 0140 	bic.w	r1, r3, #12582912	; 0xc00000
 8008994:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008998:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800899c:	4a67      	ldr	r2, [pc, #412]	; (8008b3c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800899e:	430b      	orrs	r3, r1
 80089a0:	6553      	str	r3, [r2, #84]	; 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 80089a2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80089a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80089aa:	2100      	movs	r1, #0
 80089ac:	62b9      	str	r1, [r7, #40]	; 0x28
 80089ae:	f003 0301 	and.w	r3, r3, #1
 80089b2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80089b4:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 80089b8:	460b      	mov	r3, r1
 80089ba:	4313      	orrs	r3, r2
 80089bc:	d011      	beq.n	80089e2 <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80089be:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80089c2:	3308      	adds	r3, #8
 80089c4:	2100      	movs	r1, #0
 80089c6:	4618      	mov	r0, r3
 80089c8:	f001 fa4a 	bl	8009e60 <RCCEx_PLL2_Config>
 80089cc:	4603      	mov	r3, r0
 80089ce:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 80089d2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80089d6:	2b00      	cmp	r3, #0
 80089d8:	d003      	beq.n	80089e2 <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80089da:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80089de:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 80089e2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80089e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80089ea:	2100      	movs	r1, #0
 80089ec:	6239      	str	r1, [r7, #32]
 80089ee:	f003 0302 	and.w	r3, r3, #2
 80089f2:	627b      	str	r3, [r7, #36]	; 0x24
 80089f4:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 80089f8:	460b      	mov	r3, r1
 80089fa:	4313      	orrs	r3, r2
 80089fc:	d011      	beq.n	8008a22 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80089fe:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008a02:	3308      	adds	r3, #8
 8008a04:	2101      	movs	r1, #1
 8008a06:	4618      	mov	r0, r3
 8008a08:	f001 fa2a 	bl	8009e60 <RCCEx_PLL2_Config>
 8008a0c:	4603      	mov	r3, r0
 8008a0e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 8008a12:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008a16:	2b00      	cmp	r3, #0
 8008a18:	d003      	beq.n	8008a22 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008a1a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008a1e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 8008a22:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008a26:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008a2a:	2100      	movs	r1, #0
 8008a2c:	61b9      	str	r1, [r7, #24]
 8008a2e:	f003 0304 	and.w	r3, r3, #4
 8008a32:	61fb      	str	r3, [r7, #28]
 8008a34:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8008a38:	460b      	mov	r3, r1
 8008a3a:	4313      	orrs	r3, r2
 8008a3c:	d011      	beq.n	8008a62 <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8008a3e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008a42:	3308      	adds	r3, #8
 8008a44:	2102      	movs	r1, #2
 8008a46:	4618      	mov	r0, r3
 8008a48:	f001 fa0a 	bl	8009e60 <RCCEx_PLL2_Config>
 8008a4c:	4603      	mov	r3, r0
 8008a4e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 8008a52:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008a56:	2b00      	cmp	r3, #0
 8008a58:	d003      	beq.n	8008a62 <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008a5a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008a5e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 8008a62:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008a66:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008a6a:	2100      	movs	r1, #0
 8008a6c:	6139      	str	r1, [r7, #16]
 8008a6e:	f003 0308 	and.w	r3, r3, #8
 8008a72:	617b      	str	r3, [r7, #20]
 8008a74:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8008a78:	460b      	mov	r3, r1
 8008a7a:	4313      	orrs	r3, r2
 8008a7c:	d011      	beq.n	8008aa2 <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8008a7e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008a82:	3328      	adds	r3, #40	; 0x28
 8008a84:	2100      	movs	r1, #0
 8008a86:	4618      	mov	r0, r3
 8008a88:	f001 fa9c 	bl	8009fc4 <RCCEx_PLL3_Config>
 8008a8c:	4603      	mov	r3, r0
 8008a8e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
  
    if (ret == HAL_OK)
 8008a92:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008a96:	2b00      	cmp	r3, #0
 8008a98:	d003      	beq.n	8008aa2 <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008a9a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008a9e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 8008aa2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008aa6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008aaa:	2100      	movs	r1, #0
 8008aac:	60b9      	str	r1, [r7, #8]
 8008aae:	f003 0310 	and.w	r3, r3, #16
 8008ab2:	60fb      	str	r3, [r7, #12]
 8008ab4:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8008ab8:	460b      	mov	r3, r1
 8008aba:	4313      	orrs	r3, r2
 8008abc:	d011      	beq.n	8008ae2 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8008abe:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008ac2:	3328      	adds	r3, #40	; 0x28
 8008ac4:	2101      	movs	r1, #1
 8008ac6:	4618      	mov	r0, r3
 8008ac8:	f001 fa7c 	bl	8009fc4 <RCCEx_PLL3_Config>
 8008acc:	4603      	mov	r3, r0
 8008ace:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 8008ad2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008ad6:	2b00      	cmp	r3, #0
 8008ad8:	d003      	beq.n	8008ae2 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008ada:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008ade:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 8008ae2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008ae6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008aea:	2100      	movs	r1, #0
 8008aec:	6039      	str	r1, [r7, #0]
 8008aee:	f003 0320 	and.w	r3, r3, #32
 8008af2:	607b      	str	r3, [r7, #4]
 8008af4:	e9d7 1200 	ldrd	r1, r2, [r7]
 8008af8:	460b      	mov	r3, r1
 8008afa:	4313      	orrs	r3, r2
 8008afc:	d011      	beq.n	8008b22 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8008afe:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008b02:	3328      	adds	r3, #40	; 0x28
 8008b04:	2102      	movs	r1, #2
 8008b06:	4618      	mov	r0, r3
 8008b08:	f001 fa5c 	bl	8009fc4 <RCCEx_PLL3_Config>
 8008b0c:	4603      	mov	r3, r0
 8008b0e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 8008b12:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008b16:	2b00      	cmp	r3, #0
 8008b18:	d003      	beq.n	8008b22 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008b1a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008b1e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    } 
  }

  if (status == HAL_OK)
 8008b22:	f897 3126 	ldrb.w	r3, [r7, #294]	; 0x126
 8008b26:	2b00      	cmp	r3, #0
 8008b28:	d101      	bne.n	8008b2e <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 8008b2a:	2300      	movs	r3, #0
 8008b2c:	e000      	b.n	8008b30 <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 8008b2e:	2301      	movs	r3, #1
}
 8008b30:	4618      	mov	r0, r3
 8008b32:	f507 7794 	add.w	r7, r7, #296	; 0x128
 8008b36:	46bd      	mov	sp, r7
 8008b38:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8008b3c:	58024400 	.word	0x58024400

08008b40 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 8008b40:	b580      	push	{r7, lr}
 8008b42:	b090      	sub	sp, #64	; 0x40
 8008b44:	af00      	add	r7, sp, #0
 8008b46:	e9c7 0100 	strd	r0, r1, [r7]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 8008b4a:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008b4e:	f5a2 7180 	sub.w	r1, r2, #256	; 0x100
 8008b52:	430b      	orrs	r3, r1
 8008b54:	f040 8094 	bne.w	8008c80 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
  {

    saiclocksource = __HAL_RCC_GET_SAI1_SOURCE();
 8008b58:	4b9e      	ldr	r3, [pc, #632]	; (8008dd4 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8008b5a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008b5c:	f003 0307 	and.w	r3, r3, #7
 8008b60:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 8008b62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008b64:	2b04      	cmp	r3, #4
 8008b66:	f200 8087 	bhi.w	8008c78 <HAL_RCCEx_GetPeriphCLKFreq+0x138>
 8008b6a:	a201      	add	r2, pc, #4	; (adr r2, 8008b70 <HAL_RCCEx_GetPeriphCLKFreq+0x30>)
 8008b6c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008b70:	08008b85 	.word	0x08008b85
 8008b74:	08008bad 	.word	0x08008bad
 8008b78:	08008bd5 	.word	0x08008bd5
 8008b7c:	08008c71 	.word	0x08008c71
 8008b80:	08008bfd 	.word	0x08008bfd
    {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8008b84:	4b93      	ldr	r3, [pc, #588]	; (8008dd4 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8008b86:	681b      	ldr	r3, [r3, #0]
 8008b88:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008b8c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008b90:	d108      	bne.n	8008ba4 <HAL_RCCEx_GetPeriphCLKFreq+0x64>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8008b92:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008b96:	4618      	mov	r0, r3
 8008b98:	f001 f810 	bl	8009bbc <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8008b9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008b9e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008ba0:	f000 bd45 	b.w	800962e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008ba4:	2300      	movs	r3, #0
 8008ba6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008ba8:	f000 bd41 	b.w	800962e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8008bac:	4b89      	ldr	r3, [pc, #548]	; (8008dd4 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8008bae:	681b      	ldr	r3, [r3, #0]
 8008bb0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008bb4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8008bb8:	d108      	bne.n	8008bcc <HAL_RCCEx_GetPeriphCLKFreq+0x8c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008bba:	f107 0318 	add.w	r3, r7, #24
 8008bbe:	4618      	mov	r0, r3
 8008bc0:	f000 fd54 	bl	800966c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8008bc4:	69bb      	ldr	r3, [r7, #24]
 8008bc6:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008bc8:	f000 bd31 	b.w	800962e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008bcc:	2300      	movs	r3, #0
 8008bce:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008bd0:	f000 bd2d 	b.w	800962e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8008bd4:	4b7f      	ldr	r3, [pc, #508]	; (8008dd4 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8008bd6:	681b      	ldr	r3, [r3, #0]
 8008bd8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008bdc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008be0:	d108      	bne.n	8008bf4 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008be2:	f107 030c 	add.w	r3, r7, #12
 8008be6:	4618      	mov	r0, r3
 8008be8:	f000 fe94 	bl	8009914 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8008bec:	68fb      	ldr	r3, [r7, #12]
 8008bee:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008bf0:	f000 bd1d 	b.w	800962e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008bf4:	2300      	movs	r3, #0
 8008bf6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008bf8:	f000 bd19 	b.w	800962e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8008bfc:	4b75      	ldr	r3, [pc, #468]	; (8008dd4 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8008bfe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008c00:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8008c04:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8008c06:	4b73      	ldr	r3, [pc, #460]	; (8008dd4 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8008c08:	681b      	ldr	r3, [r3, #0]
 8008c0a:	f003 0304 	and.w	r3, r3, #4
 8008c0e:	2b04      	cmp	r3, #4
 8008c10:	d10c      	bne.n	8008c2c <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 8008c12:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008c14:	2b00      	cmp	r3, #0
 8008c16:	d109      	bne.n	8008c2c <HAL_RCCEx_GetPeriphCLKFreq+0xec>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8008c18:	4b6e      	ldr	r3, [pc, #440]	; (8008dd4 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8008c1a:	681b      	ldr	r3, [r3, #0]
 8008c1c:	08db      	lsrs	r3, r3, #3
 8008c1e:	f003 0303 	and.w	r3, r3, #3
 8008c22:	4a6d      	ldr	r2, [pc, #436]	; (8008dd8 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8008c24:	fa22 f303 	lsr.w	r3, r2, r3
 8008c28:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008c2a:	e01f      	b.n	8008c6c <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8008c2c:	4b69      	ldr	r3, [pc, #420]	; (8008dd4 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8008c2e:	681b      	ldr	r3, [r3, #0]
 8008c30:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008c34:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008c38:	d106      	bne.n	8008c48 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
 8008c3a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008c3c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008c40:	d102      	bne.n	8008c48 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8008c42:	4b66      	ldr	r3, [pc, #408]	; (8008ddc <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 8008c44:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008c46:	e011      	b.n	8008c6c <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8008c48:	4b62      	ldr	r3, [pc, #392]	; (8008dd4 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8008c4a:	681b      	ldr	r3, [r3, #0]
 8008c4c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008c50:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008c54:	d106      	bne.n	8008c64 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
 8008c56:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008c58:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008c5c:	d102      	bne.n	8008c64 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8008c5e:	4b60      	ldr	r3, [pc, #384]	; (8008de0 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 8008c60:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008c62:	e003      	b.n	8008c6c <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8008c64:	2300      	movs	r3, #0
 8008c66:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 8008c68:	f000 bce1 	b.w	800962e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8008c6c:	f000 bcdf 	b.w	800962e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8008c70:	4b5c      	ldr	r3, [pc, #368]	; (8008de4 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 8008c72:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008c74:	f000 bcdb 	b.w	800962e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8008c78:	2300      	movs	r3, #0
 8008c7a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008c7c:	f000 bcd7 	b.w	800962e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }

#if defined(SAI3)
  else if (PeriphClk == RCC_PERIPHCLK_SAI23)
 8008c80:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008c84:	f5a2 7100 	sub.w	r1, r2, #512	; 0x200
 8008c88:	430b      	orrs	r3, r1
 8008c8a:	f040 80ad 	bne.w	8008de8 <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>
  {

    saiclocksource = __HAL_RCC_GET_SAI23_SOURCE();
 8008c8e:	4b51      	ldr	r3, [pc, #324]	; (8008dd4 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8008c90:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008c92:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
 8008c96:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 8008c98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008c9a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008c9e:	d056      	beq.n	8008d4e <HAL_RCCEx_GetPeriphCLKFreq+0x20e>
 8008ca0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008ca2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008ca6:	f200 8090 	bhi.w	8008dca <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 8008caa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008cac:	2bc0      	cmp	r3, #192	; 0xc0
 8008cae:	f000 8088 	beq.w	8008dc2 <HAL_RCCEx_GetPeriphCLKFreq+0x282>
 8008cb2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008cb4:	2bc0      	cmp	r3, #192	; 0xc0
 8008cb6:	f200 8088 	bhi.w	8008dca <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 8008cba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008cbc:	2b80      	cmp	r3, #128	; 0x80
 8008cbe:	d032      	beq.n	8008d26 <HAL_RCCEx_GetPeriphCLKFreq+0x1e6>
 8008cc0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008cc2:	2b80      	cmp	r3, #128	; 0x80
 8008cc4:	f200 8081 	bhi.w	8008dca <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 8008cc8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008cca:	2b00      	cmp	r3, #0
 8008ccc:	d003      	beq.n	8008cd6 <HAL_RCCEx_GetPeriphCLKFreq+0x196>
 8008cce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008cd0:	2b40      	cmp	r3, #64	; 0x40
 8008cd2:	d014      	beq.n	8008cfe <HAL_RCCEx_GetPeriphCLKFreq+0x1be>
 8008cd4:	e079      	b.n	8008dca <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
    {
      case RCC_SAI23CLKSOURCE_PLL: /* PLL1 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8008cd6:	4b3f      	ldr	r3, [pc, #252]	; (8008dd4 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8008cd8:	681b      	ldr	r3, [r3, #0]
 8008cda:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008cde:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008ce2:	d108      	bne.n	8008cf6 <HAL_RCCEx_GetPeriphCLKFreq+0x1b6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8008ce4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008ce8:	4618      	mov	r0, r3
 8008cea:	f000 ff67 	bl	8009bbc <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8008cee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008cf0:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008cf2:	f000 bc9c 	b.w	800962e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008cf6:	2300      	movs	r3, #0
 8008cf8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008cfa:	f000 bc98 	b.w	800962e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8008cfe:	4b35      	ldr	r3, [pc, #212]	; (8008dd4 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8008d00:	681b      	ldr	r3, [r3, #0]
 8008d02:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008d06:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8008d0a:	d108      	bne.n	8008d1e <HAL_RCCEx_GetPeriphCLKFreq+0x1de>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008d0c:	f107 0318 	add.w	r3, r7, #24
 8008d10:	4618      	mov	r0, r3
 8008d12:	f000 fcab 	bl	800966c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8008d16:	69bb      	ldr	r3, [r7, #24]
 8008d18:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008d1a:	f000 bc88 	b.w	800962e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008d1e:	2300      	movs	r3, #0
 8008d20:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008d22:	f000 bc84 	b.w	800962e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI23CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8008d26:	4b2b      	ldr	r3, [pc, #172]	; (8008dd4 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8008d28:	681b      	ldr	r3, [r3, #0]
 8008d2a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008d2e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008d32:	d108      	bne.n	8008d46 <HAL_RCCEx_GetPeriphCLKFreq+0x206>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008d34:	f107 030c 	add.w	r3, r7, #12
 8008d38:	4618      	mov	r0, r3
 8008d3a:	f000 fdeb 	bl	8009914 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8008d3e:	68fb      	ldr	r3, [r7, #12]
 8008d40:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008d42:	f000 bc74 	b.w	800962e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008d46:	2300      	movs	r3, #0
 8008d48:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008d4a:	f000 bc70 	b.w	800962e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI23CLKSOURCE_CLKP: /* CKPER is the clock source for SAI2/3 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8008d4e:	4b21      	ldr	r3, [pc, #132]	; (8008dd4 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8008d50:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008d52:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8008d56:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8008d58:	4b1e      	ldr	r3, [pc, #120]	; (8008dd4 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8008d5a:	681b      	ldr	r3, [r3, #0]
 8008d5c:	f003 0304 	and.w	r3, r3, #4
 8008d60:	2b04      	cmp	r3, #4
 8008d62:	d10c      	bne.n	8008d7e <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
 8008d64:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008d66:	2b00      	cmp	r3, #0
 8008d68:	d109      	bne.n	8008d7e <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8008d6a:	4b1a      	ldr	r3, [pc, #104]	; (8008dd4 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8008d6c:	681b      	ldr	r3, [r3, #0]
 8008d6e:	08db      	lsrs	r3, r3, #3
 8008d70:	f003 0303 	and.w	r3, r3, #3
 8008d74:	4a18      	ldr	r2, [pc, #96]	; (8008dd8 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8008d76:	fa22 f303 	lsr.w	r3, r2, r3
 8008d7a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008d7c:	e01f      	b.n	8008dbe <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8008d7e:	4b15      	ldr	r3, [pc, #84]	; (8008dd4 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8008d80:	681b      	ldr	r3, [r3, #0]
 8008d82:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008d86:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008d8a:	d106      	bne.n	8008d9a <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
 8008d8c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008d8e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008d92:	d102      	bne.n	8008d9a <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8008d94:	4b11      	ldr	r3, [pc, #68]	; (8008ddc <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 8008d96:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008d98:	e011      	b.n	8008dbe <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8008d9a:	4b0e      	ldr	r3, [pc, #56]	; (8008dd4 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8008d9c:	681b      	ldr	r3, [r3, #0]
 8008d9e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008da2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008da6:	d106      	bne.n	8008db6 <HAL_RCCEx_GetPeriphCLKFreq+0x276>
 8008da8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008daa:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008dae:	d102      	bne.n	8008db6 <HAL_RCCEx_GetPeriphCLKFreq+0x276>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8008db0:	4b0b      	ldr	r3, [pc, #44]	; (8008de0 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 8008db2:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008db4:	e003      	b.n	8008dbe <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8008db6:	2300      	movs	r3, #0
 8008db8:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 8008dba:	f000 bc38 	b.w	800962e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8008dbe:	f000 bc36 	b.w	800962e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SAI23CLKSOURCE_PIN): /* External clock is the clock source for SAI2/3 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8008dc2:	4b08      	ldr	r3, [pc, #32]	; (8008de4 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 8008dc4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008dc6:	f000 bc32 	b.w	800962e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8008dca:	2300      	movs	r3, #0
 8008dcc:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008dce:	f000 bc2e 	b.w	800962e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8008dd2:	bf00      	nop
 8008dd4:	58024400 	.word	0x58024400
 8008dd8:	03d09000 	.word	0x03d09000
 8008ddc:	003d0900 	.word	0x003d0900
 8008de0:	017d7840 	.word	0x017d7840
 8008de4:	00bb8000 	.word	0x00bb8000
    }
  }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 8008de8:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008dec:	f5a2 6180 	sub.w	r1, r2, #1024	; 0x400
 8008df0:	430b      	orrs	r3, r1
 8008df2:	f040 809c 	bne.w	8008f2e <HAL_RCCEx_GetPeriphCLKFreq+0x3ee>
  {

    saiclocksource = __HAL_RCC_GET_SAI4A_SOURCE();
 8008df6:	4b9e      	ldr	r3, [pc, #632]	; (8009070 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8008df8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008dfa:	f403 0360 	and.w	r3, r3, #14680064	; 0xe00000
 8008dfe:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 8008e00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008e02:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8008e06:	d054      	beq.n	8008eb2 <HAL_RCCEx_GetPeriphCLKFreq+0x372>
 8008e08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008e0a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8008e0e:	f200 808b 	bhi.w	8008f28 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 8008e12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008e14:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8008e18:	f000 8083 	beq.w	8008f22 <HAL_RCCEx_GetPeriphCLKFreq+0x3e2>
 8008e1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008e1e:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8008e22:	f200 8081 	bhi.w	8008f28 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 8008e26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008e28:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8008e2c:	d02f      	beq.n	8008e8e <HAL_RCCEx_GetPeriphCLKFreq+0x34e>
 8008e2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008e30:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8008e34:	d878      	bhi.n	8008f28 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 8008e36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008e38:	2b00      	cmp	r3, #0
 8008e3a:	d004      	beq.n	8008e46 <HAL_RCCEx_GetPeriphCLKFreq+0x306>
 8008e3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008e3e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8008e42:	d012      	beq.n	8008e6a <HAL_RCCEx_GetPeriphCLKFreq+0x32a>
 8008e44:	e070      	b.n	8008f28 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
    {
      case RCC_SAI4ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8008e46:	4b8a      	ldr	r3, [pc, #552]	; (8009070 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8008e48:	681b      	ldr	r3, [r3, #0]
 8008e4a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008e4e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008e52:	d107      	bne.n	8008e64 <HAL_RCCEx_GetPeriphCLKFreq+0x324>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8008e54:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008e58:	4618      	mov	r0, r3
 8008e5a:	f000 feaf 	bl	8009bbc <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8008e5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008e60:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008e62:	e3e4      	b.n	800962e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008e64:	2300      	movs	r3, #0
 8008e66:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008e68:	e3e1      	b.n	800962e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8008e6a:	4b81      	ldr	r3, [pc, #516]	; (8009070 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8008e6c:	681b      	ldr	r3, [r3, #0]
 8008e6e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008e72:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8008e76:	d107      	bne.n	8008e88 <HAL_RCCEx_GetPeriphCLKFreq+0x348>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008e78:	f107 0318 	add.w	r3, r7, #24
 8008e7c:	4618      	mov	r0, r3
 8008e7e:	f000 fbf5 	bl	800966c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8008e82:	69bb      	ldr	r3, [r7, #24]
 8008e84:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008e86:	e3d2      	b.n	800962e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008e88:	2300      	movs	r3, #0
 8008e8a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008e8c:	e3cf      	b.n	800962e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8008e8e:	4b78      	ldr	r3, [pc, #480]	; (8009070 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8008e90:	681b      	ldr	r3, [r3, #0]
 8008e92:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008e96:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008e9a:	d107      	bne.n	8008eac <HAL_RCCEx_GetPeriphCLKFreq+0x36c>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008e9c:	f107 030c 	add.w	r3, r7, #12
 8008ea0:	4618      	mov	r0, r3
 8008ea2:	f000 fd37 	bl	8009914 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8008ea6:	68fb      	ldr	r3, [r7, #12]
 8008ea8:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008eaa:	e3c0      	b.n	800962e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008eac:	2300      	movs	r3, #0
 8008eae:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008eb0:	e3bd      	b.n	800962e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI4A*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8008eb2:	4b6f      	ldr	r3, [pc, #444]	; (8009070 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8008eb4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008eb6:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8008eba:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8008ebc:	4b6c      	ldr	r3, [pc, #432]	; (8009070 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8008ebe:	681b      	ldr	r3, [r3, #0]
 8008ec0:	f003 0304 	and.w	r3, r3, #4
 8008ec4:	2b04      	cmp	r3, #4
 8008ec6:	d10c      	bne.n	8008ee2 <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
 8008ec8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008eca:	2b00      	cmp	r3, #0
 8008ecc:	d109      	bne.n	8008ee2 <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8008ece:	4b68      	ldr	r3, [pc, #416]	; (8009070 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8008ed0:	681b      	ldr	r3, [r3, #0]
 8008ed2:	08db      	lsrs	r3, r3, #3
 8008ed4:	f003 0303 	and.w	r3, r3, #3
 8008ed8:	4a66      	ldr	r2, [pc, #408]	; (8009074 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 8008eda:	fa22 f303 	lsr.w	r3, r2, r3
 8008ede:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008ee0:	e01e      	b.n	8008f20 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8008ee2:	4b63      	ldr	r3, [pc, #396]	; (8009070 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8008ee4:	681b      	ldr	r3, [r3, #0]
 8008ee6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008eea:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008eee:	d106      	bne.n	8008efe <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
 8008ef0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008ef2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008ef6:	d102      	bne.n	8008efe <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8008ef8:	4b5f      	ldr	r3, [pc, #380]	; (8009078 <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 8008efa:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008efc:	e010      	b.n	8008f20 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8008efe:	4b5c      	ldr	r3, [pc, #368]	; (8009070 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8008f00:	681b      	ldr	r3, [r3, #0]
 8008f02:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008f06:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008f0a:	d106      	bne.n	8008f1a <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
 8008f0c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008f0e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008f12:	d102      	bne.n	8008f1a <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8008f14:	4b59      	ldr	r3, [pc, #356]	; (800907c <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 8008f16:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008f18:	e002      	b.n	8008f20 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8008f1a:	2300      	movs	r3, #0
 8008f1c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 8008f1e:	e386      	b.n	800962e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8008f20:	e385      	b.n	800962e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_PIN: /* External clock is the clock source for SAI4A */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8008f22:	4b57      	ldr	r3, [pc, #348]	; (8009080 <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 8008f24:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008f26:	e382      	b.n	800962e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 8008f28:	2300      	movs	r3, #0
 8008f2a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008f2c:	e37f      	b.n	800962e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 8008f2e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008f32:	f5a2 6100 	sub.w	r1, r2, #2048	; 0x800
 8008f36:	430b      	orrs	r3, r1
 8008f38:	f040 80a7 	bne.w	800908a <HAL_RCCEx_GetPeriphCLKFreq+0x54a>
  {

    saiclocksource = __HAL_RCC_GET_SAI4B_SOURCE();
 8008f3c:	4b4c      	ldr	r3, [pc, #304]	; (8009070 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8008f3e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008f40:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 8008f44:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 8008f46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008f48:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8008f4c:	d055      	beq.n	8008ffa <HAL_RCCEx_GetPeriphCLKFreq+0x4ba>
 8008f4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008f50:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8008f54:	f200 8096 	bhi.w	8009084 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 8008f58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008f5a:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8008f5e:	f000 8084 	beq.w	800906a <HAL_RCCEx_GetPeriphCLKFreq+0x52a>
 8008f62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008f64:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8008f68:	f200 808c 	bhi.w	8009084 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 8008f6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008f6e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008f72:	d030      	beq.n	8008fd6 <HAL_RCCEx_GetPeriphCLKFreq+0x496>
 8008f74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008f76:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008f7a:	f200 8083 	bhi.w	8009084 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 8008f7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008f80:	2b00      	cmp	r3, #0
 8008f82:	d004      	beq.n	8008f8e <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
 8008f84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008f86:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8008f8a:	d012      	beq.n	8008fb2 <HAL_RCCEx_GetPeriphCLKFreq+0x472>
 8008f8c:	e07a      	b.n	8009084 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
    {
      case RCC_SAI4BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8008f8e:	4b38      	ldr	r3, [pc, #224]	; (8009070 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8008f90:	681b      	ldr	r3, [r3, #0]
 8008f92:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008f96:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008f9a:	d107      	bne.n	8008fac <HAL_RCCEx_GetPeriphCLKFreq+0x46c>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8008f9c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008fa0:	4618      	mov	r0, r3
 8008fa2:	f000 fe0b 	bl	8009bbc <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8008fa6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008fa8:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008faa:	e340      	b.n	800962e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008fac:	2300      	movs	r3, #0
 8008fae:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008fb0:	e33d      	b.n	800962e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8008fb2:	4b2f      	ldr	r3, [pc, #188]	; (8009070 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8008fb4:	681b      	ldr	r3, [r3, #0]
 8008fb6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008fba:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8008fbe:	d107      	bne.n	8008fd0 <HAL_RCCEx_GetPeriphCLKFreq+0x490>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008fc0:	f107 0318 	add.w	r3, r7, #24
 8008fc4:	4618      	mov	r0, r3
 8008fc6:	f000 fb51 	bl	800966c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8008fca:	69bb      	ldr	r3, [r7, #24]
 8008fcc:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008fce:	e32e      	b.n	800962e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008fd0:	2300      	movs	r3, #0
 8008fd2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008fd4:	e32b      	b.n	800962e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8008fd6:	4b26      	ldr	r3, [pc, #152]	; (8009070 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8008fd8:	681b      	ldr	r3, [r3, #0]
 8008fda:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008fde:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008fe2:	d107      	bne.n	8008ff4 <HAL_RCCEx_GetPeriphCLKFreq+0x4b4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008fe4:	f107 030c 	add.w	r3, r7, #12
 8008fe8:	4618      	mov	r0, r3
 8008fea:	f000 fc93 	bl	8009914 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8008fee:	68fb      	ldr	r3, [r7, #12]
 8008ff0:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8008ff2:	e31c      	b.n	800962e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8008ff4:	2300      	movs	r3, #0
 8008ff6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008ff8:	e319      	b.n	800962e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI4B*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8008ffa:	4b1d      	ldr	r3, [pc, #116]	; (8009070 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8008ffc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008ffe:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8009002:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8009004:	4b1a      	ldr	r3, [pc, #104]	; (8009070 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8009006:	681b      	ldr	r3, [r3, #0]
 8009008:	f003 0304 	and.w	r3, r3, #4
 800900c:	2b04      	cmp	r3, #4
 800900e:	d10c      	bne.n	800902a <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
 8009010:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009012:	2b00      	cmp	r3, #0
 8009014:	d109      	bne.n	800902a <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8009016:	4b16      	ldr	r3, [pc, #88]	; (8009070 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8009018:	681b      	ldr	r3, [r3, #0]
 800901a:	08db      	lsrs	r3, r3, #3
 800901c:	f003 0303 	and.w	r3, r3, #3
 8009020:	4a14      	ldr	r2, [pc, #80]	; (8009074 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 8009022:	fa22 f303 	lsr.w	r3, r2, r3
 8009026:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009028:	e01e      	b.n	8009068 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800902a:	4b11      	ldr	r3, [pc, #68]	; (8009070 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800902c:	681b      	ldr	r3, [r3, #0]
 800902e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009032:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009036:	d106      	bne.n	8009046 <HAL_RCCEx_GetPeriphCLKFreq+0x506>
 8009038:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800903a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800903e:	d102      	bne.n	8009046 <HAL_RCCEx_GetPeriphCLKFreq+0x506>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8009040:	4b0d      	ldr	r3, [pc, #52]	; (8009078 <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 8009042:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009044:	e010      	b.n	8009068 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8009046:	4b0a      	ldr	r3, [pc, #40]	; (8009070 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8009048:	681b      	ldr	r3, [r3, #0]
 800904a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800904e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8009052:	d106      	bne.n	8009062 <HAL_RCCEx_GetPeriphCLKFreq+0x522>
 8009054:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009056:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800905a:	d102      	bne.n	8009062 <HAL_RCCEx_GetPeriphCLKFreq+0x522>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800905c:	4b07      	ldr	r3, [pc, #28]	; (800907c <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 800905e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009060:	e002      	b.n	8009068 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8009062:	2300      	movs	r3, #0
 8009064:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 8009066:	e2e2      	b.n	800962e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8009068:	e2e1      	b.n	800962e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_PIN: /* External clock is the clock source for SAI4B */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800906a:	4b05      	ldr	r3, [pc, #20]	; (8009080 <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 800906c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800906e:	e2de      	b.n	800962e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8009070:	58024400 	.word	0x58024400
 8009074:	03d09000 	.word	0x03d09000
 8009078:	003d0900 	.word	0x003d0900
 800907c:	017d7840 	.word	0x017d7840
 8009080:	00bb8000 	.word	0x00bb8000
      }

      default :
      {
        frequency = 0;
 8009084:	2300      	movs	r3, #0
 8009086:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009088:	e2d1      	b.n	800962e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 800908a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800908e:	f5a2 5180 	sub.w	r1, r2, #4096	; 0x1000
 8009092:	430b      	orrs	r3, r1
 8009094:	f040 809c 	bne.w	80091d0 <HAL_RCCEx_GetPeriphCLKFreq+0x690>
  {
    /* Get SPI1/2/3 clock source */
    srcclk = __HAL_RCC_GET_SPI123_SOURCE();
 8009098:	4b93      	ldr	r3, [pc, #588]	; (80092e8 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800909a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800909c:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 80090a0:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 80090a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80090a4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80090a8:	d054      	beq.n	8009154 <HAL_RCCEx_GetPeriphCLKFreq+0x614>
 80090aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80090ac:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80090b0:	f200 808b 	bhi.w	80091ca <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 80090b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80090b6:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80090ba:	f000 8083 	beq.w	80091c4 <HAL_RCCEx_GetPeriphCLKFreq+0x684>
 80090be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80090c0:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80090c4:	f200 8081 	bhi.w	80091ca <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 80090c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80090ca:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80090ce:	d02f      	beq.n	8009130 <HAL_RCCEx_GetPeriphCLKFreq+0x5f0>
 80090d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80090d2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80090d6:	d878      	bhi.n	80091ca <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 80090d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80090da:	2b00      	cmp	r3, #0
 80090dc:	d004      	beq.n	80090e8 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>
 80090de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80090e0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80090e4:	d012      	beq.n	800910c <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>
 80090e6:	e070      	b.n	80091ca <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
    {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80090e8:	4b7f      	ldr	r3, [pc, #508]	; (80092e8 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80090ea:	681b      	ldr	r3, [r3, #0]
 80090ec:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80090f0:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80090f4:	d107      	bne.n	8009106 <HAL_RCCEx_GetPeriphCLKFreq+0x5c6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80090f6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80090fa:	4618      	mov	r0, r3
 80090fc:	f000 fd5e 	bl	8009bbc <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8009100:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009102:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009104:	e293      	b.n	800962e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8009106:	2300      	movs	r3, #0
 8009108:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800910a:	e290      	b.n	800962e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800910c:	4b76      	ldr	r3, [pc, #472]	; (80092e8 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800910e:	681b      	ldr	r3, [r3, #0]
 8009110:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8009114:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8009118:	d107      	bne.n	800912a <HAL_RCCEx_GetPeriphCLKFreq+0x5ea>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800911a:	f107 0318 	add.w	r3, r7, #24
 800911e:	4618      	mov	r0, r3
 8009120:	f000 faa4 	bl	800966c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8009124:	69bb      	ldr	r3, [r7, #24]
 8009126:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009128:	e281      	b.n	800962e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800912a:	2300      	movs	r3, #0
 800912c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800912e:	e27e      	b.n	800962e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8009130:	4b6d      	ldr	r3, [pc, #436]	; (80092e8 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8009132:	681b      	ldr	r3, [r3, #0]
 8009134:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8009138:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800913c:	d107      	bne.n	800914e <HAL_RCCEx_GetPeriphCLKFreq+0x60e>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800913e:	f107 030c 	add.w	r3, r7, #12
 8009142:	4618      	mov	r0, r3
 8009144:	f000 fbe6 	bl	8009914 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8009148:	68fb      	ldr	r3, [r7, #12]
 800914a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800914c:	e26f      	b.n	800962e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800914e:	2300      	movs	r3, #0
 8009150:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009152:	e26c      	b.n	800962e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8009154:	4b64      	ldr	r3, [pc, #400]	; (80092e8 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8009156:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009158:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800915c:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800915e:	4b62      	ldr	r3, [pc, #392]	; (80092e8 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8009160:	681b      	ldr	r3, [r3, #0]
 8009162:	f003 0304 	and.w	r3, r3, #4
 8009166:	2b04      	cmp	r3, #4
 8009168:	d10c      	bne.n	8009184 <HAL_RCCEx_GetPeriphCLKFreq+0x644>
 800916a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800916c:	2b00      	cmp	r3, #0
 800916e:	d109      	bne.n	8009184 <HAL_RCCEx_GetPeriphCLKFreq+0x644>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8009170:	4b5d      	ldr	r3, [pc, #372]	; (80092e8 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8009172:	681b      	ldr	r3, [r3, #0]
 8009174:	08db      	lsrs	r3, r3, #3
 8009176:	f003 0303 	and.w	r3, r3, #3
 800917a:	4a5c      	ldr	r2, [pc, #368]	; (80092ec <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 800917c:	fa22 f303 	lsr.w	r3, r2, r3
 8009180:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009182:	e01e      	b.n	80091c2 <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8009184:	4b58      	ldr	r3, [pc, #352]	; (80092e8 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8009186:	681b      	ldr	r3, [r3, #0]
 8009188:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800918c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009190:	d106      	bne.n	80091a0 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
 8009192:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009194:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8009198:	d102      	bne.n	80091a0 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800919a:	4b55      	ldr	r3, [pc, #340]	; (80092f0 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 800919c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800919e:	e010      	b.n	80091c2 <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80091a0:	4b51      	ldr	r3, [pc, #324]	; (80092e8 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80091a2:	681b      	ldr	r3, [r3, #0]
 80091a4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80091a8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80091ac:	d106      	bne.n	80091bc <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
 80091ae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80091b0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80091b4:	d102      	bne.n	80091bc <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 80091b6:	4b4f      	ldr	r3, [pc, #316]	; (80092f4 <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 80091b8:	63fb      	str	r3, [r7, #60]	; 0x3c
 80091ba:	e002      	b.n	80091c2 <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 80091bc:	2300      	movs	r3, #0
 80091be:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 80091c0:	e235      	b.n	800962e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 80091c2:	e234      	b.n	800962e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 80091c4:	4b4c      	ldr	r3, [pc, #304]	; (80092f8 <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>)
 80091c6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80091c8:	e231      	b.n	800962e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 80091ca:	2300      	movs	r3, #0
 80091cc:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80091ce:	e22e      	b.n	800962e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI45)
 80091d0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80091d4:	f5a2 5100 	sub.w	r1, r2, #8192	; 0x2000
 80091d8:	430b      	orrs	r3, r1
 80091da:	f040 808f 	bne.w	80092fc <HAL_RCCEx_GetPeriphCLKFreq+0x7bc>
  {
    /* Get SPI45 clock source */
    srcclk = __HAL_RCC_GET_SPI45_SOURCE();
 80091de:	4b42      	ldr	r3, [pc, #264]	; (80092e8 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80091e0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80091e2:	f403 23e0 	and.w	r3, r3, #458752	; 0x70000
 80091e6:	63bb      	str	r3, [r7, #56]	; 0x38
    switch (srcclk)
 80091e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80091ea:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80091ee:	d06b      	beq.n	80092c8 <HAL_RCCEx_GetPeriphCLKFreq+0x788>
 80091f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80091f2:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80091f6:	d874      	bhi.n	80092e2 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 80091f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80091fa:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80091fe:	d056      	beq.n	80092ae <HAL_RCCEx_GetPeriphCLKFreq+0x76e>
 8009200:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009202:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8009206:	d86c      	bhi.n	80092e2 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 8009208:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800920a:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800920e:	d03b      	beq.n	8009288 <HAL_RCCEx_GetPeriphCLKFreq+0x748>
 8009210:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009212:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8009216:	d864      	bhi.n	80092e2 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 8009218:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800921a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800921e:	d021      	beq.n	8009264 <HAL_RCCEx_GetPeriphCLKFreq+0x724>
 8009220:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009222:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8009226:	d85c      	bhi.n	80092e2 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 8009228:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800922a:	2b00      	cmp	r3, #0
 800922c:	d004      	beq.n	8009238 <HAL_RCCEx_GetPeriphCLKFreq+0x6f8>
 800922e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009230:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009234:	d004      	beq.n	8009240 <HAL_RCCEx_GetPeriphCLKFreq+0x700>
 8009236:	e054      	b.n	80092e2 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
    {
      case RCC_SPI45CLKSOURCE_PCLK2: /* CD/D2 PCLK2 is the clock source for SPI4/5 */
      {
        frequency = HAL_RCC_GetPCLK1Freq();
 8009238:	f7fe fa4c 	bl	80076d4 <HAL_RCC_GetPCLK1Freq>
 800923c:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800923e:	e1f6      	b.n	800962e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8009240:	4b29      	ldr	r3, [pc, #164]	; (80092e8 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8009242:	681b      	ldr	r3, [r3, #0]
 8009244:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8009248:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800924c:	d107      	bne.n	800925e <HAL_RCCEx_GetPeriphCLKFreq+0x71e>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800924e:	f107 0318 	add.w	r3, r7, #24
 8009252:	4618      	mov	r0, r3
 8009254:	f000 fa0a 	bl	800966c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8009258:	69fb      	ldr	r3, [r7, #28]
 800925a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800925c:	e1e7      	b.n	800962e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800925e:	2300      	movs	r3, #0
 8009260:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009262:	e1e4      	b.n	800962e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8009264:	4b20      	ldr	r3, [pc, #128]	; (80092e8 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8009266:	681b      	ldr	r3, [r3, #0]
 8009268:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800926c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009270:	d107      	bne.n	8009282 <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009272:	f107 030c 	add.w	r3, r7, #12
 8009276:	4618      	mov	r0, r3
 8009278:	f000 fb4c 	bl	8009914 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800927c:	693b      	ldr	r3, [r7, #16]
 800927e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009280:	e1d5      	b.n	800962e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8009282:	2300      	movs	r3, #0
 8009284:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009286:	e1d2      	b.n	800962e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_HSI: /* HSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8009288:	4b17      	ldr	r3, [pc, #92]	; (80092e8 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800928a:	681b      	ldr	r3, [r3, #0]
 800928c:	f003 0304 	and.w	r3, r3, #4
 8009290:	2b04      	cmp	r3, #4
 8009292:	d109      	bne.n	80092a8 <HAL_RCCEx_GetPeriphCLKFreq+0x768>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8009294:	4b14      	ldr	r3, [pc, #80]	; (80092e8 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8009296:	681b      	ldr	r3, [r3, #0]
 8009298:	08db      	lsrs	r3, r3, #3
 800929a:	f003 0303 	and.w	r3, r3, #3
 800929e:	4a13      	ldr	r2, [pc, #76]	; (80092ec <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 80092a0:	fa22 f303 	lsr.w	r3, r2, r3
 80092a4:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80092a6:	e1c2      	b.n	800962e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80092a8:	2300      	movs	r3, #0
 80092aa:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80092ac:	e1bf      	b.n	800962e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_CSI: /* CSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 80092ae:	4b0e      	ldr	r3, [pc, #56]	; (80092e8 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80092b0:	681b      	ldr	r3, [r3, #0]
 80092b2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80092b6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80092ba:	d102      	bne.n	80092c2 <HAL_RCCEx_GetPeriphCLKFreq+0x782>
        {
          frequency = CSI_VALUE;
 80092bc:	4b0c      	ldr	r3, [pc, #48]	; (80092f0 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 80092be:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80092c0:	e1b5      	b.n	800962e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80092c2:	2300      	movs	r3, #0
 80092c4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80092c6:	e1b2      	b.n	800962e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_HSE: /* HSE is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 80092c8:	4b07      	ldr	r3, [pc, #28]	; (80092e8 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80092ca:	681b      	ldr	r3, [r3, #0]
 80092cc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80092d0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80092d4:	d102      	bne.n	80092dc <HAL_RCCEx_GetPeriphCLKFreq+0x79c>
        {
          frequency = HSE_VALUE;
 80092d6:	4b07      	ldr	r3, [pc, #28]	; (80092f4 <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 80092d8:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80092da:	e1a8      	b.n	800962e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80092dc:	2300      	movs	r3, #0
 80092de:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80092e0:	e1a5      	b.n	800962e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 80092e2:	2300      	movs	r3, #0
 80092e4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80092e6:	e1a2      	b.n	800962e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 80092e8:	58024400 	.word	0x58024400
 80092ec:	03d09000 	.word	0x03d09000
 80092f0:	003d0900 	.word	0x003d0900
 80092f4:	017d7840 	.word	0x017d7840
 80092f8:	00bb8000 	.word	0x00bb8000
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 80092fc:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009300:	f5a2 2100 	sub.w	r1, r2, #524288	; 0x80000
 8009304:	430b      	orrs	r3, r1
 8009306:	d173      	bne.n	80093f0 <HAL_RCCEx_GetPeriphCLKFreq+0x8b0>
  {
    /* Get ADC clock source */
    srcclk = __HAL_RCC_GET_ADC_SOURCE();
 8009308:	4b9c      	ldr	r3, [pc, #624]	; (800957c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800930a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800930c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8009310:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 8009312:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009314:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8009318:	d02f      	beq.n	800937a <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
 800931a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800931c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8009320:	d863      	bhi.n	80093ea <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
 8009322:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009324:	2b00      	cmp	r3, #0
 8009326:	d004      	beq.n	8009332 <HAL_RCCEx_GetPeriphCLKFreq+0x7f2>
 8009328:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800932a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800932e:	d012      	beq.n	8009356 <HAL_RCCEx_GetPeriphCLKFreq+0x816>
 8009330:	e05b      	b.n	80093ea <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
    {
      case RCC_ADCCLKSOURCE_PLL2:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8009332:	4b92      	ldr	r3, [pc, #584]	; (800957c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8009334:	681b      	ldr	r3, [r3, #0]
 8009336:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800933a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800933e:	d107      	bne.n	8009350 <HAL_RCCEx_GetPeriphCLKFreq+0x810>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009340:	f107 0318 	add.w	r3, r7, #24
 8009344:	4618      	mov	r0, r3
 8009346:	f000 f991 	bl	800966c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800934a:	69bb      	ldr	r3, [r7, #24]
 800934c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800934e:	e16e      	b.n	800962e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8009350:	2300      	movs	r3, #0
 8009352:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009354:	e16b      	b.n	800962e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_ADCCLKSOURCE_PLL3:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8009356:	4b89      	ldr	r3, [pc, #548]	; (800957c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8009358:	681b      	ldr	r3, [r3, #0]
 800935a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800935e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009362:	d107      	bne.n	8009374 <HAL_RCCEx_GetPeriphCLKFreq+0x834>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009364:	f107 030c 	add.w	r3, r7, #12
 8009368:	4618      	mov	r0, r3
 800936a:	f000 fad3 	bl	8009914 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 800936e:	697b      	ldr	r3, [r7, #20]
 8009370:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009372:	e15c      	b.n	800962e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8009374:	2300      	movs	r3, #0
 8009376:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009378:	e159      	b.n	800962e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_ADCCLKSOURCE_CLKP:
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800937a:	4b80      	ldr	r3, [pc, #512]	; (800957c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800937c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800937e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8009382:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8009384:	4b7d      	ldr	r3, [pc, #500]	; (800957c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8009386:	681b      	ldr	r3, [r3, #0]
 8009388:	f003 0304 	and.w	r3, r3, #4
 800938c:	2b04      	cmp	r3, #4
 800938e:	d10c      	bne.n	80093aa <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
 8009390:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009392:	2b00      	cmp	r3, #0
 8009394:	d109      	bne.n	80093aa <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8009396:	4b79      	ldr	r3, [pc, #484]	; (800957c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8009398:	681b      	ldr	r3, [r3, #0]
 800939a:	08db      	lsrs	r3, r3, #3
 800939c:	f003 0303 	and.w	r3, r3, #3
 80093a0:	4a77      	ldr	r2, [pc, #476]	; (8009580 <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
 80093a2:	fa22 f303 	lsr.w	r3, r2, r3
 80093a6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80093a8:	e01e      	b.n	80093e8 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80093aa:	4b74      	ldr	r3, [pc, #464]	; (800957c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80093ac:	681b      	ldr	r3, [r3, #0]
 80093ae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80093b2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80093b6:	d106      	bne.n	80093c6 <HAL_RCCEx_GetPeriphCLKFreq+0x886>
 80093b8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80093ba:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80093be:	d102      	bne.n	80093c6 <HAL_RCCEx_GetPeriphCLKFreq+0x886>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 80093c0:	4b70      	ldr	r3, [pc, #448]	; (8009584 <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
 80093c2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80093c4:	e010      	b.n	80093e8 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80093c6:	4b6d      	ldr	r3, [pc, #436]	; (800957c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80093c8:	681b      	ldr	r3, [r3, #0]
 80093ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80093ce:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80093d2:	d106      	bne.n	80093e2 <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
 80093d4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80093d6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80093da:	d102      	bne.n	80093e2 <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 80093dc:	4b6a      	ldr	r3, [pc, #424]	; (8009588 <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
 80093de:	63fb      	str	r3, [r7, #60]	; 0x3c
 80093e0:	e002      	b.n	80093e8 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 80093e2:	2300      	movs	r3, #0
 80093e4:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 80093e6:	e122      	b.n	800962e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 80093e8:	e121      	b.n	800962e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 80093ea:	2300      	movs	r3, #0
 80093ec:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80093ee:	e11e      	b.n	800962e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 80093f0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80093f4:	f5a2 3180 	sub.w	r1, r2, #65536	; 0x10000
 80093f8:	430b      	orrs	r3, r1
 80093fa:	d133      	bne.n	8009464 <HAL_RCCEx_GetPeriphCLKFreq+0x924>
  {
    /* Get SDMMC clock source */
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 80093fc:	4b5f      	ldr	r3, [pc, #380]	; (800957c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80093fe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009400:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8009404:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 8009406:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009408:	2b00      	cmp	r3, #0
 800940a:	d004      	beq.n	8009416 <HAL_RCCEx_GetPeriphCLKFreq+0x8d6>
 800940c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800940e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009412:	d012      	beq.n	800943a <HAL_RCCEx_GetPeriphCLKFreq+0x8fa>
 8009414:	e023      	b.n	800945e <HAL_RCCEx_GetPeriphCLKFreq+0x91e>
    {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8009416:	4b59      	ldr	r3, [pc, #356]	; (800957c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8009418:	681b      	ldr	r3, [r3, #0]
 800941a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800941e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8009422:	d107      	bne.n	8009434 <HAL_RCCEx_GetPeriphCLKFreq+0x8f4>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8009424:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8009428:	4618      	mov	r0, r3
 800942a:	f000 fbc7 	bl	8009bbc <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800942e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009430:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009432:	e0fc      	b.n	800962e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8009434:	2300      	movs	r3, #0
 8009436:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009438:	e0f9      	b.n	800962e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800943a:	4b50      	ldr	r3, [pc, #320]	; (800957c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800943c:	681b      	ldr	r3, [r3, #0]
 800943e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8009442:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8009446:	d107      	bne.n	8009458 <HAL_RCCEx_GetPeriphCLKFreq+0x918>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009448:	f107 0318 	add.w	r3, r7, #24
 800944c:	4618      	mov	r0, r3
 800944e:	f000 f90d 	bl	800966c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 8009452:	6a3b      	ldr	r3, [r7, #32]
 8009454:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009456:	e0ea      	b.n	800962e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8009458:	2300      	movs	r3, #0
 800945a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800945c:	e0e7      	b.n	800962e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 800945e:	2300      	movs	r3, #0
 8009460:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009462:	e0e4      	b.n	800962e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 8009464:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009468:	f5a2 4180 	sub.w	r1, r2, #16384	; 0x4000
 800946c:	430b      	orrs	r3, r1
 800946e:	f040 808d 	bne.w	800958c <HAL_RCCEx_GetPeriphCLKFreq+0xa4c>
  {
    /* Get SPI6 clock source */
    srcclk = __HAL_RCC_GET_SPI6_SOURCE();
 8009472:	4b42      	ldr	r3, [pc, #264]	; (800957c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8009474:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009476:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
 800947a:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 800947c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800947e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8009482:	d06b      	beq.n	800955c <HAL_RCCEx_GetPeriphCLKFreq+0xa1c>
 8009484:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009486:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800948a:	d874      	bhi.n	8009576 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 800948c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800948e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009492:	d056      	beq.n	8009542 <HAL_RCCEx_GetPeriphCLKFreq+0xa02>
 8009494:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009496:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800949a:	d86c      	bhi.n	8009576 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 800949c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800949e:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80094a2:	d03b      	beq.n	800951c <HAL_RCCEx_GetPeriphCLKFreq+0x9dc>
 80094a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80094a6:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80094aa:	d864      	bhi.n	8009576 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 80094ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80094ae:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80094b2:	d021      	beq.n	80094f8 <HAL_RCCEx_GetPeriphCLKFreq+0x9b8>
 80094b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80094b6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80094ba:	d85c      	bhi.n	8009576 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 80094bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80094be:	2b00      	cmp	r3, #0
 80094c0:	d004      	beq.n	80094cc <HAL_RCCEx_GetPeriphCLKFreq+0x98c>
 80094c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80094c4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80094c8:	d004      	beq.n	80094d4 <HAL_RCCEx_GetPeriphCLKFreq+0x994>
 80094ca:	e054      	b.n	8009576 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
    {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
      {
        frequency = HAL_RCCEx_GetD3PCLK1Freq();
 80094cc:	f000 f8b8 	bl	8009640 <HAL_RCCEx_GetD3PCLK1Freq>
 80094d0:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 80094d2:	e0ac      	b.n	800962e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80094d4:	4b29      	ldr	r3, [pc, #164]	; (800957c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80094d6:	681b      	ldr	r3, [r3, #0]
 80094d8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80094dc:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80094e0:	d107      	bne.n	80094f2 <HAL_RCCEx_GetPeriphCLKFreq+0x9b2>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80094e2:	f107 0318 	add.w	r3, r7, #24
 80094e6:	4618      	mov	r0, r3
 80094e8:	f000 f8c0 	bl	800966c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 80094ec:	69fb      	ldr	r3, [r7, #28]
 80094ee:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80094f0:	e09d      	b.n	800962e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80094f2:	2300      	movs	r3, #0
 80094f4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80094f6:	e09a      	b.n	800962e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80094f8:	4b20      	ldr	r3, [pc, #128]	; (800957c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80094fa:	681b      	ldr	r3, [r3, #0]
 80094fc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8009500:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009504:	d107      	bne.n	8009516 <HAL_RCCEx_GetPeriphCLKFreq+0x9d6>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009506:	f107 030c 	add.w	r3, r7, #12
 800950a:	4618      	mov	r0, r3
 800950c:	f000 fa02 	bl	8009914 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8009510:	693b      	ldr	r3, [r7, #16]
 8009512:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009514:	e08b      	b.n	800962e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8009516:	2300      	movs	r3, #0
 8009518:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800951a:	e088      	b.n	800962e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800951c:	4b17      	ldr	r3, [pc, #92]	; (800957c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800951e:	681b      	ldr	r3, [r3, #0]
 8009520:	f003 0304 	and.w	r3, r3, #4
 8009524:	2b04      	cmp	r3, #4
 8009526:	d109      	bne.n	800953c <HAL_RCCEx_GetPeriphCLKFreq+0x9fc>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8009528:	4b14      	ldr	r3, [pc, #80]	; (800957c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800952a:	681b      	ldr	r3, [r3, #0]
 800952c:	08db      	lsrs	r3, r3, #3
 800952e:	f003 0303 	and.w	r3, r3, #3
 8009532:	4a13      	ldr	r2, [pc, #76]	; (8009580 <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
 8009534:	fa22 f303 	lsr.w	r3, r2, r3
 8009538:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800953a:	e078      	b.n	800962e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800953c:	2300      	movs	r3, #0
 800953e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009540:	e075      	b.n	800962e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 8009542:	4b0e      	ldr	r3, [pc, #56]	; (800957c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8009544:	681b      	ldr	r3, [r3, #0]
 8009546:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800954a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800954e:	d102      	bne.n	8009556 <HAL_RCCEx_GetPeriphCLKFreq+0xa16>
        {
          frequency = CSI_VALUE;
 8009550:	4b0c      	ldr	r3, [pc, #48]	; (8009584 <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
 8009552:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009554:	e06b      	b.n	800962e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8009556:	2300      	movs	r3, #0
 8009558:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800955a:	e068      	b.n	800962e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800955c:	4b07      	ldr	r3, [pc, #28]	; (800957c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800955e:	681b      	ldr	r3, [r3, #0]
 8009560:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009564:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8009568:	d102      	bne.n	8009570 <HAL_RCCEx_GetPeriphCLKFreq+0xa30>
        {
          frequency = HSE_VALUE;
 800956a:	4b07      	ldr	r3, [pc, #28]	; (8009588 <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
 800956c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800956e:	e05e      	b.n	800962e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8009570:	2300      	movs	r3, #0
 8009572:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009574:	e05b      	b.n	800962e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
        break;
      }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
      {
        frequency = 0;
 8009576:	2300      	movs	r3, #0
 8009578:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800957a:	e058      	b.n	800962e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800957c:	58024400 	.word	0x58024400
 8009580:	03d09000 	.word	0x03d09000
 8009584:	003d0900 	.word	0x003d0900
 8009588:	017d7840 	.word	0x017d7840
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 800958c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009590:	f5a2 4100 	sub.w	r1, r2, #32768	; 0x8000
 8009594:	430b      	orrs	r3, r1
 8009596:	d148      	bne.n	800962a <HAL_RCCEx_GetPeriphCLKFreq+0xaea>
  {
    /* Get FDCAN clock source */
    srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 8009598:	4b27      	ldr	r3, [pc, #156]	; (8009638 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800959a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800959c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80095a0:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 80095a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80095a4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80095a8:	d02a      	beq.n	8009600 <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
 80095aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80095ac:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80095b0:	d838      	bhi.n	8009624 <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
 80095b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80095b4:	2b00      	cmp	r3, #0
 80095b6:	d004      	beq.n	80095c2 <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
 80095b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80095ba:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80095be:	d00d      	beq.n	80095dc <HAL_RCCEx_GetPeriphCLKFreq+0xa9c>
 80095c0:	e030      	b.n	8009624 <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
    {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 80095c2:	4b1d      	ldr	r3, [pc, #116]	; (8009638 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 80095c4:	681b      	ldr	r3, [r3, #0]
 80095c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80095ca:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80095ce:	d102      	bne.n	80095d6 <HAL_RCCEx_GetPeriphCLKFreq+0xa96>
        {
          frequency = HSE_VALUE;
 80095d0:	4b1a      	ldr	r3, [pc, #104]	; (800963c <HAL_RCCEx_GetPeriphCLKFreq+0xafc>)
 80095d2:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80095d4:	e02b      	b.n	800962e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80095d6:	2300      	movs	r3, #0
 80095d8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80095da:	e028      	b.n	800962e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80095dc:	4b16      	ldr	r3, [pc, #88]	; (8009638 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 80095de:	681b      	ldr	r3, [r3, #0]
 80095e0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80095e4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80095e8:	d107      	bne.n	80095fa <HAL_RCCEx_GetPeriphCLKFreq+0xaba>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80095ea:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80095ee:	4618      	mov	r0, r3
 80095f0:	f000 fae4 	bl	8009bbc <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80095f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80095f6:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80095f8:	e019      	b.n	800962e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80095fa:	2300      	movs	r3, #0
 80095fc:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80095fe:	e016      	b.n	800962e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8009600:	4b0d      	ldr	r3, [pc, #52]	; (8009638 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8009602:	681b      	ldr	r3, [r3, #0]
 8009604:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8009608:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800960c:	d107      	bne.n	800961e <HAL_RCCEx_GetPeriphCLKFreq+0xade>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800960e:	f107 0318 	add.w	r3, r7, #24
 8009612:	4618      	mov	r0, r3
 8009614:	f000 f82a 	bl	800966c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8009618:	69fb      	ldr	r3, [r7, #28]
 800961a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800961c:	e007      	b.n	800962e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800961e:	2300      	movs	r3, #0
 8009620:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009622:	e004      	b.n	800962e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8009624:	2300      	movs	r3, #0
 8009626:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009628:	e001      	b.n	800962e <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else
  {
    frequency = 0;
 800962a:	2300      	movs	r3, #0
 800962c:	63fb      	str	r3, [r7, #60]	; 0x3c
  }

  return frequency;
 800962e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8009630:	4618      	mov	r0, r3
 8009632:	3740      	adds	r7, #64	; 0x40
 8009634:	46bd      	mov	sp, r7
 8009636:	bd80      	pop	{r7, pc}
 8009638:	58024400 	.word	0x58024400
 800963c:	017d7840 	.word	0x017d7840

08009640 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8009640:	b580      	push	{r7, lr}
 8009642:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8009644:	f7fe f816 	bl	8007674 <HAL_RCC_GetHCLKFreq>
 8009648:	4602      	mov	r2, r0
 800964a:	4b06      	ldr	r3, [pc, #24]	; (8009664 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 800964c:	6a1b      	ldr	r3, [r3, #32]
 800964e:	091b      	lsrs	r3, r3, #4
 8009650:	f003 0307 	and.w	r3, r3, #7
 8009654:	4904      	ldr	r1, [pc, #16]	; (8009668 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8009656:	5ccb      	ldrb	r3, [r1, r3]
 8009658:	f003 031f 	and.w	r3, r3, #31
 800965c:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8009660:	4618      	mov	r0, r3
 8009662:	bd80      	pop	{r7, pc}
 8009664:	58024400 	.word	0x58024400
 8009668:	0800ea40 	.word	0x0800ea40

0800966c <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 800966c:	b480      	push	{r7}
 800966e:	b089      	sub	sp, #36	; 0x24
 8009670:	af00      	add	r7, sp, #0
 8009672:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8009674:	4ba1      	ldr	r3, [pc, #644]	; (80098fc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009676:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009678:	f003 0303 	and.w	r3, r3, #3
 800967c:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 800967e:	4b9f      	ldr	r3, [pc, #636]	; (80098fc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009680:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009682:	0b1b      	lsrs	r3, r3, #12
 8009684:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8009688:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800968a:	4b9c      	ldr	r3, [pc, #624]	; (80098fc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800968c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800968e:	091b      	lsrs	r3, r3, #4
 8009690:	f003 0301 	and.w	r3, r3, #1
 8009694:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 8009696:	4b99      	ldr	r3, [pc, #612]	; (80098fc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009698:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800969a:	08db      	lsrs	r3, r3, #3
 800969c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80096a0:	693a      	ldr	r2, [r7, #16]
 80096a2:	fb02 f303 	mul.w	r3, r2, r3
 80096a6:	ee07 3a90 	vmov	s15, r3
 80096aa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80096ae:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 80096b2:	697b      	ldr	r3, [r7, #20]
 80096b4:	2b00      	cmp	r3, #0
 80096b6:	f000 8111 	beq.w	80098dc <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 80096ba:	69bb      	ldr	r3, [r7, #24]
 80096bc:	2b02      	cmp	r3, #2
 80096be:	f000 8083 	beq.w	80097c8 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 80096c2:	69bb      	ldr	r3, [r7, #24]
 80096c4:	2b02      	cmp	r3, #2
 80096c6:	f200 80a1 	bhi.w	800980c <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 80096ca:	69bb      	ldr	r3, [r7, #24]
 80096cc:	2b00      	cmp	r3, #0
 80096ce:	d003      	beq.n	80096d8 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 80096d0:	69bb      	ldr	r3, [r7, #24]
 80096d2:	2b01      	cmp	r3, #1
 80096d4:	d056      	beq.n	8009784 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 80096d6:	e099      	b.n	800980c <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80096d8:	4b88      	ldr	r3, [pc, #544]	; (80098fc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80096da:	681b      	ldr	r3, [r3, #0]
 80096dc:	f003 0320 	and.w	r3, r3, #32
 80096e0:	2b00      	cmp	r3, #0
 80096e2:	d02d      	beq.n	8009740 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80096e4:	4b85      	ldr	r3, [pc, #532]	; (80098fc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80096e6:	681b      	ldr	r3, [r3, #0]
 80096e8:	08db      	lsrs	r3, r3, #3
 80096ea:	f003 0303 	and.w	r3, r3, #3
 80096ee:	4a84      	ldr	r2, [pc, #528]	; (8009900 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 80096f0:	fa22 f303 	lsr.w	r3, r2, r3
 80096f4:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80096f6:	68bb      	ldr	r3, [r7, #8]
 80096f8:	ee07 3a90 	vmov	s15, r3
 80096fc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009700:	697b      	ldr	r3, [r7, #20]
 8009702:	ee07 3a90 	vmov	s15, r3
 8009706:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800970a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800970e:	4b7b      	ldr	r3, [pc, #492]	; (80098fc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009710:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009712:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009716:	ee07 3a90 	vmov	s15, r3
 800971a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800971e:	ed97 6a03 	vldr	s12, [r7, #12]
 8009722:	eddf 5a78 	vldr	s11, [pc, #480]	; 8009904 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8009726:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800972a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800972e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009732:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009736:	ee67 7a27 	vmul.f32	s15, s14, s15
 800973a:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800973e:	e087      	b.n	8009850 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8009740:	697b      	ldr	r3, [r7, #20]
 8009742:	ee07 3a90 	vmov	s15, r3
 8009746:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800974a:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8009908 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 800974e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009752:	4b6a      	ldr	r3, [pc, #424]	; (80098fc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009754:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009756:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800975a:	ee07 3a90 	vmov	s15, r3
 800975e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009762:	ed97 6a03 	vldr	s12, [r7, #12]
 8009766:	eddf 5a67 	vldr	s11, [pc, #412]	; 8009904 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800976a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800976e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009772:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009776:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800977a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800977e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8009782:	e065      	b.n	8009850 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8009784:	697b      	ldr	r3, [r7, #20]
 8009786:	ee07 3a90 	vmov	s15, r3
 800978a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800978e:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800990c <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8009792:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009796:	4b59      	ldr	r3, [pc, #356]	; (80098fc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009798:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800979a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800979e:	ee07 3a90 	vmov	s15, r3
 80097a2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80097a6:	ed97 6a03 	vldr	s12, [r7, #12]
 80097aa:	eddf 5a56 	vldr	s11, [pc, #344]	; 8009904 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80097ae:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80097b2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80097b6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80097ba:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80097be:	ee67 7a27 	vmul.f32	s15, s14, s15
 80097c2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80097c6:	e043      	b.n	8009850 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80097c8:	697b      	ldr	r3, [r7, #20]
 80097ca:	ee07 3a90 	vmov	s15, r3
 80097ce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80097d2:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8009910 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 80097d6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80097da:	4b48      	ldr	r3, [pc, #288]	; (80098fc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80097dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80097de:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80097e2:	ee07 3a90 	vmov	s15, r3
 80097e6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80097ea:	ed97 6a03 	vldr	s12, [r7, #12]
 80097ee:	eddf 5a45 	vldr	s11, [pc, #276]	; 8009904 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80097f2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80097f6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80097fa:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80097fe:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009802:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009806:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800980a:	e021      	b.n	8009850 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800980c:	697b      	ldr	r3, [r7, #20]
 800980e:	ee07 3a90 	vmov	s15, r3
 8009812:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009816:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800990c <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800981a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800981e:	4b37      	ldr	r3, [pc, #220]	; (80098fc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009820:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009822:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009826:	ee07 3a90 	vmov	s15, r3
 800982a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800982e:	ed97 6a03 	vldr	s12, [r7, #12]
 8009832:	eddf 5a34 	vldr	s11, [pc, #208]	; 8009904 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8009836:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800983a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800983e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009842:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009846:	ee67 7a27 	vmul.f32	s15, s14, s15
 800984a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800984e:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 8009850:	4b2a      	ldr	r3, [pc, #168]	; (80098fc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009852:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009854:	0a5b      	lsrs	r3, r3, #9
 8009856:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800985a:	ee07 3a90 	vmov	s15, r3
 800985e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009862:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8009866:	ee37 7a87 	vadd.f32	s14, s15, s14
 800986a:	edd7 6a07 	vldr	s13, [r7, #28]
 800986e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009872:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009876:	ee17 2a90 	vmov	r2, s15
 800987a:	687b      	ldr	r3, [r7, #4]
 800987c:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 800987e:	4b1f      	ldr	r3, [pc, #124]	; (80098fc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009880:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009882:	0c1b      	lsrs	r3, r3, #16
 8009884:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009888:	ee07 3a90 	vmov	s15, r3
 800988c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009890:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8009894:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009898:	edd7 6a07 	vldr	s13, [r7, #28]
 800989c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80098a0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80098a4:	ee17 2a90 	vmov	r2, s15
 80098a8:	687b      	ldr	r3, [r7, #4]
 80098aa:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 80098ac:	4b13      	ldr	r3, [pc, #76]	; (80098fc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80098ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80098b0:	0e1b      	lsrs	r3, r3, #24
 80098b2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80098b6:	ee07 3a90 	vmov	s15, r3
 80098ba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80098be:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80098c2:	ee37 7a87 	vadd.f32	s14, s15, s14
 80098c6:	edd7 6a07 	vldr	s13, [r7, #28]
 80098ca:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80098ce:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80098d2:	ee17 2a90 	vmov	r2, s15
 80098d6:	687b      	ldr	r3, [r7, #4]
 80098d8:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 80098da:	e008      	b.n	80098ee <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 80098dc:	687b      	ldr	r3, [r7, #4]
 80098de:	2200      	movs	r2, #0
 80098e0:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 80098e2:	687b      	ldr	r3, [r7, #4]
 80098e4:	2200      	movs	r2, #0
 80098e6:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 80098e8:	687b      	ldr	r3, [r7, #4]
 80098ea:	2200      	movs	r2, #0
 80098ec:	609a      	str	r2, [r3, #8]
}
 80098ee:	bf00      	nop
 80098f0:	3724      	adds	r7, #36	; 0x24
 80098f2:	46bd      	mov	sp, r7
 80098f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098f8:	4770      	bx	lr
 80098fa:	bf00      	nop
 80098fc:	58024400 	.word	0x58024400
 8009900:	03d09000 	.word	0x03d09000
 8009904:	46000000 	.word	0x46000000
 8009908:	4c742400 	.word	0x4c742400
 800990c:	4a742400 	.word	0x4a742400
 8009910:	4bbebc20 	.word	0x4bbebc20

08009914 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 8009914:	b480      	push	{r7}
 8009916:	b089      	sub	sp, #36	; 0x24
 8009918:	af00      	add	r7, sp, #0
 800991a:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800991c:	4ba1      	ldr	r3, [pc, #644]	; (8009ba4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800991e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009920:	f003 0303 	and.w	r3, r3, #3
 8009924:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 8009926:	4b9f      	ldr	r3, [pc, #636]	; (8009ba4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009928:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800992a:	0d1b      	lsrs	r3, r3, #20
 800992c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8009930:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8009932:	4b9c      	ldr	r3, [pc, #624]	; (8009ba4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009934:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009936:	0a1b      	lsrs	r3, r3, #8
 8009938:	f003 0301 	and.w	r3, r3, #1
 800993c:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 800993e:	4b99      	ldr	r3, [pc, #612]	; (8009ba4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009940:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009942:	08db      	lsrs	r3, r3, #3
 8009944:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8009948:	693a      	ldr	r2, [r7, #16]
 800994a:	fb02 f303 	mul.w	r3, r2, r3
 800994e:	ee07 3a90 	vmov	s15, r3
 8009952:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009956:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 800995a:	697b      	ldr	r3, [r7, #20]
 800995c:	2b00      	cmp	r3, #0
 800995e:	f000 8111 	beq.w	8009b84 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8009962:	69bb      	ldr	r3, [r7, #24]
 8009964:	2b02      	cmp	r3, #2
 8009966:	f000 8083 	beq.w	8009a70 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 800996a:	69bb      	ldr	r3, [r7, #24]
 800996c:	2b02      	cmp	r3, #2
 800996e:	f200 80a1 	bhi.w	8009ab4 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8009972:	69bb      	ldr	r3, [r7, #24]
 8009974:	2b00      	cmp	r3, #0
 8009976:	d003      	beq.n	8009980 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8009978:	69bb      	ldr	r3, [r7, #24]
 800997a:	2b01      	cmp	r3, #1
 800997c:	d056      	beq.n	8009a2c <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 800997e:	e099      	b.n	8009ab4 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009980:	4b88      	ldr	r3, [pc, #544]	; (8009ba4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009982:	681b      	ldr	r3, [r3, #0]
 8009984:	f003 0320 	and.w	r3, r3, #32
 8009988:	2b00      	cmp	r3, #0
 800998a:	d02d      	beq.n	80099e8 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800998c:	4b85      	ldr	r3, [pc, #532]	; (8009ba4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800998e:	681b      	ldr	r3, [r3, #0]
 8009990:	08db      	lsrs	r3, r3, #3
 8009992:	f003 0303 	and.w	r3, r3, #3
 8009996:	4a84      	ldr	r2, [pc, #528]	; (8009ba8 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8009998:	fa22 f303 	lsr.w	r3, r2, r3
 800999c:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800999e:	68bb      	ldr	r3, [r7, #8]
 80099a0:	ee07 3a90 	vmov	s15, r3
 80099a4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80099a8:	697b      	ldr	r3, [r7, #20]
 80099aa:	ee07 3a90 	vmov	s15, r3
 80099ae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80099b2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80099b6:	4b7b      	ldr	r3, [pc, #492]	; (8009ba4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80099b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80099ba:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80099be:	ee07 3a90 	vmov	s15, r3
 80099c2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80099c6:	ed97 6a03 	vldr	s12, [r7, #12]
 80099ca:	eddf 5a78 	vldr	s11, [pc, #480]	; 8009bac <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80099ce:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80099d2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80099d6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80099da:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80099de:	ee67 7a27 	vmul.f32	s15, s14, s15
 80099e2:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 80099e6:	e087      	b.n	8009af8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80099e8:	697b      	ldr	r3, [r7, #20]
 80099ea:	ee07 3a90 	vmov	s15, r3
 80099ee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80099f2:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8009bb0 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 80099f6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80099fa:	4b6a      	ldr	r3, [pc, #424]	; (8009ba4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80099fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80099fe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009a02:	ee07 3a90 	vmov	s15, r3
 8009a06:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009a0a:	ed97 6a03 	vldr	s12, [r7, #12]
 8009a0e:	eddf 5a67 	vldr	s11, [pc, #412]	; 8009bac <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8009a12:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009a16:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009a1a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009a1e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009a22:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009a26:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8009a2a:	e065      	b.n	8009af8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8009a2c:	697b      	ldr	r3, [r7, #20]
 8009a2e:	ee07 3a90 	vmov	s15, r3
 8009a32:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009a36:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8009bb4 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8009a3a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009a3e:	4b59      	ldr	r3, [pc, #356]	; (8009ba4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009a40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009a42:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009a46:	ee07 3a90 	vmov	s15, r3
 8009a4a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009a4e:	ed97 6a03 	vldr	s12, [r7, #12]
 8009a52:	eddf 5a56 	vldr	s11, [pc, #344]	; 8009bac <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8009a56:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009a5a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009a5e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009a62:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009a66:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009a6a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8009a6e:	e043      	b.n	8009af8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8009a70:	697b      	ldr	r3, [r7, #20]
 8009a72:	ee07 3a90 	vmov	s15, r3
 8009a76:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009a7a:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8009bb8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8009a7e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009a82:	4b48      	ldr	r3, [pc, #288]	; (8009ba4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009a84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009a86:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009a8a:	ee07 3a90 	vmov	s15, r3
 8009a8e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009a92:	ed97 6a03 	vldr	s12, [r7, #12]
 8009a96:	eddf 5a45 	vldr	s11, [pc, #276]	; 8009bac <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8009a9a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009a9e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009aa2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009aa6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009aaa:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009aae:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8009ab2:	e021      	b.n	8009af8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8009ab4:	697b      	ldr	r3, [r7, #20]
 8009ab6:	ee07 3a90 	vmov	s15, r3
 8009aba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009abe:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8009bb4 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8009ac2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009ac6:	4b37      	ldr	r3, [pc, #220]	; (8009ba4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009ac8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009aca:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009ace:	ee07 3a90 	vmov	s15, r3
 8009ad2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009ad6:	ed97 6a03 	vldr	s12, [r7, #12]
 8009ada:	eddf 5a34 	vldr	s11, [pc, #208]	; 8009bac <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8009ade:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009ae2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009ae6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009aea:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009aee:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009af2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8009af6:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 8009af8:	4b2a      	ldr	r3, [pc, #168]	; (8009ba4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009afa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009afc:	0a5b      	lsrs	r3, r3, #9
 8009afe:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009b02:	ee07 3a90 	vmov	s15, r3
 8009b06:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009b0a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8009b0e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009b12:	edd7 6a07 	vldr	s13, [r7, #28]
 8009b16:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009b1a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009b1e:	ee17 2a90 	vmov	r2, s15
 8009b22:	687b      	ldr	r3, [r7, #4]
 8009b24:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 8009b26:	4b1f      	ldr	r3, [pc, #124]	; (8009ba4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009b28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009b2a:	0c1b      	lsrs	r3, r3, #16
 8009b2c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009b30:	ee07 3a90 	vmov	s15, r3
 8009b34:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009b38:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8009b3c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009b40:	edd7 6a07 	vldr	s13, [r7, #28]
 8009b44:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009b48:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009b4c:	ee17 2a90 	vmov	r2, s15
 8009b50:	687b      	ldr	r3, [r7, #4]
 8009b52:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 8009b54:	4b13      	ldr	r3, [pc, #76]	; (8009ba4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009b56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009b58:	0e1b      	lsrs	r3, r3, #24
 8009b5a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009b5e:	ee07 3a90 	vmov	s15, r3
 8009b62:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009b66:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8009b6a:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009b6e:	edd7 6a07 	vldr	s13, [r7, #28]
 8009b72:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009b76:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009b7a:	ee17 2a90 	vmov	r2, s15
 8009b7e:	687b      	ldr	r3, [r7, #4]
 8009b80:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8009b82:	e008      	b.n	8009b96 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8009b84:	687b      	ldr	r3, [r7, #4]
 8009b86:	2200      	movs	r2, #0
 8009b88:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8009b8a:	687b      	ldr	r3, [r7, #4]
 8009b8c:	2200      	movs	r2, #0
 8009b8e:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8009b90:	687b      	ldr	r3, [r7, #4]
 8009b92:	2200      	movs	r2, #0
 8009b94:	609a      	str	r2, [r3, #8]
}
 8009b96:	bf00      	nop
 8009b98:	3724      	adds	r7, #36	; 0x24
 8009b9a:	46bd      	mov	sp, r7
 8009b9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ba0:	4770      	bx	lr
 8009ba2:	bf00      	nop
 8009ba4:	58024400 	.word	0x58024400
 8009ba8:	03d09000 	.word	0x03d09000
 8009bac:	46000000 	.word	0x46000000
 8009bb0:	4c742400 	.word	0x4c742400
 8009bb4:	4a742400 	.word	0x4a742400
 8009bb8:	4bbebc20 	.word	0x4bbebc20

08009bbc <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 8009bbc:	b480      	push	{r7}
 8009bbe:	b089      	sub	sp, #36	; 0x24
 8009bc0:	af00      	add	r7, sp, #0
 8009bc2:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8009bc4:	4ba0      	ldr	r3, [pc, #640]	; (8009e48 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009bc6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009bc8:	f003 0303 	and.w	r3, r3, #3
 8009bcc:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4);
 8009bce:	4b9e      	ldr	r3, [pc, #632]	; (8009e48 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009bd0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009bd2:	091b      	lsrs	r3, r3, #4
 8009bd4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8009bd8:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 8009bda:	4b9b      	ldr	r3, [pc, #620]	; (8009e48 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009bdc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009bde:	f003 0301 	and.w	r3, r3, #1
 8009be2:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8009be4:	4b98      	ldr	r3, [pc, #608]	; (8009e48 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009be6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009be8:	08db      	lsrs	r3, r3, #3
 8009bea:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8009bee:	693a      	ldr	r2, [r7, #16]
 8009bf0:	fb02 f303 	mul.w	r3, r2, r3
 8009bf4:	ee07 3a90 	vmov	s15, r3
 8009bf8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009bfc:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 8009c00:	697b      	ldr	r3, [r7, #20]
 8009c02:	2b00      	cmp	r3, #0
 8009c04:	f000 8111 	beq.w	8009e2a <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 8009c08:	69bb      	ldr	r3, [r7, #24]
 8009c0a:	2b02      	cmp	r3, #2
 8009c0c:	f000 8083 	beq.w	8009d16 <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 8009c10:	69bb      	ldr	r3, [r7, #24]
 8009c12:	2b02      	cmp	r3, #2
 8009c14:	f200 80a1 	bhi.w	8009d5a <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 8009c18:	69bb      	ldr	r3, [r7, #24]
 8009c1a:	2b00      	cmp	r3, #0
 8009c1c:	d003      	beq.n	8009c26 <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 8009c1e:	69bb      	ldr	r3, [r7, #24]
 8009c20:	2b01      	cmp	r3, #1
 8009c22:	d056      	beq.n	8009cd2 <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 8009c24:	e099      	b.n	8009d5a <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009c26:	4b88      	ldr	r3, [pc, #544]	; (8009e48 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009c28:	681b      	ldr	r3, [r3, #0]
 8009c2a:	f003 0320 	and.w	r3, r3, #32
 8009c2e:	2b00      	cmp	r3, #0
 8009c30:	d02d      	beq.n	8009c8e <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8009c32:	4b85      	ldr	r3, [pc, #532]	; (8009e48 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009c34:	681b      	ldr	r3, [r3, #0]
 8009c36:	08db      	lsrs	r3, r3, #3
 8009c38:	f003 0303 	and.w	r3, r3, #3
 8009c3c:	4a83      	ldr	r2, [pc, #524]	; (8009e4c <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 8009c3e:	fa22 f303 	lsr.w	r3, r2, r3
 8009c42:	60bb      	str	r3, [r7, #8]
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8009c44:	68bb      	ldr	r3, [r7, #8]
 8009c46:	ee07 3a90 	vmov	s15, r3
 8009c4a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009c4e:	697b      	ldr	r3, [r7, #20]
 8009c50:	ee07 3a90 	vmov	s15, r3
 8009c54:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009c58:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009c5c:	4b7a      	ldr	r3, [pc, #488]	; (8009e48 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009c5e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009c60:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009c64:	ee07 3a90 	vmov	s15, r3
 8009c68:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009c6c:	ed97 6a03 	vldr	s12, [r7, #12]
 8009c70:	eddf 5a77 	vldr	s11, [pc, #476]	; 8009e50 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8009c74:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009c78:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009c7c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009c80:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009c84:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009c88:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8009c8c:	e087      	b.n	8009d9e <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8009c8e:	697b      	ldr	r3, [r7, #20]
 8009c90:	ee07 3a90 	vmov	s15, r3
 8009c94:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009c98:	eddf 6a6e 	vldr	s13, [pc, #440]	; 8009e54 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 8009c9c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009ca0:	4b69      	ldr	r3, [pc, #420]	; (8009e48 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009ca2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009ca4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009ca8:	ee07 3a90 	vmov	s15, r3
 8009cac:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009cb0:	ed97 6a03 	vldr	s12, [r7, #12]
 8009cb4:	eddf 5a66 	vldr	s11, [pc, #408]	; 8009e50 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8009cb8:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009cbc:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009cc0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009cc4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009cc8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009ccc:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8009cd0:	e065      	b.n	8009d9e <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8009cd2:	697b      	ldr	r3, [r7, #20]
 8009cd4:	ee07 3a90 	vmov	s15, r3
 8009cd8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009cdc:	eddf 6a5e 	vldr	s13, [pc, #376]	; 8009e58 <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 8009ce0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009ce4:	4b58      	ldr	r3, [pc, #352]	; (8009e48 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009ce6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009ce8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009cec:	ee07 3a90 	vmov	s15, r3
 8009cf0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009cf4:	ed97 6a03 	vldr	s12, [r7, #12]
 8009cf8:	eddf 5a55 	vldr	s11, [pc, #340]	; 8009e50 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8009cfc:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009d00:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009d04:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009d08:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009d0c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009d10:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8009d14:	e043      	b.n	8009d9e <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8009d16:	697b      	ldr	r3, [r7, #20]
 8009d18:	ee07 3a90 	vmov	s15, r3
 8009d1c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009d20:	eddf 6a4e 	vldr	s13, [pc, #312]	; 8009e5c <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 8009d24:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009d28:	4b47      	ldr	r3, [pc, #284]	; (8009e48 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009d2a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009d2c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009d30:	ee07 3a90 	vmov	s15, r3
 8009d34:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009d38:	ed97 6a03 	vldr	s12, [r7, #12]
 8009d3c:	eddf 5a44 	vldr	s11, [pc, #272]	; 8009e50 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8009d40:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009d44:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009d48:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009d4c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009d50:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009d54:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8009d58:	e021      	b.n	8009d9e <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      default:
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8009d5a:	697b      	ldr	r3, [r7, #20]
 8009d5c:	ee07 3a90 	vmov	s15, r3
 8009d60:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009d64:	eddf 6a3b 	vldr	s13, [pc, #236]	; 8009e54 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 8009d68:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009d6c:	4b36      	ldr	r3, [pc, #216]	; (8009e48 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009d6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009d70:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009d74:	ee07 3a90 	vmov	s15, r3
 8009d78:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009d7c:	ed97 6a03 	vldr	s12, [r7, #12]
 8009d80:	eddf 5a33 	vldr	s11, [pc, #204]	; 8009e50 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8009d84:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009d88:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009d8c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009d90:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009d94:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009d98:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8009d9c:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9)  + (float_t)1)) ;
 8009d9e:	4b2a      	ldr	r3, [pc, #168]	; (8009e48 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009da0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009da2:	0a5b      	lsrs	r3, r3, #9
 8009da4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009da8:	ee07 3a90 	vmov	s15, r3
 8009dac:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009db0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8009db4:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009db8:	edd7 6a07 	vldr	s13, [r7, #28]
 8009dbc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009dc0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009dc4:	ee17 2a90 	vmov	r2, s15
 8009dc8:	687b      	ldr	r3, [r7, #4]
 8009dca:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >> 16) + (float_t)1)) ;
 8009dcc:	4b1e      	ldr	r3, [pc, #120]	; (8009e48 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009dce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009dd0:	0c1b      	lsrs	r3, r3, #16
 8009dd2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009dd6:	ee07 3a90 	vmov	s15, r3
 8009dda:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009dde:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8009de2:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009de6:	edd7 6a07 	vldr	s13, [r7, #28]
 8009dea:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009dee:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009df2:	ee17 2a90 	vmov	r2, s15
 8009df6:	687b      	ldr	r3, [r7, #4]
 8009df8:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >> 24) + (float_t)1)) ;
 8009dfa:	4b13      	ldr	r3, [pc, #76]	; (8009e48 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8009dfc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009dfe:	0e1b      	lsrs	r3, r3, #24
 8009e00:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009e04:	ee07 3a90 	vmov	s15, r3
 8009e08:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009e0c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8009e10:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009e14:	edd7 6a07 	vldr	s13, [r7, #28]
 8009e18:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009e1c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009e20:	ee17 2a90 	vmov	r2, s15
 8009e24:	687b      	ldr	r3, [r7, #4]
 8009e26:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 8009e28:	e008      	b.n	8009e3c <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 8009e2a:	687b      	ldr	r3, [r7, #4]
 8009e2c:	2200      	movs	r2, #0
 8009e2e:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 8009e30:	687b      	ldr	r3, [r7, #4]
 8009e32:	2200      	movs	r2, #0
 8009e34:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 8009e36:	687b      	ldr	r3, [r7, #4]
 8009e38:	2200      	movs	r2, #0
 8009e3a:	609a      	str	r2, [r3, #8]
}
 8009e3c:	bf00      	nop
 8009e3e:	3724      	adds	r7, #36	; 0x24
 8009e40:	46bd      	mov	sp, r7
 8009e42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e46:	4770      	bx	lr
 8009e48:	58024400 	.word	0x58024400
 8009e4c:	03d09000 	.word	0x03d09000
 8009e50:	46000000 	.word	0x46000000
 8009e54:	4c742400 	.word	0x4c742400
 8009e58:	4a742400 	.word	0x4a742400
 8009e5c:	4bbebc20 	.word	0x4bbebc20

08009e60 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8009e60:	b580      	push	{r7, lr}
 8009e62:	b084      	sub	sp, #16
 8009e64:	af00      	add	r7, sp, #0
 8009e66:	6078      	str	r0, [r7, #4]
 8009e68:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8009e6a:	2300      	movs	r3, #0
 8009e6c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8009e6e:	4b53      	ldr	r3, [pc, #332]	; (8009fbc <RCCEx_PLL2_Config+0x15c>)
 8009e70:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009e72:	f003 0303 	and.w	r3, r3, #3
 8009e76:	2b03      	cmp	r3, #3
 8009e78:	d101      	bne.n	8009e7e <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8009e7a:	2301      	movs	r3, #1
 8009e7c:	e099      	b.n	8009fb2 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8009e7e:	4b4f      	ldr	r3, [pc, #316]	; (8009fbc <RCCEx_PLL2_Config+0x15c>)
 8009e80:	681b      	ldr	r3, [r3, #0]
 8009e82:	4a4e      	ldr	r2, [pc, #312]	; (8009fbc <RCCEx_PLL2_Config+0x15c>)
 8009e84:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8009e88:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009e8a:	f7f8 febb 	bl	8002c04 <HAL_GetTick>
 8009e8e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8009e90:	e008      	b.n	8009ea4 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8009e92:	f7f8 feb7 	bl	8002c04 <HAL_GetTick>
 8009e96:	4602      	mov	r2, r0
 8009e98:	68bb      	ldr	r3, [r7, #8]
 8009e9a:	1ad3      	subs	r3, r2, r3
 8009e9c:	2b02      	cmp	r3, #2
 8009e9e:	d901      	bls.n	8009ea4 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8009ea0:	2303      	movs	r3, #3
 8009ea2:	e086      	b.n	8009fb2 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8009ea4:	4b45      	ldr	r3, [pc, #276]	; (8009fbc <RCCEx_PLL2_Config+0x15c>)
 8009ea6:	681b      	ldr	r3, [r3, #0]
 8009ea8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8009eac:	2b00      	cmp	r3, #0
 8009eae:	d1f0      	bne.n	8009e92 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8009eb0:	4b42      	ldr	r3, [pc, #264]	; (8009fbc <RCCEx_PLL2_Config+0x15c>)
 8009eb2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009eb4:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8009eb8:	687b      	ldr	r3, [r7, #4]
 8009eba:	681b      	ldr	r3, [r3, #0]
 8009ebc:	031b      	lsls	r3, r3, #12
 8009ebe:	493f      	ldr	r1, [pc, #252]	; (8009fbc <RCCEx_PLL2_Config+0x15c>)
 8009ec0:	4313      	orrs	r3, r2
 8009ec2:	628b      	str	r3, [r1, #40]	; 0x28
 8009ec4:	687b      	ldr	r3, [r7, #4]
 8009ec6:	685b      	ldr	r3, [r3, #4]
 8009ec8:	3b01      	subs	r3, #1
 8009eca:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8009ece:	687b      	ldr	r3, [r7, #4]
 8009ed0:	689b      	ldr	r3, [r3, #8]
 8009ed2:	3b01      	subs	r3, #1
 8009ed4:	025b      	lsls	r3, r3, #9
 8009ed6:	b29b      	uxth	r3, r3
 8009ed8:	431a      	orrs	r2, r3
 8009eda:	687b      	ldr	r3, [r7, #4]
 8009edc:	68db      	ldr	r3, [r3, #12]
 8009ede:	3b01      	subs	r3, #1
 8009ee0:	041b      	lsls	r3, r3, #16
 8009ee2:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8009ee6:	431a      	orrs	r2, r3
 8009ee8:	687b      	ldr	r3, [r7, #4]
 8009eea:	691b      	ldr	r3, [r3, #16]
 8009eec:	3b01      	subs	r3, #1
 8009eee:	061b      	lsls	r3, r3, #24
 8009ef0:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8009ef4:	4931      	ldr	r1, [pc, #196]	; (8009fbc <RCCEx_PLL2_Config+0x15c>)
 8009ef6:	4313      	orrs	r3, r2
 8009ef8:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8009efa:	4b30      	ldr	r3, [pc, #192]	; (8009fbc <RCCEx_PLL2_Config+0x15c>)
 8009efc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009efe:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8009f02:	687b      	ldr	r3, [r7, #4]
 8009f04:	695b      	ldr	r3, [r3, #20]
 8009f06:	492d      	ldr	r1, [pc, #180]	; (8009fbc <RCCEx_PLL2_Config+0x15c>)
 8009f08:	4313      	orrs	r3, r2
 8009f0a:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8009f0c:	4b2b      	ldr	r3, [pc, #172]	; (8009fbc <RCCEx_PLL2_Config+0x15c>)
 8009f0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009f10:	f023 0220 	bic.w	r2, r3, #32
 8009f14:	687b      	ldr	r3, [r7, #4]
 8009f16:	699b      	ldr	r3, [r3, #24]
 8009f18:	4928      	ldr	r1, [pc, #160]	; (8009fbc <RCCEx_PLL2_Config+0x15c>)
 8009f1a:	4313      	orrs	r3, r2
 8009f1c:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8009f1e:	4b27      	ldr	r3, [pc, #156]	; (8009fbc <RCCEx_PLL2_Config+0x15c>)
 8009f20:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009f22:	4a26      	ldr	r2, [pc, #152]	; (8009fbc <RCCEx_PLL2_Config+0x15c>)
 8009f24:	f023 0310 	bic.w	r3, r3, #16
 8009f28:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8009f2a:	4b24      	ldr	r3, [pc, #144]	; (8009fbc <RCCEx_PLL2_Config+0x15c>)
 8009f2c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8009f2e:	4b24      	ldr	r3, [pc, #144]	; (8009fc0 <RCCEx_PLL2_Config+0x160>)
 8009f30:	4013      	ands	r3, r2
 8009f32:	687a      	ldr	r2, [r7, #4]
 8009f34:	69d2      	ldr	r2, [r2, #28]
 8009f36:	00d2      	lsls	r2, r2, #3
 8009f38:	4920      	ldr	r1, [pc, #128]	; (8009fbc <RCCEx_PLL2_Config+0x15c>)
 8009f3a:	4313      	orrs	r3, r2
 8009f3c:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8009f3e:	4b1f      	ldr	r3, [pc, #124]	; (8009fbc <RCCEx_PLL2_Config+0x15c>)
 8009f40:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009f42:	4a1e      	ldr	r2, [pc, #120]	; (8009fbc <RCCEx_PLL2_Config+0x15c>)
 8009f44:	f043 0310 	orr.w	r3, r3, #16
 8009f48:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8009f4a:	683b      	ldr	r3, [r7, #0]
 8009f4c:	2b00      	cmp	r3, #0
 8009f4e:	d106      	bne.n	8009f5e <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8009f50:	4b1a      	ldr	r3, [pc, #104]	; (8009fbc <RCCEx_PLL2_Config+0x15c>)
 8009f52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009f54:	4a19      	ldr	r2, [pc, #100]	; (8009fbc <RCCEx_PLL2_Config+0x15c>)
 8009f56:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8009f5a:	62d3      	str	r3, [r2, #44]	; 0x2c
 8009f5c:	e00f      	b.n	8009f7e <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8009f5e:	683b      	ldr	r3, [r7, #0]
 8009f60:	2b01      	cmp	r3, #1
 8009f62:	d106      	bne.n	8009f72 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8009f64:	4b15      	ldr	r3, [pc, #84]	; (8009fbc <RCCEx_PLL2_Config+0x15c>)
 8009f66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009f68:	4a14      	ldr	r2, [pc, #80]	; (8009fbc <RCCEx_PLL2_Config+0x15c>)
 8009f6a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8009f6e:	62d3      	str	r3, [r2, #44]	; 0x2c
 8009f70:	e005      	b.n	8009f7e <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8009f72:	4b12      	ldr	r3, [pc, #72]	; (8009fbc <RCCEx_PLL2_Config+0x15c>)
 8009f74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009f76:	4a11      	ldr	r2, [pc, #68]	; (8009fbc <RCCEx_PLL2_Config+0x15c>)
 8009f78:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8009f7c:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8009f7e:	4b0f      	ldr	r3, [pc, #60]	; (8009fbc <RCCEx_PLL2_Config+0x15c>)
 8009f80:	681b      	ldr	r3, [r3, #0]
 8009f82:	4a0e      	ldr	r2, [pc, #56]	; (8009fbc <RCCEx_PLL2_Config+0x15c>)
 8009f84:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8009f88:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009f8a:	f7f8 fe3b 	bl	8002c04 <HAL_GetTick>
 8009f8e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8009f90:	e008      	b.n	8009fa4 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8009f92:	f7f8 fe37 	bl	8002c04 <HAL_GetTick>
 8009f96:	4602      	mov	r2, r0
 8009f98:	68bb      	ldr	r3, [r7, #8]
 8009f9a:	1ad3      	subs	r3, r2, r3
 8009f9c:	2b02      	cmp	r3, #2
 8009f9e:	d901      	bls.n	8009fa4 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8009fa0:	2303      	movs	r3, #3
 8009fa2:	e006      	b.n	8009fb2 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8009fa4:	4b05      	ldr	r3, [pc, #20]	; (8009fbc <RCCEx_PLL2_Config+0x15c>)
 8009fa6:	681b      	ldr	r3, [r3, #0]
 8009fa8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8009fac:	2b00      	cmp	r3, #0
 8009fae:	d0f0      	beq.n	8009f92 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8009fb0:	7bfb      	ldrb	r3, [r7, #15]
}
 8009fb2:	4618      	mov	r0, r3
 8009fb4:	3710      	adds	r7, #16
 8009fb6:	46bd      	mov	sp, r7
 8009fb8:	bd80      	pop	{r7, pc}
 8009fba:	bf00      	nop
 8009fbc:	58024400 	.word	0x58024400
 8009fc0:	ffff0007 	.word	0xffff0007

08009fc4 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8009fc4:	b580      	push	{r7, lr}
 8009fc6:	b084      	sub	sp, #16
 8009fc8:	af00      	add	r7, sp, #0
 8009fca:	6078      	str	r0, [r7, #4]
 8009fcc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8009fce:	2300      	movs	r3, #0
 8009fd0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8009fd2:	4b53      	ldr	r3, [pc, #332]	; (800a120 <RCCEx_PLL3_Config+0x15c>)
 8009fd4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009fd6:	f003 0303 	and.w	r3, r3, #3
 8009fda:	2b03      	cmp	r3, #3
 8009fdc:	d101      	bne.n	8009fe2 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8009fde:	2301      	movs	r3, #1
 8009fe0:	e099      	b.n	800a116 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8009fe2:	4b4f      	ldr	r3, [pc, #316]	; (800a120 <RCCEx_PLL3_Config+0x15c>)
 8009fe4:	681b      	ldr	r3, [r3, #0]
 8009fe6:	4a4e      	ldr	r2, [pc, #312]	; (800a120 <RCCEx_PLL3_Config+0x15c>)
 8009fe8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8009fec:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009fee:	f7f8 fe09 	bl	8002c04 <HAL_GetTick>
 8009ff2:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8009ff4:	e008      	b.n	800a008 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8009ff6:	f7f8 fe05 	bl	8002c04 <HAL_GetTick>
 8009ffa:	4602      	mov	r2, r0
 8009ffc:	68bb      	ldr	r3, [r7, #8]
 8009ffe:	1ad3      	subs	r3, r2, r3
 800a000:	2b02      	cmp	r3, #2
 800a002:	d901      	bls.n	800a008 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 800a004:	2303      	movs	r3, #3
 800a006:	e086      	b.n	800a116 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800a008:	4b45      	ldr	r3, [pc, #276]	; (800a120 <RCCEx_PLL3_Config+0x15c>)
 800a00a:	681b      	ldr	r3, [r3, #0]
 800a00c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800a010:	2b00      	cmp	r3, #0
 800a012:	d1f0      	bne.n	8009ff6 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 800a014:	4b42      	ldr	r3, [pc, #264]	; (800a120 <RCCEx_PLL3_Config+0x15c>)
 800a016:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a018:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 800a01c:	687b      	ldr	r3, [r7, #4]
 800a01e:	681b      	ldr	r3, [r3, #0]
 800a020:	051b      	lsls	r3, r3, #20
 800a022:	493f      	ldr	r1, [pc, #252]	; (800a120 <RCCEx_PLL3_Config+0x15c>)
 800a024:	4313      	orrs	r3, r2
 800a026:	628b      	str	r3, [r1, #40]	; 0x28
 800a028:	687b      	ldr	r3, [r7, #4]
 800a02a:	685b      	ldr	r3, [r3, #4]
 800a02c:	3b01      	subs	r3, #1
 800a02e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800a032:	687b      	ldr	r3, [r7, #4]
 800a034:	689b      	ldr	r3, [r3, #8]
 800a036:	3b01      	subs	r3, #1
 800a038:	025b      	lsls	r3, r3, #9
 800a03a:	b29b      	uxth	r3, r3
 800a03c:	431a      	orrs	r2, r3
 800a03e:	687b      	ldr	r3, [r7, #4]
 800a040:	68db      	ldr	r3, [r3, #12]
 800a042:	3b01      	subs	r3, #1
 800a044:	041b      	lsls	r3, r3, #16
 800a046:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800a04a:	431a      	orrs	r2, r3
 800a04c:	687b      	ldr	r3, [r7, #4]
 800a04e:	691b      	ldr	r3, [r3, #16]
 800a050:	3b01      	subs	r3, #1
 800a052:	061b      	lsls	r3, r3, #24
 800a054:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800a058:	4931      	ldr	r1, [pc, #196]	; (800a120 <RCCEx_PLL3_Config+0x15c>)
 800a05a:	4313      	orrs	r3, r2
 800a05c:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800a05e:	4b30      	ldr	r3, [pc, #192]	; (800a120 <RCCEx_PLL3_Config+0x15c>)
 800a060:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a062:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800a066:	687b      	ldr	r3, [r7, #4]
 800a068:	695b      	ldr	r3, [r3, #20]
 800a06a:	492d      	ldr	r1, [pc, #180]	; (800a120 <RCCEx_PLL3_Config+0x15c>)
 800a06c:	4313      	orrs	r3, r2
 800a06e:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 800a070:	4b2b      	ldr	r3, [pc, #172]	; (800a120 <RCCEx_PLL3_Config+0x15c>)
 800a072:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a074:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 800a078:	687b      	ldr	r3, [r7, #4]
 800a07a:	699b      	ldr	r3, [r3, #24]
 800a07c:	4928      	ldr	r1, [pc, #160]	; (800a120 <RCCEx_PLL3_Config+0x15c>)
 800a07e:	4313      	orrs	r3, r2
 800a080:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800a082:	4b27      	ldr	r3, [pc, #156]	; (800a120 <RCCEx_PLL3_Config+0x15c>)
 800a084:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a086:	4a26      	ldr	r2, [pc, #152]	; (800a120 <RCCEx_PLL3_Config+0x15c>)
 800a088:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800a08c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800a08e:	4b24      	ldr	r3, [pc, #144]	; (800a120 <RCCEx_PLL3_Config+0x15c>)
 800a090:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800a092:	4b24      	ldr	r3, [pc, #144]	; (800a124 <RCCEx_PLL3_Config+0x160>)
 800a094:	4013      	ands	r3, r2
 800a096:	687a      	ldr	r2, [r7, #4]
 800a098:	69d2      	ldr	r2, [r2, #28]
 800a09a:	00d2      	lsls	r2, r2, #3
 800a09c:	4920      	ldr	r1, [pc, #128]	; (800a120 <RCCEx_PLL3_Config+0x15c>)
 800a09e:	4313      	orrs	r3, r2
 800a0a0:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800a0a2:	4b1f      	ldr	r3, [pc, #124]	; (800a120 <RCCEx_PLL3_Config+0x15c>)
 800a0a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a0a6:	4a1e      	ldr	r2, [pc, #120]	; (800a120 <RCCEx_PLL3_Config+0x15c>)
 800a0a8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800a0ac:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800a0ae:	683b      	ldr	r3, [r7, #0]
 800a0b0:	2b00      	cmp	r3, #0
 800a0b2:	d106      	bne.n	800a0c2 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800a0b4:	4b1a      	ldr	r3, [pc, #104]	; (800a120 <RCCEx_PLL3_Config+0x15c>)
 800a0b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a0b8:	4a19      	ldr	r2, [pc, #100]	; (800a120 <RCCEx_PLL3_Config+0x15c>)
 800a0ba:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800a0be:	62d3      	str	r3, [r2, #44]	; 0x2c
 800a0c0:	e00f      	b.n	800a0e2 <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800a0c2:	683b      	ldr	r3, [r7, #0]
 800a0c4:	2b01      	cmp	r3, #1
 800a0c6:	d106      	bne.n	800a0d6 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 800a0c8:	4b15      	ldr	r3, [pc, #84]	; (800a120 <RCCEx_PLL3_Config+0x15c>)
 800a0ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a0cc:	4a14      	ldr	r2, [pc, #80]	; (800a120 <RCCEx_PLL3_Config+0x15c>)
 800a0ce:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800a0d2:	62d3      	str	r3, [r2, #44]	; 0x2c
 800a0d4:	e005      	b.n	800a0e2 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800a0d6:	4b12      	ldr	r3, [pc, #72]	; (800a120 <RCCEx_PLL3_Config+0x15c>)
 800a0d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a0da:	4a11      	ldr	r2, [pc, #68]	; (800a120 <RCCEx_PLL3_Config+0x15c>)
 800a0dc:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800a0e0:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800a0e2:	4b0f      	ldr	r3, [pc, #60]	; (800a120 <RCCEx_PLL3_Config+0x15c>)
 800a0e4:	681b      	ldr	r3, [r3, #0]
 800a0e6:	4a0e      	ldr	r2, [pc, #56]	; (800a120 <RCCEx_PLL3_Config+0x15c>)
 800a0e8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800a0ec:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800a0ee:	f7f8 fd89 	bl	8002c04 <HAL_GetTick>
 800a0f2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800a0f4:	e008      	b.n	800a108 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800a0f6:	f7f8 fd85 	bl	8002c04 <HAL_GetTick>
 800a0fa:	4602      	mov	r2, r0
 800a0fc:	68bb      	ldr	r3, [r7, #8]
 800a0fe:	1ad3      	subs	r3, r2, r3
 800a100:	2b02      	cmp	r3, #2
 800a102:	d901      	bls.n	800a108 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 800a104:	2303      	movs	r3, #3
 800a106:	e006      	b.n	800a116 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800a108:	4b05      	ldr	r3, [pc, #20]	; (800a120 <RCCEx_PLL3_Config+0x15c>)
 800a10a:	681b      	ldr	r3, [r3, #0]
 800a10c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800a110:	2b00      	cmp	r3, #0
 800a112:	d0f0      	beq.n	800a0f6 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 800a114:	7bfb      	ldrb	r3, [r7, #15]
}
 800a116:	4618      	mov	r0, r3
 800a118:	3710      	adds	r7, #16
 800a11a:	46bd      	mov	sp, r7
 800a11c:	bd80      	pop	{r7, pc}
 800a11e:	bf00      	nop
 800a120:	58024400 	.word	0x58024400
 800a124:	ffff0007 	.word	0xffff0007

0800a128 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 800a128:	b580      	push	{r7, lr}
 800a12a:	b084      	sub	sp, #16
 800a12c:	af00      	add	r7, sp, #0
 800a12e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 800a130:	2301      	movs	r3, #1
 800a132:	73fb      	strb	r3, [r7, #15]

  /* Check RTC handler */
  if(hrtc != NULL)
 800a134:	687b      	ldr	r3, [r7, #4]
 800a136:	2b00      	cmp	r3, #0
 800a138:	d071      	beq.n	800a21e <HAL_RTC_Init+0xf6>
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else /*  (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */
    if(hrtc->State == HAL_RTC_STATE_RESET)
 800a13a:	687b      	ldr	r3, [r7, #4]
 800a13c:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800a140:	b2db      	uxtb	r3, r3
 800a142:	2b00      	cmp	r3, #0
 800a144:	d106      	bne.n	800a154 <HAL_RTC_Init+0x2c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 800a146:	687b      	ldr	r3, [r7, #4]
 800a148:	2200      	movs	r2, #0
 800a14a:	f883 2020 	strb.w	r2, [r3, #32]

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 800a14e:	6878      	ldr	r0, [r7, #4]
 800a150:	f7f7 fffe 	bl	8002150 <HAL_RTC_MspInit>
    }
#endif /*  (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 800a154:	687b      	ldr	r3, [r7, #4]
 800a156:	2202      	movs	r2, #2
 800a158:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Check whether the calendar needs to be initialized */
    if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 800a15c:	687b      	ldr	r3, [r7, #4]
 800a15e:	681b      	ldr	r3, [r3, #0]
 800a160:	68db      	ldr	r3, [r3, #12]
 800a162:	f003 0310 	and.w	r3, r3, #16
 800a166:	2b10      	cmp	r3, #16
 800a168:	d050      	beq.n	800a20c <HAL_RTC_Init+0xe4>
    {
      /* Disable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800a16a:	687b      	ldr	r3, [r7, #4]
 800a16c:	681b      	ldr	r3, [r3, #0]
 800a16e:	22ca      	movs	r2, #202	; 0xca
 800a170:	625a      	str	r2, [r3, #36]	; 0x24
 800a172:	687b      	ldr	r3, [r7, #4]
 800a174:	681b      	ldr	r3, [r3, #0]
 800a176:	2253      	movs	r2, #83	; 0x53
 800a178:	625a      	str	r2, [r3, #36]	; 0x24

     /* Enter Initialization mode */
      status = RTC_EnterInitMode(hrtc);
 800a17a:	6878      	ldr	r0, [r7, #4]
 800a17c:	f000 f87a 	bl	800a274 <RTC_EnterInitMode>
 800a180:	4603      	mov	r3, r0
 800a182:	73fb      	strb	r3, [r7, #15]
      if (status == HAL_OK)
 800a184:	7bfb      	ldrb	r3, [r7, #15]
 800a186:	2b00      	cmp	r3, #0
 800a188:	d124      	bne.n	800a1d4 <HAL_RTC_Init+0xac>
#if defined(TAMP)
        /* Clear RTC_CR FMT, OSEL, POL and TAMPOE Bits */
        hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE);
#else
        /* Clear RTC_CR FMT, OSEL and POL Bits */
        hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL);
 800a18a:	687b      	ldr	r3, [r7, #4]
 800a18c:	681b      	ldr	r3, [r3, #0]
 800a18e:	6899      	ldr	r1, [r3, #8]
 800a190:	687b      	ldr	r3, [r7, #4]
 800a192:	681a      	ldr	r2, [r3, #0]
 800a194:	4b24      	ldr	r3, [pc, #144]	; (800a228 <HAL_RTC_Init+0x100>)
 800a196:	400b      	ands	r3, r1
 800a198:	6093      	str	r3, [r2, #8]
#endif /* TAMP */

        /* Set RTC_CR register */
        hrtc->Instance->CR |= (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 800a19a:	687b      	ldr	r3, [r7, #4]
 800a19c:	681b      	ldr	r3, [r3, #0]
 800a19e:	6899      	ldr	r1, [r3, #8]
 800a1a0:	687b      	ldr	r3, [r7, #4]
 800a1a2:	685a      	ldr	r2, [r3, #4]
 800a1a4:	687b      	ldr	r3, [r7, #4]
 800a1a6:	691b      	ldr	r3, [r3, #16]
 800a1a8:	431a      	orrs	r2, r3
 800a1aa:	687b      	ldr	r3, [r7, #4]
 800a1ac:	699b      	ldr	r3, [r3, #24]
 800a1ae:	431a      	orrs	r2, r3
 800a1b0:	687b      	ldr	r3, [r7, #4]
 800a1b2:	681b      	ldr	r3, [r3, #0]
 800a1b4:	430a      	orrs	r2, r1
 800a1b6:	609a      	str	r2, [r3, #8]

        /* Configure the RTC PRER */
        hrtc->Instance->PRER = (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos) | (hrtc->Init.SynchPrediv << RTC_PRER_PREDIV_S_Pos);
 800a1b8:	687b      	ldr	r3, [r7, #4]
 800a1ba:	689b      	ldr	r3, [r3, #8]
 800a1bc:	0419      	lsls	r1, r3, #16
 800a1be:	687b      	ldr	r3, [r7, #4]
 800a1c0:	68da      	ldr	r2, [r3, #12]
 800a1c2:	687b      	ldr	r3, [r7, #4]
 800a1c4:	681b      	ldr	r3, [r3, #0]
 800a1c6:	430a      	orrs	r2, r1
 800a1c8:	611a      	str	r2, [r3, #16]

        /* Exit Initialization mode */
        status = RTC_ExitInitMode(hrtc);
 800a1ca:	6878      	ldr	r0, [r7, #4]
 800a1cc:	f000 f886 	bl	800a2dc <RTC_ExitInitMode>
 800a1d0:	4603      	mov	r3, r0
 800a1d2:	73fb      	strb	r3, [r7, #15]
      }
      if(status == HAL_OK)
 800a1d4:	7bfb      	ldrb	r3, [r7, #15]
 800a1d6:	2b00      	cmp	r3, #0
 800a1d8:	d113      	bne.n	800a202 <HAL_RTC_Init+0xda>
      {
#if defined(TAMP)
        hrtc->Instance->CR &= ~(RTC_CR_TAMPALRM_PU | RTC_CR_TAMPALRM_TYPE | RTC_CR_OUT2EN);
        hrtc->Instance->CR |= (hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
#else
        hrtc->Instance->OR &= ~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 800a1da:	687b      	ldr	r3, [r7, #4]
 800a1dc:	681b      	ldr	r3, [r3, #0]
 800a1de:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800a1e0:	687b      	ldr	r3, [r7, #4]
 800a1e2:	681b      	ldr	r3, [r3, #0]
 800a1e4:	f022 0203 	bic.w	r2, r2, #3
 800a1e8:	64da      	str	r2, [r3, #76]	; 0x4c
        hrtc->Instance->OR |= (hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 800a1ea:	687b      	ldr	r3, [r7, #4]
 800a1ec:	681b      	ldr	r3, [r3, #0]
 800a1ee:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 800a1f0:	687b      	ldr	r3, [r7, #4]
 800a1f2:	69da      	ldr	r2, [r3, #28]
 800a1f4:	687b      	ldr	r3, [r7, #4]
 800a1f6:	695b      	ldr	r3, [r3, #20]
 800a1f8:	431a      	orrs	r2, r3
 800a1fa:	687b      	ldr	r3, [r7, #4]
 800a1fc:	681b      	ldr	r3, [r3, #0]
 800a1fe:	430a      	orrs	r2, r1
 800a200:	64da      	str	r2, [r3, #76]	; 0x4c
#endif /* TAMP */
      }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800a202:	687b      	ldr	r3, [r7, #4]
 800a204:	681b      	ldr	r3, [r3, #0]
 800a206:	22ff      	movs	r2, #255	; 0xff
 800a208:	625a      	str	r2, [r3, #36]	; 0x24
 800a20a:	e001      	b.n	800a210 <HAL_RTC_Init+0xe8>
    }
    else
    {
      /* The calendar is already initialized */
      status = HAL_OK;
 800a20c:	2300      	movs	r3, #0
 800a20e:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 800a210:	7bfb      	ldrb	r3, [r7, #15]
 800a212:	2b00      	cmp	r3, #0
 800a214:	d103      	bne.n	800a21e <HAL_RTC_Init+0xf6>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_READY;
 800a216:	687b      	ldr	r3, [r7, #4]
 800a218:	2201      	movs	r2, #1
 800a21a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
  }

  /* return status */
  return status;
 800a21e:	7bfb      	ldrb	r3, [r7, #15]
}
 800a220:	4618      	mov	r0, r3
 800a222:	3710      	adds	r7, #16
 800a224:	46bd      	mov	sp, r7
 800a226:	bd80      	pop	{r7, pc}
 800a228:	ff8fffbf 	.word	0xff8fffbf

0800a22c <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 800a22c:	b580      	push	{r7, lr}
 800a22e:	b084      	sub	sp, #16
 800a230:	af00      	add	r7, sp, #0
 800a232:	6078      	str	r0, [r7, #4]

  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
#if defined(TAMP)
  hrtc->Instance->ICSR = ((uint32_t)(RTC_RSF_MASK & RTC_ICSR_RESERVED_MASK));
#else
  hrtc->Instance->ISR = ((uint32_t)(RTC_RSF_MASK & RTC_ISR_RESERVED_MASK));
 800a234:	687b      	ldr	r3, [r7, #4]
 800a236:	681b      	ldr	r3, [r3, #0]
 800a238:	4a0d      	ldr	r2, [pc, #52]	; (800a270 <HAL_RTC_WaitForSynchro+0x44>)
 800a23a:	60da      	str	r2, [r3, #12]
#endif /* TAMP */

  tickstart = HAL_GetTick();
 800a23c:	f7f8 fce2 	bl	8002c04 <HAL_GetTick>
 800a240:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
#if defined(TAMP)
  while ((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
#else
    while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800a242:	e009      	b.n	800a258 <HAL_RTC_WaitForSynchro+0x2c>
#endif /* TAMP */
    {
      if((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800a244:	f7f8 fcde 	bl	8002c04 <HAL_GetTick>
 800a248:	4602      	mov	r2, r0
 800a24a:	68fb      	ldr	r3, [r7, #12]
 800a24c:	1ad3      	subs	r3, r2, r3
 800a24e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800a252:	d901      	bls.n	800a258 <HAL_RTC_WaitForSynchro+0x2c>
      {
        return HAL_TIMEOUT;
 800a254:	2303      	movs	r3, #3
 800a256:	e007      	b.n	800a268 <HAL_RTC_WaitForSynchro+0x3c>
    while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800a258:	687b      	ldr	r3, [r7, #4]
 800a25a:	681b      	ldr	r3, [r3, #0]
 800a25c:	68db      	ldr	r3, [r3, #12]
 800a25e:	f003 0320 	and.w	r3, r3, #32
 800a262:	2b00      	cmp	r3, #0
 800a264:	d0ee      	beq.n	800a244 <HAL_RTC_WaitForSynchro+0x18>
      }
    }

  return HAL_OK;
 800a266:	2300      	movs	r3, #0
}
 800a268:	4618      	mov	r0, r3
 800a26a:	3710      	adds	r7, #16
 800a26c:	46bd      	mov	sp, r7
 800a26e:	bd80      	pop	{r7, pc}
 800a270:	0003ff5f 	.word	0x0003ff5f

0800a274 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 800a274:	b580      	push	{r7, lr}
 800a276:	b084      	sub	sp, #16
 800a278:	af00      	add	r7, sp, #0
 800a27a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800a27c:	2300      	movs	r3, #0
 800a27e:	73fb      	strb	r3, [r7, #15]
    tickstart = HAL_GetTick();

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while (((hrtc->Instance->ICSR & RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
#else
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 800a280:	687b      	ldr	r3, [r7, #4]
 800a282:	681b      	ldr	r3, [r3, #0]
 800a284:	68db      	ldr	r3, [r3, #12]
 800a286:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a28a:	2b00      	cmp	r3, #0
 800a28c:	d120      	bne.n	800a2d0 <RTC_EnterInitMode+0x5c>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 800a28e:	687b      	ldr	r3, [r7, #4]
 800a290:	681b      	ldr	r3, [r3, #0]
 800a292:	f04f 32ff 	mov.w	r2, #4294967295
 800a296:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 800a298:	f7f8 fcb4 	bl	8002c04 <HAL_GetTick>
 800a29c:	60b8      	str	r0, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while (((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 800a29e:	e00d      	b.n	800a2bc <RTC_EnterInitMode+0x48>
#endif /* TAMP */
    {
      if((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 800a2a0:	f7f8 fcb0 	bl	8002c04 <HAL_GetTick>
 800a2a4:	4602      	mov	r2, r0
 800a2a6:	68bb      	ldr	r3, [r7, #8]
 800a2a8:	1ad3      	subs	r3, r2, r3
 800a2aa:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800a2ae:	d905      	bls.n	800a2bc <RTC_EnterInitMode+0x48>
      {
        status = HAL_TIMEOUT;
 800a2b0:	2303      	movs	r3, #3
 800a2b2:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800a2b4:	687b      	ldr	r3, [r7, #4]
 800a2b6:	2203      	movs	r2, #3
 800a2b8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    while (((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 800a2bc:	687b      	ldr	r3, [r7, #4]
 800a2be:	681b      	ldr	r3, [r3, #0]
 800a2c0:	68db      	ldr	r3, [r3, #12]
 800a2c2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a2c6:	2b00      	cmp	r3, #0
 800a2c8:	d102      	bne.n	800a2d0 <RTC_EnterInitMode+0x5c>
 800a2ca:	7bfb      	ldrb	r3, [r7, #15]
 800a2cc:	2b03      	cmp	r3, #3
 800a2ce:	d1e7      	bne.n	800a2a0 <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return status;
 800a2d0:	7bfb      	ldrb	r3, [r7, #15]
}
 800a2d2:	4618      	mov	r0, r3
 800a2d4:	3710      	adds	r7, #16
 800a2d6:	46bd      	mov	sp, r7
 800a2d8:	bd80      	pop	{r7, pc}
	...

0800a2dc <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 800a2dc:	b580      	push	{r7, lr}
 800a2de:	b084      	sub	sp, #16
 800a2e0:	af00      	add	r7, sp, #0
 800a2e2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800a2e4:	2300      	movs	r3, #0
 800a2e6:	73fb      	strb	r3, [r7, #15]

  /* Exit Initialization mode */
#if defined(TAMP)
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
#else
  CLEAR_BIT(RTC->ISR, RTC_ISR_INITF);
 800a2e8:	4b1a      	ldr	r3, [pc, #104]	; (800a354 <RTC_ExitInitMode+0x78>)
 800a2ea:	68db      	ldr	r3, [r3, #12]
 800a2ec:	4a19      	ldr	r2, [pc, #100]	; (800a354 <RTC_ExitInitMode+0x78>)
 800a2ee:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a2f2:	60d3      	str	r3, [r2, #12]
#endif /* TAMP */

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 800a2f4:	4b17      	ldr	r3, [pc, #92]	; (800a354 <RTC_ExitInitMode+0x78>)
 800a2f6:	689b      	ldr	r3, [r3, #8]
 800a2f8:	f003 0320 	and.w	r3, r3, #32
 800a2fc:	2b00      	cmp	r3, #0
 800a2fe:	d10c      	bne.n	800a31a <RTC_ExitInitMode+0x3e>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800a300:	6878      	ldr	r0, [r7, #4]
 800a302:	f7ff ff93 	bl	800a22c <HAL_RTC_WaitForSynchro>
 800a306:	4603      	mov	r3, r0
 800a308:	2b00      	cmp	r3, #0
 800a30a:	d01e      	beq.n	800a34a <RTC_ExitInitMode+0x6e>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800a30c:	687b      	ldr	r3, [r7, #4]
 800a30e:	2203      	movs	r2, #3
 800a310:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      status = HAL_TIMEOUT;
 800a314:	2303      	movs	r3, #3
 800a316:	73fb      	strb	r3, [r7, #15]
 800a318:	e017      	b.n	800a34a <RTC_ExitInitMode+0x6e>
    }
  }
  else
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 800a31a:	4b0e      	ldr	r3, [pc, #56]	; (800a354 <RTC_ExitInitMode+0x78>)
 800a31c:	689b      	ldr	r3, [r3, #8]
 800a31e:	4a0d      	ldr	r2, [pc, #52]	; (800a354 <RTC_ExitInitMode+0x78>)
 800a320:	f023 0320 	bic.w	r3, r3, #32
 800a324:	6093      	str	r3, [r2, #8]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800a326:	6878      	ldr	r0, [r7, #4]
 800a328:	f7ff ff80 	bl	800a22c <HAL_RTC_WaitForSynchro>
 800a32c:	4603      	mov	r3, r0
 800a32e:	2b00      	cmp	r3, #0
 800a330:	d005      	beq.n	800a33e <RTC_ExitInitMode+0x62>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800a332:	687b      	ldr	r3, [r7, #4]
 800a334:	2203      	movs	r2, #3
 800a336:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      status = HAL_TIMEOUT;
 800a33a:	2303      	movs	r3, #3
 800a33c:	73fb      	strb	r3, [r7, #15]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 800a33e:	4b05      	ldr	r3, [pc, #20]	; (800a354 <RTC_ExitInitMode+0x78>)
 800a340:	689b      	ldr	r3, [r3, #8]
 800a342:	4a04      	ldr	r2, [pc, #16]	; (800a354 <RTC_ExitInitMode+0x78>)
 800a344:	f043 0320 	orr.w	r3, r3, #32
 800a348:	6093      	str	r3, [r2, #8]
  }

  return status;
 800a34a:	7bfb      	ldrb	r3, [r7, #15]
}
 800a34c:	4618      	mov	r0, r3
 800a34e:	3710      	adds	r7, #16
 800a350:	46bd      	mov	sp, r7
 800a352:	bd80      	pop	{r7, pc}
 800a354:	58004000 	.word	0x58004000

0800a358 <HAL_SAI_Init>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_Init(SAI_HandleTypeDef *hsai)
{
 800a358:	b580      	push	{r7, lr}
 800a35a:	b08a      	sub	sp, #40	; 0x28
 800a35c:	af00      	add	r7, sp, #0
 800a35e:	6078      	str	r0, [r7, #4]
  uint32_t ckstr_bits;
  uint32_t syncen_bits;
  SAI_TypeDef *SaiBaseAddress;

  /* Check the SAI handle allocation */
  if (hsai == NULL)
 800a360:	687b      	ldr	r3, [r7, #4]
 800a362:	2b00      	cmp	r3, #0
 800a364:	d101      	bne.n	800a36a <HAL_SAI_Init+0x12>
  {
    return HAL_ERROR;
 800a366:	2301      	movs	r3, #1
 800a368:	e28e      	b.n	800a888 <HAL_SAI_Init+0x530>
  assert_param(IS_SAI_BLOCK_FIRST_BIT(hsai->Init.FirstBit));
  assert_param(IS_SAI_BLOCK_CLOCK_STROBING(hsai->Init.ClockStrobing));
  assert_param(IS_SAI_BLOCK_SYNCHRO(hsai->Init.Synchro));
#if defined(SAI_VER_V2_X)
  /* SAI Peripheral version depends on STM32H7 device revision ID */
  if (HAL_GetREVID() >= REV_ID_B) /* STM32H7xx Rev.B and above */
 800a36a:	f7f8 fc7b 	bl	8002c64 <HAL_GetREVID>
  assert_param(IS_SAI_BLOCK_SLOT_NUMBER(hsai->SlotInit.SlotNumber));
  assert_param(IS_SAI_SLOT_ACTIVE(hsai->SlotInit.SlotActive));

  /* Check the SAI PDM parameters */
  assert_param(IS_FUNCTIONAL_STATE(hsai->Init.PdmInit.Activation));
  if (hsai->Init.PdmInit.Activation == ENABLE)
 800a36e:	687b      	ldr	r3, [r7, #4]
 800a370:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800a374:	2b01      	cmp	r3, #1
 800a376:	d113      	bne.n	800a3a0 <HAL_SAI_Init+0x48>
  {
    assert_param(IS_SAI_PDM_MIC_PAIRS_NUMBER(hsai->Init.PdmInit.MicPairsNbr));
    assert_param(IS_SAI_PDM_CLOCK_ENABLE(hsai->Init.PdmInit.ClockEnable));
    /* Check that SAI sub-block is SAI1 or SAI4 sub-block A, in master RX mode with free protocol */
#if defined(SAI4)
    if (((hsai->Instance != SAI1_Block_A) && (hsai->Instance != SAI4_Block_A)) ||
 800a378:	687b      	ldr	r3, [r7, #4]
 800a37a:	681b      	ldr	r3, [r3, #0]
 800a37c:	4a96      	ldr	r2, [pc, #600]	; (800a5d8 <HAL_SAI_Init+0x280>)
 800a37e:	4293      	cmp	r3, r2
 800a380:	d004      	beq.n	800a38c <HAL_SAI_Init+0x34>
 800a382:	687b      	ldr	r3, [r7, #4]
 800a384:	681b      	ldr	r3, [r3, #0]
 800a386:	4a95      	ldr	r2, [pc, #596]	; (800a5dc <HAL_SAI_Init+0x284>)
 800a388:	4293      	cmp	r3, r2
 800a38a:	d107      	bne.n	800a39c <HAL_SAI_Init+0x44>
         (hsai->Init.AudioMode != SAI_MODEMASTER_RX) ||
 800a38c:	687b      	ldr	r3, [r7, #4]
 800a38e:	685b      	ldr	r3, [r3, #4]
    if (((hsai->Instance != SAI1_Block_A) && (hsai->Instance != SAI4_Block_A)) ||
 800a390:	2b01      	cmp	r3, #1
 800a392:	d103      	bne.n	800a39c <HAL_SAI_Init+0x44>
         (hsai->Init.Protocol != SAI_FREE_PROTOCOL))
 800a394:	687b      	ldr	r3, [r7, #4]
 800a396:	6c5b      	ldr	r3, [r3, #68]	; 0x44
         (hsai->Init.AudioMode != SAI_MODEMASTER_RX) ||
 800a398:	2b00      	cmp	r3, #0
 800a39a:	d001      	beq.n	800a3a0 <HAL_SAI_Init+0x48>
    {
      return HAL_ERROR;
 800a39c:	2301      	movs	r3, #1
 800a39e:	e273      	b.n	800a888 <HAL_SAI_Init+0x530>
    }
#endif /* SAI4 */
  }

  /* Get the SAI base address according to the SAI handle */
  if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 800a3a0:	687b      	ldr	r3, [r7, #4]
 800a3a2:	681b      	ldr	r3, [r3, #0]
 800a3a4:	4a8c      	ldr	r2, [pc, #560]	; (800a5d8 <HAL_SAI_Init+0x280>)
 800a3a6:	4293      	cmp	r3, r2
 800a3a8:	d004      	beq.n	800a3b4 <HAL_SAI_Init+0x5c>
 800a3aa:	687b      	ldr	r3, [r7, #4]
 800a3ac:	681b      	ldr	r3, [r3, #0]
 800a3ae:	4a8c      	ldr	r2, [pc, #560]	; (800a5e0 <HAL_SAI_Init+0x288>)
 800a3b0:	4293      	cmp	r3, r2
 800a3b2:	d102      	bne.n	800a3ba <HAL_SAI_Init+0x62>
  {
    SaiBaseAddress = SAI1;
 800a3b4:	4b8b      	ldr	r3, [pc, #556]	; (800a5e4 <HAL_SAI_Init+0x28c>)
 800a3b6:	61bb      	str	r3, [r7, #24]
 800a3b8:	e028      	b.n	800a40c <HAL_SAI_Init+0xb4>
  }
#if defined(SAI2)
  else if ((hsai->Instance == SAI2_Block_A) || (hsai->Instance == SAI2_Block_B))
 800a3ba:	687b      	ldr	r3, [r7, #4]
 800a3bc:	681b      	ldr	r3, [r3, #0]
 800a3be:	4a8a      	ldr	r2, [pc, #552]	; (800a5e8 <HAL_SAI_Init+0x290>)
 800a3c0:	4293      	cmp	r3, r2
 800a3c2:	d004      	beq.n	800a3ce <HAL_SAI_Init+0x76>
 800a3c4:	687b      	ldr	r3, [r7, #4]
 800a3c6:	681b      	ldr	r3, [r3, #0]
 800a3c8:	4a88      	ldr	r2, [pc, #544]	; (800a5ec <HAL_SAI_Init+0x294>)
 800a3ca:	4293      	cmp	r3, r2
 800a3cc:	d102      	bne.n	800a3d4 <HAL_SAI_Init+0x7c>
  {
    SaiBaseAddress = SAI2;
 800a3ce:	4b88      	ldr	r3, [pc, #544]	; (800a5f0 <HAL_SAI_Init+0x298>)
 800a3d0:	61bb      	str	r3, [r7, #24]
 800a3d2:	e01b      	b.n	800a40c <HAL_SAI_Init+0xb4>
  }
#endif /* SAI2 */
#if defined(SAI3)
  else if ((hsai->Instance == SAI3_Block_A) || (hsai->Instance == SAI3_Block_B))
 800a3d4:	687b      	ldr	r3, [r7, #4]
 800a3d6:	681b      	ldr	r3, [r3, #0]
 800a3d8:	4a86      	ldr	r2, [pc, #536]	; (800a5f4 <HAL_SAI_Init+0x29c>)
 800a3da:	4293      	cmp	r3, r2
 800a3dc:	d004      	beq.n	800a3e8 <HAL_SAI_Init+0x90>
 800a3de:	687b      	ldr	r3, [r7, #4]
 800a3e0:	681b      	ldr	r3, [r3, #0]
 800a3e2:	4a85      	ldr	r2, [pc, #532]	; (800a5f8 <HAL_SAI_Init+0x2a0>)
 800a3e4:	4293      	cmp	r3, r2
 800a3e6:	d102      	bne.n	800a3ee <HAL_SAI_Init+0x96>
  {
    SaiBaseAddress = SAI3;
 800a3e8:	4b84      	ldr	r3, [pc, #528]	; (800a5fc <HAL_SAI_Init+0x2a4>)
 800a3ea:	61bb      	str	r3, [r7, #24]
 800a3ec:	e00e      	b.n	800a40c <HAL_SAI_Init+0xb4>
  }
#endif /* SAI3 */
#if defined(SAI4)
  else if ((hsai->Instance == SAI4_Block_A) || (hsai->Instance == SAI4_Block_B))
 800a3ee:	687b      	ldr	r3, [r7, #4]
 800a3f0:	681b      	ldr	r3, [r3, #0]
 800a3f2:	4a7a      	ldr	r2, [pc, #488]	; (800a5dc <HAL_SAI_Init+0x284>)
 800a3f4:	4293      	cmp	r3, r2
 800a3f6:	d004      	beq.n	800a402 <HAL_SAI_Init+0xaa>
 800a3f8:	687b      	ldr	r3, [r7, #4]
 800a3fa:	681b      	ldr	r3, [r3, #0]
 800a3fc:	4a80      	ldr	r2, [pc, #512]	; (800a600 <HAL_SAI_Init+0x2a8>)
 800a3fe:	4293      	cmp	r3, r2
 800a400:	d102      	bne.n	800a408 <HAL_SAI_Init+0xb0>
  {
    SaiBaseAddress = SAI4;
 800a402:	4b80      	ldr	r3, [pc, #512]	; (800a604 <HAL_SAI_Init+0x2ac>)
 800a404:	61bb      	str	r3, [r7, #24]
 800a406:	e001      	b.n	800a40c <HAL_SAI_Init+0xb4>
  }
#endif /* SAI4 */
  else
  {
    return HAL_ERROR;
 800a408:	2301      	movs	r3, #1
 800a40a:	e23d      	b.n	800a888 <HAL_SAI_Init+0x530>
  }

  if (hsai->State == HAL_SAI_STATE_RESET)
 800a40c:	687b      	ldr	r3, [r7, #4]
 800a40e:	f893 3091 	ldrb.w	r3, [r3, #145]	; 0x91
 800a412:	b2db      	uxtb	r3, r3
 800a414:	2b00      	cmp	r3, #0
 800a416:	d106      	bne.n	800a426 <HAL_SAI_Init+0xce>
  {
    /* Allocate lock resource and initialize it */
    hsai->Lock = HAL_UNLOCKED;
 800a418:	687b      	ldr	r3, [r7, #4]
 800a41a:	2200      	movs	r2, #0
 800a41c:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90
      hsai->MspInitCallback = HAL_SAI_MspInit;
    }
    hsai->MspInitCallback(hsai);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_SAI_MspInit(hsai);
 800a420:	6878      	ldr	r0, [r7, #4]
 800a422:	f7f8 f9a9 	bl	8002778 <HAL_SAI_MspInit>
#endif
  }

  /* Disable the selected SAI peripheral */
  if(SAI_Disable(hsai) != HAL_OK)
 800a426:	6878      	ldr	r0, [r7, #4]
 800a428:	f000 fa40 	bl	800a8ac <SAI_Disable>
 800a42c:	4603      	mov	r3, r0
 800a42e:	2b00      	cmp	r3, #0
 800a430:	d001      	beq.n	800a436 <HAL_SAI_Init+0xde>
  {
    return HAL_ERROR;
 800a432:	2301      	movs	r3, #1
 800a434:	e228      	b.n	800a888 <HAL_SAI_Init+0x530>
  }

  hsai->State = HAL_SAI_STATE_BUSY;
 800a436:	687b      	ldr	r3, [r7, #4]
 800a438:	2202      	movs	r2, #2
 800a43a:	f883 2091 	strb.w	r2, [r3, #145]	; 0x91

  /* SAI Block Synchro Configuration -----------------------------------------*/
  /* This setting must be done with both audio block (A & B) disabled         */
  switch (hsai->Init.SynchroExt)
 800a43e:	687b      	ldr	r3, [r7, #4]
 800a440:	68db      	ldr	r3, [r3, #12]
 800a442:	2b02      	cmp	r3, #2
 800a444:	d00c      	beq.n	800a460 <HAL_SAI_Init+0x108>
 800a446:	2b02      	cmp	r3, #2
 800a448:	d80d      	bhi.n	800a466 <HAL_SAI_Init+0x10e>
 800a44a:	2b00      	cmp	r3, #0
 800a44c:	d002      	beq.n	800a454 <HAL_SAI_Init+0xfc>
 800a44e:	2b01      	cmp	r3, #1
 800a450:	d003      	beq.n	800a45a <HAL_SAI_Init+0x102>
 800a452:	e008      	b.n	800a466 <HAL_SAI_Init+0x10e>
  {
    case SAI_SYNCEXT_DISABLE :
      tmpregisterGCR = 0;
 800a454:	2300      	movs	r3, #0
 800a456:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 800a458:	e008      	b.n	800a46c <HAL_SAI_Init+0x114>
    case SAI_SYNCEXT_OUTBLOCKA_ENABLE :
      tmpregisterGCR = SAI_GCR_SYNCOUT_0;
 800a45a:	2310      	movs	r3, #16
 800a45c:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 800a45e:	e005      	b.n	800a46c <HAL_SAI_Init+0x114>
    case SAI_SYNCEXT_OUTBLOCKB_ENABLE :
      tmpregisterGCR = SAI_GCR_SYNCOUT_1;
 800a460:	2320      	movs	r3, #32
 800a462:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 800a464:	e002      	b.n	800a46c <HAL_SAI_Init+0x114>
    default:
      tmpregisterGCR = 0;
 800a466:	2300      	movs	r3, #0
 800a468:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 800a46a:	bf00      	nop
  }

  switch (hsai->Init.Synchro)
 800a46c:	687b      	ldr	r3, [r7, #4]
 800a46e:	689b      	ldr	r3, [r3, #8]
 800a470:	2b05      	cmp	r3, #5
 800a472:	d832      	bhi.n	800a4da <HAL_SAI_Init+0x182>
 800a474:	a201      	add	r2, pc, #4	; (adr r2, 800a47c <HAL_SAI_Init+0x124>)
 800a476:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a47a:	bf00      	nop
 800a47c:	0800a495 	.word	0x0800a495
 800a480:	0800a49b 	.word	0x0800a49b
 800a484:	0800a4a3 	.word	0x0800a4a3
 800a488:	0800a4ab 	.word	0x0800a4ab
 800a48c:	0800a4bb 	.word	0x0800a4bb
 800a490:	0800a4cb 	.word	0x0800a4cb
  {
    case SAI_ASYNCHRONOUS :
      syncen_bits = 0;
 800a494:	2300      	movs	r3, #0
 800a496:	61fb      	str	r3, [r7, #28]
      break;
 800a498:	e022      	b.n	800a4e0 <HAL_SAI_Init+0x188>
    case SAI_SYNCHRONOUS :
      syncen_bits = SAI_xCR1_SYNCEN_0;
 800a49a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a49e:	61fb      	str	r3, [r7, #28]
      break;
 800a4a0:	e01e      	b.n	800a4e0 <HAL_SAI_Init+0x188>
    case SAI_SYNCHRONOUS_EXT_SAI1 :
      syncen_bits = SAI_xCR1_SYNCEN_1;
 800a4a2:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800a4a6:	61fb      	str	r3, [r7, #28]
      break;
 800a4a8:	e01a      	b.n	800a4e0 <HAL_SAI_Init+0x188>
#if defined(SAI2)
    case SAI_SYNCHRONOUS_EXT_SAI2 :
      syncen_bits = SAI_xCR1_SYNCEN_1;
 800a4aa:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800a4ae:	61fb      	str	r3, [r7, #28]
      tmpregisterGCR |= SAI_GCR_SYNCIN_0;
 800a4b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a4b2:	f043 0301 	orr.w	r3, r3, #1
 800a4b6:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 800a4b8:	e012      	b.n	800a4e0 <HAL_SAI_Init+0x188>
#endif /* SAI2 */
#if defined(SAI3)
    case SAI_SYNCHRONOUS_EXT_SAI3 :
      syncen_bits = SAI_xCR1_SYNCEN_1;
 800a4ba:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800a4be:	61fb      	str	r3, [r7, #28]
      tmpregisterGCR |= SAI_GCR_SYNCIN_1;
 800a4c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a4c2:	f043 0302 	orr.w	r3, r3, #2
 800a4c6:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 800a4c8:	e00a      	b.n	800a4e0 <HAL_SAI_Init+0x188>
#endif /* SAI3 */
#if defined(SAI4)
    case SAI_SYNCHRONOUS_EXT_SAI4 :
      syncen_bits = SAI_xCR1_SYNCEN_1;
 800a4ca:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800a4ce:	61fb      	str	r3, [r7, #28]
      tmpregisterGCR |= (SAI_GCR_SYNCIN_1 | SAI_GCR_SYNCIN_0);
 800a4d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a4d2:	f043 0303 	orr.w	r3, r3, #3
 800a4d6:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 800a4d8:	e002      	b.n	800a4e0 <HAL_SAI_Init+0x188>
#endif /* SAI4 */
    default:
      syncen_bits = 0;
 800a4da:	2300      	movs	r3, #0
 800a4dc:	61fb      	str	r3, [r7, #28]
      break;
 800a4de:	bf00      	nop
  }

  /* Set the SAI Block Synchro Configuration */
  SaiBaseAddress->GCR = tmpregisterGCR;
 800a4e0:	69bb      	ldr	r3, [r7, #24]
 800a4e2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a4e4:	601a      	str	r2, [r3, #0]

  if (hsai->Init.AudioFrequency != SAI_AUDIO_FREQUENCY_MCKDIV)
 800a4e6:	687b      	ldr	r3, [r7, #4]
 800a4e8:	6a1b      	ldr	r3, [r3, #32]
 800a4ea:	2b00      	cmp	r3, #0
 800a4ec:	f000 80c5 	beq.w	800a67a <HAL_SAI_Init+0x322>
  {
    uint32_t freq = 0;
 800a4f0:	2300      	movs	r3, #0
 800a4f2:	617b      	str	r3, [r7, #20]
    uint32_t tmpval;

    /* In this case, the MCKDIV value is calculated to get AudioFrequency */
    if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 800a4f4:	687b      	ldr	r3, [r7, #4]
 800a4f6:	681b      	ldr	r3, [r3, #0]
 800a4f8:	4a37      	ldr	r2, [pc, #220]	; (800a5d8 <HAL_SAI_Init+0x280>)
 800a4fa:	4293      	cmp	r3, r2
 800a4fc:	d004      	beq.n	800a508 <HAL_SAI_Init+0x1b0>
 800a4fe:	687b      	ldr	r3, [r7, #4]
 800a500:	681b      	ldr	r3, [r3, #0]
 800a502:	4a37      	ldr	r2, [pc, #220]	; (800a5e0 <HAL_SAI_Init+0x288>)
 800a504:	4293      	cmp	r3, r2
 800a506:	d106      	bne.n	800a516 <HAL_SAI_Init+0x1be>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI1);
 800a508:	f44f 7080 	mov.w	r0, #256	; 0x100
 800a50c:	f04f 0100 	mov.w	r1, #0
 800a510:	f7fe fb16 	bl	8008b40 <HAL_RCCEx_GetPeriphCLKFreq>
 800a514:	6178      	str	r0, [r7, #20]
    }

#if defined(SAI2)
#if defined(RCC_PERIPHCLK_SAI2)
    if ((hsai->Instance == SAI2_Block_A) || (hsai->Instance == SAI2_Block_B))
 800a516:	687b      	ldr	r3, [r7, #4]
 800a518:	681b      	ldr	r3, [r3, #0]
 800a51a:	4a33      	ldr	r2, [pc, #204]	; (800a5e8 <HAL_SAI_Init+0x290>)
 800a51c:	4293      	cmp	r3, r2
 800a51e:	d004      	beq.n	800a52a <HAL_SAI_Init+0x1d2>
 800a520:	687b      	ldr	r3, [r7, #4]
 800a522:	681b      	ldr	r3, [r3, #0]
 800a524:	4a31      	ldr	r2, [pc, #196]	; (800a5ec <HAL_SAI_Init+0x294>)
 800a526:	4293      	cmp	r3, r2
 800a528:	d106      	bne.n	800a538 <HAL_SAI_Init+0x1e0>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI2);
 800a52a:	f44f 7000 	mov.w	r0, #512	; 0x200
 800a52e:	f04f 0100 	mov.w	r1, #0
 800a532:	f7fe fb05 	bl	8008b40 <HAL_RCCEx_GetPeriphCLKFreq>
 800a536:	6178      	str	r0, [r7, #20]
    }
#endif /* RCC_PERIPHCLK_SAI2 */
#endif /* SAI2 */

#if defined(SAI3)
    if ((hsai->Instance == SAI3_Block_A) || (hsai->Instance == SAI3_Block_B))
 800a538:	687b      	ldr	r3, [r7, #4]
 800a53a:	681b      	ldr	r3, [r3, #0]
 800a53c:	4a2d      	ldr	r2, [pc, #180]	; (800a5f4 <HAL_SAI_Init+0x29c>)
 800a53e:	4293      	cmp	r3, r2
 800a540:	d004      	beq.n	800a54c <HAL_SAI_Init+0x1f4>
 800a542:	687b      	ldr	r3, [r7, #4]
 800a544:	681b      	ldr	r3, [r3, #0]
 800a546:	4a2c      	ldr	r2, [pc, #176]	; (800a5f8 <HAL_SAI_Init+0x2a0>)
 800a548:	4293      	cmp	r3, r2
 800a54a:	d106      	bne.n	800a55a <HAL_SAI_Init+0x202>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI3);
 800a54c:	f44f 7000 	mov.w	r0, #512	; 0x200
 800a550:	f04f 0100 	mov.w	r1, #0
 800a554:	f7fe faf4 	bl	8008b40 <HAL_RCCEx_GetPeriphCLKFreq>
 800a558:	6178      	str	r0, [r7, #20]
    }
#endif /* SAI3 */
#if defined(SAI4)
    if (hsai->Instance == SAI4_Block_A)
 800a55a:	687b      	ldr	r3, [r7, #4]
 800a55c:	681b      	ldr	r3, [r3, #0]
 800a55e:	4a1f      	ldr	r2, [pc, #124]	; (800a5dc <HAL_SAI_Init+0x284>)
 800a560:	4293      	cmp	r3, r2
 800a562:	d106      	bne.n	800a572 <HAL_SAI_Init+0x21a>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI4A);
 800a564:	f44f 6080 	mov.w	r0, #1024	; 0x400
 800a568:	f04f 0100 	mov.w	r1, #0
 800a56c:	f7fe fae8 	bl	8008b40 <HAL_RCCEx_GetPeriphCLKFreq>
 800a570:	6178      	str	r0, [r7, #20]
    }
    if (hsai->Instance == SAI4_Block_B)
 800a572:	687b      	ldr	r3, [r7, #4]
 800a574:	681b      	ldr	r3, [r3, #0]
 800a576:	4a22      	ldr	r2, [pc, #136]	; (800a600 <HAL_SAI_Init+0x2a8>)
 800a578:	4293      	cmp	r3, r2
 800a57a:	d106      	bne.n	800a58a <HAL_SAI_Init+0x232>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI4B);
 800a57c:	f44f 6000 	mov.w	r0, #2048	; 0x800
 800a580:	f04f 0100 	mov.w	r1, #0
 800a584:	f7fe fadc 	bl	8008b40 <HAL_RCCEx_GetPeriphCLKFreq>
 800a588:	6178      	str	r0, [r7, #20]
    /* Configure Master Clock Divider using the following formula :
       - If NODIV = 1 :
         MCKDIV[5:0] = SAI_CK_x / (FS * (FRL + 1))
       - If NODIV = 0 :
         MCKDIV[5:0] = SAI_CK_x / (FS * (OSR + 1) * 256) */
    if (hsai->Init.NoDivider == SAI_MASTERDIVIDER_DISABLE)
 800a58a:	687b      	ldr	r3, [r7, #4]
 800a58c:	699b      	ldr	r3, [r3, #24]
 800a58e:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800a592:	d139      	bne.n	800a608 <HAL_SAI_Init+0x2b0>
    {
      /* NODIV = 1 */
      uint32_t tmpframelength;

      if (hsai->Init.Protocol == SAI_SPDIF_PROTOCOL)
 800a594:	687b      	ldr	r3, [r7, #4]
 800a596:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a598:	2b04      	cmp	r3, #4
 800a59a:	d102      	bne.n	800a5a2 <HAL_SAI_Init+0x24a>
      {
        /* For SPDIF protocol, frame length is set by hardware to 64 */
        tmpframelength = SAI_SPDIF_FRAME_LENGTH;
 800a59c:	2340      	movs	r3, #64	; 0x40
 800a59e:	60fb      	str	r3, [r7, #12]
 800a5a0:	e00a      	b.n	800a5b8 <HAL_SAI_Init+0x260>
      }
      else if (hsai->Init.Protocol == SAI_AC97_PROTOCOL)
 800a5a2:	687b      	ldr	r3, [r7, #4]
 800a5a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a5a6:	2b08      	cmp	r3, #8
 800a5a8:	d103      	bne.n	800a5b2 <HAL_SAI_Init+0x25a>
      {
        /* For AC97 protocol, frame length is set by hardware to 256 */
        tmpframelength = SAI_AC97_FRAME_LENGTH;
 800a5aa:	f44f 7380 	mov.w	r3, #256	; 0x100
 800a5ae:	60fb      	str	r3, [r7, #12]
 800a5b0:	e002      	b.n	800a5b8 <HAL_SAI_Init+0x260>
      }
      else
      {
        /* For free protocol, frame length is set by user */
        tmpframelength = hsai->FrameInit.FrameLength;
 800a5b2:	687b      	ldr	r3, [r7, #4]
 800a5b4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a5b6:	60fb      	str	r3, [r7, #12]
      }

      /* (freq x 10) to keep Significant digits */
      tmpval = (freq * 10U) / (hsai->Init.AudioFrequency * tmpframelength);
 800a5b8:	697a      	ldr	r2, [r7, #20]
 800a5ba:	4613      	mov	r3, r2
 800a5bc:	009b      	lsls	r3, r3, #2
 800a5be:	4413      	add	r3, r2
 800a5c0:	005b      	lsls	r3, r3, #1
 800a5c2:	4619      	mov	r1, r3
 800a5c4:	687b      	ldr	r3, [r7, #4]
 800a5c6:	6a1b      	ldr	r3, [r3, #32]
 800a5c8:	68fa      	ldr	r2, [r7, #12]
 800a5ca:	fb02 f303 	mul.w	r3, r2, r3
 800a5ce:	fbb1 f3f3 	udiv	r3, r1, r3
 800a5d2:	613b      	str	r3, [r7, #16]
 800a5d4:	e030      	b.n	800a638 <HAL_SAI_Init+0x2e0>
 800a5d6:	bf00      	nop
 800a5d8:	40015804 	.word	0x40015804
 800a5dc:	58005404 	.word	0x58005404
 800a5e0:	40015824 	.word	0x40015824
 800a5e4:	40015800 	.word	0x40015800
 800a5e8:	40015c04 	.word	0x40015c04
 800a5ec:	40015c24 	.word	0x40015c24
 800a5f0:	40015c00 	.word	0x40015c00
 800a5f4:	40016004 	.word	0x40016004
 800a5f8:	40016024 	.word	0x40016024
 800a5fc:	40016000 	.word	0x40016000
 800a600:	58005424 	.word	0x58005424
 800a604:	58005400 	.word	0x58005400
    }
    else
    {
      /* NODIV = 0 */
      uint32_t tmposr;
      tmposr = (hsai->Init.MckOverSampling == SAI_MCK_OVERSAMPLING_ENABLE) ? 2U : 1U;
 800a608:	687b      	ldr	r3, [r7, #4]
 800a60a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a60c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800a610:	d101      	bne.n	800a616 <HAL_SAI_Init+0x2be>
 800a612:	2302      	movs	r3, #2
 800a614:	e000      	b.n	800a618 <HAL_SAI_Init+0x2c0>
 800a616:	2301      	movs	r3, #1
 800a618:	60bb      	str	r3, [r7, #8]
      /* (freq x 10) to keep Significant digits */
      tmpval = (freq * 10U) / (hsai->Init.AudioFrequency * tmposr * 256U);
 800a61a:	697a      	ldr	r2, [r7, #20]
 800a61c:	4613      	mov	r3, r2
 800a61e:	009b      	lsls	r3, r3, #2
 800a620:	4413      	add	r3, r2
 800a622:	005b      	lsls	r3, r3, #1
 800a624:	4619      	mov	r1, r3
 800a626:	687b      	ldr	r3, [r7, #4]
 800a628:	6a1b      	ldr	r3, [r3, #32]
 800a62a:	68ba      	ldr	r2, [r7, #8]
 800a62c:	fb02 f303 	mul.w	r3, r2, r3
 800a630:	021b      	lsls	r3, r3, #8
 800a632:	fbb1 f3f3 	udiv	r3, r1, r3
 800a636:	613b      	str	r3, [r7, #16]
    }
    hsai->Init.Mckdiv = tmpval / 10U;
 800a638:	693b      	ldr	r3, [r7, #16]
 800a63a:	4a95      	ldr	r2, [pc, #596]	; (800a890 <HAL_SAI_Init+0x538>)
 800a63c:	fba2 2303 	umull	r2, r3, r2, r3
 800a640:	08da      	lsrs	r2, r3, #3
 800a642:	687b      	ldr	r3, [r7, #4]
 800a644:	625a      	str	r2, [r3, #36]	; 0x24

    /* Round result to the nearest integer */
    if ((tmpval % 10U) > 8U)
 800a646:	6939      	ldr	r1, [r7, #16]
 800a648:	4b91      	ldr	r3, [pc, #580]	; (800a890 <HAL_SAI_Init+0x538>)
 800a64a:	fba3 2301 	umull	r2, r3, r3, r1
 800a64e:	08da      	lsrs	r2, r3, #3
 800a650:	4613      	mov	r3, r2
 800a652:	009b      	lsls	r3, r3, #2
 800a654:	4413      	add	r3, r2
 800a656:	005b      	lsls	r3, r3, #1
 800a658:	1aca      	subs	r2, r1, r3
 800a65a:	2a08      	cmp	r2, #8
 800a65c:	d904      	bls.n	800a668 <HAL_SAI_Init+0x310>
    {
      hsai->Init.Mckdiv += 1U;
 800a65e:	687b      	ldr	r3, [r7, #4]
 800a660:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a662:	1c5a      	adds	r2, r3, #1
 800a664:	687b      	ldr	r3, [r7, #4]
 800a666:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* For SPDIF protocol, SAI shall provide a bit clock twice faster the symbol-rate */
    if (hsai->Init.Protocol == SAI_SPDIF_PROTOCOL)
 800a668:	687b      	ldr	r3, [r7, #4]
 800a66a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a66c:	2b04      	cmp	r3, #4
 800a66e:	d104      	bne.n	800a67a <HAL_SAI_Init+0x322>
    {
      hsai->Init.Mckdiv = hsai->Init.Mckdiv >> 1;
 800a670:	687b      	ldr	r3, [r7, #4]
 800a672:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a674:	085a      	lsrs	r2, r3, #1
 800a676:	687b      	ldr	r3, [r7, #4]
 800a678:	625a      	str	r2, [r3, #36]	; 0x24

  /* Check the SAI Block master clock divider parameter */
  assert_param(IS_SAI_BLOCK_MASTER_DIVIDER(hsai->Init.Mckdiv));

  /* Compute CKSTR bits of SAI CR1 according ClockStrobing and AudioMode */
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 800a67a:	687b      	ldr	r3, [r7, #4]
 800a67c:	685b      	ldr	r3, [r3, #4]
 800a67e:	2b00      	cmp	r3, #0
 800a680:	d003      	beq.n	800a68a <HAL_SAI_Init+0x332>
 800a682:	687b      	ldr	r3, [r7, #4]
 800a684:	685b      	ldr	r3, [r3, #4]
 800a686:	2b02      	cmp	r3, #2
 800a688:	d109      	bne.n	800a69e <HAL_SAI_Init+0x346>
  {
    /* Transmit */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? 0U : SAI_xCR1_CKSTR;
 800a68a:	687b      	ldr	r3, [r7, #4]
 800a68c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a68e:	2b01      	cmp	r3, #1
 800a690:	d101      	bne.n	800a696 <HAL_SAI_Init+0x33e>
 800a692:	2300      	movs	r3, #0
 800a694:	e001      	b.n	800a69a <HAL_SAI_Init+0x342>
 800a696:	f44f 7300 	mov.w	r3, #512	; 0x200
 800a69a:	623b      	str	r3, [r7, #32]
 800a69c:	e008      	b.n	800a6b0 <HAL_SAI_Init+0x358>
  }
  else
  {
    /* Receive */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? SAI_xCR1_CKSTR : 0U;
 800a69e:	687b      	ldr	r3, [r7, #4]
 800a6a0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a6a2:	2b01      	cmp	r3, #1
 800a6a4:	d102      	bne.n	800a6ac <HAL_SAI_Init+0x354>
 800a6a6:	f44f 7300 	mov.w	r3, #512	; 0x200
 800a6aa:	e000      	b.n	800a6ae <HAL_SAI_Init+0x356>
 800a6ac:	2300      	movs	r3, #0
 800a6ae:	623b      	str	r3, [r7, #32]

  /* SAI Block Configuration -------------------------------------------------*/
  /* SAI CR1 Configuration */
#if defined(SAI_VER_V2_X) /* SAI Peripheral version depends on STM32H7 device revision ID */

  if (HAL_GetREVID() >= REV_ID_B) /* STM32H7xx Rev.B and above */
 800a6b0:	f7f8 fad8 	bl	8002c64 <HAL_GetREVID>
 800a6b4:	4603      	mov	r3, r0
 800a6b6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a6ba:	d331      	bcc.n	800a720 <HAL_SAI_Init+0x3c8>
  {
    hsai->Instance->CR1 &= ~(SAI_xCR1_MODE | SAI_xCR1_PRTCFG |  SAI_xCR1_DS |      \
 800a6bc:	687b      	ldr	r3, [r7, #4]
 800a6be:	681b      	ldr	r3, [r3, #0]
 800a6c0:	6819      	ldr	r1, [r3, #0]
 800a6c2:	687b      	ldr	r3, [r7, #4]
 800a6c4:	681a      	ldr	r2, [r3, #0]
 800a6c6:	4b73      	ldr	r3, [pc, #460]	; (800a894 <HAL_SAI_Init+0x53c>)
 800a6c8:	400b      	ands	r3, r1
 800a6ca:	6013      	str	r3, [r2, #0]
                             SAI_xCR1_LSBFIRST | SAI_xCR1_CKSTR | SAI_xCR1_SYNCEN | \
                             SAI_xCR1_MONO | SAI_xCR1_OUTDRIV  | SAI_xCR1_DMAEN |  \
                             SAI_xCR1_NODIV | SAI_xCR1_MCKDIV | SAI_xCR1_OSR |     \
                             SAI_xCR1_MCKEN);

    hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 800a6cc:	687b      	ldr	r3, [r7, #4]
 800a6ce:	681b      	ldr	r3, [r3, #0]
 800a6d0:	6819      	ldr	r1, [r3, #0]
 800a6d2:	687b      	ldr	r3, [r7, #4]
 800a6d4:	685a      	ldr	r2, [r3, #4]
 800a6d6:	687b      	ldr	r3, [r7, #4]
 800a6d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a6da:	431a      	orrs	r2, r3
                            hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 800a6dc:	687b      	ldr	r3, [r7, #4]
 800a6de:	6c9b      	ldr	r3, [r3, #72]	; 0x48
    hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 800a6e0:	431a      	orrs	r2, r3
                            hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 800a6e2:	687b      	ldr	r3, [r7, #4]
 800a6e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a6e6:	431a      	orrs	r2, r3
 800a6e8:	6a3b      	ldr	r3, [r7, #32]
 800a6ea:	431a      	orrs	r2, r3
                            ckstr_bits | syncen_bits |                             \
 800a6ec:	69fb      	ldr	r3, [r7, #28]
 800a6ee:	431a      	orrs	r2, r3
                            hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 800a6f0:	687b      	ldr	r3, [r7, #4]
 800a6f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
                            ckstr_bits | syncen_bits |                             \
 800a6f4:	431a      	orrs	r2, r3
                            hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 800a6f6:	687b      	ldr	r3, [r7, #4]
 800a6f8:	695b      	ldr	r3, [r3, #20]
 800a6fa:	431a      	orrs	r2, r3
                            hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 800a6fc:	687b      	ldr	r3, [r7, #4]
 800a6fe:	699b      	ldr	r3, [r3, #24]
                            hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 800a700:	431a      	orrs	r2, r3
                            hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 800a702:	687b      	ldr	r3, [r7, #4]
 800a704:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a706:	051b      	lsls	r3, r3, #20
 800a708:	431a      	orrs	r2, r3
                            hsai->Init.MckOverSampling | hsai->Init.MckOutput);
 800a70a:	687b      	ldr	r3, [r7, #4]
 800a70c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                            hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 800a70e:	431a      	orrs	r2, r3
                            hsai->Init.MckOverSampling | hsai->Init.MckOutput);
 800a710:	687b      	ldr	r3, [r7, #4]
 800a712:	691b      	ldr	r3, [r3, #16]
 800a714:	431a      	orrs	r2, r3
    hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 800a716:	687b      	ldr	r3, [r7, #4]
 800a718:	681b      	ldr	r3, [r3, #0]
 800a71a:	430a      	orrs	r2, r1
 800a71c:	601a      	str	r2, [r3, #0]
 800a71e:	e02d      	b.n	800a77c <HAL_SAI_Init+0x424>
  }
  else /* STM32H7xx Rev.Y */
  {
    hsai->Instance->CR1 &= ~(SAI_xCR1_MODE | SAI_xCR1_PRTCFG |  SAI_xCR1_DS |      \
 800a720:	687b      	ldr	r3, [r7, #4]
 800a722:	681b      	ldr	r3, [r3, #0]
 800a724:	6819      	ldr	r1, [r3, #0]
 800a726:	687b      	ldr	r3, [r7, #4]
 800a728:	681a      	ldr	r2, [r3, #0]
 800a72a:	4b5b      	ldr	r3, [pc, #364]	; (800a898 <HAL_SAI_Init+0x540>)
 800a72c:	400b      	ands	r3, r1
 800a72e:	6013      	str	r3, [r2, #0]
                             SAI_xCR1_LSBFIRST | SAI_xCR1_CKSTR | SAI_xCR1_SYNCEN | \
                             SAI_xCR1_MONO | SAI_xCR1_OUTDRIV  | SAI_xCR1_DMAEN |  \
                             SAI_xCR1_NODIV | SAI_xCR1_MCKDIV | SAI_xCR1_OSR);

    hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 800a730:	687b      	ldr	r3, [r7, #4]
 800a732:	681b      	ldr	r3, [r3, #0]
 800a734:	6819      	ldr	r1, [r3, #0]
 800a736:	687b      	ldr	r3, [r7, #4]
 800a738:	685a      	ldr	r2, [r3, #4]
 800a73a:	687b      	ldr	r3, [r7, #4]
 800a73c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a73e:	431a      	orrs	r2, r3
                            hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 800a740:	687b      	ldr	r3, [r7, #4]
 800a742:	6c9b      	ldr	r3, [r3, #72]	; 0x48
    hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 800a744:	431a      	orrs	r2, r3
                            hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 800a746:	687b      	ldr	r3, [r7, #4]
 800a748:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a74a:	431a      	orrs	r2, r3
 800a74c:	6a3b      	ldr	r3, [r7, #32]
 800a74e:	431a      	orrs	r2, r3
                            ckstr_bits | syncen_bits |                             \
 800a750:	69fb      	ldr	r3, [r7, #28]
 800a752:	431a      	orrs	r2, r3
                            hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 800a754:	687b      	ldr	r3, [r7, #4]
 800a756:	6adb      	ldr	r3, [r3, #44]	; 0x2c
                            ckstr_bits | syncen_bits |                             \
 800a758:	431a      	orrs	r2, r3
                            hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 800a75a:	687b      	ldr	r3, [r7, #4]
 800a75c:	695b      	ldr	r3, [r3, #20]
 800a75e:	431a      	orrs	r2, r3
                            hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 800a760:	687b      	ldr	r3, [r7, #4]
 800a762:	699b      	ldr	r3, [r3, #24]
                            hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 800a764:	431a      	orrs	r2, r3
                            hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 800a766:	687b      	ldr	r3, [r7, #4]
 800a768:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a76a:	051b      	lsls	r3, r3, #20
 800a76c:	431a      	orrs	r2, r3
                            hsai->Init.MckOverSampling);
 800a76e:	687b      	ldr	r3, [r7, #4]
 800a770:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                            hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 800a772:	431a      	orrs	r2, r3
    hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 800a774:	687b      	ldr	r3, [r7, #4]
 800a776:	681b      	ldr	r3, [r3, #0]
 800a778:	430a      	orrs	r2, r1
 800a77a:	601a      	str	r2, [r3, #0]
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
                          hsai->Init.MckOverSampling | hsai->Init.MckOutput);
#endif /* SAI_VER_V2_X */

  /* SAI CR2 Configuration */
  hsai->Instance->CR2 &= ~(SAI_xCR2_FTH | SAI_xCR2_FFLUSH | SAI_xCR2_COMP | SAI_xCR2_CPL);
 800a77c:	687b      	ldr	r3, [r7, #4]
 800a77e:	681b      	ldr	r3, [r3, #0]
 800a780:	6859      	ldr	r1, [r3, #4]
 800a782:	687b      	ldr	r3, [r7, #4]
 800a784:	681a      	ldr	r2, [r3, #0]
 800a786:	4b45      	ldr	r3, [pc, #276]	; (800a89c <HAL_SAI_Init+0x544>)
 800a788:	400b      	ands	r3, r1
 800a78a:	6053      	str	r3, [r2, #4]
  hsai->Instance->CR2 |= (hsai->Init.FIFOThreshold | hsai->Init.CompandingMode | hsai->Init.TriState);
 800a78c:	687b      	ldr	r3, [r7, #4]
 800a78e:	681b      	ldr	r3, [r3, #0]
 800a790:	6859      	ldr	r1, [r3, #4]
 800a792:	687b      	ldr	r3, [r7, #4]
 800a794:	69da      	ldr	r2, [r3, #28]
 800a796:	687b      	ldr	r3, [r7, #4]
 800a798:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a79a:	431a      	orrs	r2, r3
 800a79c:	687b      	ldr	r3, [r7, #4]
 800a79e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a7a0:	431a      	orrs	r2, r3
 800a7a2:	687b      	ldr	r3, [r7, #4]
 800a7a4:	681b      	ldr	r3, [r3, #0]
 800a7a6:	430a      	orrs	r2, r1
 800a7a8:	605a      	str	r2, [r3, #4]

  /* SAI Frame Configuration -----------------------------------------*/
  hsai->Instance->FRCR &= (~(SAI_xFRCR_FRL | SAI_xFRCR_FSALL | SAI_xFRCR_FSDEF | \
 800a7aa:	687b      	ldr	r3, [r7, #4]
 800a7ac:	681b      	ldr	r3, [r3, #0]
 800a7ae:	6899      	ldr	r1, [r3, #8]
 800a7b0:	687b      	ldr	r3, [r7, #4]
 800a7b2:	681a      	ldr	r2, [r3, #0]
 800a7b4:	4b3a      	ldr	r3, [pc, #232]	; (800a8a0 <HAL_SAI_Init+0x548>)
 800a7b6:	400b      	ands	r3, r1
 800a7b8:	6093      	str	r3, [r2, #8]
                             SAI_xFRCR_FSPOL | SAI_xFRCR_FSOFF));
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 800a7ba:	687b      	ldr	r3, [r7, #4]
 800a7bc:	681b      	ldr	r3, [r3, #0]
 800a7be:	6899      	ldr	r1, [r3, #8]
 800a7c0:	687b      	ldr	r3, [r7, #4]
 800a7c2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a7c4:	1e5a      	subs	r2, r3, #1
                           hsai->FrameInit.FSOffset |
 800a7c6:	687b      	ldr	r3, [r7, #4]
 800a7c8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 800a7ca:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSDefinition |
 800a7cc:	687b      	ldr	r3, [r7, #4]
 800a7ce:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
                           hsai->FrameInit.FSOffset |
 800a7d0:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSPolarity   |
 800a7d2:	687b      	ldr	r3, [r7, #4]
 800a7d4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
                           hsai->FrameInit.FSDefinition |
 800a7d6:	431a      	orrs	r2, r3
                           ((hsai->FrameInit.ActiveFrameLength - 1U) << 8));
 800a7d8:	687b      	ldr	r3, [r7, #4]
 800a7da:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a7dc:	3b01      	subs	r3, #1
 800a7de:	021b      	lsls	r3, r3, #8
                           hsai->FrameInit.FSPolarity   |
 800a7e0:	431a      	orrs	r2, r3
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 800a7e2:	687b      	ldr	r3, [r7, #4]
 800a7e4:	681b      	ldr	r3, [r3, #0]
 800a7e6:	430a      	orrs	r2, r1
 800a7e8:	609a      	str	r2, [r3, #8]

  /* SAI Block_x SLOT Configuration ------------------------------------------*/
  /* This register has no meaning in AC 97 and SPDIF audio protocol */
  hsai->Instance->SLOTR &= (~(SAI_xSLOTR_FBOFF | SAI_xSLOTR_SLOTSZ |  \
 800a7ea:	687b      	ldr	r3, [r7, #4]
 800a7ec:	681b      	ldr	r3, [r3, #0]
 800a7ee:	68d9      	ldr	r1, [r3, #12]
 800a7f0:	687b      	ldr	r3, [r7, #4]
 800a7f2:	681a      	ldr	r2, [r3, #0]
 800a7f4:	f24f 0320 	movw	r3, #61472	; 0xf020
 800a7f8:	400b      	ands	r3, r1
 800a7fa:	60d3      	str	r3, [r2, #12]
                              SAI_xSLOTR_NBSLOT | SAI_xSLOTR_SLOTEN));

  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 800a7fc:	687b      	ldr	r3, [r7, #4]
 800a7fe:	681b      	ldr	r3, [r3, #0]
 800a800:	68d9      	ldr	r1, [r3, #12]
 800a802:	687b      	ldr	r3, [r7, #4]
 800a804:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 800a806:	687b      	ldr	r3, [r7, #4]
 800a808:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a80a:	431a      	orrs	r2, r3
                           (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1U) <<  8);
 800a80c:	687b      	ldr	r3, [r7, #4]
 800a80e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a810:	041b      	lsls	r3, r3, #16
  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 800a812:	431a      	orrs	r2, r3
                           (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1U) <<  8);
 800a814:	687b      	ldr	r3, [r7, #4]
 800a816:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a818:	3b01      	subs	r3, #1
 800a81a:	021b      	lsls	r3, r3, #8
 800a81c:	431a      	orrs	r2, r3
  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 800a81e:	687b      	ldr	r3, [r7, #4]
 800a820:	681b      	ldr	r3, [r3, #0]
 800a822:	430a      	orrs	r2, r1
 800a824:	60da      	str	r2, [r3, #12]

  /* SAI PDM Configuration ---------------------------------------------------*/
#if defined(SAI4)
  if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI4_Block_A))
 800a826:	687b      	ldr	r3, [r7, #4]
 800a828:	681b      	ldr	r3, [r3, #0]
 800a82a:	4a1e      	ldr	r2, [pc, #120]	; (800a8a4 <HAL_SAI_Init+0x54c>)
 800a82c:	4293      	cmp	r3, r2
 800a82e:	d004      	beq.n	800a83a <HAL_SAI_Init+0x4e2>
 800a830:	687b      	ldr	r3, [r7, #4]
 800a832:	681b      	ldr	r3, [r3, #0]
 800a834:	4a1c      	ldr	r2, [pc, #112]	; (800a8a8 <HAL_SAI_Init+0x550>)
 800a836:	4293      	cmp	r3, r2
 800a838:	d119      	bne.n	800a86e <HAL_SAI_Init+0x516>
#else
  if (hsai->Instance == SAI1_Block_A)
#endif /* SAI4 */
  {
    /* Disable PDM interface */
    SaiBaseAddress->PDMCR &= ~(SAI_PDMCR_PDMEN);
 800a83a:	69bb      	ldr	r3, [r7, #24]
 800a83c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a83e:	f023 0201 	bic.w	r2, r3, #1
 800a842:	69bb      	ldr	r3, [r7, #24]
 800a844:	645a      	str	r2, [r3, #68]	; 0x44
    if (hsai->Init.PdmInit.Activation == ENABLE)
 800a846:	687b      	ldr	r3, [r7, #4]
 800a848:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800a84c:	2b01      	cmp	r3, #1
 800a84e:	d10e      	bne.n	800a86e <HAL_SAI_Init+0x516>
    {
      /* Configure and enable PDM interface */
      SaiBaseAddress->PDMCR = (hsai->Init.PdmInit.ClockEnable |
 800a850:	687b      	ldr	r3, [r7, #4]
 800a852:	6c1a      	ldr	r2, [r3, #64]	; 0x40
                               ((hsai->Init.PdmInit.MicPairsNbr - 1U) << SAI_PDMCR_MICNBR_Pos));
 800a854:	687b      	ldr	r3, [r7, #4]
 800a856:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a858:	3b01      	subs	r3, #1
 800a85a:	011b      	lsls	r3, r3, #4
      SaiBaseAddress->PDMCR = (hsai->Init.PdmInit.ClockEnable |
 800a85c:	431a      	orrs	r2, r3
 800a85e:	69bb      	ldr	r3, [r7, #24]
 800a860:	645a      	str	r2, [r3, #68]	; 0x44
      SaiBaseAddress->PDMCR |= SAI_PDMCR_PDMEN;
 800a862:	69bb      	ldr	r3, [r7, #24]
 800a864:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a866:	f043 0201 	orr.w	r2, r3, #1
 800a86a:	69bb      	ldr	r3, [r7, #24]
 800a86c:	645a      	str	r2, [r3, #68]	; 0x44
    }
  }

  /* Initialize the error code */
  hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 800a86e:	687b      	ldr	r3, [r7, #4]
 800a870:	2200      	movs	r2, #0
 800a872:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94

  /* Initialize the SAI state */
  hsai->State = HAL_SAI_STATE_READY;
 800a876:	687b      	ldr	r3, [r7, #4]
 800a878:	2201      	movs	r2, #1
 800a87a:	f883 2091 	strb.w	r2, [r3, #145]	; 0x91

  /* Release Lock */
  __HAL_UNLOCK(hsai);
 800a87e:	687b      	ldr	r3, [r7, #4]
 800a880:	2200      	movs	r2, #0
 800a882:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90

  return HAL_OK;
 800a886:	2300      	movs	r3, #0
}
 800a888:	4618      	mov	r0, r3
 800a88a:	3728      	adds	r7, #40	; 0x28
 800a88c:	46bd      	mov	sp, r7
 800a88e:	bd80      	pop	{r7, pc}
 800a890:	cccccccd 	.word	0xcccccccd
 800a894:	f005c010 	.word	0xf005c010
 800a898:	f805c010 	.word	0xf805c010
 800a89c:	ffff1ff0 	.word	0xffff1ff0
 800a8a0:	fff88000 	.word	0xfff88000
 800a8a4:	40015804 	.word	0x40015804
 800a8a8:	58005404 	.word	0x58005404

0800a8ac <SAI_Disable>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval None
  */
static HAL_StatusTypeDef SAI_Disable(SAI_HandleTypeDef *hsai)
{
 800a8ac:	b480      	push	{r7}
 800a8ae:	b085      	sub	sp, #20
 800a8b0:	af00      	add	r7, sp, #0
 800a8b2:	6078      	str	r0, [r7, #4]
  uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock / 7U / 1000U);
 800a8b4:	4b18      	ldr	r3, [pc, #96]	; (800a918 <SAI_Disable+0x6c>)
 800a8b6:	681b      	ldr	r3, [r3, #0]
 800a8b8:	4a18      	ldr	r2, [pc, #96]	; (800a91c <SAI_Disable+0x70>)
 800a8ba:	fba2 2303 	umull	r2, r3, r2, r3
 800a8be:	0b1b      	lsrs	r3, r3, #12
 800a8c0:	009b      	lsls	r3, r3, #2
 800a8c2:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef status = HAL_OK;
 800a8c4:	2300      	movs	r3, #0
 800a8c6:	72fb      	strb	r3, [r7, #11]

  /* Disable the SAI instance */
  __HAL_SAI_DISABLE(hsai);
 800a8c8:	687b      	ldr	r3, [r7, #4]
 800a8ca:	681b      	ldr	r3, [r3, #0]
 800a8cc:	681a      	ldr	r2, [r3, #0]
 800a8ce:	687b      	ldr	r3, [r7, #4]
 800a8d0:	681b      	ldr	r3, [r3, #0]
 800a8d2:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800a8d6:	601a      	str	r2, [r3, #0]

  do
  {
    /* Check for the Timeout */
    if (count == 0U)
 800a8d8:	68fb      	ldr	r3, [r7, #12]
 800a8da:	2b00      	cmp	r3, #0
 800a8dc:	d10a      	bne.n	800a8f4 <SAI_Disable+0x48>
    {
      /* Update error code */
      hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
 800a8de:	687b      	ldr	r3, [r7, #4]
 800a8e0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800a8e4:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800a8e8:	687b      	ldr	r3, [r7, #4]
 800a8ea:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
      status = HAL_TIMEOUT;
 800a8ee:	2303      	movs	r3, #3
 800a8f0:	72fb      	strb	r3, [r7, #11]
      break;
 800a8f2:	e009      	b.n	800a908 <SAI_Disable+0x5c>
    }
    count--;
 800a8f4:	68fb      	ldr	r3, [r7, #12]
 800a8f6:	3b01      	subs	r3, #1
 800a8f8:	60fb      	str	r3, [r7, #12]
  }
  while ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) != 0U);
 800a8fa:	687b      	ldr	r3, [r7, #4]
 800a8fc:	681b      	ldr	r3, [r3, #0]
 800a8fe:	681b      	ldr	r3, [r3, #0]
 800a900:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800a904:	2b00      	cmp	r3, #0
 800a906:	d1e7      	bne.n	800a8d8 <SAI_Disable+0x2c>

  return status;
 800a908:	7afb      	ldrb	r3, [r7, #11]
}
 800a90a:	4618      	mov	r0, r3
 800a90c:	3714      	adds	r7, #20
 800a90e:	46bd      	mov	sp, r7
 800a910:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a914:	4770      	bx	lr
 800a916:	bf00      	nop
 800a918:	24000008 	.word	0x24000008
 800a91c:	95cbec1b 	.word	0x95cbec1b

0800a920 <HAL_SDRAM_Init>:
  *                the configuration information for SDRAM module.
  * @param  Timing Pointer to SDRAM control timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{
 800a920:	b580      	push	{r7, lr}
 800a922:	b082      	sub	sp, #8
 800a924:	af00      	add	r7, sp, #0
 800a926:	6078      	str	r0, [r7, #4]
 800a928:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM handle parameter */
  if (hsdram == NULL)
 800a92a:	687b      	ldr	r3, [r7, #4]
 800a92c:	2b00      	cmp	r3, #0
 800a92e:	d101      	bne.n	800a934 <HAL_SDRAM_Init+0x14>
  {
    return HAL_ERROR;
 800a930:	2301      	movs	r3, #1
 800a932:	e02b      	b.n	800a98c <HAL_SDRAM_Init+0x6c>
  }

  if (hsdram->State == HAL_SDRAM_STATE_RESET)
 800a934:	687b      	ldr	r3, [r7, #4]
 800a936:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800a93a:	b2db      	uxtb	r3, r3
 800a93c:	2b00      	cmp	r3, #0
 800a93e:	d106      	bne.n	800a94e <HAL_SDRAM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hsdram->Lock = HAL_UNLOCKED;
 800a940:	687b      	ldr	r3, [r7, #4]
 800a942:	2200      	movs	r2, #0
 800a944:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

    /* Init the low level hardware */
    hsdram->MspInitCallback(hsdram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SDRAM_MspInit(hsdram);
 800a948:	6878      	ldr	r0, [r7, #4]
 800a94a:	f7f7 ff0b 	bl	8002764 <HAL_SDRAM_MspInit>
#endif /* USE_HAL_SDRAM_REGISTER_CALLBACKS */
  }

  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 800a94e:	687b      	ldr	r3, [r7, #4]
 800a950:	2202      	movs	r2, #2
 800a952:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  /* Initialize SDRAM control Interface */
  (void)FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 800a956:	687b      	ldr	r3, [r7, #4]
 800a958:	681a      	ldr	r2, [r3, #0]
 800a95a:	687b      	ldr	r3, [r7, #4]
 800a95c:	3304      	adds	r3, #4
 800a95e:	4619      	mov	r1, r3
 800a960:	4610      	mov	r0, r2
 800a962:	f002 ffad 	bl	800d8c0 <FMC_SDRAM_Init>

  /* Initialize SDRAM timing Interface */
  (void)FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank);
 800a966:	687b      	ldr	r3, [r7, #4]
 800a968:	6818      	ldr	r0, [r3, #0]
 800a96a:	687b      	ldr	r3, [r7, #4]
 800a96c:	685b      	ldr	r3, [r3, #4]
 800a96e:	461a      	mov	r2, r3
 800a970:	6839      	ldr	r1, [r7, #0]
 800a972:	f003 f801 	bl	800d978 <FMC_SDRAM_Timing_Init>

  /* Enable FMC Peripheral */
  __FMC_ENABLE();
 800a976:	4b07      	ldr	r3, [pc, #28]	; (800a994 <HAL_SDRAM_Init+0x74>)
 800a978:	681b      	ldr	r3, [r3, #0]
 800a97a:	4a06      	ldr	r2, [pc, #24]	; (800a994 <HAL_SDRAM_Init+0x74>)
 800a97c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800a980:	6013      	str	r3, [r2, #0]
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 800a982:	687b      	ldr	r3, [r7, #4]
 800a984:	2201      	movs	r2, #1
 800a986:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 800a98a:	2300      	movs	r3, #0
}
 800a98c:	4618      	mov	r0, r3
 800a98e:	3708      	adds	r7, #8
 800a990:	46bd      	mov	sp, r7
 800a992:	bd80      	pop	{r7, pc}
 800a994:	52004000 	.word	0x52004000

0800a998 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800a998:	b580      	push	{r7, lr}
 800a99a:	b084      	sub	sp, #16
 800a99c:	af00      	add	r7, sp, #0
 800a99e:	6078      	str	r0, [r7, #4]
  uint32_t crc_length;
  uint32_t packet_length;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800a9a0:	687b      	ldr	r3, [r7, #4]
 800a9a2:	2b00      	cmp	r3, #0
 800a9a4:	d101      	bne.n	800a9aa <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800a9a6:	2301      	movs	r3, #1
 800a9a8:	e10f      	b.n	800abca <HAL_SPI_Init+0x232>
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800a9aa:	687b      	ldr	r3, [r7, #4]
 800a9ac:	2200      	movs	r2, #0
 800a9ae:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 800a9b0:	687b      	ldr	r3, [r7, #4]
 800a9b2:	681b      	ldr	r3, [r3, #0]
 800a9b4:	4a87      	ldr	r2, [pc, #540]	; (800abd4 <HAL_SPI_Init+0x23c>)
 800a9b6:	4293      	cmp	r3, r2
 800a9b8:	d00f      	beq.n	800a9da <HAL_SPI_Init+0x42>
 800a9ba:	687b      	ldr	r3, [r7, #4]
 800a9bc:	681b      	ldr	r3, [r3, #0]
 800a9be:	4a86      	ldr	r2, [pc, #536]	; (800abd8 <HAL_SPI_Init+0x240>)
 800a9c0:	4293      	cmp	r3, r2
 800a9c2:	d00a      	beq.n	800a9da <HAL_SPI_Init+0x42>
 800a9c4:	687b      	ldr	r3, [r7, #4]
 800a9c6:	681b      	ldr	r3, [r3, #0]
 800a9c8:	4a84      	ldr	r2, [pc, #528]	; (800abdc <HAL_SPI_Init+0x244>)
 800a9ca:	4293      	cmp	r3, r2
 800a9cc:	d005      	beq.n	800a9da <HAL_SPI_Init+0x42>
 800a9ce:	687b      	ldr	r3, [r7, #4]
 800a9d0:	68db      	ldr	r3, [r3, #12]
 800a9d2:	2b0f      	cmp	r3, #15
 800a9d4:	d901      	bls.n	800a9da <HAL_SPI_Init+0x42>
  {
    return HAL_ERROR;
 800a9d6:	2301      	movs	r3, #1
 800a9d8:	e0f7      	b.n	800abca <HAL_SPI_Init+0x232>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 800a9da:	6878      	ldr	r0, [r7, #4]
 800a9dc:	f000 f900 	bl	800abe0 <SPI_GetPacketSize>
 800a9e0:	60f8      	str	r0, [r7, #12]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800a9e2:	687b      	ldr	r3, [r7, #4]
 800a9e4:	681b      	ldr	r3, [r3, #0]
 800a9e6:	4a7b      	ldr	r2, [pc, #492]	; (800abd4 <HAL_SPI_Init+0x23c>)
 800a9e8:	4293      	cmp	r3, r2
 800a9ea:	d00c      	beq.n	800aa06 <HAL_SPI_Init+0x6e>
 800a9ec:	687b      	ldr	r3, [r7, #4]
 800a9ee:	681b      	ldr	r3, [r3, #0]
 800a9f0:	4a79      	ldr	r2, [pc, #484]	; (800abd8 <HAL_SPI_Init+0x240>)
 800a9f2:	4293      	cmp	r3, r2
 800a9f4:	d007      	beq.n	800aa06 <HAL_SPI_Init+0x6e>
 800a9f6:	687b      	ldr	r3, [r7, #4]
 800a9f8:	681b      	ldr	r3, [r3, #0]
 800a9fa:	4a78      	ldr	r2, [pc, #480]	; (800abdc <HAL_SPI_Init+0x244>)
 800a9fc:	4293      	cmp	r3, r2
 800a9fe:	d002      	beq.n	800aa06 <HAL_SPI_Init+0x6e>
 800aa00:	68fb      	ldr	r3, [r7, #12]
 800aa02:	2b08      	cmp	r3, #8
 800aa04:	d811      	bhi.n	800aa2a <HAL_SPI_Init+0x92>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800aa06:	687b      	ldr	r3, [r7, #4]
 800aa08:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800aa0a:	4a72      	ldr	r2, [pc, #456]	; (800abd4 <HAL_SPI_Init+0x23c>)
 800aa0c:	4293      	cmp	r3, r2
 800aa0e:	d009      	beq.n	800aa24 <HAL_SPI_Init+0x8c>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800aa10:	687b      	ldr	r3, [r7, #4]
 800aa12:	681b      	ldr	r3, [r3, #0]
 800aa14:	4a70      	ldr	r2, [pc, #448]	; (800abd8 <HAL_SPI_Init+0x240>)
 800aa16:	4293      	cmp	r3, r2
 800aa18:	d004      	beq.n	800aa24 <HAL_SPI_Init+0x8c>
 800aa1a:	687b      	ldr	r3, [r7, #4]
 800aa1c:	681b      	ldr	r3, [r3, #0]
 800aa1e:	4a6f      	ldr	r2, [pc, #444]	; (800abdc <HAL_SPI_Init+0x244>)
 800aa20:	4293      	cmp	r3, r2
 800aa22:	d104      	bne.n	800aa2e <HAL_SPI_Init+0x96>
 800aa24:	68fb      	ldr	r3, [r7, #12]
 800aa26:	2b10      	cmp	r3, #16
 800aa28:	d901      	bls.n	800aa2e <HAL_SPI_Init+0x96>
  {
    return HAL_ERROR;
 800aa2a:	2301      	movs	r3, #1
 800aa2c:	e0cd      	b.n	800abca <HAL_SPI_Init+0x232>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800aa2e:	687b      	ldr	r3, [r7, #4]
 800aa30:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800aa34:	b2db      	uxtb	r3, r3
 800aa36:	2b00      	cmp	r3, #0
 800aa38:	d106      	bne.n	800aa48 <HAL_SPI_Init+0xb0>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800aa3a:	687b      	ldr	r3, [r7, #4]
 800aa3c:	2200      	movs	r2, #0
 800aa3e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800aa42:	6878      	ldr	r0, [r7, #4]
 800aa44:	f7f7 fbb6 	bl	80021b4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800aa48:	687b      	ldr	r3, [r7, #4]
 800aa4a:	2202      	movs	r2, #2
 800aa4c:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800aa50:	687b      	ldr	r3, [r7, #4]
 800aa52:	681b      	ldr	r3, [r3, #0]
 800aa54:	681a      	ldr	r2, [r3, #0]
 800aa56:	687b      	ldr	r3, [r7, #4]
 800aa58:	681b      	ldr	r3, [r3, #0]
 800aa5a:	f022 0201 	bic.w	r2, r2, #1
 800aa5e:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 800aa60:	687b      	ldr	r3, [r7, #4]
 800aa62:	681b      	ldr	r3, [r3, #0]
 800aa64:	689b      	ldr	r3, [r3, #8]
 800aa66:	f403 13f8 	and.w	r3, r3, #2031616	; 0x1f0000
 800aa6a:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800aa6c:	687b      	ldr	r3, [r7, #4]
 800aa6e:	699b      	ldr	r3, [r3, #24]
 800aa70:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800aa74:	d119      	bne.n	800aaaa <HAL_SPI_Init+0x112>
 800aa76:	687b      	ldr	r3, [r7, #4]
 800aa78:	685b      	ldr	r3, [r3, #4]
 800aa7a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800aa7e:	d103      	bne.n	800aa88 <HAL_SPI_Init+0xf0>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800aa80:	687b      	ldr	r3, [r7, #4]
 800aa82:	6b9b      	ldr	r3, [r3, #56]	; 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800aa84:	2b00      	cmp	r3, #0
 800aa86:	d008      	beq.n	800aa9a <HAL_SPI_Init+0x102>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 800aa88:	687b      	ldr	r3, [r7, #4]
 800aa8a:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800aa8c:	2b00      	cmp	r3, #0
 800aa8e:	d10c      	bne.n	800aaaa <HAL_SPI_Init+0x112>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 800aa90:	687b      	ldr	r3, [r7, #4]
 800aa92:	6b9b      	ldr	r3, [r3, #56]	; 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 800aa94:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800aa98:	d107      	bne.n	800aaaa <HAL_SPI_Init+0x112>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 800aa9a:	687b      	ldr	r3, [r7, #4]
 800aa9c:	681b      	ldr	r3, [r3, #0]
 800aa9e:	681a      	ldr	r2, [r3, #0]
 800aaa0:	687b      	ldr	r3, [r7, #4]
 800aaa2:	681b      	ldr	r3, [r3, #0]
 800aaa4:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800aaa8:	601a      	str	r2, [r3, #0]
  }

  /* SPIx Master Rx Auto Suspend Configuration */
  if (((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER) && (hspi->Init.DataSize >= SPI_DATASIZE_8BIT))
 800aaaa:	687b      	ldr	r3, [r7, #4]
 800aaac:	685b      	ldr	r3, [r3, #4]
 800aaae:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800aab2:	2b00      	cmp	r3, #0
 800aab4:	d00f      	beq.n	800aad6 <HAL_SPI_Init+0x13e>
 800aab6:	687b      	ldr	r3, [r7, #4]
 800aab8:	68db      	ldr	r3, [r3, #12]
 800aaba:	2b06      	cmp	r3, #6
 800aabc:	d90b      	bls.n	800aad6 <HAL_SPI_Init+0x13e>
  {
    MODIFY_REG(hspi->Instance->CR1, SPI_CR1_MASRX, hspi->Init.MasterReceiverAutoSusp);
 800aabe:	687b      	ldr	r3, [r7, #4]
 800aac0:	681b      	ldr	r3, [r3, #0]
 800aac2:	681b      	ldr	r3, [r3, #0]
 800aac4:	f423 7180 	bic.w	r1, r3, #256	; 0x100
 800aac8:	687b      	ldr	r3, [r7, #4]
 800aaca:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800aacc:	687b      	ldr	r3, [r7, #4]
 800aace:	681b      	ldr	r3, [r3, #0]
 800aad0:	430a      	orrs	r2, r1
 800aad2:	601a      	str	r2, [r3, #0]
 800aad4:	e007      	b.n	800aae6 <HAL_SPI_Init+0x14e>
  }
  else
  {
    CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_MASRX);
 800aad6:	687b      	ldr	r3, [r7, #4]
 800aad8:	681b      	ldr	r3, [r3, #0]
 800aada:	681a      	ldr	r2, [r3, #0]
 800aadc:	687b      	ldr	r3, [r7, #4]
 800aade:	681b      	ldr	r3, [r3, #0]
 800aae0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800aae4:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 800aae6:	687b      	ldr	r3, [r7, #4]
 800aae8:	69da      	ldr	r2, [r3, #28]
 800aaea:	687b      	ldr	r3, [r7, #4]
 800aaec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800aaee:	431a      	orrs	r2, r3
 800aaf0:	68bb      	ldr	r3, [r7, #8]
 800aaf2:	431a      	orrs	r2, r3
 800aaf4:	687b      	ldr	r3, [r7, #4]
 800aaf6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800aaf8:	ea42 0103 	orr.w	r1, r2, r3
 800aafc:	687b      	ldr	r3, [r7, #4]
 800aafe:	68da      	ldr	r2, [r3, #12]
 800ab00:	687b      	ldr	r3, [r7, #4]
 800ab02:	681b      	ldr	r3, [r3, #0]
 800ab04:	430a      	orrs	r2, r1
 800ab06:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 800ab08:	687b      	ldr	r3, [r7, #4]
 800ab0a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800ab0c:	687b      	ldr	r3, [r7, #4]
 800ab0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ab10:	431a      	orrs	r2, r3
 800ab12:	687b      	ldr	r3, [r7, #4]
 800ab14:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ab16:	431a      	orrs	r2, r3
 800ab18:	687b      	ldr	r3, [r7, #4]
 800ab1a:	699b      	ldr	r3, [r3, #24]
 800ab1c:	431a      	orrs	r2, r3
 800ab1e:	687b      	ldr	r3, [r7, #4]
 800ab20:	691b      	ldr	r3, [r3, #16]
 800ab22:	431a      	orrs	r2, r3
 800ab24:	687b      	ldr	r3, [r7, #4]
 800ab26:	695b      	ldr	r3, [r3, #20]
 800ab28:	431a      	orrs	r2, r3
 800ab2a:	687b      	ldr	r3, [r7, #4]
 800ab2c:	6a1b      	ldr	r3, [r3, #32]
 800ab2e:	431a      	orrs	r2, r3
 800ab30:	687b      	ldr	r3, [r7, #4]
 800ab32:	685b      	ldr	r3, [r3, #4]
 800ab34:	431a      	orrs	r2, r3
 800ab36:	687b      	ldr	r3, [r7, #4]
 800ab38:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ab3a:	431a      	orrs	r2, r3
 800ab3c:	687b      	ldr	r3, [r7, #4]
 800ab3e:	689b      	ldr	r3, [r3, #8]
 800ab40:	431a      	orrs	r2, r3
 800ab42:	687b      	ldr	r3, [r7, #4]
 800ab44:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800ab46:	ea42 0103 	orr.w	r1, r2, r3
 800ab4a:	687b      	ldr	r3, [r7, #4]
 800ab4c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800ab4e:	687b      	ldr	r3, [r7, #4]
 800ab50:	681b      	ldr	r3, [r3, #0]
 800ab52:	430a      	orrs	r2, r1
 800ab54:	60da      	str	r2, [r3, #12]
    WRITE_REG(hspi->Instance->CRCPOLY, hspi->Init.CRCPolynomial);
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 800ab56:	687b      	ldr	r3, [r7, #4]
 800ab58:	685b      	ldr	r3, [r3, #4]
 800ab5a:	2b00      	cmp	r3, #0
 800ab5c:	d113      	bne.n	800ab86 <HAL_SPI_Init+0x1ee>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif /* USE_SPI_CRC */
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 800ab5e:	687b      	ldr	r3, [r7, #4]
 800ab60:	681b      	ldr	r3, [r3, #0]
 800ab62:	689b      	ldr	r3, [r3, #8]
 800ab64:	f423 52c0 	bic.w	r2, r3, #6144	; 0x1800
 800ab68:	687b      	ldr	r3, [r7, #4]
 800ab6a:	681b      	ldr	r3, [r3, #0]
 800ab6c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800ab70:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 800ab72:	687b      	ldr	r3, [r7, #4]
 800ab74:	681b      	ldr	r3, [r3, #0]
 800ab76:	689b      	ldr	r3, [r3, #8]
 800ab78:	f423 62c0 	bic.w	r2, r3, #1536	; 0x600
 800ab7c:	687b      	ldr	r3, [r7, #4]
 800ab7e:	681b      	ldr	r3, [r3, #0]
 800ab80:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800ab84:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800ab86:	687b      	ldr	r3, [r7, #4]
 800ab88:	681b      	ldr	r3, [r3, #0]
 800ab8a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800ab8c:	687b      	ldr	r3, [r7, #4]
 800ab8e:	681b      	ldr	r3, [r3, #0]
 800ab90:	f022 0201 	bic.w	r2, r2, #1
 800ab94:	651a      	str	r2, [r3, #80]	; 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 800ab96:	687b      	ldr	r3, [r7, #4]
 800ab98:	685b      	ldr	r3, [r3, #4]
 800ab9a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800ab9e:	2b00      	cmp	r3, #0
 800aba0:	d00a      	beq.n	800abb8 <HAL_SPI_Init+0x220>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 800aba2:	687b      	ldr	r3, [r7, #4]
 800aba4:	681b      	ldr	r3, [r3, #0]
 800aba6:	68db      	ldr	r3, [r3, #12]
 800aba8:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800abac:	687b      	ldr	r3, [r7, #4]
 800abae:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800abb0:	687b      	ldr	r3, [r7, #4]
 800abb2:	681b      	ldr	r3, [r3, #0]
 800abb4:	430a      	orrs	r2, r1
 800abb6:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800abb8:	687b      	ldr	r3, [r7, #4]
 800abba:	2200      	movs	r2, #0
 800abbc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 800abc0:	687b      	ldr	r3, [r7, #4]
 800abc2:	2201      	movs	r2, #1
 800abc4:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  return HAL_OK;
 800abc8:	2300      	movs	r3, #0
}
 800abca:	4618      	mov	r0, r3
 800abcc:	3710      	adds	r7, #16
 800abce:	46bd      	mov	sp, r7
 800abd0:	bd80      	pop	{r7, pc}
 800abd2:	bf00      	nop
 800abd4:	40013000 	.word	0x40013000
 800abd8:	40003800 	.word	0x40003800
 800abdc:	40003c00 	.word	0x40003c00

0800abe0 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(SPI_HandleTypeDef *hspi)
{
 800abe0:	b480      	push	{r7}
 800abe2:	b085      	sub	sp, #20
 800abe4:	af00      	add	r7, sp, #0
 800abe6:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 800abe8:	687b      	ldr	r3, [r7, #4]
 800abea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800abec:	095b      	lsrs	r3, r3, #5
 800abee:	3301      	adds	r3, #1
 800abf0:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 800abf2:	687b      	ldr	r3, [r7, #4]
 800abf4:	68db      	ldr	r3, [r3, #12]
 800abf6:	3301      	adds	r3, #1
 800abf8:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 800abfa:	68bb      	ldr	r3, [r7, #8]
 800abfc:	3307      	adds	r3, #7
 800abfe:	08db      	lsrs	r3, r3, #3
 800ac00:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 800ac02:	68bb      	ldr	r3, [r7, #8]
 800ac04:	68fa      	ldr	r2, [r7, #12]
 800ac06:	fb02 f303 	mul.w	r3, r2, r3
}
 800ac0a:	4618      	mov	r0, r3
 800ac0c:	3714      	adds	r7, #20
 800ac0e:	46bd      	mov	sp, r7
 800ac10:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac14:	4770      	bx	lr

0800ac16 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800ac16:	b580      	push	{r7, lr}
 800ac18:	b082      	sub	sp, #8
 800ac1a:	af00      	add	r7, sp, #0
 800ac1c:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800ac1e:	687b      	ldr	r3, [r7, #4]
 800ac20:	2b00      	cmp	r3, #0
 800ac22:	d101      	bne.n	800ac28 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800ac24:	2301      	movs	r3, #1
 800ac26:	e042      	b.n	800acae <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800ac28:	687b      	ldr	r3, [r7, #4]
 800ac2a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ac2e:	2b00      	cmp	r3, #0
 800ac30:	d106      	bne.n	800ac40 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800ac32:	687b      	ldr	r3, [r7, #4]
 800ac34:	2200      	movs	r2, #0
 800ac36:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800ac3a:	6878      	ldr	r0, [r7, #4]
 800ac3c:	f7f7 fb84 	bl	8002348 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800ac40:	687b      	ldr	r3, [r7, #4]
 800ac42:	2224      	movs	r2, #36	; 0x24
 800ac44:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 800ac48:	687b      	ldr	r3, [r7, #4]
 800ac4a:	681b      	ldr	r3, [r3, #0]
 800ac4c:	681a      	ldr	r2, [r3, #0]
 800ac4e:	687b      	ldr	r3, [r7, #4]
 800ac50:	681b      	ldr	r3, [r3, #0]
 800ac52:	f022 0201 	bic.w	r2, r2, #1
 800ac56:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800ac58:	6878      	ldr	r0, [r7, #4]
 800ac5a:	f000 fd6b 	bl	800b734 <UART_SetConfig>
 800ac5e:	4603      	mov	r3, r0
 800ac60:	2b01      	cmp	r3, #1
 800ac62:	d101      	bne.n	800ac68 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800ac64:	2301      	movs	r3, #1
 800ac66:	e022      	b.n	800acae <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800ac68:	687b      	ldr	r3, [r7, #4]
 800ac6a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ac6c:	2b00      	cmp	r3, #0
 800ac6e:	d002      	beq.n	800ac76 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 800ac70:	6878      	ldr	r0, [r7, #4]
 800ac72:	f001 fac7 	bl	800c204 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800ac76:	687b      	ldr	r3, [r7, #4]
 800ac78:	681b      	ldr	r3, [r3, #0]
 800ac7a:	685a      	ldr	r2, [r3, #4]
 800ac7c:	687b      	ldr	r3, [r7, #4]
 800ac7e:	681b      	ldr	r3, [r3, #0]
 800ac80:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800ac84:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800ac86:	687b      	ldr	r3, [r7, #4]
 800ac88:	681b      	ldr	r3, [r3, #0]
 800ac8a:	689a      	ldr	r2, [r3, #8]
 800ac8c:	687b      	ldr	r3, [r7, #4]
 800ac8e:	681b      	ldr	r3, [r3, #0]
 800ac90:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800ac94:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800ac96:	687b      	ldr	r3, [r7, #4]
 800ac98:	681b      	ldr	r3, [r3, #0]
 800ac9a:	681a      	ldr	r2, [r3, #0]
 800ac9c:	687b      	ldr	r3, [r7, #4]
 800ac9e:	681b      	ldr	r3, [r3, #0]
 800aca0:	f042 0201 	orr.w	r2, r2, #1
 800aca4:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800aca6:	6878      	ldr	r0, [r7, #4]
 800aca8:	f001 fb4e 	bl	800c348 <UART_CheckIdleState>
 800acac:	4603      	mov	r3, r0
}
 800acae:	4618      	mov	r0, r3
 800acb0:	3708      	adds	r7, #8
 800acb2:	46bd      	mov	sp, r7
 800acb4:	bd80      	pop	{r7, pc}

0800acb6 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800acb6:	b580      	push	{r7, lr}
 800acb8:	b08a      	sub	sp, #40	; 0x28
 800acba:	af02      	add	r7, sp, #8
 800acbc:	60f8      	str	r0, [r7, #12]
 800acbe:	60b9      	str	r1, [r7, #8]
 800acc0:	603b      	str	r3, [r7, #0]
 800acc2:	4613      	mov	r3, r2
 800acc4:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800acc6:	68fb      	ldr	r3, [r7, #12]
 800acc8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800accc:	2b20      	cmp	r3, #32
 800acce:	d17b      	bne.n	800adc8 <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 800acd0:	68bb      	ldr	r3, [r7, #8]
 800acd2:	2b00      	cmp	r3, #0
 800acd4:	d002      	beq.n	800acdc <HAL_UART_Transmit+0x26>
 800acd6:	88fb      	ldrh	r3, [r7, #6]
 800acd8:	2b00      	cmp	r3, #0
 800acda:	d101      	bne.n	800ace0 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 800acdc:	2301      	movs	r3, #1
 800acde:	e074      	b.n	800adca <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800ace0:	68fb      	ldr	r3, [r7, #12]
 800ace2:	2200      	movs	r2, #0
 800ace4:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800ace8:	68fb      	ldr	r3, [r7, #12]
 800acea:	2221      	movs	r2, #33	; 0x21
 800acec:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800acf0:	f7f7 ff88 	bl	8002c04 <HAL_GetTick>
 800acf4:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800acf6:	68fb      	ldr	r3, [r7, #12]
 800acf8:	88fa      	ldrh	r2, [r7, #6]
 800acfa:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 800acfe:	68fb      	ldr	r3, [r7, #12]
 800ad00:	88fa      	ldrh	r2, [r7, #6]
 800ad02:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800ad06:	68fb      	ldr	r3, [r7, #12]
 800ad08:	689b      	ldr	r3, [r3, #8]
 800ad0a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800ad0e:	d108      	bne.n	800ad22 <HAL_UART_Transmit+0x6c>
 800ad10:	68fb      	ldr	r3, [r7, #12]
 800ad12:	691b      	ldr	r3, [r3, #16]
 800ad14:	2b00      	cmp	r3, #0
 800ad16:	d104      	bne.n	800ad22 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800ad18:	2300      	movs	r3, #0
 800ad1a:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800ad1c:	68bb      	ldr	r3, [r7, #8]
 800ad1e:	61bb      	str	r3, [r7, #24]
 800ad20:	e003      	b.n	800ad2a <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800ad22:	68bb      	ldr	r3, [r7, #8]
 800ad24:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800ad26:	2300      	movs	r3, #0
 800ad28:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800ad2a:	e030      	b.n	800ad8e <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800ad2c:	683b      	ldr	r3, [r7, #0]
 800ad2e:	9300      	str	r3, [sp, #0]
 800ad30:	697b      	ldr	r3, [r7, #20]
 800ad32:	2200      	movs	r2, #0
 800ad34:	2180      	movs	r1, #128	; 0x80
 800ad36:	68f8      	ldr	r0, [r7, #12]
 800ad38:	f001 fbb0 	bl	800c49c <UART_WaitOnFlagUntilTimeout>
 800ad3c:	4603      	mov	r3, r0
 800ad3e:	2b00      	cmp	r3, #0
 800ad40:	d005      	beq.n	800ad4e <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 800ad42:	68fb      	ldr	r3, [r7, #12]
 800ad44:	2220      	movs	r2, #32
 800ad46:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        return HAL_TIMEOUT;
 800ad4a:	2303      	movs	r3, #3
 800ad4c:	e03d      	b.n	800adca <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 800ad4e:	69fb      	ldr	r3, [r7, #28]
 800ad50:	2b00      	cmp	r3, #0
 800ad52:	d10b      	bne.n	800ad6c <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800ad54:	69bb      	ldr	r3, [r7, #24]
 800ad56:	881b      	ldrh	r3, [r3, #0]
 800ad58:	461a      	mov	r2, r3
 800ad5a:	68fb      	ldr	r3, [r7, #12]
 800ad5c:	681b      	ldr	r3, [r3, #0]
 800ad5e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800ad62:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800ad64:	69bb      	ldr	r3, [r7, #24]
 800ad66:	3302      	adds	r3, #2
 800ad68:	61bb      	str	r3, [r7, #24]
 800ad6a:	e007      	b.n	800ad7c <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800ad6c:	69fb      	ldr	r3, [r7, #28]
 800ad6e:	781a      	ldrb	r2, [r3, #0]
 800ad70:	68fb      	ldr	r3, [r7, #12]
 800ad72:	681b      	ldr	r3, [r3, #0]
 800ad74:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800ad76:	69fb      	ldr	r3, [r7, #28]
 800ad78:	3301      	adds	r3, #1
 800ad7a:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800ad7c:	68fb      	ldr	r3, [r7, #12]
 800ad7e:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800ad82:	b29b      	uxth	r3, r3
 800ad84:	3b01      	subs	r3, #1
 800ad86:	b29a      	uxth	r2, r3
 800ad88:	68fb      	ldr	r3, [r7, #12]
 800ad8a:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 800ad8e:	68fb      	ldr	r3, [r7, #12]
 800ad90:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800ad94:	b29b      	uxth	r3, r3
 800ad96:	2b00      	cmp	r3, #0
 800ad98:	d1c8      	bne.n	800ad2c <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800ad9a:	683b      	ldr	r3, [r7, #0]
 800ad9c:	9300      	str	r3, [sp, #0]
 800ad9e:	697b      	ldr	r3, [r7, #20]
 800ada0:	2200      	movs	r2, #0
 800ada2:	2140      	movs	r1, #64	; 0x40
 800ada4:	68f8      	ldr	r0, [r7, #12]
 800ada6:	f001 fb79 	bl	800c49c <UART_WaitOnFlagUntilTimeout>
 800adaa:	4603      	mov	r3, r0
 800adac:	2b00      	cmp	r3, #0
 800adae:	d005      	beq.n	800adbc <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 800adb0:	68fb      	ldr	r3, [r7, #12]
 800adb2:	2220      	movs	r2, #32
 800adb4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      return HAL_TIMEOUT;
 800adb8:	2303      	movs	r3, #3
 800adba:	e006      	b.n	800adca <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800adbc:	68fb      	ldr	r3, [r7, #12]
 800adbe:	2220      	movs	r2, #32
 800adc0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    return HAL_OK;
 800adc4:	2300      	movs	r3, #0
 800adc6:	e000      	b.n	800adca <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 800adc8:	2302      	movs	r3, #2
  }
}
 800adca:	4618      	mov	r0, r3
 800adcc:	3720      	adds	r7, #32
 800adce:	46bd      	mov	sp, r7
 800add0:	bd80      	pop	{r7, pc}
	...

0800add4 <HAL_UART_Transmit_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 800add4:	b480      	push	{r7}
 800add6:	b091      	sub	sp, #68	; 0x44
 800add8:	af00      	add	r7, sp, #0
 800adda:	60f8      	str	r0, [r7, #12]
 800addc:	60b9      	str	r1, [r7, #8]
 800adde:	4613      	mov	r3, r2
 800ade0:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800ade2:	68fb      	ldr	r3, [r7, #12]
 800ade4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ade8:	2b20      	cmp	r3, #32
 800adea:	d178      	bne.n	800aede <HAL_UART_Transmit_IT+0x10a>
  {
    if ((pData == NULL) || (Size == 0U))
 800adec:	68bb      	ldr	r3, [r7, #8]
 800adee:	2b00      	cmp	r3, #0
 800adf0:	d002      	beq.n	800adf8 <HAL_UART_Transmit_IT+0x24>
 800adf2:	88fb      	ldrh	r3, [r7, #6]
 800adf4:	2b00      	cmp	r3, #0
 800adf6:	d101      	bne.n	800adfc <HAL_UART_Transmit_IT+0x28>
    {
      return HAL_ERROR;
 800adf8:	2301      	movs	r3, #1
 800adfa:	e071      	b.n	800aee0 <HAL_UART_Transmit_IT+0x10c>
    }

    huart->pTxBuffPtr  = pData;
 800adfc:	68fb      	ldr	r3, [r7, #12]
 800adfe:	68ba      	ldr	r2, [r7, #8]
 800ae00:	651a      	str	r2, [r3, #80]	; 0x50
    huart->TxXferSize  = Size;
 800ae02:	68fb      	ldr	r3, [r7, #12]
 800ae04:	88fa      	ldrh	r2, [r7, #6]
 800ae06:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 800ae0a:	68fb      	ldr	r3, [r7, #12]
 800ae0c:	88fa      	ldrh	r2, [r7, #6]
 800ae0e:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    huart->TxISR       = NULL;
 800ae12:	68fb      	ldr	r3, [r7, #12]
 800ae14:	2200      	movs	r2, #0
 800ae16:	679a      	str	r2, [r3, #120]	; 0x78

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800ae18:	68fb      	ldr	r3, [r7, #12]
 800ae1a:	2200      	movs	r2, #0
 800ae1c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800ae20:	68fb      	ldr	r3, [r7, #12]
 800ae22:	2221      	movs	r2, #33	; 0x21
 800ae24:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* Configure Tx interrupt processing */
    if (huart->FifoMode == UART_FIFOMODE_ENABLE)
 800ae28:	68fb      	ldr	r3, [r7, #12]
 800ae2a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800ae2c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800ae30:	d12a      	bne.n	800ae88 <HAL_UART_Transmit_IT+0xb4>
    {
      /* Set the Tx ISR function pointer according to the data word length */
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800ae32:	68fb      	ldr	r3, [r7, #12]
 800ae34:	689b      	ldr	r3, [r3, #8]
 800ae36:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800ae3a:	d107      	bne.n	800ae4c <HAL_UART_Transmit_IT+0x78>
 800ae3c:	68fb      	ldr	r3, [r7, #12]
 800ae3e:	691b      	ldr	r3, [r3, #16]
 800ae40:	2b00      	cmp	r3, #0
 800ae42:	d103      	bne.n	800ae4c <HAL_UART_Transmit_IT+0x78>
      {
        huart->TxISR = UART_TxISR_16BIT_FIFOEN;
 800ae44:	68fb      	ldr	r3, [r7, #12]
 800ae46:	4a29      	ldr	r2, [pc, #164]	; (800aeec <HAL_UART_Transmit_IT+0x118>)
 800ae48:	679a      	str	r2, [r3, #120]	; 0x78
 800ae4a:	e002      	b.n	800ae52 <HAL_UART_Transmit_IT+0x7e>
      }
      else
      {
        huart->TxISR = UART_TxISR_8BIT_FIFOEN;
 800ae4c:	68fb      	ldr	r3, [r7, #12]
 800ae4e:	4a28      	ldr	r2, [pc, #160]	; (800aef0 <HAL_UART_Transmit_IT+0x11c>)
 800ae50:	679a      	str	r2, [r3, #120]	; 0x78
      }

      /* Enable the TX FIFO threshold interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 800ae52:	68fb      	ldr	r3, [r7, #12]
 800ae54:	681b      	ldr	r3, [r3, #0]
 800ae56:	3308      	adds	r3, #8
 800ae58:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ae5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ae5c:	e853 3f00 	ldrex	r3, [r3]
 800ae60:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800ae62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ae64:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800ae68:	63bb      	str	r3, [r7, #56]	; 0x38
 800ae6a:	68fb      	ldr	r3, [r7, #12]
 800ae6c:	681b      	ldr	r3, [r3, #0]
 800ae6e:	3308      	adds	r3, #8
 800ae70:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800ae72:	637a      	str	r2, [r7, #52]	; 0x34
 800ae74:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ae76:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800ae78:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800ae7a:	e841 2300 	strex	r3, r2, [r1]
 800ae7e:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800ae80:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ae82:	2b00      	cmp	r3, #0
 800ae84:	d1e5      	bne.n	800ae52 <HAL_UART_Transmit_IT+0x7e>
 800ae86:	e028      	b.n	800aeda <HAL_UART_Transmit_IT+0x106>
    }
    else
    {
      /* Set the Tx ISR function pointer according to the data word length */
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800ae88:	68fb      	ldr	r3, [r7, #12]
 800ae8a:	689b      	ldr	r3, [r3, #8]
 800ae8c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800ae90:	d107      	bne.n	800aea2 <HAL_UART_Transmit_IT+0xce>
 800ae92:	68fb      	ldr	r3, [r7, #12]
 800ae94:	691b      	ldr	r3, [r3, #16]
 800ae96:	2b00      	cmp	r3, #0
 800ae98:	d103      	bne.n	800aea2 <HAL_UART_Transmit_IT+0xce>
      {
        huart->TxISR = UART_TxISR_16BIT;
 800ae9a:	68fb      	ldr	r3, [r7, #12]
 800ae9c:	4a15      	ldr	r2, [pc, #84]	; (800aef4 <HAL_UART_Transmit_IT+0x120>)
 800ae9e:	679a      	str	r2, [r3, #120]	; 0x78
 800aea0:	e002      	b.n	800aea8 <HAL_UART_Transmit_IT+0xd4>
      }
      else
      {
        huart->TxISR = UART_TxISR_8BIT;
 800aea2:	68fb      	ldr	r3, [r7, #12]
 800aea4:	4a14      	ldr	r2, [pc, #80]	; (800aef8 <HAL_UART_Transmit_IT+0x124>)
 800aea6:	679a      	str	r2, [r3, #120]	; 0x78
      }

      /* Enable the Transmit Data Register Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 800aea8:	68fb      	ldr	r3, [r7, #12]
 800aeaa:	681b      	ldr	r3, [r3, #0]
 800aeac:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aeae:	697b      	ldr	r3, [r7, #20]
 800aeb0:	e853 3f00 	ldrex	r3, [r3]
 800aeb4:	613b      	str	r3, [r7, #16]
   return(result);
 800aeb6:	693b      	ldr	r3, [r7, #16]
 800aeb8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800aebc:	63fb      	str	r3, [r7, #60]	; 0x3c
 800aebe:	68fb      	ldr	r3, [r7, #12]
 800aec0:	681b      	ldr	r3, [r3, #0]
 800aec2:	461a      	mov	r2, r3
 800aec4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800aec6:	623b      	str	r3, [r7, #32]
 800aec8:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aeca:	69f9      	ldr	r1, [r7, #28]
 800aecc:	6a3a      	ldr	r2, [r7, #32]
 800aece:	e841 2300 	strex	r3, r2, [r1]
 800aed2:	61bb      	str	r3, [r7, #24]
   return(result);
 800aed4:	69bb      	ldr	r3, [r7, #24]
 800aed6:	2b00      	cmp	r3, #0
 800aed8:	d1e6      	bne.n	800aea8 <HAL_UART_Transmit_IT+0xd4>
    }

    return HAL_OK;
 800aeda:	2300      	movs	r3, #0
 800aedc:	e000      	b.n	800aee0 <HAL_UART_Transmit_IT+0x10c>
  }
  else
  {
    return HAL_BUSY;
 800aede:	2302      	movs	r3, #2
  }
}
 800aee0:	4618      	mov	r0, r3
 800aee2:	3744      	adds	r7, #68	; 0x44
 800aee4:	46bd      	mov	sp, r7
 800aee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aeea:	4770      	bx	lr
 800aeec:	0800cb03 	.word	0x0800cb03
 800aef0:	0800ca23 	.word	0x0800ca23
 800aef4:	0800c961 	.word	0x0800c961
 800aef8:	0800c8a9 	.word	0x0800c8a9

0800aefc <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800aefc:	b580      	push	{r7, lr}
 800aefe:	b08a      	sub	sp, #40	; 0x28
 800af00:	af00      	add	r7, sp, #0
 800af02:	60f8      	str	r0, [r7, #12]
 800af04:	60b9      	str	r1, [r7, #8]
 800af06:	4613      	mov	r3, r2
 800af08:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800af0a:	68fb      	ldr	r3, [r7, #12]
 800af0c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800af10:	2b20      	cmp	r3, #32
 800af12:	d137      	bne.n	800af84 <HAL_UART_Receive_IT+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 800af14:	68bb      	ldr	r3, [r7, #8]
 800af16:	2b00      	cmp	r3, #0
 800af18:	d002      	beq.n	800af20 <HAL_UART_Receive_IT+0x24>
 800af1a:	88fb      	ldrh	r3, [r7, #6]
 800af1c:	2b00      	cmp	r3, #0
 800af1e:	d101      	bne.n	800af24 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 800af20:	2301      	movs	r3, #1
 800af22:	e030      	b.n	800af86 <HAL_UART_Receive_IT+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800af24:	68fb      	ldr	r3, [r7, #12]
 800af26:	2200      	movs	r2, #0
 800af28:	66da      	str	r2, [r3, #108]	; 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800af2a:	68fb      	ldr	r3, [r7, #12]
 800af2c:	681b      	ldr	r3, [r3, #0]
 800af2e:	4a18      	ldr	r2, [pc, #96]	; (800af90 <HAL_UART_Receive_IT+0x94>)
 800af30:	4293      	cmp	r3, r2
 800af32:	d01f      	beq.n	800af74 <HAL_UART_Receive_IT+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800af34:	68fb      	ldr	r3, [r7, #12]
 800af36:	681b      	ldr	r3, [r3, #0]
 800af38:	685b      	ldr	r3, [r3, #4]
 800af3a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800af3e:	2b00      	cmp	r3, #0
 800af40:	d018      	beq.n	800af74 <HAL_UART_Receive_IT+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800af42:	68fb      	ldr	r3, [r7, #12]
 800af44:	681b      	ldr	r3, [r3, #0]
 800af46:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800af48:	697b      	ldr	r3, [r7, #20]
 800af4a:	e853 3f00 	ldrex	r3, [r3]
 800af4e:	613b      	str	r3, [r7, #16]
   return(result);
 800af50:	693b      	ldr	r3, [r7, #16]
 800af52:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800af56:	627b      	str	r3, [r7, #36]	; 0x24
 800af58:	68fb      	ldr	r3, [r7, #12]
 800af5a:	681b      	ldr	r3, [r3, #0]
 800af5c:	461a      	mov	r2, r3
 800af5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800af60:	623b      	str	r3, [r7, #32]
 800af62:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800af64:	69f9      	ldr	r1, [r7, #28]
 800af66:	6a3a      	ldr	r2, [r7, #32]
 800af68:	e841 2300 	strex	r3, r2, [r1]
 800af6c:	61bb      	str	r3, [r7, #24]
   return(result);
 800af6e:	69bb      	ldr	r3, [r7, #24]
 800af70:	2b00      	cmp	r3, #0
 800af72:	d1e6      	bne.n	800af42 <HAL_UART_Receive_IT+0x46>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 800af74:	88fb      	ldrh	r3, [r7, #6]
 800af76:	461a      	mov	r2, r3
 800af78:	68b9      	ldr	r1, [r7, #8]
 800af7a:	68f8      	ldr	r0, [r7, #12]
 800af7c:	f001 faf6 	bl	800c56c <UART_Start_Receive_IT>
 800af80:	4603      	mov	r3, r0
 800af82:	e000      	b.n	800af86 <HAL_UART_Receive_IT+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800af84:	2302      	movs	r3, #2
  }
}
 800af86:	4618      	mov	r0, r3
 800af88:	3728      	adds	r7, #40	; 0x28
 800af8a:	46bd      	mov	sp, r7
 800af8c:	bd80      	pop	{r7, pc}
 800af8e:	bf00      	nop
 800af90:	58000c00 	.word	0x58000c00

0800af94 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800af94:	b580      	push	{r7, lr}
 800af96:	b0ba      	sub	sp, #232	; 0xe8
 800af98:	af00      	add	r7, sp, #0
 800af9a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800af9c:	687b      	ldr	r3, [r7, #4]
 800af9e:	681b      	ldr	r3, [r3, #0]
 800afa0:	69db      	ldr	r3, [r3, #28]
 800afa2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800afa6:	687b      	ldr	r3, [r7, #4]
 800afa8:	681b      	ldr	r3, [r3, #0]
 800afaa:	681b      	ldr	r3, [r3, #0]
 800afac:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800afb0:	687b      	ldr	r3, [r7, #4]
 800afb2:	681b      	ldr	r3, [r3, #0]
 800afb4:	689b      	ldr	r3, [r3, #8]
 800afb6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800afba:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 800afbe:	f640 030f 	movw	r3, #2063	; 0x80f
 800afc2:	4013      	ands	r3, r2
 800afc4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 800afc8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800afcc:	2b00      	cmp	r3, #0
 800afce:	d11b      	bne.n	800b008 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800afd0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800afd4:	f003 0320 	and.w	r3, r3, #32
 800afd8:	2b00      	cmp	r3, #0
 800afda:	d015      	beq.n	800b008 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800afdc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800afe0:	f003 0320 	and.w	r3, r3, #32
 800afe4:	2b00      	cmp	r3, #0
 800afe6:	d105      	bne.n	800aff4 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800afe8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800afec:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800aff0:	2b00      	cmp	r3, #0
 800aff2:	d009      	beq.n	800b008 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 800aff4:	687b      	ldr	r3, [r7, #4]
 800aff6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800aff8:	2b00      	cmp	r3, #0
 800affa:	f000 8377 	beq.w	800b6ec <HAL_UART_IRQHandler+0x758>
      {
        huart->RxISR(huart);
 800affe:	687b      	ldr	r3, [r7, #4]
 800b000:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b002:	6878      	ldr	r0, [r7, #4]
 800b004:	4798      	blx	r3
      }
      return;
 800b006:	e371      	b.n	800b6ec <HAL_UART_IRQHandler+0x758>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800b008:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800b00c:	2b00      	cmp	r3, #0
 800b00e:	f000 8123 	beq.w	800b258 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800b012:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800b016:	4b8d      	ldr	r3, [pc, #564]	; (800b24c <HAL_UART_IRQHandler+0x2b8>)
 800b018:	4013      	ands	r3, r2
 800b01a:	2b00      	cmp	r3, #0
 800b01c:	d106      	bne.n	800b02c <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800b01e:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 800b022:	4b8b      	ldr	r3, [pc, #556]	; (800b250 <HAL_UART_IRQHandler+0x2bc>)
 800b024:	4013      	ands	r3, r2
 800b026:	2b00      	cmp	r3, #0
 800b028:	f000 8116 	beq.w	800b258 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800b02c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b030:	f003 0301 	and.w	r3, r3, #1
 800b034:	2b00      	cmp	r3, #0
 800b036:	d011      	beq.n	800b05c <HAL_UART_IRQHandler+0xc8>
 800b038:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b03c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b040:	2b00      	cmp	r3, #0
 800b042:	d00b      	beq.n	800b05c <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800b044:	687b      	ldr	r3, [r7, #4]
 800b046:	681b      	ldr	r3, [r3, #0]
 800b048:	2201      	movs	r2, #1
 800b04a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800b04c:	687b      	ldr	r3, [r7, #4]
 800b04e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b052:	f043 0201 	orr.w	r2, r3, #1
 800b056:	687b      	ldr	r3, [r7, #4]
 800b058:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800b05c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b060:	f003 0302 	and.w	r3, r3, #2
 800b064:	2b00      	cmp	r3, #0
 800b066:	d011      	beq.n	800b08c <HAL_UART_IRQHandler+0xf8>
 800b068:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800b06c:	f003 0301 	and.w	r3, r3, #1
 800b070:	2b00      	cmp	r3, #0
 800b072:	d00b      	beq.n	800b08c <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800b074:	687b      	ldr	r3, [r7, #4]
 800b076:	681b      	ldr	r3, [r3, #0]
 800b078:	2202      	movs	r2, #2
 800b07a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800b07c:	687b      	ldr	r3, [r7, #4]
 800b07e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b082:	f043 0204 	orr.w	r2, r3, #4
 800b086:	687b      	ldr	r3, [r7, #4]
 800b088:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800b08c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b090:	f003 0304 	and.w	r3, r3, #4
 800b094:	2b00      	cmp	r3, #0
 800b096:	d011      	beq.n	800b0bc <HAL_UART_IRQHandler+0x128>
 800b098:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800b09c:	f003 0301 	and.w	r3, r3, #1
 800b0a0:	2b00      	cmp	r3, #0
 800b0a2:	d00b      	beq.n	800b0bc <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800b0a4:	687b      	ldr	r3, [r7, #4]
 800b0a6:	681b      	ldr	r3, [r3, #0]
 800b0a8:	2204      	movs	r2, #4
 800b0aa:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800b0ac:	687b      	ldr	r3, [r7, #4]
 800b0ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b0b2:	f043 0202 	orr.w	r2, r3, #2
 800b0b6:	687b      	ldr	r3, [r7, #4]
 800b0b8:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800b0bc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b0c0:	f003 0308 	and.w	r3, r3, #8
 800b0c4:	2b00      	cmp	r3, #0
 800b0c6:	d017      	beq.n	800b0f8 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800b0c8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b0cc:	f003 0320 	and.w	r3, r3, #32
 800b0d0:	2b00      	cmp	r3, #0
 800b0d2:	d105      	bne.n	800b0e0 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 800b0d4:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800b0d8:	4b5c      	ldr	r3, [pc, #368]	; (800b24c <HAL_UART_IRQHandler+0x2b8>)
 800b0da:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800b0dc:	2b00      	cmp	r3, #0
 800b0de:	d00b      	beq.n	800b0f8 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800b0e0:	687b      	ldr	r3, [r7, #4]
 800b0e2:	681b      	ldr	r3, [r3, #0]
 800b0e4:	2208      	movs	r2, #8
 800b0e6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800b0e8:	687b      	ldr	r3, [r7, #4]
 800b0ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b0ee:	f043 0208 	orr.w	r2, r3, #8
 800b0f2:	687b      	ldr	r3, [r7, #4]
 800b0f4:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800b0f8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b0fc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800b100:	2b00      	cmp	r3, #0
 800b102:	d012      	beq.n	800b12a <HAL_UART_IRQHandler+0x196>
 800b104:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b108:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800b10c:	2b00      	cmp	r3, #0
 800b10e:	d00c      	beq.n	800b12a <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800b110:	687b      	ldr	r3, [r7, #4]
 800b112:	681b      	ldr	r3, [r3, #0]
 800b114:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800b118:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800b11a:	687b      	ldr	r3, [r7, #4]
 800b11c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b120:	f043 0220 	orr.w	r2, r3, #32
 800b124:	687b      	ldr	r3, [r7, #4]
 800b126:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800b12a:	687b      	ldr	r3, [r7, #4]
 800b12c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b130:	2b00      	cmp	r3, #0
 800b132:	f000 82dd 	beq.w	800b6f0 <HAL_UART_IRQHandler+0x75c>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800b136:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b13a:	f003 0320 	and.w	r3, r3, #32
 800b13e:	2b00      	cmp	r3, #0
 800b140:	d013      	beq.n	800b16a <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800b142:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b146:	f003 0320 	and.w	r3, r3, #32
 800b14a:	2b00      	cmp	r3, #0
 800b14c:	d105      	bne.n	800b15a <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800b14e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800b152:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800b156:	2b00      	cmp	r3, #0
 800b158:	d007      	beq.n	800b16a <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 800b15a:	687b      	ldr	r3, [r7, #4]
 800b15c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b15e:	2b00      	cmp	r3, #0
 800b160:	d003      	beq.n	800b16a <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 800b162:	687b      	ldr	r3, [r7, #4]
 800b164:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b166:	6878      	ldr	r0, [r7, #4]
 800b168:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800b16a:	687b      	ldr	r3, [r7, #4]
 800b16c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b170:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800b174:	687b      	ldr	r3, [r7, #4]
 800b176:	681b      	ldr	r3, [r3, #0]
 800b178:	689b      	ldr	r3, [r3, #8]
 800b17a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b17e:	2b40      	cmp	r3, #64	; 0x40
 800b180:	d005      	beq.n	800b18e <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800b182:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800b186:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800b18a:	2b00      	cmp	r3, #0
 800b18c:	d054      	beq.n	800b238 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800b18e:	6878      	ldr	r0, [r7, #4]
 800b190:	f001 fb0e 	bl	800c7b0 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b194:	687b      	ldr	r3, [r7, #4]
 800b196:	681b      	ldr	r3, [r3, #0]
 800b198:	689b      	ldr	r3, [r3, #8]
 800b19a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b19e:	2b40      	cmp	r3, #64	; 0x40
 800b1a0:	d146      	bne.n	800b230 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800b1a2:	687b      	ldr	r3, [r7, #4]
 800b1a4:	681b      	ldr	r3, [r3, #0]
 800b1a6:	3308      	adds	r3, #8
 800b1a8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b1ac:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800b1b0:	e853 3f00 	ldrex	r3, [r3]
 800b1b4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800b1b8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800b1bc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800b1c0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800b1c4:	687b      	ldr	r3, [r7, #4]
 800b1c6:	681b      	ldr	r3, [r3, #0]
 800b1c8:	3308      	adds	r3, #8
 800b1ca:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800b1ce:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800b1d2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b1d6:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800b1da:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800b1de:	e841 2300 	strex	r3, r2, [r1]
 800b1e2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800b1e6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800b1ea:	2b00      	cmp	r3, #0
 800b1ec:	d1d9      	bne.n	800b1a2 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800b1ee:	687b      	ldr	r3, [r7, #4]
 800b1f0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800b1f4:	2b00      	cmp	r3, #0
 800b1f6:	d017      	beq.n	800b228 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800b1f8:	687b      	ldr	r3, [r7, #4]
 800b1fa:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800b1fe:	4a15      	ldr	r2, [pc, #84]	; (800b254 <HAL_UART_IRQHandler+0x2c0>)
 800b200:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800b202:	687b      	ldr	r3, [r7, #4]
 800b204:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800b208:	4618      	mov	r0, r3
 800b20a:	f7f9 fa1d 	bl	8004648 <HAL_DMA_Abort_IT>
 800b20e:	4603      	mov	r3, r0
 800b210:	2b00      	cmp	r3, #0
 800b212:	d019      	beq.n	800b248 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800b214:	687b      	ldr	r3, [r7, #4]
 800b216:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800b21a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b21c:	687a      	ldr	r2, [r7, #4]
 800b21e:	f8d2 2080 	ldr.w	r2, [r2, #128]	; 0x80
 800b222:	4610      	mov	r0, r2
 800b224:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b226:	e00f      	b.n	800b248 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800b228:	6878      	ldr	r0, [r7, #4]
 800b22a:	f000 fa6d 	bl	800b708 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b22e:	e00b      	b.n	800b248 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800b230:	6878      	ldr	r0, [r7, #4]
 800b232:	f000 fa69 	bl	800b708 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b236:	e007      	b.n	800b248 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800b238:	6878      	ldr	r0, [r7, #4]
 800b23a:	f000 fa65 	bl	800b708 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b23e:	687b      	ldr	r3, [r7, #4]
 800b240:	2200      	movs	r2, #0
 800b242:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
      }
    }
    return;
 800b246:	e253      	b.n	800b6f0 <HAL_UART_IRQHandler+0x75c>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b248:	bf00      	nop
    return;
 800b24a:	e251      	b.n	800b6f0 <HAL_UART_IRQHandler+0x75c>
 800b24c:	10000001 	.word	0x10000001
 800b250:	04000120 	.word	0x04000120
 800b254:	0800c87d 	.word	0x0800c87d

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b258:	687b      	ldr	r3, [r7, #4]
 800b25a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b25c:	2b01      	cmp	r3, #1
 800b25e:	f040 81e7 	bne.w	800b630 <HAL_UART_IRQHandler+0x69c>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800b262:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b266:	f003 0310 	and.w	r3, r3, #16
 800b26a:	2b00      	cmp	r3, #0
 800b26c:	f000 81e0 	beq.w	800b630 <HAL_UART_IRQHandler+0x69c>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800b270:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b274:	f003 0310 	and.w	r3, r3, #16
 800b278:	2b00      	cmp	r3, #0
 800b27a:	f000 81d9 	beq.w	800b630 <HAL_UART_IRQHandler+0x69c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800b27e:	687b      	ldr	r3, [r7, #4]
 800b280:	681b      	ldr	r3, [r3, #0]
 800b282:	2210      	movs	r2, #16
 800b284:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b286:	687b      	ldr	r3, [r7, #4]
 800b288:	681b      	ldr	r3, [r3, #0]
 800b28a:	689b      	ldr	r3, [r3, #8]
 800b28c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b290:	2b40      	cmp	r3, #64	; 0x40
 800b292:	f040 8151 	bne.w	800b538 <HAL_UART_IRQHandler+0x5a4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800b296:	687b      	ldr	r3, [r7, #4]
 800b298:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800b29c:	681b      	ldr	r3, [r3, #0]
 800b29e:	4a96      	ldr	r2, [pc, #600]	; (800b4f8 <HAL_UART_IRQHandler+0x564>)
 800b2a0:	4293      	cmp	r3, r2
 800b2a2:	d068      	beq.n	800b376 <HAL_UART_IRQHandler+0x3e2>
 800b2a4:	687b      	ldr	r3, [r7, #4]
 800b2a6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800b2aa:	681b      	ldr	r3, [r3, #0]
 800b2ac:	4a93      	ldr	r2, [pc, #588]	; (800b4fc <HAL_UART_IRQHandler+0x568>)
 800b2ae:	4293      	cmp	r3, r2
 800b2b0:	d061      	beq.n	800b376 <HAL_UART_IRQHandler+0x3e2>
 800b2b2:	687b      	ldr	r3, [r7, #4]
 800b2b4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800b2b8:	681b      	ldr	r3, [r3, #0]
 800b2ba:	4a91      	ldr	r2, [pc, #580]	; (800b500 <HAL_UART_IRQHandler+0x56c>)
 800b2bc:	4293      	cmp	r3, r2
 800b2be:	d05a      	beq.n	800b376 <HAL_UART_IRQHandler+0x3e2>
 800b2c0:	687b      	ldr	r3, [r7, #4]
 800b2c2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800b2c6:	681b      	ldr	r3, [r3, #0]
 800b2c8:	4a8e      	ldr	r2, [pc, #568]	; (800b504 <HAL_UART_IRQHandler+0x570>)
 800b2ca:	4293      	cmp	r3, r2
 800b2cc:	d053      	beq.n	800b376 <HAL_UART_IRQHandler+0x3e2>
 800b2ce:	687b      	ldr	r3, [r7, #4]
 800b2d0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800b2d4:	681b      	ldr	r3, [r3, #0]
 800b2d6:	4a8c      	ldr	r2, [pc, #560]	; (800b508 <HAL_UART_IRQHandler+0x574>)
 800b2d8:	4293      	cmp	r3, r2
 800b2da:	d04c      	beq.n	800b376 <HAL_UART_IRQHandler+0x3e2>
 800b2dc:	687b      	ldr	r3, [r7, #4]
 800b2de:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800b2e2:	681b      	ldr	r3, [r3, #0]
 800b2e4:	4a89      	ldr	r2, [pc, #548]	; (800b50c <HAL_UART_IRQHandler+0x578>)
 800b2e6:	4293      	cmp	r3, r2
 800b2e8:	d045      	beq.n	800b376 <HAL_UART_IRQHandler+0x3e2>
 800b2ea:	687b      	ldr	r3, [r7, #4]
 800b2ec:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800b2f0:	681b      	ldr	r3, [r3, #0]
 800b2f2:	4a87      	ldr	r2, [pc, #540]	; (800b510 <HAL_UART_IRQHandler+0x57c>)
 800b2f4:	4293      	cmp	r3, r2
 800b2f6:	d03e      	beq.n	800b376 <HAL_UART_IRQHandler+0x3e2>
 800b2f8:	687b      	ldr	r3, [r7, #4]
 800b2fa:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800b2fe:	681b      	ldr	r3, [r3, #0]
 800b300:	4a84      	ldr	r2, [pc, #528]	; (800b514 <HAL_UART_IRQHandler+0x580>)
 800b302:	4293      	cmp	r3, r2
 800b304:	d037      	beq.n	800b376 <HAL_UART_IRQHandler+0x3e2>
 800b306:	687b      	ldr	r3, [r7, #4]
 800b308:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800b30c:	681b      	ldr	r3, [r3, #0]
 800b30e:	4a82      	ldr	r2, [pc, #520]	; (800b518 <HAL_UART_IRQHandler+0x584>)
 800b310:	4293      	cmp	r3, r2
 800b312:	d030      	beq.n	800b376 <HAL_UART_IRQHandler+0x3e2>
 800b314:	687b      	ldr	r3, [r7, #4]
 800b316:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800b31a:	681b      	ldr	r3, [r3, #0]
 800b31c:	4a7f      	ldr	r2, [pc, #508]	; (800b51c <HAL_UART_IRQHandler+0x588>)
 800b31e:	4293      	cmp	r3, r2
 800b320:	d029      	beq.n	800b376 <HAL_UART_IRQHandler+0x3e2>
 800b322:	687b      	ldr	r3, [r7, #4]
 800b324:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800b328:	681b      	ldr	r3, [r3, #0]
 800b32a:	4a7d      	ldr	r2, [pc, #500]	; (800b520 <HAL_UART_IRQHandler+0x58c>)
 800b32c:	4293      	cmp	r3, r2
 800b32e:	d022      	beq.n	800b376 <HAL_UART_IRQHandler+0x3e2>
 800b330:	687b      	ldr	r3, [r7, #4]
 800b332:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800b336:	681b      	ldr	r3, [r3, #0]
 800b338:	4a7a      	ldr	r2, [pc, #488]	; (800b524 <HAL_UART_IRQHandler+0x590>)
 800b33a:	4293      	cmp	r3, r2
 800b33c:	d01b      	beq.n	800b376 <HAL_UART_IRQHandler+0x3e2>
 800b33e:	687b      	ldr	r3, [r7, #4]
 800b340:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800b344:	681b      	ldr	r3, [r3, #0]
 800b346:	4a78      	ldr	r2, [pc, #480]	; (800b528 <HAL_UART_IRQHandler+0x594>)
 800b348:	4293      	cmp	r3, r2
 800b34a:	d014      	beq.n	800b376 <HAL_UART_IRQHandler+0x3e2>
 800b34c:	687b      	ldr	r3, [r7, #4]
 800b34e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800b352:	681b      	ldr	r3, [r3, #0]
 800b354:	4a75      	ldr	r2, [pc, #468]	; (800b52c <HAL_UART_IRQHandler+0x598>)
 800b356:	4293      	cmp	r3, r2
 800b358:	d00d      	beq.n	800b376 <HAL_UART_IRQHandler+0x3e2>
 800b35a:	687b      	ldr	r3, [r7, #4]
 800b35c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800b360:	681b      	ldr	r3, [r3, #0]
 800b362:	4a73      	ldr	r2, [pc, #460]	; (800b530 <HAL_UART_IRQHandler+0x59c>)
 800b364:	4293      	cmp	r3, r2
 800b366:	d006      	beq.n	800b376 <HAL_UART_IRQHandler+0x3e2>
 800b368:	687b      	ldr	r3, [r7, #4]
 800b36a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800b36e:	681b      	ldr	r3, [r3, #0]
 800b370:	4a70      	ldr	r2, [pc, #448]	; (800b534 <HAL_UART_IRQHandler+0x5a0>)
 800b372:	4293      	cmp	r3, r2
 800b374:	d106      	bne.n	800b384 <HAL_UART_IRQHandler+0x3f0>
 800b376:	687b      	ldr	r3, [r7, #4]
 800b378:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800b37c:	681b      	ldr	r3, [r3, #0]
 800b37e:	685b      	ldr	r3, [r3, #4]
 800b380:	b29b      	uxth	r3, r3
 800b382:	e005      	b.n	800b390 <HAL_UART_IRQHandler+0x3fc>
 800b384:	687b      	ldr	r3, [r7, #4]
 800b386:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800b38a:	681b      	ldr	r3, [r3, #0]
 800b38c:	685b      	ldr	r3, [r3, #4]
 800b38e:	b29b      	uxth	r3, r3
 800b390:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800b394:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800b398:	2b00      	cmp	r3, #0
 800b39a:	f000 81ab 	beq.w	800b6f4 <HAL_UART_IRQHandler+0x760>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800b39e:	687b      	ldr	r3, [r7, #4]
 800b3a0:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800b3a4:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800b3a8:	429a      	cmp	r2, r3
 800b3aa:	f080 81a3 	bcs.w	800b6f4 <HAL_UART_IRQHandler+0x760>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800b3ae:	687b      	ldr	r3, [r7, #4]
 800b3b0:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800b3b4:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800b3b8:	687b      	ldr	r3, [r7, #4]
 800b3ba:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800b3be:	69db      	ldr	r3, [r3, #28]
 800b3c0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b3c4:	f000 8087 	beq.w	800b4d6 <HAL_UART_IRQHandler+0x542>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800b3c8:	687b      	ldr	r3, [r7, #4]
 800b3ca:	681b      	ldr	r3, [r3, #0]
 800b3cc:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b3d0:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800b3d4:	e853 3f00 	ldrex	r3, [r3]
 800b3d8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800b3dc:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800b3e0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800b3e4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800b3e8:	687b      	ldr	r3, [r7, #4]
 800b3ea:	681b      	ldr	r3, [r3, #0]
 800b3ec:	461a      	mov	r2, r3
 800b3ee:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800b3f2:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800b3f6:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b3fa:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800b3fe:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800b402:	e841 2300 	strex	r3, r2, [r1]
 800b406:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800b40a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800b40e:	2b00      	cmp	r3, #0
 800b410:	d1da      	bne.n	800b3c8 <HAL_UART_IRQHandler+0x434>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b412:	687b      	ldr	r3, [r7, #4]
 800b414:	681b      	ldr	r3, [r3, #0]
 800b416:	3308      	adds	r3, #8
 800b418:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b41a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800b41c:	e853 3f00 	ldrex	r3, [r3]
 800b420:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800b422:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800b424:	f023 0301 	bic.w	r3, r3, #1
 800b428:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800b42c:	687b      	ldr	r3, [r7, #4]
 800b42e:	681b      	ldr	r3, [r3, #0]
 800b430:	3308      	adds	r3, #8
 800b432:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800b436:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800b43a:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b43c:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800b43e:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800b442:	e841 2300 	strex	r3, r2, [r1]
 800b446:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800b448:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800b44a:	2b00      	cmp	r3, #0
 800b44c:	d1e1      	bne.n	800b412 <HAL_UART_IRQHandler+0x47e>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800b44e:	687b      	ldr	r3, [r7, #4]
 800b450:	681b      	ldr	r3, [r3, #0]
 800b452:	3308      	adds	r3, #8
 800b454:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b456:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800b458:	e853 3f00 	ldrex	r3, [r3]
 800b45c:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800b45e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800b460:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800b464:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800b468:	687b      	ldr	r3, [r7, #4]
 800b46a:	681b      	ldr	r3, [r3, #0]
 800b46c:	3308      	adds	r3, #8
 800b46e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800b472:	66fa      	str	r2, [r7, #108]	; 0x6c
 800b474:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b476:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800b478:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800b47a:	e841 2300 	strex	r3, r2, [r1]
 800b47e:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800b480:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800b482:	2b00      	cmp	r3, #0
 800b484:	d1e3      	bne.n	800b44e <HAL_UART_IRQHandler+0x4ba>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800b486:	687b      	ldr	r3, [r7, #4]
 800b488:	2220      	movs	r2, #32
 800b48a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b48e:	687b      	ldr	r3, [r7, #4]
 800b490:	2200      	movs	r2, #0
 800b492:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b494:	687b      	ldr	r3, [r7, #4]
 800b496:	681b      	ldr	r3, [r3, #0]
 800b498:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b49a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b49c:	e853 3f00 	ldrex	r3, [r3]
 800b4a0:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800b4a2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b4a4:	f023 0310 	bic.w	r3, r3, #16
 800b4a8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800b4ac:	687b      	ldr	r3, [r7, #4]
 800b4ae:	681b      	ldr	r3, [r3, #0]
 800b4b0:	461a      	mov	r2, r3
 800b4b2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800b4b6:	65bb      	str	r3, [r7, #88]	; 0x58
 800b4b8:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b4ba:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800b4bc:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800b4be:	e841 2300 	strex	r3, r2, [r1]
 800b4c2:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800b4c4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b4c6:	2b00      	cmp	r3, #0
 800b4c8:	d1e4      	bne.n	800b494 <HAL_UART_IRQHandler+0x500>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800b4ca:	687b      	ldr	r3, [r7, #4]
 800b4cc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800b4d0:	4618      	mov	r0, r3
 800b4d2:	f7f8 fd9b 	bl	800400c <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800b4d6:	687b      	ldr	r3, [r7, #4]
 800b4d8:	2202      	movs	r2, #2
 800b4da:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800b4dc:	687b      	ldr	r3, [r7, #4]
 800b4de:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800b4e2:	687b      	ldr	r3, [r7, #4]
 800b4e4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800b4e8:	b29b      	uxth	r3, r3
 800b4ea:	1ad3      	subs	r3, r2, r3
 800b4ec:	b29b      	uxth	r3, r3
 800b4ee:	4619      	mov	r1, r3
 800b4f0:	6878      	ldr	r0, [r7, #4]
 800b4f2:	f000 f913 	bl	800b71c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800b4f6:	e0fd      	b.n	800b6f4 <HAL_UART_IRQHandler+0x760>
 800b4f8:	40020010 	.word	0x40020010
 800b4fc:	40020028 	.word	0x40020028
 800b500:	40020040 	.word	0x40020040
 800b504:	40020058 	.word	0x40020058
 800b508:	40020070 	.word	0x40020070
 800b50c:	40020088 	.word	0x40020088
 800b510:	400200a0 	.word	0x400200a0
 800b514:	400200b8 	.word	0x400200b8
 800b518:	40020410 	.word	0x40020410
 800b51c:	40020428 	.word	0x40020428
 800b520:	40020440 	.word	0x40020440
 800b524:	40020458 	.word	0x40020458
 800b528:	40020470 	.word	0x40020470
 800b52c:	40020488 	.word	0x40020488
 800b530:	400204a0 	.word	0x400204a0
 800b534:	400204b8 	.word	0x400204b8
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800b538:	687b      	ldr	r3, [r7, #4]
 800b53a:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800b53e:	687b      	ldr	r3, [r7, #4]
 800b540:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800b544:	b29b      	uxth	r3, r3
 800b546:	1ad3      	subs	r3, r2, r3
 800b548:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800b54c:	687b      	ldr	r3, [r7, #4]
 800b54e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800b552:	b29b      	uxth	r3, r3
 800b554:	2b00      	cmp	r3, #0
 800b556:	f000 80cf 	beq.w	800b6f8 <HAL_UART_IRQHandler+0x764>
          && (nb_rx_data > 0U))
 800b55a:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800b55e:	2b00      	cmp	r3, #0
 800b560:	f000 80ca 	beq.w	800b6f8 <HAL_UART_IRQHandler+0x764>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800b564:	687b      	ldr	r3, [r7, #4]
 800b566:	681b      	ldr	r3, [r3, #0]
 800b568:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b56a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b56c:	e853 3f00 	ldrex	r3, [r3]
 800b570:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800b572:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b574:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800b578:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800b57c:	687b      	ldr	r3, [r7, #4]
 800b57e:	681b      	ldr	r3, [r3, #0]
 800b580:	461a      	mov	r2, r3
 800b582:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800b586:	647b      	str	r3, [r7, #68]	; 0x44
 800b588:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b58a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800b58c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800b58e:	e841 2300 	strex	r3, r2, [r1]
 800b592:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800b594:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b596:	2b00      	cmp	r3, #0
 800b598:	d1e4      	bne.n	800b564 <HAL_UART_IRQHandler+0x5d0>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800b59a:	687b      	ldr	r3, [r7, #4]
 800b59c:	681b      	ldr	r3, [r3, #0]
 800b59e:	3308      	adds	r3, #8
 800b5a0:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b5a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b5a4:	e853 3f00 	ldrex	r3, [r3]
 800b5a8:	623b      	str	r3, [r7, #32]
   return(result);
 800b5aa:	6a3a      	ldr	r2, [r7, #32]
 800b5ac:	4b55      	ldr	r3, [pc, #340]	; (800b704 <HAL_UART_IRQHandler+0x770>)
 800b5ae:	4013      	ands	r3, r2
 800b5b0:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800b5b4:	687b      	ldr	r3, [r7, #4]
 800b5b6:	681b      	ldr	r3, [r3, #0]
 800b5b8:	3308      	adds	r3, #8
 800b5ba:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800b5be:	633a      	str	r2, [r7, #48]	; 0x30
 800b5c0:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b5c2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800b5c4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b5c6:	e841 2300 	strex	r3, r2, [r1]
 800b5ca:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800b5cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b5ce:	2b00      	cmp	r3, #0
 800b5d0:	d1e3      	bne.n	800b59a <HAL_UART_IRQHandler+0x606>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800b5d2:	687b      	ldr	r3, [r7, #4]
 800b5d4:	2220      	movs	r2, #32
 800b5d6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b5da:	687b      	ldr	r3, [r7, #4]
 800b5dc:	2200      	movs	r2, #0
 800b5de:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800b5e0:	687b      	ldr	r3, [r7, #4]
 800b5e2:	2200      	movs	r2, #0
 800b5e4:	675a      	str	r2, [r3, #116]	; 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b5e6:	687b      	ldr	r3, [r7, #4]
 800b5e8:	681b      	ldr	r3, [r3, #0]
 800b5ea:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b5ec:	693b      	ldr	r3, [r7, #16]
 800b5ee:	e853 3f00 	ldrex	r3, [r3]
 800b5f2:	60fb      	str	r3, [r7, #12]
   return(result);
 800b5f4:	68fb      	ldr	r3, [r7, #12]
 800b5f6:	f023 0310 	bic.w	r3, r3, #16
 800b5fa:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800b5fe:	687b      	ldr	r3, [r7, #4]
 800b600:	681b      	ldr	r3, [r3, #0]
 800b602:	461a      	mov	r2, r3
 800b604:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800b608:	61fb      	str	r3, [r7, #28]
 800b60a:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b60c:	69b9      	ldr	r1, [r7, #24]
 800b60e:	69fa      	ldr	r2, [r7, #28]
 800b610:	e841 2300 	strex	r3, r2, [r1]
 800b614:	617b      	str	r3, [r7, #20]
   return(result);
 800b616:	697b      	ldr	r3, [r7, #20]
 800b618:	2b00      	cmp	r3, #0
 800b61a:	d1e4      	bne.n	800b5e6 <HAL_UART_IRQHandler+0x652>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800b61c:	687b      	ldr	r3, [r7, #4]
 800b61e:	2202      	movs	r2, #2
 800b620:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800b622:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800b626:	4619      	mov	r1, r3
 800b628:	6878      	ldr	r0, [r7, #4]
 800b62a:	f000 f877 	bl	800b71c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800b62e:	e063      	b.n	800b6f8 <HAL_UART_IRQHandler+0x764>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800b630:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b634:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800b638:	2b00      	cmp	r3, #0
 800b63a:	d00e      	beq.n	800b65a <HAL_UART_IRQHandler+0x6c6>
 800b63c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800b640:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800b644:	2b00      	cmp	r3, #0
 800b646:	d008      	beq.n	800b65a <HAL_UART_IRQHandler+0x6c6>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800b648:	687b      	ldr	r3, [r7, #4]
 800b64a:	681b      	ldr	r3, [r3, #0]
 800b64c:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800b650:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800b652:	6878      	ldr	r0, [r7, #4]
 800b654:	f002 f812 	bl	800d67c <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800b658:	e051      	b.n	800b6fe <HAL_UART_IRQHandler+0x76a>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800b65a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b65e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b662:	2b00      	cmp	r3, #0
 800b664:	d014      	beq.n	800b690 <HAL_UART_IRQHandler+0x6fc>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800b666:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b66a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b66e:	2b00      	cmp	r3, #0
 800b670:	d105      	bne.n	800b67e <HAL_UART_IRQHandler+0x6ea>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800b672:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800b676:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800b67a:	2b00      	cmp	r3, #0
 800b67c:	d008      	beq.n	800b690 <HAL_UART_IRQHandler+0x6fc>
  {
    if (huart->TxISR != NULL)
 800b67e:	687b      	ldr	r3, [r7, #4]
 800b680:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800b682:	2b00      	cmp	r3, #0
 800b684:	d03a      	beq.n	800b6fc <HAL_UART_IRQHandler+0x768>
    {
      huart->TxISR(huart);
 800b686:	687b      	ldr	r3, [r7, #4]
 800b688:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800b68a:	6878      	ldr	r0, [r7, #4]
 800b68c:	4798      	blx	r3
    }
    return;
 800b68e:	e035      	b.n	800b6fc <HAL_UART_IRQHandler+0x768>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800b690:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b694:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b698:	2b00      	cmp	r3, #0
 800b69a:	d009      	beq.n	800b6b0 <HAL_UART_IRQHandler+0x71c>
 800b69c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b6a0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b6a4:	2b00      	cmp	r3, #0
 800b6a6:	d003      	beq.n	800b6b0 <HAL_UART_IRQHandler+0x71c>
  {
    UART_EndTransmit_IT(huart);
 800b6a8:	6878      	ldr	r0, [r7, #4]
 800b6aa:	f001 fa9f 	bl	800cbec <UART_EndTransmit_IT>
    return;
 800b6ae:	e026      	b.n	800b6fe <HAL_UART_IRQHandler+0x76a>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800b6b0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b6b4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800b6b8:	2b00      	cmp	r3, #0
 800b6ba:	d009      	beq.n	800b6d0 <HAL_UART_IRQHandler+0x73c>
 800b6bc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b6c0:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800b6c4:	2b00      	cmp	r3, #0
 800b6c6:	d003      	beq.n	800b6d0 <HAL_UART_IRQHandler+0x73c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800b6c8:	6878      	ldr	r0, [r7, #4]
 800b6ca:	f001 ffeb 	bl	800d6a4 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800b6ce:	e016      	b.n	800b6fe <HAL_UART_IRQHandler+0x76a>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800b6d0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b6d4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800b6d8:	2b00      	cmp	r3, #0
 800b6da:	d010      	beq.n	800b6fe <HAL_UART_IRQHandler+0x76a>
 800b6dc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b6e0:	2b00      	cmp	r3, #0
 800b6e2:	da0c      	bge.n	800b6fe <HAL_UART_IRQHandler+0x76a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 800b6e4:	6878      	ldr	r0, [r7, #4]
 800b6e6:	f001 ffd3 	bl	800d690 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800b6ea:	e008      	b.n	800b6fe <HAL_UART_IRQHandler+0x76a>
      return;
 800b6ec:	bf00      	nop
 800b6ee:	e006      	b.n	800b6fe <HAL_UART_IRQHandler+0x76a>
    return;
 800b6f0:	bf00      	nop
 800b6f2:	e004      	b.n	800b6fe <HAL_UART_IRQHandler+0x76a>
      return;
 800b6f4:	bf00      	nop
 800b6f6:	e002      	b.n	800b6fe <HAL_UART_IRQHandler+0x76a>
      return;
 800b6f8:	bf00      	nop
 800b6fa:	e000      	b.n	800b6fe <HAL_UART_IRQHandler+0x76a>
    return;
 800b6fc:	bf00      	nop
  }
}
 800b6fe:	37e8      	adds	r7, #232	; 0xe8
 800b700:	46bd      	mov	sp, r7
 800b702:	bd80      	pop	{r7, pc}
 800b704:	effffffe 	.word	0xeffffffe

0800b708 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800b708:	b480      	push	{r7}
 800b70a:	b083      	sub	sp, #12
 800b70c:	af00      	add	r7, sp, #0
 800b70e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800b710:	bf00      	nop
 800b712:	370c      	adds	r7, #12
 800b714:	46bd      	mov	sp, r7
 800b716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b71a:	4770      	bx	lr

0800b71c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800b71c:	b480      	push	{r7}
 800b71e:	b083      	sub	sp, #12
 800b720:	af00      	add	r7, sp, #0
 800b722:	6078      	str	r0, [r7, #4]
 800b724:	460b      	mov	r3, r1
 800b726:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800b728:	bf00      	nop
 800b72a:	370c      	adds	r7, #12
 800b72c:	46bd      	mov	sp, r7
 800b72e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b732:	4770      	bx	lr

0800b734 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800b734:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800b738:	b092      	sub	sp, #72	; 0x48
 800b73a:	af00      	add	r7, sp, #0
 800b73c:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800b73e:	2300      	movs	r3, #0
 800b740:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800b744:	697b      	ldr	r3, [r7, #20]
 800b746:	689a      	ldr	r2, [r3, #8]
 800b748:	697b      	ldr	r3, [r7, #20]
 800b74a:	691b      	ldr	r3, [r3, #16]
 800b74c:	431a      	orrs	r2, r3
 800b74e:	697b      	ldr	r3, [r7, #20]
 800b750:	695b      	ldr	r3, [r3, #20]
 800b752:	431a      	orrs	r2, r3
 800b754:	697b      	ldr	r3, [r7, #20]
 800b756:	69db      	ldr	r3, [r3, #28]
 800b758:	4313      	orrs	r3, r2
 800b75a:	647b      	str	r3, [r7, #68]	; 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800b75c:	697b      	ldr	r3, [r7, #20]
 800b75e:	681b      	ldr	r3, [r3, #0]
 800b760:	681a      	ldr	r2, [r3, #0]
 800b762:	4bbe      	ldr	r3, [pc, #760]	; (800ba5c <UART_SetConfig+0x328>)
 800b764:	4013      	ands	r3, r2
 800b766:	697a      	ldr	r2, [r7, #20]
 800b768:	6812      	ldr	r2, [r2, #0]
 800b76a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800b76c:	430b      	orrs	r3, r1
 800b76e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800b770:	697b      	ldr	r3, [r7, #20]
 800b772:	681b      	ldr	r3, [r3, #0]
 800b774:	685b      	ldr	r3, [r3, #4]
 800b776:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800b77a:	697b      	ldr	r3, [r7, #20]
 800b77c:	68da      	ldr	r2, [r3, #12]
 800b77e:	697b      	ldr	r3, [r7, #20]
 800b780:	681b      	ldr	r3, [r3, #0]
 800b782:	430a      	orrs	r2, r1
 800b784:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800b786:	697b      	ldr	r3, [r7, #20]
 800b788:	699b      	ldr	r3, [r3, #24]
 800b78a:	647b      	str	r3, [r7, #68]	; 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800b78c:	697b      	ldr	r3, [r7, #20]
 800b78e:	681b      	ldr	r3, [r3, #0]
 800b790:	4ab3      	ldr	r2, [pc, #716]	; (800ba60 <UART_SetConfig+0x32c>)
 800b792:	4293      	cmp	r3, r2
 800b794:	d004      	beq.n	800b7a0 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800b796:	697b      	ldr	r3, [r7, #20]
 800b798:	6a1b      	ldr	r3, [r3, #32]
 800b79a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800b79c:	4313      	orrs	r3, r2
 800b79e:	647b      	str	r3, [r7, #68]	; 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800b7a0:	697b      	ldr	r3, [r7, #20]
 800b7a2:	681b      	ldr	r3, [r3, #0]
 800b7a4:	689a      	ldr	r2, [r3, #8]
 800b7a6:	4baf      	ldr	r3, [pc, #700]	; (800ba64 <UART_SetConfig+0x330>)
 800b7a8:	4013      	ands	r3, r2
 800b7aa:	697a      	ldr	r2, [r7, #20]
 800b7ac:	6812      	ldr	r2, [r2, #0]
 800b7ae:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800b7b0:	430b      	orrs	r3, r1
 800b7b2:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800b7b4:	697b      	ldr	r3, [r7, #20]
 800b7b6:	681b      	ldr	r3, [r3, #0]
 800b7b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b7ba:	f023 010f 	bic.w	r1, r3, #15
 800b7be:	697b      	ldr	r3, [r7, #20]
 800b7c0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800b7c2:	697b      	ldr	r3, [r7, #20]
 800b7c4:	681b      	ldr	r3, [r3, #0]
 800b7c6:	430a      	orrs	r2, r1
 800b7c8:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800b7ca:	697b      	ldr	r3, [r7, #20]
 800b7cc:	681b      	ldr	r3, [r3, #0]
 800b7ce:	4aa6      	ldr	r2, [pc, #664]	; (800ba68 <UART_SetConfig+0x334>)
 800b7d0:	4293      	cmp	r3, r2
 800b7d2:	d177      	bne.n	800b8c4 <UART_SetConfig+0x190>
 800b7d4:	4ba5      	ldr	r3, [pc, #660]	; (800ba6c <UART_SetConfig+0x338>)
 800b7d6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b7d8:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800b7dc:	2b28      	cmp	r3, #40	; 0x28
 800b7de:	d86d      	bhi.n	800b8bc <UART_SetConfig+0x188>
 800b7e0:	a201      	add	r2, pc, #4	; (adr r2, 800b7e8 <UART_SetConfig+0xb4>)
 800b7e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b7e6:	bf00      	nop
 800b7e8:	0800b88d 	.word	0x0800b88d
 800b7ec:	0800b8bd 	.word	0x0800b8bd
 800b7f0:	0800b8bd 	.word	0x0800b8bd
 800b7f4:	0800b8bd 	.word	0x0800b8bd
 800b7f8:	0800b8bd 	.word	0x0800b8bd
 800b7fc:	0800b8bd 	.word	0x0800b8bd
 800b800:	0800b8bd 	.word	0x0800b8bd
 800b804:	0800b8bd 	.word	0x0800b8bd
 800b808:	0800b895 	.word	0x0800b895
 800b80c:	0800b8bd 	.word	0x0800b8bd
 800b810:	0800b8bd 	.word	0x0800b8bd
 800b814:	0800b8bd 	.word	0x0800b8bd
 800b818:	0800b8bd 	.word	0x0800b8bd
 800b81c:	0800b8bd 	.word	0x0800b8bd
 800b820:	0800b8bd 	.word	0x0800b8bd
 800b824:	0800b8bd 	.word	0x0800b8bd
 800b828:	0800b89d 	.word	0x0800b89d
 800b82c:	0800b8bd 	.word	0x0800b8bd
 800b830:	0800b8bd 	.word	0x0800b8bd
 800b834:	0800b8bd 	.word	0x0800b8bd
 800b838:	0800b8bd 	.word	0x0800b8bd
 800b83c:	0800b8bd 	.word	0x0800b8bd
 800b840:	0800b8bd 	.word	0x0800b8bd
 800b844:	0800b8bd 	.word	0x0800b8bd
 800b848:	0800b8a5 	.word	0x0800b8a5
 800b84c:	0800b8bd 	.word	0x0800b8bd
 800b850:	0800b8bd 	.word	0x0800b8bd
 800b854:	0800b8bd 	.word	0x0800b8bd
 800b858:	0800b8bd 	.word	0x0800b8bd
 800b85c:	0800b8bd 	.word	0x0800b8bd
 800b860:	0800b8bd 	.word	0x0800b8bd
 800b864:	0800b8bd 	.word	0x0800b8bd
 800b868:	0800b8ad 	.word	0x0800b8ad
 800b86c:	0800b8bd 	.word	0x0800b8bd
 800b870:	0800b8bd 	.word	0x0800b8bd
 800b874:	0800b8bd 	.word	0x0800b8bd
 800b878:	0800b8bd 	.word	0x0800b8bd
 800b87c:	0800b8bd 	.word	0x0800b8bd
 800b880:	0800b8bd 	.word	0x0800b8bd
 800b884:	0800b8bd 	.word	0x0800b8bd
 800b888:	0800b8b5 	.word	0x0800b8b5
 800b88c:	2301      	movs	r3, #1
 800b88e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b892:	e222      	b.n	800bcda <UART_SetConfig+0x5a6>
 800b894:	2304      	movs	r3, #4
 800b896:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b89a:	e21e      	b.n	800bcda <UART_SetConfig+0x5a6>
 800b89c:	2308      	movs	r3, #8
 800b89e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b8a2:	e21a      	b.n	800bcda <UART_SetConfig+0x5a6>
 800b8a4:	2310      	movs	r3, #16
 800b8a6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b8aa:	e216      	b.n	800bcda <UART_SetConfig+0x5a6>
 800b8ac:	2320      	movs	r3, #32
 800b8ae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b8b2:	e212      	b.n	800bcda <UART_SetConfig+0x5a6>
 800b8b4:	2340      	movs	r3, #64	; 0x40
 800b8b6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b8ba:	e20e      	b.n	800bcda <UART_SetConfig+0x5a6>
 800b8bc:	2380      	movs	r3, #128	; 0x80
 800b8be:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b8c2:	e20a      	b.n	800bcda <UART_SetConfig+0x5a6>
 800b8c4:	697b      	ldr	r3, [r7, #20]
 800b8c6:	681b      	ldr	r3, [r3, #0]
 800b8c8:	4a69      	ldr	r2, [pc, #420]	; (800ba70 <UART_SetConfig+0x33c>)
 800b8ca:	4293      	cmp	r3, r2
 800b8cc:	d130      	bne.n	800b930 <UART_SetConfig+0x1fc>
 800b8ce:	4b67      	ldr	r3, [pc, #412]	; (800ba6c <UART_SetConfig+0x338>)
 800b8d0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b8d2:	f003 0307 	and.w	r3, r3, #7
 800b8d6:	2b05      	cmp	r3, #5
 800b8d8:	d826      	bhi.n	800b928 <UART_SetConfig+0x1f4>
 800b8da:	a201      	add	r2, pc, #4	; (adr r2, 800b8e0 <UART_SetConfig+0x1ac>)
 800b8dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b8e0:	0800b8f9 	.word	0x0800b8f9
 800b8e4:	0800b901 	.word	0x0800b901
 800b8e8:	0800b909 	.word	0x0800b909
 800b8ec:	0800b911 	.word	0x0800b911
 800b8f0:	0800b919 	.word	0x0800b919
 800b8f4:	0800b921 	.word	0x0800b921
 800b8f8:	2300      	movs	r3, #0
 800b8fa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b8fe:	e1ec      	b.n	800bcda <UART_SetConfig+0x5a6>
 800b900:	2304      	movs	r3, #4
 800b902:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b906:	e1e8      	b.n	800bcda <UART_SetConfig+0x5a6>
 800b908:	2308      	movs	r3, #8
 800b90a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b90e:	e1e4      	b.n	800bcda <UART_SetConfig+0x5a6>
 800b910:	2310      	movs	r3, #16
 800b912:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b916:	e1e0      	b.n	800bcda <UART_SetConfig+0x5a6>
 800b918:	2320      	movs	r3, #32
 800b91a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b91e:	e1dc      	b.n	800bcda <UART_SetConfig+0x5a6>
 800b920:	2340      	movs	r3, #64	; 0x40
 800b922:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b926:	e1d8      	b.n	800bcda <UART_SetConfig+0x5a6>
 800b928:	2380      	movs	r3, #128	; 0x80
 800b92a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b92e:	e1d4      	b.n	800bcda <UART_SetConfig+0x5a6>
 800b930:	697b      	ldr	r3, [r7, #20]
 800b932:	681b      	ldr	r3, [r3, #0]
 800b934:	4a4f      	ldr	r2, [pc, #316]	; (800ba74 <UART_SetConfig+0x340>)
 800b936:	4293      	cmp	r3, r2
 800b938:	d130      	bne.n	800b99c <UART_SetConfig+0x268>
 800b93a:	4b4c      	ldr	r3, [pc, #304]	; (800ba6c <UART_SetConfig+0x338>)
 800b93c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b93e:	f003 0307 	and.w	r3, r3, #7
 800b942:	2b05      	cmp	r3, #5
 800b944:	d826      	bhi.n	800b994 <UART_SetConfig+0x260>
 800b946:	a201      	add	r2, pc, #4	; (adr r2, 800b94c <UART_SetConfig+0x218>)
 800b948:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b94c:	0800b965 	.word	0x0800b965
 800b950:	0800b96d 	.word	0x0800b96d
 800b954:	0800b975 	.word	0x0800b975
 800b958:	0800b97d 	.word	0x0800b97d
 800b95c:	0800b985 	.word	0x0800b985
 800b960:	0800b98d 	.word	0x0800b98d
 800b964:	2300      	movs	r3, #0
 800b966:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b96a:	e1b6      	b.n	800bcda <UART_SetConfig+0x5a6>
 800b96c:	2304      	movs	r3, #4
 800b96e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b972:	e1b2      	b.n	800bcda <UART_SetConfig+0x5a6>
 800b974:	2308      	movs	r3, #8
 800b976:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b97a:	e1ae      	b.n	800bcda <UART_SetConfig+0x5a6>
 800b97c:	2310      	movs	r3, #16
 800b97e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b982:	e1aa      	b.n	800bcda <UART_SetConfig+0x5a6>
 800b984:	2320      	movs	r3, #32
 800b986:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b98a:	e1a6      	b.n	800bcda <UART_SetConfig+0x5a6>
 800b98c:	2340      	movs	r3, #64	; 0x40
 800b98e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b992:	e1a2      	b.n	800bcda <UART_SetConfig+0x5a6>
 800b994:	2380      	movs	r3, #128	; 0x80
 800b996:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b99a:	e19e      	b.n	800bcda <UART_SetConfig+0x5a6>
 800b99c:	697b      	ldr	r3, [r7, #20]
 800b99e:	681b      	ldr	r3, [r3, #0]
 800b9a0:	4a35      	ldr	r2, [pc, #212]	; (800ba78 <UART_SetConfig+0x344>)
 800b9a2:	4293      	cmp	r3, r2
 800b9a4:	d130      	bne.n	800ba08 <UART_SetConfig+0x2d4>
 800b9a6:	4b31      	ldr	r3, [pc, #196]	; (800ba6c <UART_SetConfig+0x338>)
 800b9a8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b9aa:	f003 0307 	and.w	r3, r3, #7
 800b9ae:	2b05      	cmp	r3, #5
 800b9b0:	d826      	bhi.n	800ba00 <UART_SetConfig+0x2cc>
 800b9b2:	a201      	add	r2, pc, #4	; (adr r2, 800b9b8 <UART_SetConfig+0x284>)
 800b9b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b9b8:	0800b9d1 	.word	0x0800b9d1
 800b9bc:	0800b9d9 	.word	0x0800b9d9
 800b9c0:	0800b9e1 	.word	0x0800b9e1
 800b9c4:	0800b9e9 	.word	0x0800b9e9
 800b9c8:	0800b9f1 	.word	0x0800b9f1
 800b9cc:	0800b9f9 	.word	0x0800b9f9
 800b9d0:	2300      	movs	r3, #0
 800b9d2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b9d6:	e180      	b.n	800bcda <UART_SetConfig+0x5a6>
 800b9d8:	2304      	movs	r3, #4
 800b9da:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b9de:	e17c      	b.n	800bcda <UART_SetConfig+0x5a6>
 800b9e0:	2308      	movs	r3, #8
 800b9e2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b9e6:	e178      	b.n	800bcda <UART_SetConfig+0x5a6>
 800b9e8:	2310      	movs	r3, #16
 800b9ea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b9ee:	e174      	b.n	800bcda <UART_SetConfig+0x5a6>
 800b9f0:	2320      	movs	r3, #32
 800b9f2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b9f6:	e170      	b.n	800bcda <UART_SetConfig+0x5a6>
 800b9f8:	2340      	movs	r3, #64	; 0x40
 800b9fa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b9fe:	e16c      	b.n	800bcda <UART_SetConfig+0x5a6>
 800ba00:	2380      	movs	r3, #128	; 0x80
 800ba02:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ba06:	e168      	b.n	800bcda <UART_SetConfig+0x5a6>
 800ba08:	697b      	ldr	r3, [r7, #20]
 800ba0a:	681b      	ldr	r3, [r3, #0]
 800ba0c:	4a1b      	ldr	r2, [pc, #108]	; (800ba7c <UART_SetConfig+0x348>)
 800ba0e:	4293      	cmp	r3, r2
 800ba10:	d142      	bne.n	800ba98 <UART_SetConfig+0x364>
 800ba12:	4b16      	ldr	r3, [pc, #88]	; (800ba6c <UART_SetConfig+0x338>)
 800ba14:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ba16:	f003 0307 	and.w	r3, r3, #7
 800ba1a:	2b05      	cmp	r3, #5
 800ba1c:	d838      	bhi.n	800ba90 <UART_SetConfig+0x35c>
 800ba1e:	a201      	add	r2, pc, #4	; (adr r2, 800ba24 <UART_SetConfig+0x2f0>)
 800ba20:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ba24:	0800ba3d 	.word	0x0800ba3d
 800ba28:	0800ba45 	.word	0x0800ba45
 800ba2c:	0800ba4d 	.word	0x0800ba4d
 800ba30:	0800ba55 	.word	0x0800ba55
 800ba34:	0800ba81 	.word	0x0800ba81
 800ba38:	0800ba89 	.word	0x0800ba89
 800ba3c:	2300      	movs	r3, #0
 800ba3e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ba42:	e14a      	b.n	800bcda <UART_SetConfig+0x5a6>
 800ba44:	2304      	movs	r3, #4
 800ba46:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ba4a:	e146      	b.n	800bcda <UART_SetConfig+0x5a6>
 800ba4c:	2308      	movs	r3, #8
 800ba4e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ba52:	e142      	b.n	800bcda <UART_SetConfig+0x5a6>
 800ba54:	2310      	movs	r3, #16
 800ba56:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ba5a:	e13e      	b.n	800bcda <UART_SetConfig+0x5a6>
 800ba5c:	cfff69f3 	.word	0xcfff69f3
 800ba60:	58000c00 	.word	0x58000c00
 800ba64:	11fff4ff 	.word	0x11fff4ff
 800ba68:	40011000 	.word	0x40011000
 800ba6c:	58024400 	.word	0x58024400
 800ba70:	40004400 	.word	0x40004400
 800ba74:	40004800 	.word	0x40004800
 800ba78:	40004c00 	.word	0x40004c00
 800ba7c:	40005000 	.word	0x40005000
 800ba80:	2320      	movs	r3, #32
 800ba82:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ba86:	e128      	b.n	800bcda <UART_SetConfig+0x5a6>
 800ba88:	2340      	movs	r3, #64	; 0x40
 800ba8a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ba8e:	e124      	b.n	800bcda <UART_SetConfig+0x5a6>
 800ba90:	2380      	movs	r3, #128	; 0x80
 800ba92:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ba96:	e120      	b.n	800bcda <UART_SetConfig+0x5a6>
 800ba98:	697b      	ldr	r3, [r7, #20]
 800ba9a:	681b      	ldr	r3, [r3, #0]
 800ba9c:	4acb      	ldr	r2, [pc, #812]	; (800bdcc <UART_SetConfig+0x698>)
 800ba9e:	4293      	cmp	r3, r2
 800baa0:	d176      	bne.n	800bb90 <UART_SetConfig+0x45c>
 800baa2:	4bcb      	ldr	r3, [pc, #812]	; (800bdd0 <UART_SetConfig+0x69c>)
 800baa4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800baa6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800baaa:	2b28      	cmp	r3, #40	; 0x28
 800baac:	d86c      	bhi.n	800bb88 <UART_SetConfig+0x454>
 800baae:	a201      	add	r2, pc, #4	; (adr r2, 800bab4 <UART_SetConfig+0x380>)
 800bab0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bab4:	0800bb59 	.word	0x0800bb59
 800bab8:	0800bb89 	.word	0x0800bb89
 800babc:	0800bb89 	.word	0x0800bb89
 800bac0:	0800bb89 	.word	0x0800bb89
 800bac4:	0800bb89 	.word	0x0800bb89
 800bac8:	0800bb89 	.word	0x0800bb89
 800bacc:	0800bb89 	.word	0x0800bb89
 800bad0:	0800bb89 	.word	0x0800bb89
 800bad4:	0800bb61 	.word	0x0800bb61
 800bad8:	0800bb89 	.word	0x0800bb89
 800badc:	0800bb89 	.word	0x0800bb89
 800bae0:	0800bb89 	.word	0x0800bb89
 800bae4:	0800bb89 	.word	0x0800bb89
 800bae8:	0800bb89 	.word	0x0800bb89
 800baec:	0800bb89 	.word	0x0800bb89
 800baf0:	0800bb89 	.word	0x0800bb89
 800baf4:	0800bb69 	.word	0x0800bb69
 800baf8:	0800bb89 	.word	0x0800bb89
 800bafc:	0800bb89 	.word	0x0800bb89
 800bb00:	0800bb89 	.word	0x0800bb89
 800bb04:	0800bb89 	.word	0x0800bb89
 800bb08:	0800bb89 	.word	0x0800bb89
 800bb0c:	0800bb89 	.word	0x0800bb89
 800bb10:	0800bb89 	.word	0x0800bb89
 800bb14:	0800bb71 	.word	0x0800bb71
 800bb18:	0800bb89 	.word	0x0800bb89
 800bb1c:	0800bb89 	.word	0x0800bb89
 800bb20:	0800bb89 	.word	0x0800bb89
 800bb24:	0800bb89 	.word	0x0800bb89
 800bb28:	0800bb89 	.word	0x0800bb89
 800bb2c:	0800bb89 	.word	0x0800bb89
 800bb30:	0800bb89 	.word	0x0800bb89
 800bb34:	0800bb79 	.word	0x0800bb79
 800bb38:	0800bb89 	.word	0x0800bb89
 800bb3c:	0800bb89 	.word	0x0800bb89
 800bb40:	0800bb89 	.word	0x0800bb89
 800bb44:	0800bb89 	.word	0x0800bb89
 800bb48:	0800bb89 	.word	0x0800bb89
 800bb4c:	0800bb89 	.word	0x0800bb89
 800bb50:	0800bb89 	.word	0x0800bb89
 800bb54:	0800bb81 	.word	0x0800bb81
 800bb58:	2301      	movs	r3, #1
 800bb5a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800bb5e:	e0bc      	b.n	800bcda <UART_SetConfig+0x5a6>
 800bb60:	2304      	movs	r3, #4
 800bb62:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800bb66:	e0b8      	b.n	800bcda <UART_SetConfig+0x5a6>
 800bb68:	2308      	movs	r3, #8
 800bb6a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800bb6e:	e0b4      	b.n	800bcda <UART_SetConfig+0x5a6>
 800bb70:	2310      	movs	r3, #16
 800bb72:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800bb76:	e0b0      	b.n	800bcda <UART_SetConfig+0x5a6>
 800bb78:	2320      	movs	r3, #32
 800bb7a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800bb7e:	e0ac      	b.n	800bcda <UART_SetConfig+0x5a6>
 800bb80:	2340      	movs	r3, #64	; 0x40
 800bb82:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800bb86:	e0a8      	b.n	800bcda <UART_SetConfig+0x5a6>
 800bb88:	2380      	movs	r3, #128	; 0x80
 800bb8a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800bb8e:	e0a4      	b.n	800bcda <UART_SetConfig+0x5a6>
 800bb90:	697b      	ldr	r3, [r7, #20]
 800bb92:	681b      	ldr	r3, [r3, #0]
 800bb94:	4a8f      	ldr	r2, [pc, #572]	; (800bdd4 <UART_SetConfig+0x6a0>)
 800bb96:	4293      	cmp	r3, r2
 800bb98:	d130      	bne.n	800bbfc <UART_SetConfig+0x4c8>
 800bb9a:	4b8d      	ldr	r3, [pc, #564]	; (800bdd0 <UART_SetConfig+0x69c>)
 800bb9c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bb9e:	f003 0307 	and.w	r3, r3, #7
 800bba2:	2b05      	cmp	r3, #5
 800bba4:	d826      	bhi.n	800bbf4 <UART_SetConfig+0x4c0>
 800bba6:	a201      	add	r2, pc, #4	; (adr r2, 800bbac <UART_SetConfig+0x478>)
 800bba8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bbac:	0800bbc5 	.word	0x0800bbc5
 800bbb0:	0800bbcd 	.word	0x0800bbcd
 800bbb4:	0800bbd5 	.word	0x0800bbd5
 800bbb8:	0800bbdd 	.word	0x0800bbdd
 800bbbc:	0800bbe5 	.word	0x0800bbe5
 800bbc0:	0800bbed 	.word	0x0800bbed
 800bbc4:	2300      	movs	r3, #0
 800bbc6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800bbca:	e086      	b.n	800bcda <UART_SetConfig+0x5a6>
 800bbcc:	2304      	movs	r3, #4
 800bbce:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800bbd2:	e082      	b.n	800bcda <UART_SetConfig+0x5a6>
 800bbd4:	2308      	movs	r3, #8
 800bbd6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800bbda:	e07e      	b.n	800bcda <UART_SetConfig+0x5a6>
 800bbdc:	2310      	movs	r3, #16
 800bbde:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800bbe2:	e07a      	b.n	800bcda <UART_SetConfig+0x5a6>
 800bbe4:	2320      	movs	r3, #32
 800bbe6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800bbea:	e076      	b.n	800bcda <UART_SetConfig+0x5a6>
 800bbec:	2340      	movs	r3, #64	; 0x40
 800bbee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800bbf2:	e072      	b.n	800bcda <UART_SetConfig+0x5a6>
 800bbf4:	2380      	movs	r3, #128	; 0x80
 800bbf6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800bbfa:	e06e      	b.n	800bcda <UART_SetConfig+0x5a6>
 800bbfc:	697b      	ldr	r3, [r7, #20]
 800bbfe:	681b      	ldr	r3, [r3, #0]
 800bc00:	4a75      	ldr	r2, [pc, #468]	; (800bdd8 <UART_SetConfig+0x6a4>)
 800bc02:	4293      	cmp	r3, r2
 800bc04:	d130      	bne.n	800bc68 <UART_SetConfig+0x534>
 800bc06:	4b72      	ldr	r3, [pc, #456]	; (800bdd0 <UART_SetConfig+0x69c>)
 800bc08:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bc0a:	f003 0307 	and.w	r3, r3, #7
 800bc0e:	2b05      	cmp	r3, #5
 800bc10:	d826      	bhi.n	800bc60 <UART_SetConfig+0x52c>
 800bc12:	a201      	add	r2, pc, #4	; (adr r2, 800bc18 <UART_SetConfig+0x4e4>)
 800bc14:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bc18:	0800bc31 	.word	0x0800bc31
 800bc1c:	0800bc39 	.word	0x0800bc39
 800bc20:	0800bc41 	.word	0x0800bc41
 800bc24:	0800bc49 	.word	0x0800bc49
 800bc28:	0800bc51 	.word	0x0800bc51
 800bc2c:	0800bc59 	.word	0x0800bc59
 800bc30:	2300      	movs	r3, #0
 800bc32:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800bc36:	e050      	b.n	800bcda <UART_SetConfig+0x5a6>
 800bc38:	2304      	movs	r3, #4
 800bc3a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800bc3e:	e04c      	b.n	800bcda <UART_SetConfig+0x5a6>
 800bc40:	2308      	movs	r3, #8
 800bc42:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800bc46:	e048      	b.n	800bcda <UART_SetConfig+0x5a6>
 800bc48:	2310      	movs	r3, #16
 800bc4a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800bc4e:	e044      	b.n	800bcda <UART_SetConfig+0x5a6>
 800bc50:	2320      	movs	r3, #32
 800bc52:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800bc56:	e040      	b.n	800bcda <UART_SetConfig+0x5a6>
 800bc58:	2340      	movs	r3, #64	; 0x40
 800bc5a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800bc5e:	e03c      	b.n	800bcda <UART_SetConfig+0x5a6>
 800bc60:	2380      	movs	r3, #128	; 0x80
 800bc62:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800bc66:	e038      	b.n	800bcda <UART_SetConfig+0x5a6>
 800bc68:	697b      	ldr	r3, [r7, #20]
 800bc6a:	681b      	ldr	r3, [r3, #0]
 800bc6c:	4a5b      	ldr	r2, [pc, #364]	; (800bddc <UART_SetConfig+0x6a8>)
 800bc6e:	4293      	cmp	r3, r2
 800bc70:	d130      	bne.n	800bcd4 <UART_SetConfig+0x5a0>
 800bc72:	4b57      	ldr	r3, [pc, #348]	; (800bdd0 <UART_SetConfig+0x69c>)
 800bc74:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800bc76:	f003 0307 	and.w	r3, r3, #7
 800bc7a:	2b05      	cmp	r3, #5
 800bc7c:	d826      	bhi.n	800bccc <UART_SetConfig+0x598>
 800bc7e:	a201      	add	r2, pc, #4	; (adr r2, 800bc84 <UART_SetConfig+0x550>)
 800bc80:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bc84:	0800bc9d 	.word	0x0800bc9d
 800bc88:	0800bca5 	.word	0x0800bca5
 800bc8c:	0800bcad 	.word	0x0800bcad
 800bc90:	0800bcb5 	.word	0x0800bcb5
 800bc94:	0800bcbd 	.word	0x0800bcbd
 800bc98:	0800bcc5 	.word	0x0800bcc5
 800bc9c:	2302      	movs	r3, #2
 800bc9e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800bca2:	e01a      	b.n	800bcda <UART_SetConfig+0x5a6>
 800bca4:	2304      	movs	r3, #4
 800bca6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800bcaa:	e016      	b.n	800bcda <UART_SetConfig+0x5a6>
 800bcac:	2308      	movs	r3, #8
 800bcae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800bcb2:	e012      	b.n	800bcda <UART_SetConfig+0x5a6>
 800bcb4:	2310      	movs	r3, #16
 800bcb6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800bcba:	e00e      	b.n	800bcda <UART_SetConfig+0x5a6>
 800bcbc:	2320      	movs	r3, #32
 800bcbe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800bcc2:	e00a      	b.n	800bcda <UART_SetConfig+0x5a6>
 800bcc4:	2340      	movs	r3, #64	; 0x40
 800bcc6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800bcca:	e006      	b.n	800bcda <UART_SetConfig+0x5a6>
 800bccc:	2380      	movs	r3, #128	; 0x80
 800bcce:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800bcd2:	e002      	b.n	800bcda <UART_SetConfig+0x5a6>
 800bcd4:	2380      	movs	r3, #128	; 0x80
 800bcd6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800bcda:	697b      	ldr	r3, [r7, #20]
 800bcdc:	681b      	ldr	r3, [r3, #0]
 800bcde:	4a3f      	ldr	r2, [pc, #252]	; (800bddc <UART_SetConfig+0x6a8>)
 800bce0:	4293      	cmp	r3, r2
 800bce2:	f040 80f8 	bne.w	800bed6 <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800bce6:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800bcea:	2b20      	cmp	r3, #32
 800bcec:	dc46      	bgt.n	800bd7c <UART_SetConfig+0x648>
 800bcee:	2b02      	cmp	r3, #2
 800bcf0:	f2c0 8082 	blt.w	800bdf8 <UART_SetConfig+0x6c4>
 800bcf4:	3b02      	subs	r3, #2
 800bcf6:	2b1e      	cmp	r3, #30
 800bcf8:	d87e      	bhi.n	800bdf8 <UART_SetConfig+0x6c4>
 800bcfa:	a201      	add	r2, pc, #4	; (adr r2, 800bd00 <UART_SetConfig+0x5cc>)
 800bcfc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bd00:	0800bd83 	.word	0x0800bd83
 800bd04:	0800bdf9 	.word	0x0800bdf9
 800bd08:	0800bd8b 	.word	0x0800bd8b
 800bd0c:	0800bdf9 	.word	0x0800bdf9
 800bd10:	0800bdf9 	.word	0x0800bdf9
 800bd14:	0800bdf9 	.word	0x0800bdf9
 800bd18:	0800bd9b 	.word	0x0800bd9b
 800bd1c:	0800bdf9 	.word	0x0800bdf9
 800bd20:	0800bdf9 	.word	0x0800bdf9
 800bd24:	0800bdf9 	.word	0x0800bdf9
 800bd28:	0800bdf9 	.word	0x0800bdf9
 800bd2c:	0800bdf9 	.word	0x0800bdf9
 800bd30:	0800bdf9 	.word	0x0800bdf9
 800bd34:	0800bdf9 	.word	0x0800bdf9
 800bd38:	0800bdab 	.word	0x0800bdab
 800bd3c:	0800bdf9 	.word	0x0800bdf9
 800bd40:	0800bdf9 	.word	0x0800bdf9
 800bd44:	0800bdf9 	.word	0x0800bdf9
 800bd48:	0800bdf9 	.word	0x0800bdf9
 800bd4c:	0800bdf9 	.word	0x0800bdf9
 800bd50:	0800bdf9 	.word	0x0800bdf9
 800bd54:	0800bdf9 	.word	0x0800bdf9
 800bd58:	0800bdf9 	.word	0x0800bdf9
 800bd5c:	0800bdf9 	.word	0x0800bdf9
 800bd60:	0800bdf9 	.word	0x0800bdf9
 800bd64:	0800bdf9 	.word	0x0800bdf9
 800bd68:	0800bdf9 	.word	0x0800bdf9
 800bd6c:	0800bdf9 	.word	0x0800bdf9
 800bd70:	0800bdf9 	.word	0x0800bdf9
 800bd74:	0800bdf9 	.word	0x0800bdf9
 800bd78:	0800bdeb 	.word	0x0800bdeb
 800bd7c:	2b40      	cmp	r3, #64	; 0x40
 800bd7e:	d037      	beq.n	800bdf0 <UART_SetConfig+0x6bc>
 800bd80:	e03a      	b.n	800bdf8 <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800bd82:	f7fd fc5d 	bl	8009640 <HAL_RCCEx_GetD3PCLK1Freq>
 800bd86:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800bd88:	e03c      	b.n	800be04 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800bd8a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800bd8e:	4618      	mov	r0, r3
 800bd90:	f7fd fc6c 	bl	800966c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800bd94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bd96:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800bd98:	e034      	b.n	800be04 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800bd9a:	f107 0318 	add.w	r3, r7, #24
 800bd9e:	4618      	mov	r0, r3
 800bda0:	f7fd fdb8 	bl	8009914 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800bda4:	69fb      	ldr	r3, [r7, #28]
 800bda6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800bda8:	e02c      	b.n	800be04 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800bdaa:	4b09      	ldr	r3, [pc, #36]	; (800bdd0 <UART_SetConfig+0x69c>)
 800bdac:	681b      	ldr	r3, [r3, #0]
 800bdae:	f003 0320 	and.w	r3, r3, #32
 800bdb2:	2b00      	cmp	r3, #0
 800bdb4:	d016      	beq.n	800bde4 <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800bdb6:	4b06      	ldr	r3, [pc, #24]	; (800bdd0 <UART_SetConfig+0x69c>)
 800bdb8:	681b      	ldr	r3, [r3, #0]
 800bdba:	08db      	lsrs	r3, r3, #3
 800bdbc:	f003 0303 	and.w	r3, r3, #3
 800bdc0:	4a07      	ldr	r2, [pc, #28]	; (800bde0 <UART_SetConfig+0x6ac>)
 800bdc2:	fa22 f303 	lsr.w	r3, r2, r3
 800bdc6:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800bdc8:	e01c      	b.n	800be04 <UART_SetConfig+0x6d0>
 800bdca:	bf00      	nop
 800bdcc:	40011400 	.word	0x40011400
 800bdd0:	58024400 	.word	0x58024400
 800bdd4:	40007800 	.word	0x40007800
 800bdd8:	40007c00 	.word	0x40007c00
 800bddc:	58000c00 	.word	0x58000c00
 800bde0:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 800bde4:	4b9d      	ldr	r3, [pc, #628]	; (800c05c <UART_SetConfig+0x928>)
 800bde6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800bde8:	e00c      	b.n	800be04 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800bdea:	4b9d      	ldr	r3, [pc, #628]	; (800c060 <UART_SetConfig+0x92c>)
 800bdec:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800bdee:	e009      	b.n	800be04 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800bdf0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800bdf4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800bdf6:	e005      	b.n	800be04 <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 800bdf8:	2300      	movs	r3, #0
 800bdfa:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800bdfc:	2301      	movs	r3, #1
 800bdfe:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800be02:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800be04:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800be06:	2b00      	cmp	r3, #0
 800be08:	f000 81de 	beq.w	800c1c8 <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800be0c:	697b      	ldr	r3, [r7, #20]
 800be0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800be10:	4a94      	ldr	r2, [pc, #592]	; (800c064 <UART_SetConfig+0x930>)
 800be12:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800be16:	461a      	mov	r2, r3
 800be18:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800be1a:	fbb3 f3f2 	udiv	r3, r3, r2
 800be1e:	633b      	str	r3, [r7, #48]	; 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800be20:	697b      	ldr	r3, [r7, #20]
 800be22:	685a      	ldr	r2, [r3, #4]
 800be24:	4613      	mov	r3, r2
 800be26:	005b      	lsls	r3, r3, #1
 800be28:	4413      	add	r3, r2
 800be2a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800be2c:	429a      	cmp	r2, r3
 800be2e:	d305      	bcc.n	800be3c <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800be30:	697b      	ldr	r3, [r7, #20]
 800be32:	685b      	ldr	r3, [r3, #4]
 800be34:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800be36:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800be38:	429a      	cmp	r2, r3
 800be3a:	d903      	bls.n	800be44 <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 800be3c:	2301      	movs	r3, #1
 800be3e:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800be42:	e1c1      	b.n	800c1c8 <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800be44:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800be46:	2200      	movs	r2, #0
 800be48:	60bb      	str	r3, [r7, #8]
 800be4a:	60fa      	str	r2, [r7, #12]
 800be4c:	697b      	ldr	r3, [r7, #20]
 800be4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800be50:	4a84      	ldr	r2, [pc, #528]	; (800c064 <UART_SetConfig+0x930>)
 800be52:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800be56:	b29b      	uxth	r3, r3
 800be58:	2200      	movs	r2, #0
 800be5a:	603b      	str	r3, [r7, #0]
 800be5c:	607a      	str	r2, [r7, #4]
 800be5e:	e9d7 2300 	ldrd	r2, r3, [r7]
 800be62:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800be66:	f7f4 fa93 	bl	8000390 <__aeabi_uldivmod>
 800be6a:	4602      	mov	r2, r0
 800be6c:	460b      	mov	r3, r1
 800be6e:	4610      	mov	r0, r2
 800be70:	4619      	mov	r1, r3
 800be72:	f04f 0200 	mov.w	r2, #0
 800be76:	f04f 0300 	mov.w	r3, #0
 800be7a:	020b      	lsls	r3, r1, #8
 800be7c:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800be80:	0202      	lsls	r2, r0, #8
 800be82:	6979      	ldr	r1, [r7, #20]
 800be84:	6849      	ldr	r1, [r1, #4]
 800be86:	0849      	lsrs	r1, r1, #1
 800be88:	2000      	movs	r0, #0
 800be8a:	460c      	mov	r4, r1
 800be8c:	4605      	mov	r5, r0
 800be8e:	eb12 0804 	adds.w	r8, r2, r4
 800be92:	eb43 0905 	adc.w	r9, r3, r5
 800be96:	697b      	ldr	r3, [r7, #20]
 800be98:	685b      	ldr	r3, [r3, #4]
 800be9a:	2200      	movs	r2, #0
 800be9c:	469a      	mov	sl, r3
 800be9e:	4693      	mov	fp, r2
 800bea0:	4652      	mov	r2, sl
 800bea2:	465b      	mov	r3, fp
 800bea4:	4640      	mov	r0, r8
 800bea6:	4649      	mov	r1, r9
 800bea8:	f7f4 fa72 	bl	8000390 <__aeabi_uldivmod>
 800beac:	4602      	mov	r2, r0
 800beae:	460b      	mov	r3, r1
 800beb0:	4613      	mov	r3, r2
 800beb2:	63bb      	str	r3, [r7, #56]	; 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800beb4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800beb6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800beba:	d308      	bcc.n	800bece <UART_SetConfig+0x79a>
 800bebc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bebe:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800bec2:	d204      	bcs.n	800bece <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 800bec4:	697b      	ldr	r3, [r7, #20]
 800bec6:	681b      	ldr	r3, [r3, #0]
 800bec8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800beca:	60da      	str	r2, [r3, #12]
 800becc:	e17c      	b.n	800c1c8 <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 800bece:	2301      	movs	r3, #1
 800bed0:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800bed4:	e178      	b.n	800c1c8 <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800bed6:	697b      	ldr	r3, [r7, #20]
 800bed8:	69db      	ldr	r3, [r3, #28]
 800beda:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800bede:	f040 80c5 	bne.w	800c06c <UART_SetConfig+0x938>
  {
    switch (clocksource)
 800bee2:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800bee6:	2b20      	cmp	r3, #32
 800bee8:	dc48      	bgt.n	800bf7c <UART_SetConfig+0x848>
 800beea:	2b00      	cmp	r3, #0
 800beec:	db7b      	blt.n	800bfe6 <UART_SetConfig+0x8b2>
 800beee:	2b20      	cmp	r3, #32
 800bef0:	d879      	bhi.n	800bfe6 <UART_SetConfig+0x8b2>
 800bef2:	a201      	add	r2, pc, #4	; (adr r2, 800bef8 <UART_SetConfig+0x7c4>)
 800bef4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bef8:	0800bf83 	.word	0x0800bf83
 800befc:	0800bf8b 	.word	0x0800bf8b
 800bf00:	0800bfe7 	.word	0x0800bfe7
 800bf04:	0800bfe7 	.word	0x0800bfe7
 800bf08:	0800bf93 	.word	0x0800bf93
 800bf0c:	0800bfe7 	.word	0x0800bfe7
 800bf10:	0800bfe7 	.word	0x0800bfe7
 800bf14:	0800bfe7 	.word	0x0800bfe7
 800bf18:	0800bfa3 	.word	0x0800bfa3
 800bf1c:	0800bfe7 	.word	0x0800bfe7
 800bf20:	0800bfe7 	.word	0x0800bfe7
 800bf24:	0800bfe7 	.word	0x0800bfe7
 800bf28:	0800bfe7 	.word	0x0800bfe7
 800bf2c:	0800bfe7 	.word	0x0800bfe7
 800bf30:	0800bfe7 	.word	0x0800bfe7
 800bf34:	0800bfe7 	.word	0x0800bfe7
 800bf38:	0800bfb3 	.word	0x0800bfb3
 800bf3c:	0800bfe7 	.word	0x0800bfe7
 800bf40:	0800bfe7 	.word	0x0800bfe7
 800bf44:	0800bfe7 	.word	0x0800bfe7
 800bf48:	0800bfe7 	.word	0x0800bfe7
 800bf4c:	0800bfe7 	.word	0x0800bfe7
 800bf50:	0800bfe7 	.word	0x0800bfe7
 800bf54:	0800bfe7 	.word	0x0800bfe7
 800bf58:	0800bfe7 	.word	0x0800bfe7
 800bf5c:	0800bfe7 	.word	0x0800bfe7
 800bf60:	0800bfe7 	.word	0x0800bfe7
 800bf64:	0800bfe7 	.word	0x0800bfe7
 800bf68:	0800bfe7 	.word	0x0800bfe7
 800bf6c:	0800bfe7 	.word	0x0800bfe7
 800bf70:	0800bfe7 	.word	0x0800bfe7
 800bf74:	0800bfe7 	.word	0x0800bfe7
 800bf78:	0800bfd9 	.word	0x0800bfd9
 800bf7c:	2b40      	cmp	r3, #64	; 0x40
 800bf7e:	d02e      	beq.n	800bfde <UART_SetConfig+0x8aa>
 800bf80:	e031      	b.n	800bfe6 <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800bf82:	f7fb fba7 	bl	80076d4 <HAL_RCC_GetPCLK1Freq>
 800bf86:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800bf88:	e033      	b.n	800bff2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800bf8a:	f7fb fbb9 	bl	8007700 <HAL_RCC_GetPCLK2Freq>
 800bf8e:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800bf90:	e02f      	b.n	800bff2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800bf92:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800bf96:	4618      	mov	r0, r3
 800bf98:	f7fd fb68 	bl	800966c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800bf9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bf9e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800bfa0:	e027      	b.n	800bff2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800bfa2:	f107 0318 	add.w	r3, r7, #24
 800bfa6:	4618      	mov	r0, r3
 800bfa8:	f7fd fcb4 	bl	8009914 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800bfac:	69fb      	ldr	r3, [r7, #28]
 800bfae:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800bfb0:	e01f      	b.n	800bff2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800bfb2:	4b2d      	ldr	r3, [pc, #180]	; (800c068 <UART_SetConfig+0x934>)
 800bfb4:	681b      	ldr	r3, [r3, #0]
 800bfb6:	f003 0320 	and.w	r3, r3, #32
 800bfba:	2b00      	cmp	r3, #0
 800bfbc:	d009      	beq.n	800bfd2 <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800bfbe:	4b2a      	ldr	r3, [pc, #168]	; (800c068 <UART_SetConfig+0x934>)
 800bfc0:	681b      	ldr	r3, [r3, #0]
 800bfc2:	08db      	lsrs	r3, r3, #3
 800bfc4:	f003 0303 	and.w	r3, r3, #3
 800bfc8:	4a24      	ldr	r2, [pc, #144]	; (800c05c <UART_SetConfig+0x928>)
 800bfca:	fa22 f303 	lsr.w	r3, r2, r3
 800bfce:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800bfd0:	e00f      	b.n	800bff2 <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 800bfd2:	4b22      	ldr	r3, [pc, #136]	; (800c05c <UART_SetConfig+0x928>)
 800bfd4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800bfd6:	e00c      	b.n	800bff2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800bfd8:	4b21      	ldr	r3, [pc, #132]	; (800c060 <UART_SetConfig+0x92c>)
 800bfda:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800bfdc:	e009      	b.n	800bff2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800bfde:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800bfe2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800bfe4:	e005      	b.n	800bff2 <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 800bfe6:	2300      	movs	r3, #0
 800bfe8:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800bfea:	2301      	movs	r3, #1
 800bfec:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800bff0:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800bff2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bff4:	2b00      	cmp	r3, #0
 800bff6:	f000 80e7 	beq.w	800c1c8 <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800bffa:	697b      	ldr	r3, [r7, #20]
 800bffc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bffe:	4a19      	ldr	r2, [pc, #100]	; (800c064 <UART_SetConfig+0x930>)
 800c000:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800c004:	461a      	mov	r2, r3
 800c006:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c008:	fbb3 f3f2 	udiv	r3, r3, r2
 800c00c:	005a      	lsls	r2, r3, #1
 800c00e:	697b      	ldr	r3, [r7, #20]
 800c010:	685b      	ldr	r3, [r3, #4]
 800c012:	085b      	lsrs	r3, r3, #1
 800c014:	441a      	add	r2, r3
 800c016:	697b      	ldr	r3, [r7, #20]
 800c018:	685b      	ldr	r3, [r3, #4]
 800c01a:	fbb2 f3f3 	udiv	r3, r2, r3
 800c01e:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800c020:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c022:	2b0f      	cmp	r3, #15
 800c024:	d916      	bls.n	800c054 <UART_SetConfig+0x920>
 800c026:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c028:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c02c:	d212      	bcs.n	800c054 <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800c02e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c030:	b29b      	uxth	r3, r3
 800c032:	f023 030f 	bic.w	r3, r3, #15
 800c036:	86fb      	strh	r3, [r7, #54]	; 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800c038:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c03a:	085b      	lsrs	r3, r3, #1
 800c03c:	b29b      	uxth	r3, r3
 800c03e:	f003 0307 	and.w	r3, r3, #7
 800c042:	b29a      	uxth	r2, r3
 800c044:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800c046:	4313      	orrs	r3, r2
 800c048:	86fb      	strh	r3, [r7, #54]	; 0x36
        huart->Instance->BRR = brrtemp;
 800c04a:	697b      	ldr	r3, [r7, #20]
 800c04c:	681b      	ldr	r3, [r3, #0]
 800c04e:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 800c050:	60da      	str	r2, [r3, #12]
 800c052:	e0b9      	b.n	800c1c8 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 800c054:	2301      	movs	r3, #1
 800c056:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800c05a:	e0b5      	b.n	800c1c8 <UART_SetConfig+0xa94>
 800c05c:	03d09000 	.word	0x03d09000
 800c060:	003d0900 	.word	0x003d0900
 800c064:	0800ea50 	.word	0x0800ea50
 800c068:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 800c06c:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800c070:	2b20      	cmp	r3, #32
 800c072:	dc49      	bgt.n	800c108 <UART_SetConfig+0x9d4>
 800c074:	2b00      	cmp	r3, #0
 800c076:	db7c      	blt.n	800c172 <UART_SetConfig+0xa3e>
 800c078:	2b20      	cmp	r3, #32
 800c07a:	d87a      	bhi.n	800c172 <UART_SetConfig+0xa3e>
 800c07c:	a201      	add	r2, pc, #4	; (adr r2, 800c084 <UART_SetConfig+0x950>)
 800c07e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c082:	bf00      	nop
 800c084:	0800c10f 	.word	0x0800c10f
 800c088:	0800c117 	.word	0x0800c117
 800c08c:	0800c173 	.word	0x0800c173
 800c090:	0800c173 	.word	0x0800c173
 800c094:	0800c11f 	.word	0x0800c11f
 800c098:	0800c173 	.word	0x0800c173
 800c09c:	0800c173 	.word	0x0800c173
 800c0a0:	0800c173 	.word	0x0800c173
 800c0a4:	0800c12f 	.word	0x0800c12f
 800c0a8:	0800c173 	.word	0x0800c173
 800c0ac:	0800c173 	.word	0x0800c173
 800c0b0:	0800c173 	.word	0x0800c173
 800c0b4:	0800c173 	.word	0x0800c173
 800c0b8:	0800c173 	.word	0x0800c173
 800c0bc:	0800c173 	.word	0x0800c173
 800c0c0:	0800c173 	.word	0x0800c173
 800c0c4:	0800c13f 	.word	0x0800c13f
 800c0c8:	0800c173 	.word	0x0800c173
 800c0cc:	0800c173 	.word	0x0800c173
 800c0d0:	0800c173 	.word	0x0800c173
 800c0d4:	0800c173 	.word	0x0800c173
 800c0d8:	0800c173 	.word	0x0800c173
 800c0dc:	0800c173 	.word	0x0800c173
 800c0e0:	0800c173 	.word	0x0800c173
 800c0e4:	0800c173 	.word	0x0800c173
 800c0e8:	0800c173 	.word	0x0800c173
 800c0ec:	0800c173 	.word	0x0800c173
 800c0f0:	0800c173 	.word	0x0800c173
 800c0f4:	0800c173 	.word	0x0800c173
 800c0f8:	0800c173 	.word	0x0800c173
 800c0fc:	0800c173 	.word	0x0800c173
 800c100:	0800c173 	.word	0x0800c173
 800c104:	0800c165 	.word	0x0800c165
 800c108:	2b40      	cmp	r3, #64	; 0x40
 800c10a:	d02e      	beq.n	800c16a <UART_SetConfig+0xa36>
 800c10c:	e031      	b.n	800c172 <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800c10e:	f7fb fae1 	bl	80076d4 <HAL_RCC_GetPCLK1Freq>
 800c112:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800c114:	e033      	b.n	800c17e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800c116:	f7fb faf3 	bl	8007700 <HAL_RCC_GetPCLK2Freq>
 800c11a:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800c11c:	e02f      	b.n	800c17e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c11e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800c122:	4618      	mov	r0, r3
 800c124:	f7fd faa2 	bl	800966c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800c128:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c12a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c12c:	e027      	b.n	800c17e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800c12e:	f107 0318 	add.w	r3, r7, #24
 800c132:	4618      	mov	r0, r3
 800c134:	f7fd fbee 	bl	8009914 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800c138:	69fb      	ldr	r3, [r7, #28]
 800c13a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c13c:	e01f      	b.n	800c17e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800c13e:	4b2d      	ldr	r3, [pc, #180]	; (800c1f4 <UART_SetConfig+0xac0>)
 800c140:	681b      	ldr	r3, [r3, #0]
 800c142:	f003 0320 	and.w	r3, r3, #32
 800c146:	2b00      	cmp	r3, #0
 800c148:	d009      	beq.n	800c15e <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800c14a:	4b2a      	ldr	r3, [pc, #168]	; (800c1f4 <UART_SetConfig+0xac0>)
 800c14c:	681b      	ldr	r3, [r3, #0]
 800c14e:	08db      	lsrs	r3, r3, #3
 800c150:	f003 0303 	and.w	r3, r3, #3
 800c154:	4a28      	ldr	r2, [pc, #160]	; (800c1f8 <UART_SetConfig+0xac4>)
 800c156:	fa22 f303 	lsr.w	r3, r2, r3
 800c15a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800c15c:	e00f      	b.n	800c17e <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 800c15e:	4b26      	ldr	r3, [pc, #152]	; (800c1f8 <UART_SetConfig+0xac4>)
 800c160:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c162:	e00c      	b.n	800c17e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800c164:	4b25      	ldr	r3, [pc, #148]	; (800c1fc <UART_SetConfig+0xac8>)
 800c166:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c168:	e009      	b.n	800c17e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800c16a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800c16e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c170:	e005      	b.n	800c17e <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 800c172:	2300      	movs	r3, #0
 800c174:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800c176:	2301      	movs	r3, #1
 800c178:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800c17c:	bf00      	nop
    }

    if (pclk != 0U)
 800c17e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c180:	2b00      	cmp	r3, #0
 800c182:	d021      	beq.n	800c1c8 <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800c184:	697b      	ldr	r3, [r7, #20]
 800c186:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c188:	4a1d      	ldr	r2, [pc, #116]	; (800c200 <UART_SetConfig+0xacc>)
 800c18a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800c18e:	461a      	mov	r2, r3
 800c190:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c192:	fbb3 f2f2 	udiv	r2, r3, r2
 800c196:	697b      	ldr	r3, [r7, #20]
 800c198:	685b      	ldr	r3, [r3, #4]
 800c19a:	085b      	lsrs	r3, r3, #1
 800c19c:	441a      	add	r2, r3
 800c19e:	697b      	ldr	r3, [r7, #20]
 800c1a0:	685b      	ldr	r3, [r3, #4]
 800c1a2:	fbb2 f3f3 	udiv	r3, r2, r3
 800c1a6:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800c1a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c1aa:	2b0f      	cmp	r3, #15
 800c1ac:	d909      	bls.n	800c1c2 <UART_SetConfig+0xa8e>
 800c1ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c1b0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c1b4:	d205      	bcs.n	800c1c2 <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800c1b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c1b8:	b29a      	uxth	r2, r3
 800c1ba:	697b      	ldr	r3, [r7, #20]
 800c1bc:	681b      	ldr	r3, [r3, #0]
 800c1be:	60da      	str	r2, [r3, #12]
 800c1c0:	e002      	b.n	800c1c8 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 800c1c2:	2301      	movs	r3, #1
 800c1c4:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800c1c8:	697b      	ldr	r3, [r7, #20]
 800c1ca:	2201      	movs	r2, #1
 800c1cc:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800c1d0:	697b      	ldr	r3, [r7, #20]
 800c1d2:	2201      	movs	r2, #1
 800c1d4:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800c1d8:	697b      	ldr	r3, [r7, #20]
 800c1da:	2200      	movs	r2, #0
 800c1dc:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 800c1de:	697b      	ldr	r3, [r7, #20]
 800c1e0:	2200      	movs	r2, #0
 800c1e2:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 800c1e4:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
}
 800c1e8:	4618      	mov	r0, r3
 800c1ea:	3748      	adds	r7, #72	; 0x48
 800c1ec:	46bd      	mov	sp, r7
 800c1ee:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800c1f2:	bf00      	nop
 800c1f4:	58024400 	.word	0x58024400
 800c1f8:	03d09000 	.word	0x03d09000
 800c1fc:	003d0900 	.word	0x003d0900
 800c200:	0800ea50 	.word	0x0800ea50

0800c204 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800c204:	b480      	push	{r7}
 800c206:	b083      	sub	sp, #12
 800c208:	af00      	add	r7, sp, #0
 800c20a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800c20c:	687b      	ldr	r3, [r7, #4]
 800c20e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c210:	f003 0301 	and.w	r3, r3, #1
 800c214:	2b00      	cmp	r3, #0
 800c216:	d00a      	beq.n	800c22e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800c218:	687b      	ldr	r3, [r7, #4]
 800c21a:	681b      	ldr	r3, [r3, #0]
 800c21c:	685b      	ldr	r3, [r3, #4]
 800c21e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800c222:	687b      	ldr	r3, [r7, #4]
 800c224:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c226:	687b      	ldr	r3, [r7, #4]
 800c228:	681b      	ldr	r3, [r3, #0]
 800c22a:	430a      	orrs	r2, r1
 800c22c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800c22e:	687b      	ldr	r3, [r7, #4]
 800c230:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c232:	f003 0302 	and.w	r3, r3, #2
 800c236:	2b00      	cmp	r3, #0
 800c238:	d00a      	beq.n	800c250 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800c23a:	687b      	ldr	r3, [r7, #4]
 800c23c:	681b      	ldr	r3, [r3, #0]
 800c23e:	685b      	ldr	r3, [r3, #4]
 800c240:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800c244:	687b      	ldr	r3, [r7, #4]
 800c246:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800c248:	687b      	ldr	r3, [r7, #4]
 800c24a:	681b      	ldr	r3, [r3, #0]
 800c24c:	430a      	orrs	r2, r1
 800c24e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800c250:	687b      	ldr	r3, [r7, #4]
 800c252:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c254:	f003 0304 	and.w	r3, r3, #4
 800c258:	2b00      	cmp	r3, #0
 800c25a:	d00a      	beq.n	800c272 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800c25c:	687b      	ldr	r3, [r7, #4]
 800c25e:	681b      	ldr	r3, [r3, #0]
 800c260:	685b      	ldr	r3, [r3, #4]
 800c262:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800c266:	687b      	ldr	r3, [r7, #4]
 800c268:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800c26a:	687b      	ldr	r3, [r7, #4]
 800c26c:	681b      	ldr	r3, [r3, #0]
 800c26e:	430a      	orrs	r2, r1
 800c270:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800c272:	687b      	ldr	r3, [r7, #4]
 800c274:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c276:	f003 0308 	and.w	r3, r3, #8
 800c27a:	2b00      	cmp	r3, #0
 800c27c:	d00a      	beq.n	800c294 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800c27e:	687b      	ldr	r3, [r7, #4]
 800c280:	681b      	ldr	r3, [r3, #0]
 800c282:	685b      	ldr	r3, [r3, #4]
 800c284:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800c288:	687b      	ldr	r3, [r7, #4]
 800c28a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800c28c:	687b      	ldr	r3, [r7, #4]
 800c28e:	681b      	ldr	r3, [r3, #0]
 800c290:	430a      	orrs	r2, r1
 800c292:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800c294:	687b      	ldr	r3, [r7, #4]
 800c296:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c298:	f003 0310 	and.w	r3, r3, #16
 800c29c:	2b00      	cmp	r3, #0
 800c29e:	d00a      	beq.n	800c2b6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800c2a0:	687b      	ldr	r3, [r7, #4]
 800c2a2:	681b      	ldr	r3, [r3, #0]
 800c2a4:	689b      	ldr	r3, [r3, #8]
 800c2a6:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800c2aa:	687b      	ldr	r3, [r7, #4]
 800c2ac:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800c2ae:	687b      	ldr	r3, [r7, #4]
 800c2b0:	681b      	ldr	r3, [r3, #0]
 800c2b2:	430a      	orrs	r2, r1
 800c2b4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800c2b6:	687b      	ldr	r3, [r7, #4]
 800c2b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c2ba:	f003 0320 	and.w	r3, r3, #32
 800c2be:	2b00      	cmp	r3, #0
 800c2c0:	d00a      	beq.n	800c2d8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800c2c2:	687b      	ldr	r3, [r7, #4]
 800c2c4:	681b      	ldr	r3, [r3, #0]
 800c2c6:	689b      	ldr	r3, [r3, #8]
 800c2c8:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800c2cc:	687b      	ldr	r3, [r7, #4]
 800c2ce:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800c2d0:	687b      	ldr	r3, [r7, #4]
 800c2d2:	681b      	ldr	r3, [r3, #0]
 800c2d4:	430a      	orrs	r2, r1
 800c2d6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800c2d8:	687b      	ldr	r3, [r7, #4]
 800c2da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c2dc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c2e0:	2b00      	cmp	r3, #0
 800c2e2:	d01a      	beq.n	800c31a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800c2e4:	687b      	ldr	r3, [r7, #4]
 800c2e6:	681b      	ldr	r3, [r3, #0]
 800c2e8:	685b      	ldr	r3, [r3, #4]
 800c2ea:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800c2ee:	687b      	ldr	r3, [r7, #4]
 800c2f0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800c2f2:	687b      	ldr	r3, [r7, #4]
 800c2f4:	681b      	ldr	r3, [r3, #0]
 800c2f6:	430a      	orrs	r2, r1
 800c2f8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800c2fa:	687b      	ldr	r3, [r7, #4]
 800c2fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c2fe:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800c302:	d10a      	bne.n	800c31a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800c304:	687b      	ldr	r3, [r7, #4]
 800c306:	681b      	ldr	r3, [r3, #0]
 800c308:	685b      	ldr	r3, [r3, #4]
 800c30a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800c30e:	687b      	ldr	r3, [r7, #4]
 800c310:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800c312:	687b      	ldr	r3, [r7, #4]
 800c314:	681b      	ldr	r3, [r3, #0]
 800c316:	430a      	orrs	r2, r1
 800c318:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800c31a:	687b      	ldr	r3, [r7, #4]
 800c31c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c31e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c322:	2b00      	cmp	r3, #0
 800c324:	d00a      	beq.n	800c33c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800c326:	687b      	ldr	r3, [r7, #4]
 800c328:	681b      	ldr	r3, [r3, #0]
 800c32a:	685b      	ldr	r3, [r3, #4]
 800c32c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800c330:	687b      	ldr	r3, [r7, #4]
 800c332:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800c334:	687b      	ldr	r3, [r7, #4]
 800c336:	681b      	ldr	r3, [r3, #0]
 800c338:	430a      	orrs	r2, r1
 800c33a:	605a      	str	r2, [r3, #4]
  }
}
 800c33c:	bf00      	nop
 800c33e:	370c      	adds	r7, #12
 800c340:	46bd      	mov	sp, r7
 800c342:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c346:	4770      	bx	lr

0800c348 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800c348:	b580      	push	{r7, lr}
 800c34a:	b098      	sub	sp, #96	; 0x60
 800c34c:	af02      	add	r7, sp, #8
 800c34e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c350:	687b      	ldr	r3, [r7, #4]
 800c352:	2200      	movs	r2, #0
 800c354:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800c358:	f7f6 fc54 	bl	8002c04 <HAL_GetTick>
 800c35c:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800c35e:	687b      	ldr	r3, [r7, #4]
 800c360:	681b      	ldr	r3, [r3, #0]
 800c362:	681b      	ldr	r3, [r3, #0]
 800c364:	f003 0308 	and.w	r3, r3, #8
 800c368:	2b08      	cmp	r3, #8
 800c36a:	d12f      	bne.n	800c3cc <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800c36c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800c370:	9300      	str	r3, [sp, #0]
 800c372:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800c374:	2200      	movs	r2, #0
 800c376:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800c37a:	6878      	ldr	r0, [r7, #4]
 800c37c:	f000 f88e 	bl	800c49c <UART_WaitOnFlagUntilTimeout>
 800c380:	4603      	mov	r3, r0
 800c382:	2b00      	cmp	r3, #0
 800c384:	d022      	beq.n	800c3cc <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800c386:	687b      	ldr	r3, [r7, #4]
 800c388:	681b      	ldr	r3, [r3, #0]
 800c38a:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c38c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c38e:	e853 3f00 	ldrex	r3, [r3]
 800c392:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800c394:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c396:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800c39a:	653b      	str	r3, [r7, #80]	; 0x50
 800c39c:	687b      	ldr	r3, [r7, #4]
 800c39e:	681b      	ldr	r3, [r3, #0]
 800c3a0:	461a      	mov	r2, r3
 800c3a2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c3a4:	647b      	str	r3, [r7, #68]	; 0x44
 800c3a6:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c3a8:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800c3aa:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800c3ac:	e841 2300 	strex	r3, r2, [r1]
 800c3b0:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800c3b2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c3b4:	2b00      	cmp	r3, #0
 800c3b6:	d1e6      	bne.n	800c386 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800c3b8:	687b      	ldr	r3, [r7, #4]
 800c3ba:	2220      	movs	r2, #32
 800c3bc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 800c3c0:	687b      	ldr	r3, [r7, #4]
 800c3c2:	2200      	movs	r2, #0
 800c3c4:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800c3c8:	2303      	movs	r3, #3
 800c3ca:	e063      	b.n	800c494 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800c3cc:	687b      	ldr	r3, [r7, #4]
 800c3ce:	681b      	ldr	r3, [r3, #0]
 800c3d0:	681b      	ldr	r3, [r3, #0]
 800c3d2:	f003 0304 	and.w	r3, r3, #4
 800c3d6:	2b04      	cmp	r3, #4
 800c3d8:	d149      	bne.n	800c46e <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800c3da:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800c3de:	9300      	str	r3, [sp, #0]
 800c3e0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800c3e2:	2200      	movs	r2, #0
 800c3e4:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800c3e8:	6878      	ldr	r0, [r7, #4]
 800c3ea:	f000 f857 	bl	800c49c <UART_WaitOnFlagUntilTimeout>
 800c3ee:	4603      	mov	r3, r0
 800c3f0:	2b00      	cmp	r3, #0
 800c3f2:	d03c      	beq.n	800c46e <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800c3f4:	687b      	ldr	r3, [r7, #4]
 800c3f6:	681b      	ldr	r3, [r3, #0]
 800c3f8:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c3fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c3fc:	e853 3f00 	ldrex	r3, [r3]
 800c400:	623b      	str	r3, [r7, #32]
   return(result);
 800c402:	6a3b      	ldr	r3, [r7, #32]
 800c404:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800c408:	64fb      	str	r3, [r7, #76]	; 0x4c
 800c40a:	687b      	ldr	r3, [r7, #4]
 800c40c:	681b      	ldr	r3, [r3, #0]
 800c40e:	461a      	mov	r2, r3
 800c410:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c412:	633b      	str	r3, [r7, #48]	; 0x30
 800c414:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c416:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800c418:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c41a:	e841 2300 	strex	r3, r2, [r1]
 800c41e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800c420:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c422:	2b00      	cmp	r3, #0
 800c424:	d1e6      	bne.n	800c3f4 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c426:	687b      	ldr	r3, [r7, #4]
 800c428:	681b      	ldr	r3, [r3, #0]
 800c42a:	3308      	adds	r3, #8
 800c42c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c42e:	693b      	ldr	r3, [r7, #16]
 800c430:	e853 3f00 	ldrex	r3, [r3]
 800c434:	60fb      	str	r3, [r7, #12]
   return(result);
 800c436:	68fb      	ldr	r3, [r7, #12]
 800c438:	f023 0301 	bic.w	r3, r3, #1
 800c43c:	64bb      	str	r3, [r7, #72]	; 0x48
 800c43e:	687b      	ldr	r3, [r7, #4]
 800c440:	681b      	ldr	r3, [r3, #0]
 800c442:	3308      	adds	r3, #8
 800c444:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800c446:	61fa      	str	r2, [r7, #28]
 800c448:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c44a:	69b9      	ldr	r1, [r7, #24]
 800c44c:	69fa      	ldr	r2, [r7, #28]
 800c44e:	e841 2300 	strex	r3, r2, [r1]
 800c452:	617b      	str	r3, [r7, #20]
   return(result);
 800c454:	697b      	ldr	r3, [r7, #20]
 800c456:	2b00      	cmp	r3, #0
 800c458:	d1e5      	bne.n	800c426 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800c45a:	687b      	ldr	r3, [r7, #4]
 800c45c:	2220      	movs	r2, #32
 800c45e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 800c462:	687b      	ldr	r3, [r7, #4]
 800c464:	2200      	movs	r2, #0
 800c466:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800c46a:	2303      	movs	r3, #3
 800c46c:	e012      	b.n	800c494 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800c46e:	687b      	ldr	r3, [r7, #4]
 800c470:	2220      	movs	r2, #32
 800c472:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800c476:	687b      	ldr	r3, [r7, #4]
 800c478:	2220      	movs	r2, #32
 800c47a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c47e:	687b      	ldr	r3, [r7, #4]
 800c480:	2200      	movs	r2, #0
 800c482:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800c484:	687b      	ldr	r3, [r7, #4]
 800c486:	2200      	movs	r2, #0
 800c488:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 800c48a:	687b      	ldr	r3, [r7, #4]
 800c48c:	2200      	movs	r2, #0
 800c48e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800c492:	2300      	movs	r3, #0
}
 800c494:	4618      	mov	r0, r3
 800c496:	3758      	adds	r7, #88	; 0x58
 800c498:	46bd      	mov	sp, r7
 800c49a:	bd80      	pop	{r7, pc}

0800c49c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800c49c:	b580      	push	{r7, lr}
 800c49e:	b084      	sub	sp, #16
 800c4a0:	af00      	add	r7, sp, #0
 800c4a2:	60f8      	str	r0, [r7, #12]
 800c4a4:	60b9      	str	r1, [r7, #8]
 800c4a6:	603b      	str	r3, [r7, #0]
 800c4a8:	4613      	mov	r3, r2
 800c4aa:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800c4ac:	e049      	b.n	800c542 <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800c4ae:	69bb      	ldr	r3, [r7, #24]
 800c4b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c4b4:	d045      	beq.n	800c542 <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800c4b6:	f7f6 fba5 	bl	8002c04 <HAL_GetTick>
 800c4ba:	4602      	mov	r2, r0
 800c4bc:	683b      	ldr	r3, [r7, #0]
 800c4be:	1ad3      	subs	r3, r2, r3
 800c4c0:	69ba      	ldr	r2, [r7, #24]
 800c4c2:	429a      	cmp	r2, r3
 800c4c4:	d302      	bcc.n	800c4cc <UART_WaitOnFlagUntilTimeout+0x30>
 800c4c6:	69bb      	ldr	r3, [r7, #24]
 800c4c8:	2b00      	cmp	r3, #0
 800c4ca:	d101      	bne.n	800c4d0 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800c4cc:	2303      	movs	r3, #3
 800c4ce:	e048      	b.n	800c562 <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800c4d0:	68fb      	ldr	r3, [r7, #12]
 800c4d2:	681b      	ldr	r3, [r3, #0]
 800c4d4:	681b      	ldr	r3, [r3, #0]
 800c4d6:	f003 0304 	and.w	r3, r3, #4
 800c4da:	2b00      	cmp	r3, #0
 800c4dc:	d031      	beq.n	800c542 <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800c4de:	68fb      	ldr	r3, [r7, #12]
 800c4e0:	681b      	ldr	r3, [r3, #0]
 800c4e2:	69db      	ldr	r3, [r3, #28]
 800c4e4:	f003 0308 	and.w	r3, r3, #8
 800c4e8:	2b08      	cmp	r3, #8
 800c4ea:	d110      	bne.n	800c50e <UART_WaitOnFlagUntilTimeout+0x72>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800c4ec:	68fb      	ldr	r3, [r7, #12]
 800c4ee:	681b      	ldr	r3, [r3, #0]
 800c4f0:	2208      	movs	r2, #8
 800c4f2:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 800c4f4:	68f8      	ldr	r0, [r7, #12]
 800c4f6:	f000 f95b 	bl	800c7b0 <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 800c4fa:	68fb      	ldr	r3, [r7, #12]
 800c4fc:	2208      	movs	r2, #8
 800c4fe:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 800c502:	68fb      	ldr	r3, [r7, #12]
 800c504:	2200      	movs	r2, #0
 800c506:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

           return HAL_ERROR;
 800c50a:	2301      	movs	r3, #1
 800c50c:	e029      	b.n	800c562 <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800c50e:	68fb      	ldr	r3, [r7, #12]
 800c510:	681b      	ldr	r3, [r3, #0]
 800c512:	69db      	ldr	r3, [r3, #28]
 800c514:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800c518:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800c51c:	d111      	bne.n	800c542 <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800c51e:	68fb      	ldr	r3, [r7, #12]
 800c520:	681b      	ldr	r3, [r3, #0]
 800c522:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800c526:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800c528:	68f8      	ldr	r0, [r7, #12]
 800c52a:	f000 f941 	bl	800c7b0 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800c52e:	68fb      	ldr	r3, [r7, #12]
 800c530:	2220      	movs	r2, #32
 800c532:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800c536:	68fb      	ldr	r3, [r7, #12]
 800c538:	2200      	movs	r2, #0
 800c53a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 800c53e:	2303      	movs	r3, #3
 800c540:	e00f      	b.n	800c562 <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800c542:	68fb      	ldr	r3, [r7, #12]
 800c544:	681b      	ldr	r3, [r3, #0]
 800c546:	69da      	ldr	r2, [r3, #28]
 800c548:	68bb      	ldr	r3, [r7, #8]
 800c54a:	4013      	ands	r3, r2
 800c54c:	68ba      	ldr	r2, [r7, #8]
 800c54e:	429a      	cmp	r2, r3
 800c550:	bf0c      	ite	eq
 800c552:	2301      	moveq	r3, #1
 800c554:	2300      	movne	r3, #0
 800c556:	b2db      	uxtb	r3, r3
 800c558:	461a      	mov	r2, r3
 800c55a:	79fb      	ldrb	r3, [r7, #7]
 800c55c:	429a      	cmp	r2, r3
 800c55e:	d0a6      	beq.n	800c4ae <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800c560:	2300      	movs	r3, #0
}
 800c562:	4618      	mov	r0, r3
 800c564:	3710      	adds	r7, #16
 800c566:	46bd      	mov	sp, r7
 800c568:	bd80      	pop	{r7, pc}
	...

0800c56c <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800c56c:	b480      	push	{r7}
 800c56e:	b0a3      	sub	sp, #140	; 0x8c
 800c570:	af00      	add	r7, sp, #0
 800c572:	60f8      	str	r0, [r7, #12]
 800c574:	60b9      	str	r1, [r7, #8]
 800c576:	4613      	mov	r3, r2
 800c578:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 800c57a:	68fb      	ldr	r3, [r7, #12]
 800c57c:	68ba      	ldr	r2, [r7, #8]
 800c57e:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize  = Size;
 800c580:	68fb      	ldr	r3, [r7, #12]
 800c582:	88fa      	ldrh	r2, [r7, #6]
 800c584:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
  huart->RxXferCount = Size;
 800c588:	68fb      	ldr	r3, [r7, #12]
 800c58a:	88fa      	ldrh	r2, [r7, #6]
 800c58c:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->RxISR       = NULL;
 800c590:	68fb      	ldr	r3, [r7, #12]
 800c592:	2200      	movs	r2, #0
 800c594:	675a      	str	r2, [r3, #116]	; 0x74

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 800c596:	68fb      	ldr	r3, [r7, #12]
 800c598:	689b      	ldr	r3, [r3, #8]
 800c59a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c59e:	d10e      	bne.n	800c5be <UART_Start_Receive_IT+0x52>
 800c5a0:	68fb      	ldr	r3, [r7, #12]
 800c5a2:	691b      	ldr	r3, [r3, #16]
 800c5a4:	2b00      	cmp	r3, #0
 800c5a6:	d105      	bne.n	800c5b4 <UART_Start_Receive_IT+0x48>
 800c5a8:	68fb      	ldr	r3, [r7, #12]
 800c5aa:	f240 12ff 	movw	r2, #511	; 0x1ff
 800c5ae:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800c5b2:	e02d      	b.n	800c610 <UART_Start_Receive_IT+0xa4>
 800c5b4:	68fb      	ldr	r3, [r7, #12]
 800c5b6:	22ff      	movs	r2, #255	; 0xff
 800c5b8:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800c5bc:	e028      	b.n	800c610 <UART_Start_Receive_IT+0xa4>
 800c5be:	68fb      	ldr	r3, [r7, #12]
 800c5c0:	689b      	ldr	r3, [r3, #8]
 800c5c2:	2b00      	cmp	r3, #0
 800c5c4:	d10d      	bne.n	800c5e2 <UART_Start_Receive_IT+0x76>
 800c5c6:	68fb      	ldr	r3, [r7, #12]
 800c5c8:	691b      	ldr	r3, [r3, #16]
 800c5ca:	2b00      	cmp	r3, #0
 800c5cc:	d104      	bne.n	800c5d8 <UART_Start_Receive_IT+0x6c>
 800c5ce:	68fb      	ldr	r3, [r7, #12]
 800c5d0:	22ff      	movs	r2, #255	; 0xff
 800c5d2:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800c5d6:	e01b      	b.n	800c610 <UART_Start_Receive_IT+0xa4>
 800c5d8:	68fb      	ldr	r3, [r7, #12]
 800c5da:	227f      	movs	r2, #127	; 0x7f
 800c5dc:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800c5e0:	e016      	b.n	800c610 <UART_Start_Receive_IT+0xa4>
 800c5e2:	68fb      	ldr	r3, [r7, #12]
 800c5e4:	689b      	ldr	r3, [r3, #8]
 800c5e6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800c5ea:	d10d      	bne.n	800c608 <UART_Start_Receive_IT+0x9c>
 800c5ec:	68fb      	ldr	r3, [r7, #12]
 800c5ee:	691b      	ldr	r3, [r3, #16]
 800c5f0:	2b00      	cmp	r3, #0
 800c5f2:	d104      	bne.n	800c5fe <UART_Start_Receive_IT+0x92>
 800c5f4:	68fb      	ldr	r3, [r7, #12]
 800c5f6:	227f      	movs	r2, #127	; 0x7f
 800c5f8:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800c5fc:	e008      	b.n	800c610 <UART_Start_Receive_IT+0xa4>
 800c5fe:	68fb      	ldr	r3, [r7, #12]
 800c600:	223f      	movs	r2, #63	; 0x3f
 800c602:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800c606:	e003      	b.n	800c610 <UART_Start_Receive_IT+0xa4>
 800c608:	68fb      	ldr	r3, [r7, #12]
 800c60a:	2200      	movs	r2, #0
 800c60c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c610:	68fb      	ldr	r3, [r7, #12]
 800c612:	2200      	movs	r2, #0
 800c614:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800c618:	68fb      	ldr	r3, [r7, #12]
 800c61a:	2222      	movs	r2, #34	; 0x22
 800c61c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c620:	68fb      	ldr	r3, [r7, #12]
 800c622:	681b      	ldr	r3, [r3, #0]
 800c624:	3308      	adds	r3, #8
 800c626:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c628:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800c62a:	e853 3f00 	ldrex	r3, [r3]
 800c62e:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 800c630:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800c632:	f043 0301 	orr.w	r3, r3, #1
 800c636:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800c63a:	68fb      	ldr	r3, [r7, #12]
 800c63c:	681b      	ldr	r3, [r3, #0]
 800c63e:	3308      	adds	r3, #8
 800c640:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 800c644:	673a      	str	r2, [r7, #112]	; 0x70
 800c646:	66fb      	str	r3, [r7, #108]	; 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c648:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 800c64a:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 800c64c:	e841 2300 	strex	r3, r2, [r1]
 800c650:	66bb      	str	r3, [r7, #104]	; 0x68
   return(result);
 800c652:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800c654:	2b00      	cmp	r3, #0
 800c656:	d1e3      	bne.n	800c620 <UART_Start_Receive_IT+0xb4>

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 800c658:	68fb      	ldr	r3, [r7, #12]
 800c65a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800c65c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c660:	d14f      	bne.n	800c702 <UART_Start_Receive_IT+0x196>
 800c662:	68fb      	ldr	r3, [r7, #12]
 800c664:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800c668:	88fa      	ldrh	r2, [r7, #6]
 800c66a:	429a      	cmp	r2, r3
 800c66c:	d349      	bcc.n	800c702 <UART_Start_Receive_IT+0x196>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800c66e:	68fb      	ldr	r3, [r7, #12]
 800c670:	689b      	ldr	r3, [r3, #8]
 800c672:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c676:	d107      	bne.n	800c688 <UART_Start_Receive_IT+0x11c>
 800c678:	68fb      	ldr	r3, [r7, #12]
 800c67a:	691b      	ldr	r3, [r3, #16]
 800c67c:	2b00      	cmp	r3, #0
 800c67e:	d103      	bne.n	800c688 <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 800c680:	68fb      	ldr	r3, [r7, #12]
 800c682:	4a47      	ldr	r2, [pc, #284]	; (800c7a0 <UART_Start_Receive_IT+0x234>)
 800c684:	675a      	str	r2, [r3, #116]	; 0x74
 800c686:	e002      	b.n	800c68e <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 800c688:	68fb      	ldr	r3, [r7, #12]
 800c68a:	4a46      	ldr	r2, [pc, #280]	; (800c7a4 <UART_Start_Receive_IT+0x238>)
 800c68c:	675a      	str	r2, [r3, #116]	; 0x74
    }

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 800c68e:	68fb      	ldr	r3, [r7, #12]
 800c690:	691b      	ldr	r3, [r3, #16]
 800c692:	2b00      	cmp	r3, #0
 800c694:	d01a      	beq.n	800c6cc <UART_Start_Receive_IT+0x160>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800c696:	68fb      	ldr	r3, [r7, #12]
 800c698:	681b      	ldr	r3, [r3, #0]
 800c69a:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c69c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c69e:	e853 3f00 	ldrex	r3, [r3]
 800c6a2:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800c6a4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c6a6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800c6aa:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800c6ae:	68fb      	ldr	r3, [r7, #12]
 800c6b0:	681b      	ldr	r3, [r3, #0]
 800c6b2:	461a      	mov	r2, r3
 800c6b4:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800c6b8:	65fb      	str	r3, [r7, #92]	; 0x5c
 800c6ba:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c6bc:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800c6be:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800c6c0:	e841 2300 	strex	r3, r2, [r1]
 800c6c4:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800c6c6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800c6c8:	2b00      	cmp	r3, #0
 800c6ca:	d1e4      	bne.n	800c696 <UART_Start_Receive_IT+0x12a>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800c6cc:	68fb      	ldr	r3, [r7, #12]
 800c6ce:	681b      	ldr	r3, [r3, #0]
 800c6d0:	3308      	adds	r3, #8
 800c6d2:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c6d4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c6d6:	e853 3f00 	ldrex	r3, [r3]
 800c6da:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800c6dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c6de:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800c6e2:	67fb      	str	r3, [r7, #124]	; 0x7c
 800c6e4:	68fb      	ldr	r3, [r7, #12]
 800c6e6:	681b      	ldr	r3, [r3, #0]
 800c6e8:	3308      	adds	r3, #8
 800c6ea:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 800c6ec:	64ba      	str	r2, [r7, #72]	; 0x48
 800c6ee:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c6f0:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800c6f2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800c6f4:	e841 2300 	strex	r3, r2, [r1]
 800c6f8:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800c6fa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c6fc:	2b00      	cmp	r3, #0
 800c6fe:	d1e5      	bne.n	800c6cc <UART_Start_Receive_IT+0x160>
 800c700:	e046      	b.n	800c790 <UART_Start_Receive_IT+0x224>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800c702:	68fb      	ldr	r3, [r7, #12]
 800c704:	689b      	ldr	r3, [r3, #8]
 800c706:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c70a:	d107      	bne.n	800c71c <UART_Start_Receive_IT+0x1b0>
 800c70c:	68fb      	ldr	r3, [r7, #12]
 800c70e:	691b      	ldr	r3, [r3, #16]
 800c710:	2b00      	cmp	r3, #0
 800c712:	d103      	bne.n	800c71c <UART_Start_Receive_IT+0x1b0>
    {
      huart->RxISR = UART_RxISR_16BIT;
 800c714:	68fb      	ldr	r3, [r7, #12]
 800c716:	4a24      	ldr	r2, [pc, #144]	; (800c7a8 <UART_Start_Receive_IT+0x23c>)
 800c718:	675a      	str	r2, [r3, #116]	; 0x74
 800c71a:	e002      	b.n	800c722 <UART_Start_Receive_IT+0x1b6>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 800c71c:	68fb      	ldr	r3, [r7, #12]
 800c71e:	4a23      	ldr	r2, [pc, #140]	; (800c7ac <UART_Start_Receive_IT+0x240>)
 800c720:	675a      	str	r2, [r3, #116]	; 0x74
    }

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 800c722:	68fb      	ldr	r3, [r7, #12]
 800c724:	691b      	ldr	r3, [r3, #16]
 800c726:	2b00      	cmp	r3, #0
 800c728:	d019      	beq.n	800c75e <UART_Start_Receive_IT+0x1f2>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 800c72a:	68fb      	ldr	r3, [r7, #12]
 800c72c:	681b      	ldr	r3, [r3, #0]
 800c72e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c730:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c732:	e853 3f00 	ldrex	r3, [r3]
 800c736:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800c738:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c73a:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 800c73e:	677b      	str	r3, [r7, #116]	; 0x74
 800c740:	68fb      	ldr	r3, [r7, #12]
 800c742:	681b      	ldr	r3, [r3, #0]
 800c744:	461a      	mov	r2, r3
 800c746:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800c748:	637b      	str	r3, [r7, #52]	; 0x34
 800c74a:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c74c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800c74e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800c750:	e841 2300 	strex	r3, r2, [r1]
 800c754:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800c756:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c758:	2b00      	cmp	r3, #0
 800c75a:	d1e6      	bne.n	800c72a <UART_Start_Receive_IT+0x1be>
 800c75c:	e018      	b.n	800c790 <UART_Start_Receive_IT+0x224>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800c75e:	68fb      	ldr	r3, [r7, #12]
 800c760:	681b      	ldr	r3, [r3, #0]
 800c762:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c764:	697b      	ldr	r3, [r7, #20]
 800c766:	e853 3f00 	ldrex	r3, [r3]
 800c76a:	613b      	str	r3, [r7, #16]
   return(result);
 800c76c:	693b      	ldr	r3, [r7, #16]
 800c76e:	f043 0320 	orr.w	r3, r3, #32
 800c772:	67bb      	str	r3, [r7, #120]	; 0x78
 800c774:	68fb      	ldr	r3, [r7, #12]
 800c776:	681b      	ldr	r3, [r3, #0]
 800c778:	461a      	mov	r2, r3
 800c77a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800c77c:	623b      	str	r3, [r7, #32]
 800c77e:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c780:	69f9      	ldr	r1, [r7, #28]
 800c782:	6a3a      	ldr	r2, [r7, #32]
 800c784:	e841 2300 	strex	r3, r2, [r1]
 800c788:	61bb      	str	r3, [r7, #24]
   return(result);
 800c78a:	69bb      	ldr	r3, [r7, #24]
 800c78c:	2b00      	cmp	r3, #0
 800c78e:	d1e6      	bne.n	800c75e <UART_Start_Receive_IT+0x1f2>
    }
  }
  return HAL_OK;
 800c790:	2300      	movs	r3, #0
}
 800c792:	4618      	mov	r0, r3
 800c794:	378c      	adds	r7, #140	; 0x8c
 800c796:	46bd      	mov	sp, r7
 800c798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c79c:	4770      	bx	lr
 800c79e:	bf00      	nop
 800c7a0:	0800d315 	.word	0x0800d315
 800c7a4:	0800cfb5 	.word	0x0800cfb5
 800c7a8:	0800cdfd 	.word	0x0800cdfd
 800c7ac:	0800cc45 	.word	0x0800cc45

0800c7b0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800c7b0:	b480      	push	{r7}
 800c7b2:	b095      	sub	sp, #84	; 0x54
 800c7b4:	af00      	add	r7, sp, #0
 800c7b6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800c7b8:	687b      	ldr	r3, [r7, #4]
 800c7ba:	681b      	ldr	r3, [r3, #0]
 800c7bc:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c7be:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c7c0:	e853 3f00 	ldrex	r3, [r3]
 800c7c4:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800c7c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c7c8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800c7cc:	64fb      	str	r3, [r7, #76]	; 0x4c
 800c7ce:	687b      	ldr	r3, [r7, #4]
 800c7d0:	681b      	ldr	r3, [r3, #0]
 800c7d2:	461a      	mov	r2, r3
 800c7d4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c7d6:	643b      	str	r3, [r7, #64]	; 0x40
 800c7d8:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c7da:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800c7dc:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800c7de:	e841 2300 	strex	r3, r2, [r1]
 800c7e2:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800c7e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c7e6:	2b00      	cmp	r3, #0
 800c7e8:	d1e6      	bne.n	800c7b8 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800c7ea:	687b      	ldr	r3, [r7, #4]
 800c7ec:	681b      	ldr	r3, [r3, #0]
 800c7ee:	3308      	adds	r3, #8
 800c7f0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c7f2:	6a3b      	ldr	r3, [r7, #32]
 800c7f4:	e853 3f00 	ldrex	r3, [r3]
 800c7f8:	61fb      	str	r3, [r7, #28]
   return(result);
 800c7fa:	69fa      	ldr	r2, [r7, #28]
 800c7fc:	4b1e      	ldr	r3, [pc, #120]	; (800c878 <UART_EndRxTransfer+0xc8>)
 800c7fe:	4013      	ands	r3, r2
 800c800:	64bb      	str	r3, [r7, #72]	; 0x48
 800c802:	687b      	ldr	r3, [r7, #4]
 800c804:	681b      	ldr	r3, [r3, #0]
 800c806:	3308      	adds	r3, #8
 800c808:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800c80a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800c80c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c80e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800c810:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c812:	e841 2300 	strex	r3, r2, [r1]
 800c816:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800c818:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c81a:	2b00      	cmp	r3, #0
 800c81c:	d1e5      	bne.n	800c7ea <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c81e:	687b      	ldr	r3, [r7, #4]
 800c820:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c822:	2b01      	cmp	r3, #1
 800c824:	d118      	bne.n	800c858 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c826:	687b      	ldr	r3, [r7, #4]
 800c828:	681b      	ldr	r3, [r3, #0]
 800c82a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c82c:	68fb      	ldr	r3, [r7, #12]
 800c82e:	e853 3f00 	ldrex	r3, [r3]
 800c832:	60bb      	str	r3, [r7, #8]
   return(result);
 800c834:	68bb      	ldr	r3, [r7, #8]
 800c836:	f023 0310 	bic.w	r3, r3, #16
 800c83a:	647b      	str	r3, [r7, #68]	; 0x44
 800c83c:	687b      	ldr	r3, [r7, #4]
 800c83e:	681b      	ldr	r3, [r3, #0]
 800c840:	461a      	mov	r2, r3
 800c842:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c844:	61bb      	str	r3, [r7, #24]
 800c846:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c848:	6979      	ldr	r1, [r7, #20]
 800c84a:	69ba      	ldr	r2, [r7, #24]
 800c84c:	e841 2300 	strex	r3, r2, [r1]
 800c850:	613b      	str	r3, [r7, #16]
   return(result);
 800c852:	693b      	ldr	r3, [r7, #16]
 800c854:	2b00      	cmp	r3, #0
 800c856:	d1e6      	bne.n	800c826 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800c858:	687b      	ldr	r3, [r7, #4]
 800c85a:	2220      	movs	r2, #32
 800c85c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c860:	687b      	ldr	r3, [r7, #4]
 800c862:	2200      	movs	r2, #0
 800c864:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800c866:	687b      	ldr	r3, [r7, #4]
 800c868:	2200      	movs	r2, #0
 800c86a:	675a      	str	r2, [r3, #116]	; 0x74
}
 800c86c:	bf00      	nop
 800c86e:	3754      	adds	r7, #84	; 0x54
 800c870:	46bd      	mov	sp, r7
 800c872:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c876:	4770      	bx	lr
 800c878:	effffffe 	.word	0xeffffffe

0800c87c <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800c87c:	b580      	push	{r7, lr}
 800c87e:	b084      	sub	sp, #16
 800c880:	af00      	add	r7, sp, #0
 800c882:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800c884:	687b      	ldr	r3, [r7, #4]
 800c886:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c888:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800c88a:	68fb      	ldr	r3, [r7, #12]
 800c88c:	2200      	movs	r2, #0
 800c88e:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 800c892:	68fb      	ldr	r3, [r7, #12]
 800c894:	2200      	movs	r2, #0
 800c896:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800c89a:	68f8      	ldr	r0, [r7, #12]
 800c89c:	f7fe ff34 	bl	800b708 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800c8a0:	bf00      	nop
 800c8a2:	3710      	adds	r7, #16
 800c8a4:	46bd      	mov	sp, r7
 800c8a6:	bd80      	pop	{r7, pc}

0800c8a8 <UART_TxISR_8BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT(UART_HandleTypeDef *huart)
{
 800c8a8:	b480      	push	{r7}
 800c8aa:	b08f      	sub	sp, #60	; 0x3c
 800c8ac:	af00      	add	r7, sp, #0
 800c8ae:	6078      	str	r0, [r7, #4]
  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800c8b0:	687b      	ldr	r3, [r7, #4]
 800c8b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c8b6:	2b21      	cmp	r3, #33	; 0x21
 800c8b8:	d14c      	bne.n	800c954 <UART_TxISR_8BIT+0xac>
  {
    if (huart->TxXferCount == 0U)
 800c8ba:	687b      	ldr	r3, [r7, #4]
 800c8bc:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800c8c0:	b29b      	uxth	r3, r3
 800c8c2:	2b00      	cmp	r3, #0
 800c8c4:	d132      	bne.n	800c92c <UART_TxISR_8BIT+0x84>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 800c8c6:	687b      	ldr	r3, [r7, #4]
 800c8c8:	681b      	ldr	r3, [r3, #0]
 800c8ca:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c8cc:	6a3b      	ldr	r3, [r7, #32]
 800c8ce:	e853 3f00 	ldrex	r3, [r3]
 800c8d2:	61fb      	str	r3, [r7, #28]
   return(result);
 800c8d4:	69fb      	ldr	r3, [r7, #28]
 800c8d6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800c8da:	637b      	str	r3, [r7, #52]	; 0x34
 800c8dc:	687b      	ldr	r3, [r7, #4]
 800c8de:	681b      	ldr	r3, [r3, #0]
 800c8e0:	461a      	mov	r2, r3
 800c8e2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c8e4:	62fb      	str	r3, [r7, #44]	; 0x2c
 800c8e6:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c8e8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800c8ea:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c8ec:	e841 2300 	strex	r3, r2, [r1]
 800c8f0:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800c8f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c8f4:	2b00      	cmp	r3, #0
 800c8f6:	d1e6      	bne.n	800c8c6 <UART_TxISR_8BIT+0x1e>

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800c8f8:	687b      	ldr	r3, [r7, #4]
 800c8fa:	681b      	ldr	r3, [r3, #0]
 800c8fc:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c8fe:	68fb      	ldr	r3, [r7, #12]
 800c900:	e853 3f00 	ldrex	r3, [r3]
 800c904:	60bb      	str	r3, [r7, #8]
   return(result);
 800c906:	68bb      	ldr	r3, [r7, #8]
 800c908:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c90c:	633b      	str	r3, [r7, #48]	; 0x30
 800c90e:	687b      	ldr	r3, [r7, #4]
 800c910:	681b      	ldr	r3, [r3, #0]
 800c912:	461a      	mov	r2, r3
 800c914:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c916:	61bb      	str	r3, [r7, #24]
 800c918:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c91a:	6979      	ldr	r1, [r7, #20]
 800c91c:	69ba      	ldr	r2, [r7, #24]
 800c91e:	e841 2300 	strex	r3, r2, [r1]
 800c922:	613b      	str	r3, [r7, #16]
   return(result);
 800c924:	693b      	ldr	r3, [r7, #16]
 800c926:	2b00      	cmp	r3, #0
 800c928:	d1e6      	bne.n	800c8f8 <UART_TxISR_8BIT+0x50>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
      huart->pTxBuffPtr++;
      huart->TxXferCount--;
    }
  }
}
 800c92a:	e013      	b.n	800c954 <UART_TxISR_8BIT+0xac>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 800c92c:	687b      	ldr	r3, [r7, #4]
 800c92e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c930:	781a      	ldrb	r2, [r3, #0]
 800c932:	687b      	ldr	r3, [r7, #4]
 800c934:	681b      	ldr	r3, [r3, #0]
 800c936:	629a      	str	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr++;
 800c938:	687b      	ldr	r3, [r7, #4]
 800c93a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c93c:	1c5a      	adds	r2, r3, #1
 800c93e:	687b      	ldr	r3, [r7, #4]
 800c940:	651a      	str	r2, [r3, #80]	; 0x50
      huart->TxXferCount--;
 800c942:	687b      	ldr	r3, [r7, #4]
 800c944:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800c948:	b29b      	uxth	r3, r3
 800c94a:	3b01      	subs	r3, #1
 800c94c:	b29a      	uxth	r2, r3
 800c94e:	687b      	ldr	r3, [r7, #4]
 800c950:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
}
 800c954:	bf00      	nop
 800c956:	373c      	adds	r7, #60	; 0x3c
 800c958:	46bd      	mov	sp, r7
 800c95a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c95e:	4770      	bx	lr

0800c960 <UART_TxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
 800c960:	b480      	push	{r7}
 800c962:	b091      	sub	sp, #68	; 0x44
 800c964:	af00      	add	r7, sp, #0
 800c966:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800c968:	687b      	ldr	r3, [r7, #4]
 800c96a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c96e:	2b21      	cmp	r3, #33	; 0x21
 800c970:	d151      	bne.n	800ca16 <UART_TxISR_16BIT+0xb6>
  {
    if (huart->TxXferCount == 0U)
 800c972:	687b      	ldr	r3, [r7, #4]
 800c974:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800c978:	b29b      	uxth	r3, r3
 800c97a:	2b00      	cmp	r3, #0
 800c97c:	d132      	bne.n	800c9e4 <UART_TxISR_16BIT+0x84>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 800c97e:	687b      	ldr	r3, [r7, #4]
 800c980:	681b      	ldr	r3, [r3, #0]
 800c982:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c984:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c986:	e853 3f00 	ldrex	r3, [r3]
 800c98a:	623b      	str	r3, [r7, #32]
   return(result);
 800c98c:	6a3b      	ldr	r3, [r7, #32]
 800c98e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800c992:	63bb      	str	r3, [r7, #56]	; 0x38
 800c994:	687b      	ldr	r3, [r7, #4]
 800c996:	681b      	ldr	r3, [r3, #0]
 800c998:	461a      	mov	r2, r3
 800c99a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c99c:	633b      	str	r3, [r7, #48]	; 0x30
 800c99e:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c9a0:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800c9a2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c9a4:	e841 2300 	strex	r3, r2, [r1]
 800c9a8:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800c9aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c9ac:	2b00      	cmp	r3, #0
 800c9ae:	d1e6      	bne.n	800c97e <UART_TxISR_16BIT+0x1e>

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800c9b0:	687b      	ldr	r3, [r7, #4]
 800c9b2:	681b      	ldr	r3, [r3, #0]
 800c9b4:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c9b6:	693b      	ldr	r3, [r7, #16]
 800c9b8:	e853 3f00 	ldrex	r3, [r3]
 800c9bc:	60fb      	str	r3, [r7, #12]
   return(result);
 800c9be:	68fb      	ldr	r3, [r7, #12]
 800c9c0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c9c4:	637b      	str	r3, [r7, #52]	; 0x34
 800c9c6:	687b      	ldr	r3, [r7, #4]
 800c9c8:	681b      	ldr	r3, [r3, #0]
 800c9ca:	461a      	mov	r2, r3
 800c9cc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c9ce:	61fb      	str	r3, [r7, #28]
 800c9d0:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c9d2:	69b9      	ldr	r1, [r7, #24]
 800c9d4:	69fa      	ldr	r2, [r7, #28]
 800c9d6:	e841 2300 	strex	r3, r2, [r1]
 800c9da:	617b      	str	r3, [r7, #20]
   return(result);
 800c9dc:	697b      	ldr	r3, [r7, #20]
 800c9de:	2b00      	cmp	r3, #0
 800c9e0:	d1e6      	bne.n	800c9b0 <UART_TxISR_16BIT+0x50>
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
      huart->pTxBuffPtr += 2U;
      huart->TxXferCount--;
    }
  }
}
 800c9e2:	e018      	b.n	800ca16 <UART_TxISR_16BIT+0xb6>
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800c9e4:	687b      	ldr	r3, [r7, #4]
 800c9e6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c9e8:	63fb      	str	r3, [r7, #60]	; 0x3c
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 800c9ea:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c9ec:	881b      	ldrh	r3, [r3, #0]
 800c9ee:	461a      	mov	r2, r3
 800c9f0:	687b      	ldr	r3, [r7, #4]
 800c9f2:	681b      	ldr	r3, [r3, #0]
 800c9f4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800c9f8:	629a      	str	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr += 2U;
 800c9fa:	687b      	ldr	r3, [r7, #4]
 800c9fc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c9fe:	1c9a      	adds	r2, r3, #2
 800ca00:	687b      	ldr	r3, [r7, #4]
 800ca02:	651a      	str	r2, [r3, #80]	; 0x50
      huart->TxXferCount--;
 800ca04:	687b      	ldr	r3, [r7, #4]
 800ca06:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800ca0a:	b29b      	uxth	r3, r3
 800ca0c:	3b01      	subs	r3, #1
 800ca0e:	b29a      	uxth	r2, r3
 800ca10:	687b      	ldr	r3, [r7, #4]
 800ca12:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
}
 800ca16:	bf00      	nop
 800ca18:	3744      	adds	r7, #68	; 0x44
 800ca1a:	46bd      	mov	sp, r7
 800ca1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca20:	4770      	bx	lr

0800ca22 <UART_TxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800ca22:	b480      	push	{r7}
 800ca24:	b091      	sub	sp, #68	; 0x44
 800ca26:	af00      	add	r7, sp, #0
 800ca28:	6078      	str	r0, [r7, #4]
  uint16_t  nb_tx_data;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800ca2a:	687b      	ldr	r3, [r7, #4]
 800ca2c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ca30:	2b21      	cmp	r3, #33	; 0x21
 800ca32:	d160      	bne.n	800caf6 <UART_TxISR_8BIT_FIFOEN+0xd4>
  {
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 800ca34:	687b      	ldr	r3, [r7, #4]
 800ca36:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800ca3a:	87fb      	strh	r3, [r7, #62]	; 0x3e
 800ca3c:	e057      	b.n	800caee <UART_TxISR_8BIT_FIFOEN+0xcc>
    {
      if (huart->TxXferCount == 0U)
 800ca3e:	687b      	ldr	r3, [r7, #4]
 800ca40:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800ca44:	b29b      	uxth	r3, r3
 800ca46:	2b00      	cmp	r3, #0
 800ca48:	d133      	bne.n	800cab2 <UART_TxISR_8BIT_FIFOEN+0x90>
      {
        /* Disable the TX FIFO threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 800ca4a:	687b      	ldr	r3, [r7, #4]
 800ca4c:	681b      	ldr	r3, [r3, #0]
 800ca4e:	3308      	adds	r3, #8
 800ca50:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ca52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ca54:	e853 3f00 	ldrex	r3, [r3]
 800ca58:	623b      	str	r3, [r7, #32]
   return(result);
 800ca5a:	6a3b      	ldr	r3, [r7, #32]
 800ca5c:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800ca60:	63bb      	str	r3, [r7, #56]	; 0x38
 800ca62:	687b      	ldr	r3, [r7, #4]
 800ca64:	681b      	ldr	r3, [r3, #0]
 800ca66:	3308      	adds	r3, #8
 800ca68:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800ca6a:	633a      	str	r2, [r7, #48]	; 0x30
 800ca6c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ca6e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800ca70:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ca72:	e841 2300 	strex	r3, r2, [r1]
 800ca76:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800ca78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ca7a:	2b00      	cmp	r3, #0
 800ca7c:	d1e5      	bne.n	800ca4a <UART_TxISR_8BIT_FIFOEN+0x28>

        /* Enable the UART Transmit Complete Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800ca7e:	687b      	ldr	r3, [r7, #4]
 800ca80:	681b      	ldr	r3, [r3, #0]
 800ca82:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ca84:	693b      	ldr	r3, [r7, #16]
 800ca86:	e853 3f00 	ldrex	r3, [r3]
 800ca8a:	60fb      	str	r3, [r7, #12]
   return(result);
 800ca8c:	68fb      	ldr	r3, [r7, #12]
 800ca8e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ca92:	637b      	str	r3, [r7, #52]	; 0x34
 800ca94:	687b      	ldr	r3, [r7, #4]
 800ca96:	681b      	ldr	r3, [r3, #0]
 800ca98:	461a      	mov	r2, r3
 800ca9a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ca9c:	61fb      	str	r3, [r7, #28]
 800ca9e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800caa0:	69b9      	ldr	r1, [r7, #24]
 800caa2:	69fa      	ldr	r2, [r7, #28]
 800caa4:	e841 2300 	strex	r3, r2, [r1]
 800caa8:	617b      	str	r3, [r7, #20]
   return(result);
 800caaa:	697b      	ldr	r3, [r7, #20]
 800caac:	2b00      	cmp	r3, #0
 800caae:	d1e6      	bne.n	800ca7e <UART_TxISR_8BIT_FIFOEN+0x5c>

        break; /* force exit loop */
 800cab0:	e021      	b.n	800caf6 <UART_TxISR_8BIT_FIFOEN+0xd4>
      }
      else if (READ_BIT(huart->Instance->ISR, USART_ISR_TXE_TXFNF) != 0U)
 800cab2:	687b      	ldr	r3, [r7, #4]
 800cab4:	681b      	ldr	r3, [r3, #0]
 800cab6:	69db      	ldr	r3, [r3, #28]
 800cab8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800cabc:	2b00      	cmp	r3, #0
 800cabe:	d013      	beq.n	800cae8 <UART_TxISR_8BIT_FIFOEN+0xc6>
      {
        huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 800cac0:	687b      	ldr	r3, [r7, #4]
 800cac2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800cac4:	781a      	ldrb	r2, [r3, #0]
 800cac6:	687b      	ldr	r3, [r7, #4]
 800cac8:	681b      	ldr	r3, [r3, #0]
 800caca:	629a      	str	r2, [r3, #40]	; 0x28
        huart->pTxBuffPtr++;
 800cacc:	687b      	ldr	r3, [r7, #4]
 800cace:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800cad0:	1c5a      	adds	r2, r3, #1
 800cad2:	687b      	ldr	r3, [r7, #4]
 800cad4:	651a      	str	r2, [r3, #80]	; 0x50
        huart->TxXferCount--;
 800cad6:	687b      	ldr	r3, [r7, #4]
 800cad8:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800cadc:	b29b      	uxth	r3, r3
 800cade:	3b01      	subs	r3, #1
 800cae0:	b29a      	uxth	r2, r3
 800cae2:	687b      	ldr	r3, [r7, #4]
 800cae4:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 800cae8:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800caea:	3b01      	subs	r3, #1
 800caec:	87fb      	strh	r3, [r7, #62]	; 0x3e
 800caee:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800caf0:	2b00      	cmp	r3, #0
 800caf2:	d1a4      	bne.n	800ca3e <UART_TxISR_8BIT_FIFOEN+0x1c>
      {
        /* Nothing to do */
      }
    }
  }
}
 800caf4:	e7ff      	b.n	800caf6 <UART_TxISR_8BIT_FIFOEN+0xd4>
 800caf6:	bf00      	nop
 800caf8:	3744      	adds	r7, #68	; 0x44
 800cafa:	46bd      	mov	sp, r7
 800cafc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb00:	4770      	bx	lr

0800cb02 <UART_TxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800cb02:	b480      	push	{r7}
 800cb04:	b091      	sub	sp, #68	; 0x44
 800cb06:	af00      	add	r7, sp, #0
 800cb08:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;
  uint16_t  nb_tx_data;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800cb0a:	687b      	ldr	r3, [r7, #4]
 800cb0c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800cb10:	2b21      	cmp	r3, #33	; 0x21
 800cb12:	d165      	bne.n	800cbe0 <UART_TxISR_16BIT_FIFOEN+0xde>
  {
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 800cb14:	687b      	ldr	r3, [r7, #4]
 800cb16:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800cb1a:	87fb      	strh	r3, [r7, #62]	; 0x3e
 800cb1c:	e05c      	b.n	800cbd8 <UART_TxISR_16BIT_FIFOEN+0xd6>
    {
      if (huart->TxXferCount == 0U)
 800cb1e:	687b      	ldr	r3, [r7, #4]
 800cb20:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800cb24:	b29b      	uxth	r3, r3
 800cb26:	2b00      	cmp	r3, #0
 800cb28:	d133      	bne.n	800cb92 <UART_TxISR_16BIT_FIFOEN+0x90>
      {
        /* Disable the TX FIFO threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 800cb2a:	687b      	ldr	r3, [r7, #4]
 800cb2c:	681b      	ldr	r3, [r3, #0]
 800cb2e:	3308      	adds	r3, #8
 800cb30:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cb32:	6a3b      	ldr	r3, [r7, #32]
 800cb34:	e853 3f00 	ldrex	r3, [r3]
 800cb38:	61fb      	str	r3, [r7, #28]
   return(result);
 800cb3a:	69fb      	ldr	r3, [r7, #28]
 800cb3c:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800cb40:	637b      	str	r3, [r7, #52]	; 0x34
 800cb42:	687b      	ldr	r3, [r7, #4]
 800cb44:	681b      	ldr	r3, [r3, #0]
 800cb46:	3308      	adds	r3, #8
 800cb48:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800cb4a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800cb4c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cb4e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800cb50:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800cb52:	e841 2300 	strex	r3, r2, [r1]
 800cb56:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800cb58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cb5a:	2b00      	cmp	r3, #0
 800cb5c:	d1e5      	bne.n	800cb2a <UART_TxISR_16BIT_FIFOEN+0x28>

        /* Enable the UART Transmit Complete Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800cb5e:	687b      	ldr	r3, [r7, #4]
 800cb60:	681b      	ldr	r3, [r3, #0]
 800cb62:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cb64:	68fb      	ldr	r3, [r7, #12]
 800cb66:	e853 3f00 	ldrex	r3, [r3]
 800cb6a:	60bb      	str	r3, [r7, #8]
   return(result);
 800cb6c:	68bb      	ldr	r3, [r7, #8]
 800cb6e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800cb72:	633b      	str	r3, [r7, #48]	; 0x30
 800cb74:	687b      	ldr	r3, [r7, #4]
 800cb76:	681b      	ldr	r3, [r3, #0]
 800cb78:	461a      	mov	r2, r3
 800cb7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cb7c:	61bb      	str	r3, [r7, #24]
 800cb7e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cb80:	6979      	ldr	r1, [r7, #20]
 800cb82:	69ba      	ldr	r2, [r7, #24]
 800cb84:	e841 2300 	strex	r3, r2, [r1]
 800cb88:	613b      	str	r3, [r7, #16]
   return(result);
 800cb8a:	693b      	ldr	r3, [r7, #16]
 800cb8c:	2b00      	cmp	r3, #0
 800cb8e:	d1e6      	bne.n	800cb5e <UART_TxISR_16BIT_FIFOEN+0x5c>

        break; /* force exit loop */
 800cb90:	e026      	b.n	800cbe0 <UART_TxISR_16BIT_FIFOEN+0xde>
      }
      else if (READ_BIT(huart->Instance->ISR, USART_ISR_TXE_TXFNF) != 0U)
 800cb92:	687b      	ldr	r3, [r7, #4]
 800cb94:	681b      	ldr	r3, [r3, #0]
 800cb96:	69db      	ldr	r3, [r3, #28]
 800cb98:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800cb9c:	2b00      	cmp	r3, #0
 800cb9e:	d018      	beq.n	800cbd2 <UART_TxISR_16BIT_FIFOEN+0xd0>
      {
        tmp = (const uint16_t *) huart->pTxBuffPtr;
 800cba0:	687b      	ldr	r3, [r7, #4]
 800cba2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800cba4:	63bb      	str	r3, [r7, #56]	; 0x38
        huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 800cba6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cba8:	881b      	ldrh	r3, [r3, #0]
 800cbaa:	461a      	mov	r2, r3
 800cbac:	687b      	ldr	r3, [r7, #4]
 800cbae:	681b      	ldr	r3, [r3, #0]
 800cbb0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800cbb4:	629a      	str	r2, [r3, #40]	; 0x28
        huart->pTxBuffPtr += 2U;
 800cbb6:	687b      	ldr	r3, [r7, #4]
 800cbb8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800cbba:	1c9a      	adds	r2, r3, #2
 800cbbc:	687b      	ldr	r3, [r7, #4]
 800cbbe:	651a      	str	r2, [r3, #80]	; 0x50
        huart->TxXferCount--;
 800cbc0:	687b      	ldr	r3, [r7, #4]
 800cbc2:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800cbc6:	b29b      	uxth	r3, r3
 800cbc8:	3b01      	subs	r3, #1
 800cbca:	b29a      	uxth	r2, r3
 800cbcc:	687b      	ldr	r3, [r7, #4]
 800cbce:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 800cbd2:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800cbd4:	3b01      	subs	r3, #1
 800cbd6:	87fb      	strh	r3, [r7, #62]	; 0x3e
 800cbd8:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800cbda:	2b00      	cmp	r3, #0
 800cbdc:	d19f      	bne.n	800cb1e <UART_TxISR_16BIT_FIFOEN+0x1c>
      {
        /* Nothing to do */
      }
    }
  }
}
 800cbde:	e7ff      	b.n	800cbe0 <UART_TxISR_16BIT_FIFOEN+0xde>
 800cbe0:	bf00      	nop
 800cbe2:	3744      	adds	r7, #68	; 0x44
 800cbe4:	46bd      	mov	sp, r7
 800cbe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cbea:	4770      	bx	lr

0800cbec <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800cbec:	b580      	push	{r7, lr}
 800cbee:	b088      	sub	sp, #32
 800cbf0:	af00      	add	r7, sp, #0
 800cbf2:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800cbf4:	687b      	ldr	r3, [r7, #4]
 800cbf6:	681b      	ldr	r3, [r3, #0]
 800cbf8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cbfa:	68fb      	ldr	r3, [r7, #12]
 800cbfc:	e853 3f00 	ldrex	r3, [r3]
 800cc00:	60bb      	str	r3, [r7, #8]
   return(result);
 800cc02:	68bb      	ldr	r3, [r7, #8]
 800cc04:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800cc08:	61fb      	str	r3, [r7, #28]
 800cc0a:	687b      	ldr	r3, [r7, #4]
 800cc0c:	681b      	ldr	r3, [r3, #0]
 800cc0e:	461a      	mov	r2, r3
 800cc10:	69fb      	ldr	r3, [r7, #28]
 800cc12:	61bb      	str	r3, [r7, #24]
 800cc14:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cc16:	6979      	ldr	r1, [r7, #20]
 800cc18:	69ba      	ldr	r2, [r7, #24]
 800cc1a:	e841 2300 	strex	r3, r2, [r1]
 800cc1e:	613b      	str	r3, [r7, #16]
   return(result);
 800cc20:	693b      	ldr	r3, [r7, #16]
 800cc22:	2b00      	cmp	r3, #0
 800cc24:	d1e6      	bne.n	800cbf4 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800cc26:	687b      	ldr	r3, [r7, #4]
 800cc28:	2220      	movs	r2, #32
 800cc2a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800cc2e:	687b      	ldr	r3, [r7, #4]
 800cc30:	2200      	movs	r2, #0
 800cc32:	679a      	str	r2, [r3, #120]	; 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800cc34:	6878      	ldr	r0, [r7, #4]
 800cc36:	f7f3 fd43 	bl	80006c0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800cc3a:	bf00      	nop
 800cc3c:	3720      	adds	r7, #32
 800cc3e:	46bd      	mov	sp, r7
 800cc40:	bd80      	pop	{r7, pc}
	...

0800cc44 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 800cc44:	b580      	push	{r7, lr}
 800cc46:	b09c      	sub	sp, #112	; 0x70
 800cc48:	af00      	add	r7, sp, #0
 800cc4a:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 800cc4c:	687b      	ldr	r3, [r7, #4]
 800cc4e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800cc52:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800cc56:	687b      	ldr	r3, [r7, #4]
 800cc58:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800cc5c:	2b22      	cmp	r3, #34	; 0x22
 800cc5e:	f040 80be 	bne.w	800cdde <UART_RxISR_8BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800cc62:	687b      	ldr	r3, [r7, #4]
 800cc64:	681b      	ldr	r3, [r3, #0]
 800cc66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cc68:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800cc6c:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 800cc70:	b2d9      	uxtb	r1, r3
 800cc72:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 800cc76:	b2da      	uxtb	r2, r3
 800cc78:	687b      	ldr	r3, [r7, #4]
 800cc7a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800cc7c:	400a      	ands	r2, r1
 800cc7e:	b2d2      	uxtb	r2, r2
 800cc80:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 800cc82:	687b      	ldr	r3, [r7, #4]
 800cc84:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800cc86:	1c5a      	adds	r2, r3, #1
 800cc88:	687b      	ldr	r3, [r7, #4]
 800cc8a:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 800cc8c:	687b      	ldr	r3, [r7, #4]
 800cc8e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800cc92:	b29b      	uxth	r3, r3
 800cc94:	3b01      	subs	r3, #1
 800cc96:	b29a      	uxth	r2, r3
 800cc98:	687b      	ldr	r3, [r7, #4]
 800cc9a:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 800cc9e:	687b      	ldr	r3, [r7, #4]
 800cca0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800cca4:	b29b      	uxth	r3, r3
 800cca6:	2b00      	cmp	r3, #0
 800cca8:	f040 80a1 	bne.w	800cdee <UART_RxISR_8BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800ccac:	687b      	ldr	r3, [r7, #4]
 800ccae:	681b      	ldr	r3, [r3, #0]
 800ccb0:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ccb2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ccb4:	e853 3f00 	ldrex	r3, [r3]
 800ccb8:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800ccba:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ccbc:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800ccc0:	66bb      	str	r3, [r7, #104]	; 0x68
 800ccc2:	687b      	ldr	r3, [r7, #4]
 800ccc4:	681b      	ldr	r3, [r3, #0]
 800ccc6:	461a      	mov	r2, r3
 800ccc8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800ccca:	65bb      	str	r3, [r7, #88]	; 0x58
 800cccc:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ccce:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800ccd0:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800ccd2:	e841 2300 	strex	r3, r2, [r1]
 800ccd6:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800ccd8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ccda:	2b00      	cmp	r3, #0
 800ccdc:	d1e6      	bne.n	800ccac <UART_RxISR_8BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ccde:	687b      	ldr	r3, [r7, #4]
 800cce0:	681b      	ldr	r3, [r3, #0]
 800cce2:	3308      	adds	r3, #8
 800cce4:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cce6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cce8:	e853 3f00 	ldrex	r3, [r3]
 800ccec:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800ccee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ccf0:	f023 0301 	bic.w	r3, r3, #1
 800ccf4:	667b      	str	r3, [r7, #100]	; 0x64
 800ccf6:	687b      	ldr	r3, [r7, #4]
 800ccf8:	681b      	ldr	r3, [r3, #0]
 800ccfa:	3308      	adds	r3, #8
 800ccfc:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800ccfe:	647a      	str	r2, [r7, #68]	; 0x44
 800cd00:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cd02:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800cd04:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800cd06:	e841 2300 	strex	r3, r2, [r1]
 800cd0a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800cd0c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800cd0e:	2b00      	cmp	r3, #0
 800cd10:	d1e5      	bne.n	800ccde <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800cd12:	687b      	ldr	r3, [r7, #4]
 800cd14:	2220      	movs	r2, #32
 800cd16:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800cd1a:	687b      	ldr	r3, [r7, #4]
 800cd1c:	2200      	movs	r2, #0
 800cd1e:	675a      	str	r2, [r3, #116]	; 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800cd20:	687b      	ldr	r3, [r7, #4]
 800cd22:	2200      	movs	r2, #0
 800cd24:	671a      	str	r2, [r3, #112]	; 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800cd26:	687b      	ldr	r3, [r7, #4]
 800cd28:	681b      	ldr	r3, [r3, #0]
 800cd2a:	4a33      	ldr	r2, [pc, #204]	; (800cdf8 <UART_RxISR_8BIT+0x1b4>)
 800cd2c:	4293      	cmp	r3, r2
 800cd2e:	d01f      	beq.n	800cd70 <UART_RxISR_8BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800cd30:	687b      	ldr	r3, [r7, #4]
 800cd32:	681b      	ldr	r3, [r3, #0]
 800cd34:	685b      	ldr	r3, [r3, #4]
 800cd36:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800cd3a:	2b00      	cmp	r3, #0
 800cd3c:	d018      	beq.n	800cd70 <UART_RxISR_8BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800cd3e:	687b      	ldr	r3, [r7, #4]
 800cd40:	681b      	ldr	r3, [r3, #0]
 800cd42:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cd44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cd46:	e853 3f00 	ldrex	r3, [r3]
 800cd4a:	623b      	str	r3, [r7, #32]
   return(result);
 800cd4c:	6a3b      	ldr	r3, [r7, #32]
 800cd4e:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800cd52:	663b      	str	r3, [r7, #96]	; 0x60
 800cd54:	687b      	ldr	r3, [r7, #4]
 800cd56:	681b      	ldr	r3, [r3, #0]
 800cd58:	461a      	mov	r2, r3
 800cd5a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800cd5c:	633b      	str	r3, [r7, #48]	; 0x30
 800cd5e:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cd60:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800cd62:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800cd64:	e841 2300 	strex	r3, r2, [r1]
 800cd68:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800cd6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cd6c:	2b00      	cmp	r3, #0
 800cd6e:	d1e6      	bne.n	800cd3e <UART_RxISR_8BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800cd70:	687b      	ldr	r3, [r7, #4]
 800cd72:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800cd74:	2b01      	cmp	r3, #1
 800cd76:	d12e      	bne.n	800cdd6 <UART_RxISR_8BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800cd78:	687b      	ldr	r3, [r7, #4]
 800cd7a:	2200      	movs	r2, #0
 800cd7c:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800cd7e:	687b      	ldr	r3, [r7, #4]
 800cd80:	681b      	ldr	r3, [r3, #0]
 800cd82:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cd84:	693b      	ldr	r3, [r7, #16]
 800cd86:	e853 3f00 	ldrex	r3, [r3]
 800cd8a:	60fb      	str	r3, [r7, #12]
   return(result);
 800cd8c:	68fb      	ldr	r3, [r7, #12]
 800cd8e:	f023 0310 	bic.w	r3, r3, #16
 800cd92:	65fb      	str	r3, [r7, #92]	; 0x5c
 800cd94:	687b      	ldr	r3, [r7, #4]
 800cd96:	681b      	ldr	r3, [r3, #0]
 800cd98:	461a      	mov	r2, r3
 800cd9a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800cd9c:	61fb      	str	r3, [r7, #28]
 800cd9e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cda0:	69b9      	ldr	r1, [r7, #24]
 800cda2:	69fa      	ldr	r2, [r7, #28]
 800cda4:	e841 2300 	strex	r3, r2, [r1]
 800cda8:	617b      	str	r3, [r7, #20]
   return(result);
 800cdaa:	697b      	ldr	r3, [r7, #20]
 800cdac:	2b00      	cmp	r3, #0
 800cdae:	d1e6      	bne.n	800cd7e <UART_RxISR_8BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800cdb0:	687b      	ldr	r3, [r7, #4]
 800cdb2:	681b      	ldr	r3, [r3, #0]
 800cdb4:	69db      	ldr	r3, [r3, #28]
 800cdb6:	f003 0310 	and.w	r3, r3, #16
 800cdba:	2b10      	cmp	r3, #16
 800cdbc:	d103      	bne.n	800cdc6 <UART_RxISR_8BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800cdbe:	687b      	ldr	r3, [r7, #4]
 800cdc0:	681b      	ldr	r3, [r3, #0]
 800cdc2:	2210      	movs	r2, #16
 800cdc4:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800cdc6:	687b      	ldr	r3, [r7, #4]
 800cdc8:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800cdcc:	4619      	mov	r1, r3
 800cdce:	6878      	ldr	r0, [r7, #4]
 800cdd0:	f7fe fca4 	bl	800b71c <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800cdd4:	e00b      	b.n	800cdee <UART_RxISR_8BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 800cdd6:	6878      	ldr	r0, [r7, #4]
 800cdd8:	f7f3 fc5c 	bl	8000694 <HAL_UART_RxCpltCallback>
}
 800cddc:	e007      	b.n	800cdee <UART_RxISR_8BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800cdde:	687b      	ldr	r3, [r7, #4]
 800cde0:	681b      	ldr	r3, [r3, #0]
 800cde2:	699a      	ldr	r2, [r3, #24]
 800cde4:	687b      	ldr	r3, [r7, #4]
 800cde6:	681b      	ldr	r3, [r3, #0]
 800cde8:	f042 0208 	orr.w	r2, r2, #8
 800cdec:	619a      	str	r2, [r3, #24]
}
 800cdee:	bf00      	nop
 800cdf0:	3770      	adds	r7, #112	; 0x70
 800cdf2:	46bd      	mov	sp, r7
 800cdf4:	bd80      	pop	{r7, pc}
 800cdf6:	bf00      	nop
 800cdf8:	58000c00 	.word	0x58000c00

0800cdfc <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 800cdfc:	b580      	push	{r7, lr}
 800cdfe:	b09c      	sub	sp, #112	; 0x70
 800ce00:	af00      	add	r7, sp, #0
 800ce02:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 800ce04:	687b      	ldr	r3, [r7, #4]
 800ce06:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800ce0a:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800ce0e:	687b      	ldr	r3, [r7, #4]
 800ce10:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800ce14:	2b22      	cmp	r3, #34	; 0x22
 800ce16:	f040 80be 	bne.w	800cf96 <UART_RxISR_16BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800ce1a:	687b      	ldr	r3, [r7, #4]
 800ce1c:	681b      	ldr	r3, [r3, #0]
 800ce1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ce20:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 800ce24:	687b      	ldr	r3, [r7, #4]
 800ce26:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ce28:	66bb      	str	r3, [r7, #104]	; 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 800ce2a:	f8b7 206c 	ldrh.w	r2, [r7, #108]	; 0x6c
 800ce2e:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 800ce32:	4013      	ands	r3, r2
 800ce34:	b29a      	uxth	r2, r3
 800ce36:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800ce38:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 800ce3a:	687b      	ldr	r3, [r7, #4]
 800ce3c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ce3e:	1c9a      	adds	r2, r3, #2
 800ce40:	687b      	ldr	r3, [r7, #4]
 800ce42:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 800ce44:	687b      	ldr	r3, [r7, #4]
 800ce46:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800ce4a:	b29b      	uxth	r3, r3
 800ce4c:	3b01      	subs	r3, #1
 800ce4e:	b29a      	uxth	r2, r3
 800ce50:	687b      	ldr	r3, [r7, #4]
 800ce52:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 800ce56:	687b      	ldr	r3, [r7, #4]
 800ce58:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800ce5c:	b29b      	uxth	r3, r3
 800ce5e:	2b00      	cmp	r3, #0
 800ce60:	f040 80a1 	bne.w	800cfa6 <UART_RxISR_16BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800ce64:	687b      	ldr	r3, [r7, #4]
 800ce66:	681b      	ldr	r3, [r3, #0]
 800ce68:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ce6a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ce6c:	e853 3f00 	ldrex	r3, [r3]
 800ce70:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 800ce72:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ce74:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800ce78:	667b      	str	r3, [r7, #100]	; 0x64
 800ce7a:	687b      	ldr	r3, [r7, #4]
 800ce7c:	681b      	ldr	r3, [r3, #0]
 800ce7e:	461a      	mov	r2, r3
 800ce80:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800ce82:	657b      	str	r3, [r7, #84]	; 0x54
 800ce84:	653a      	str	r2, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ce86:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800ce88:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800ce8a:	e841 2300 	strex	r3, r2, [r1]
 800ce8e:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800ce90:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ce92:	2b00      	cmp	r3, #0
 800ce94:	d1e6      	bne.n	800ce64 <UART_RxISR_16BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ce96:	687b      	ldr	r3, [r7, #4]
 800ce98:	681b      	ldr	r3, [r3, #0]
 800ce9a:	3308      	adds	r3, #8
 800ce9c:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ce9e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cea0:	e853 3f00 	ldrex	r3, [r3]
 800cea4:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800cea6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cea8:	f023 0301 	bic.w	r3, r3, #1
 800ceac:	663b      	str	r3, [r7, #96]	; 0x60
 800ceae:	687b      	ldr	r3, [r7, #4]
 800ceb0:	681b      	ldr	r3, [r3, #0]
 800ceb2:	3308      	adds	r3, #8
 800ceb4:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800ceb6:	643a      	str	r2, [r7, #64]	; 0x40
 800ceb8:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ceba:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800cebc:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800cebe:	e841 2300 	strex	r3, r2, [r1]
 800cec2:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800cec4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cec6:	2b00      	cmp	r3, #0
 800cec8:	d1e5      	bne.n	800ce96 <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800ceca:	687b      	ldr	r3, [r7, #4]
 800cecc:	2220      	movs	r2, #32
 800cece:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800ced2:	687b      	ldr	r3, [r7, #4]
 800ced4:	2200      	movs	r2, #0
 800ced6:	675a      	str	r2, [r3, #116]	; 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800ced8:	687b      	ldr	r3, [r7, #4]
 800ceda:	2200      	movs	r2, #0
 800cedc:	671a      	str	r2, [r3, #112]	; 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800cede:	687b      	ldr	r3, [r7, #4]
 800cee0:	681b      	ldr	r3, [r3, #0]
 800cee2:	4a33      	ldr	r2, [pc, #204]	; (800cfb0 <UART_RxISR_16BIT+0x1b4>)
 800cee4:	4293      	cmp	r3, r2
 800cee6:	d01f      	beq.n	800cf28 <UART_RxISR_16BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800cee8:	687b      	ldr	r3, [r7, #4]
 800ceea:	681b      	ldr	r3, [r3, #0]
 800ceec:	685b      	ldr	r3, [r3, #4]
 800ceee:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800cef2:	2b00      	cmp	r3, #0
 800cef4:	d018      	beq.n	800cf28 <UART_RxISR_16BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800cef6:	687b      	ldr	r3, [r7, #4]
 800cef8:	681b      	ldr	r3, [r3, #0]
 800cefa:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cefc:	6a3b      	ldr	r3, [r7, #32]
 800cefe:	e853 3f00 	ldrex	r3, [r3]
 800cf02:	61fb      	str	r3, [r7, #28]
   return(result);
 800cf04:	69fb      	ldr	r3, [r7, #28]
 800cf06:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800cf0a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800cf0c:	687b      	ldr	r3, [r7, #4]
 800cf0e:	681b      	ldr	r3, [r3, #0]
 800cf10:	461a      	mov	r2, r3
 800cf12:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800cf14:	62fb      	str	r3, [r7, #44]	; 0x2c
 800cf16:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cf18:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800cf1a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800cf1c:	e841 2300 	strex	r3, r2, [r1]
 800cf20:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800cf22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cf24:	2b00      	cmp	r3, #0
 800cf26:	d1e6      	bne.n	800cef6 <UART_RxISR_16BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800cf28:	687b      	ldr	r3, [r7, #4]
 800cf2a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800cf2c:	2b01      	cmp	r3, #1
 800cf2e:	d12e      	bne.n	800cf8e <UART_RxISR_16BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800cf30:	687b      	ldr	r3, [r7, #4]
 800cf32:	2200      	movs	r2, #0
 800cf34:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800cf36:	687b      	ldr	r3, [r7, #4]
 800cf38:	681b      	ldr	r3, [r3, #0]
 800cf3a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cf3c:	68fb      	ldr	r3, [r7, #12]
 800cf3e:	e853 3f00 	ldrex	r3, [r3]
 800cf42:	60bb      	str	r3, [r7, #8]
   return(result);
 800cf44:	68bb      	ldr	r3, [r7, #8]
 800cf46:	f023 0310 	bic.w	r3, r3, #16
 800cf4a:	65bb      	str	r3, [r7, #88]	; 0x58
 800cf4c:	687b      	ldr	r3, [r7, #4]
 800cf4e:	681b      	ldr	r3, [r3, #0]
 800cf50:	461a      	mov	r2, r3
 800cf52:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800cf54:	61bb      	str	r3, [r7, #24]
 800cf56:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cf58:	6979      	ldr	r1, [r7, #20]
 800cf5a:	69ba      	ldr	r2, [r7, #24]
 800cf5c:	e841 2300 	strex	r3, r2, [r1]
 800cf60:	613b      	str	r3, [r7, #16]
   return(result);
 800cf62:	693b      	ldr	r3, [r7, #16]
 800cf64:	2b00      	cmp	r3, #0
 800cf66:	d1e6      	bne.n	800cf36 <UART_RxISR_16BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800cf68:	687b      	ldr	r3, [r7, #4]
 800cf6a:	681b      	ldr	r3, [r3, #0]
 800cf6c:	69db      	ldr	r3, [r3, #28]
 800cf6e:	f003 0310 	and.w	r3, r3, #16
 800cf72:	2b10      	cmp	r3, #16
 800cf74:	d103      	bne.n	800cf7e <UART_RxISR_16BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800cf76:	687b      	ldr	r3, [r7, #4]
 800cf78:	681b      	ldr	r3, [r3, #0]
 800cf7a:	2210      	movs	r2, #16
 800cf7c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800cf7e:	687b      	ldr	r3, [r7, #4]
 800cf80:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800cf84:	4619      	mov	r1, r3
 800cf86:	6878      	ldr	r0, [r7, #4]
 800cf88:	f7fe fbc8 	bl	800b71c <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800cf8c:	e00b      	b.n	800cfa6 <UART_RxISR_16BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 800cf8e:	6878      	ldr	r0, [r7, #4]
 800cf90:	f7f3 fb80 	bl	8000694 <HAL_UART_RxCpltCallback>
}
 800cf94:	e007      	b.n	800cfa6 <UART_RxISR_16BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800cf96:	687b      	ldr	r3, [r7, #4]
 800cf98:	681b      	ldr	r3, [r3, #0]
 800cf9a:	699a      	ldr	r2, [r3, #24]
 800cf9c:	687b      	ldr	r3, [r7, #4]
 800cf9e:	681b      	ldr	r3, [r3, #0]
 800cfa0:	f042 0208 	orr.w	r2, r2, #8
 800cfa4:	619a      	str	r2, [r3, #24]
}
 800cfa6:	bf00      	nop
 800cfa8:	3770      	adds	r7, #112	; 0x70
 800cfaa:	46bd      	mov	sp, r7
 800cfac:	bd80      	pop	{r7, pc}
 800cfae:	bf00      	nop
 800cfb0:	58000c00 	.word	0x58000c00

0800cfb4 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800cfb4:	b580      	push	{r7, lr}
 800cfb6:	b0ac      	sub	sp, #176	; 0xb0
 800cfb8:	af00      	add	r7, sp, #0
 800cfba:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 800cfbc:	687b      	ldr	r3, [r7, #4]
 800cfbe:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800cfc2:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 800cfc6:	687b      	ldr	r3, [r7, #4]
 800cfc8:	681b      	ldr	r3, [r3, #0]
 800cfca:	69db      	ldr	r3, [r3, #28]
 800cfcc:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 800cfd0:	687b      	ldr	r3, [r7, #4]
 800cfd2:	681b      	ldr	r3, [r3, #0]
 800cfd4:	681b      	ldr	r3, [r3, #0]
 800cfd6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 800cfda:	687b      	ldr	r3, [r7, #4]
 800cfdc:	681b      	ldr	r3, [r3, #0]
 800cfde:	689b      	ldr	r3, [r3, #8]
 800cfe0:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800cfe4:	687b      	ldr	r3, [r7, #4]
 800cfe6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800cfea:	2b22      	cmp	r3, #34	; 0x22
 800cfec:	f040 8180 	bne.w	800d2f0 <UART_RxISR_8BIT_FIFOEN+0x33c>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 800cff0:	687b      	ldr	r3, [r7, #4]
 800cff2:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800cff6:	f8a7 309e 	strh.w	r3, [r7, #158]	; 0x9e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800cffa:	e123      	b.n	800d244 <UART_RxISR_8BIT_FIFOEN+0x290>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800cffc:	687b      	ldr	r3, [r7, #4]
 800cffe:	681b      	ldr	r3, [r3, #0]
 800d000:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d002:	f8a7 309c 	strh.w	r3, [r7, #156]	; 0x9c
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800d006:	f8b7 309c 	ldrh.w	r3, [r7, #156]	; 0x9c
 800d00a:	b2d9      	uxtb	r1, r3
 800d00c:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 800d010:	b2da      	uxtb	r2, r3
 800d012:	687b      	ldr	r3, [r7, #4]
 800d014:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800d016:	400a      	ands	r2, r1
 800d018:	b2d2      	uxtb	r2, r2
 800d01a:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 800d01c:	687b      	ldr	r3, [r7, #4]
 800d01e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800d020:	1c5a      	adds	r2, r3, #1
 800d022:	687b      	ldr	r3, [r7, #4]
 800d024:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 800d026:	687b      	ldr	r3, [r7, #4]
 800d028:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800d02c:	b29b      	uxth	r3, r3
 800d02e:	3b01      	subs	r3, #1
 800d030:	b29a      	uxth	r2, r3
 800d032:	687b      	ldr	r3, [r7, #4]
 800d034:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 800d038:	687b      	ldr	r3, [r7, #4]
 800d03a:	681b      	ldr	r3, [r3, #0]
 800d03c:	69db      	ldr	r3, [r3, #28]
 800d03e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 800d042:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800d046:	f003 0307 	and.w	r3, r3, #7
 800d04a:	2b00      	cmp	r3, #0
 800d04c:	d053      	beq.n	800d0f6 <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800d04e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800d052:	f003 0301 	and.w	r3, r3, #1
 800d056:	2b00      	cmp	r3, #0
 800d058:	d011      	beq.n	800d07e <UART_RxISR_8BIT_FIFOEN+0xca>
 800d05a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800d05e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800d062:	2b00      	cmp	r3, #0
 800d064:	d00b      	beq.n	800d07e <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800d066:	687b      	ldr	r3, [r7, #4]
 800d068:	681b      	ldr	r3, [r3, #0]
 800d06a:	2201      	movs	r2, #1
 800d06c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 800d06e:	687b      	ldr	r3, [r7, #4]
 800d070:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d074:	f043 0201 	orr.w	r2, r3, #1
 800d078:	687b      	ldr	r3, [r7, #4]
 800d07a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800d07e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800d082:	f003 0302 	and.w	r3, r3, #2
 800d086:	2b00      	cmp	r3, #0
 800d088:	d011      	beq.n	800d0ae <UART_RxISR_8BIT_FIFOEN+0xfa>
 800d08a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800d08e:	f003 0301 	and.w	r3, r3, #1
 800d092:	2b00      	cmp	r3, #0
 800d094:	d00b      	beq.n	800d0ae <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800d096:	687b      	ldr	r3, [r7, #4]
 800d098:	681b      	ldr	r3, [r3, #0]
 800d09a:	2202      	movs	r2, #2
 800d09c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 800d09e:	687b      	ldr	r3, [r7, #4]
 800d0a0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d0a4:	f043 0204 	orr.w	r2, r3, #4
 800d0a8:	687b      	ldr	r3, [r7, #4]
 800d0aa:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800d0ae:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800d0b2:	f003 0304 	and.w	r3, r3, #4
 800d0b6:	2b00      	cmp	r3, #0
 800d0b8:	d011      	beq.n	800d0de <UART_RxISR_8BIT_FIFOEN+0x12a>
 800d0ba:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800d0be:	f003 0301 	and.w	r3, r3, #1
 800d0c2:	2b00      	cmp	r3, #0
 800d0c4:	d00b      	beq.n	800d0de <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800d0c6:	687b      	ldr	r3, [r7, #4]
 800d0c8:	681b      	ldr	r3, [r3, #0]
 800d0ca:	2204      	movs	r2, #4
 800d0cc:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 800d0ce:	687b      	ldr	r3, [r7, #4]
 800d0d0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d0d4:	f043 0202 	orr.w	r2, r3, #2
 800d0d8:	687b      	ldr	r3, [r7, #4]
 800d0da:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800d0de:	687b      	ldr	r3, [r7, #4]
 800d0e0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d0e4:	2b00      	cmp	r3, #0
 800d0e6:	d006      	beq.n	800d0f6 <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800d0e8:	6878      	ldr	r0, [r7, #4]
 800d0ea:	f7fe fb0d 	bl	800b708 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 800d0ee:	687b      	ldr	r3, [r7, #4]
 800d0f0:	2200      	movs	r2, #0
 800d0f2:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 800d0f6:	687b      	ldr	r3, [r7, #4]
 800d0f8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800d0fc:	b29b      	uxth	r3, r3
 800d0fe:	2b00      	cmp	r3, #0
 800d100:	f040 80a0 	bne.w	800d244 <UART_RxISR_8BIT_FIFOEN+0x290>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800d104:	687b      	ldr	r3, [r7, #4]
 800d106:	681b      	ldr	r3, [r3, #0]
 800d108:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d10a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800d10c:	e853 3f00 	ldrex	r3, [r3]
 800d110:	66fb      	str	r3, [r7, #108]	; 0x6c
   return(result);
 800d112:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d114:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800d118:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800d11c:	687b      	ldr	r3, [r7, #4]
 800d11e:	681b      	ldr	r3, [r3, #0]
 800d120:	461a      	mov	r2, r3
 800d122:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800d126:	67fb      	str	r3, [r7, #124]	; 0x7c
 800d128:	67ba      	str	r2, [r7, #120]	; 0x78
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d12a:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 800d12c:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 800d12e:	e841 2300 	strex	r3, r2, [r1]
 800d132:	677b      	str	r3, [r7, #116]	; 0x74
   return(result);
 800d134:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800d136:	2b00      	cmp	r3, #0
 800d138:	d1e4      	bne.n	800d104 <UART_RxISR_8BIT_FIFOEN+0x150>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800d13a:	687b      	ldr	r3, [r7, #4]
 800d13c:	681b      	ldr	r3, [r3, #0]
 800d13e:	3308      	adds	r3, #8
 800d140:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d142:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800d144:	e853 3f00 	ldrex	r3, [r3]
 800d148:	65bb      	str	r3, [r7, #88]	; 0x58
   return(result);
 800d14a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800d14c:	4b6e      	ldr	r3, [pc, #440]	; (800d308 <UART_RxISR_8BIT_FIFOEN+0x354>)
 800d14e:	4013      	ands	r3, r2
 800d150:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800d154:	687b      	ldr	r3, [r7, #4]
 800d156:	681b      	ldr	r3, [r3, #0]
 800d158:	3308      	adds	r3, #8
 800d15a:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800d15e:	66ba      	str	r2, [r7, #104]	; 0x68
 800d160:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d162:	6e79      	ldr	r1, [r7, #100]	; 0x64
 800d164:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800d166:	e841 2300 	strex	r3, r2, [r1]
 800d16a:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 800d16c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800d16e:	2b00      	cmp	r3, #0
 800d170:	d1e3      	bne.n	800d13a <UART_RxISR_8BIT_FIFOEN+0x186>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800d172:	687b      	ldr	r3, [r7, #4]
 800d174:	2220      	movs	r2, #32
 800d176:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800d17a:	687b      	ldr	r3, [r7, #4]
 800d17c:	2200      	movs	r2, #0
 800d17e:	675a      	str	r2, [r3, #116]	; 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 800d180:	687b      	ldr	r3, [r7, #4]
 800d182:	2200      	movs	r2, #0
 800d184:	671a      	str	r2, [r3, #112]	; 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800d186:	687b      	ldr	r3, [r7, #4]
 800d188:	681b      	ldr	r3, [r3, #0]
 800d18a:	4a60      	ldr	r2, [pc, #384]	; (800d30c <UART_RxISR_8BIT_FIFOEN+0x358>)
 800d18c:	4293      	cmp	r3, r2
 800d18e:	d021      	beq.n	800d1d4 <UART_RxISR_8BIT_FIFOEN+0x220>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800d190:	687b      	ldr	r3, [r7, #4]
 800d192:	681b      	ldr	r3, [r3, #0]
 800d194:	685b      	ldr	r3, [r3, #4]
 800d196:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800d19a:	2b00      	cmp	r3, #0
 800d19c:	d01a      	beq.n	800d1d4 <UART_RxISR_8BIT_FIFOEN+0x220>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800d19e:	687b      	ldr	r3, [r7, #4]
 800d1a0:	681b      	ldr	r3, [r3, #0]
 800d1a2:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d1a4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800d1a6:	e853 3f00 	ldrex	r3, [r3]
 800d1aa:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 800d1ac:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800d1ae:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800d1b2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800d1b6:	687b      	ldr	r3, [r7, #4]
 800d1b8:	681b      	ldr	r3, [r3, #0]
 800d1ba:	461a      	mov	r2, r3
 800d1bc:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800d1c0:	657b      	str	r3, [r7, #84]	; 0x54
 800d1c2:	653a      	str	r2, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d1c4:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800d1c6:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800d1c8:	e841 2300 	strex	r3, r2, [r1]
 800d1cc:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800d1ce:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d1d0:	2b00      	cmp	r3, #0
 800d1d2:	d1e4      	bne.n	800d19e <UART_RxISR_8BIT_FIFOEN+0x1ea>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800d1d4:	687b      	ldr	r3, [r7, #4]
 800d1d6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d1d8:	2b01      	cmp	r3, #1
 800d1da:	d130      	bne.n	800d23e <UART_RxISR_8BIT_FIFOEN+0x28a>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800d1dc:	687b      	ldr	r3, [r7, #4]
 800d1de:	2200      	movs	r2, #0
 800d1e0:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800d1e2:	687b      	ldr	r3, [r7, #4]
 800d1e4:	681b      	ldr	r3, [r3, #0]
 800d1e6:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d1e8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d1ea:	e853 3f00 	ldrex	r3, [r3]
 800d1ee:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800d1f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d1f2:	f023 0310 	bic.w	r3, r3, #16
 800d1f6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800d1fa:	687b      	ldr	r3, [r7, #4]
 800d1fc:	681b      	ldr	r3, [r3, #0]
 800d1fe:	461a      	mov	r2, r3
 800d200:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800d204:	643b      	str	r3, [r7, #64]	; 0x40
 800d206:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d208:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800d20a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800d20c:	e841 2300 	strex	r3, r2, [r1]
 800d210:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800d212:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d214:	2b00      	cmp	r3, #0
 800d216:	d1e4      	bne.n	800d1e2 <UART_RxISR_8BIT_FIFOEN+0x22e>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800d218:	687b      	ldr	r3, [r7, #4]
 800d21a:	681b      	ldr	r3, [r3, #0]
 800d21c:	69db      	ldr	r3, [r3, #28]
 800d21e:	f003 0310 	and.w	r3, r3, #16
 800d222:	2b10      	cmp	r3, #16
 800d224:	d103      	bne.n	800d22e <UART_RxISR_8BIT_FIFOEN+0x27a>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800d226:	687b      	ldr	r3, [r7, #4]
 800d228:	681b      	ldr	r3, [r3, #0]
 800d22a:	2210      	movs	r2, #16
 800d22c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800d22e:	687b      	ldr	r3, [r7, #4]
 800d230:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800d234:	4619      	mov	r1, r3
 800d236:	6878      	ldr	r0, [r7, #4]
 800d238:	f7fe fa70 	bl	800b71c <HAL_UARTEx_RxEventCallback>
 800d23c:	e002      	b.n	800d244 <UART_RxISR_8BIT_FIFOEN+0x290>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 800d23e:	6878      	ldr	r0, [r7, #4]
 800d240:	f7f3 fa28 	bl	8000694 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800d244:	f8b7 309e 	ldrh.w	r3, [r7, #158]	; 0x9e
 800d248:	2b00      	cmp	r3, #0
 800d24a:	d006      	beq.n	800d25a <UART_RxISR_8BIT_FIFOEN+0x2a6>
 800d24c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800d250:	f003 0320 	and.w	r3, r3, #32
 800d254:	2b00      	cmp	r3, #0
 800d256:	f47f aed1 	bne.w	800cffc <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 800d25a:	687b      	ldr	r3, [r7, #4]
 800d25c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800d260:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800d264:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 800d268:	2b00      	cmp	r3, #0
 800d26a:	d049      	beq.n	800d300 <UART_RxISR_8BIT_FIFOEN+0x34c>
 800d26c:	687b      	ldr	r3, [r7, #4]
 800d26e:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800d272:	f8b7 208a 	ldrh.w	r2, [r7, #138]	; 0x8a
 800d276:	429a      	cmp	r2, r3
 800d278:	d242      	bcs.n	800d300 <UART_RxISR_8BIT_FIFOEN+0x34c>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800d27a:	687b      	ldr	r3, [r7, #4]
 800d27c:	681b      	ldr	r3, [r3, #0]
 800d27e:	3308      	adds	r3, #8
 800d280:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d282:	6a3b      	ldr	r3, [r7, #32]
 800d284:	e853 3f00 	ldrex	r3, [r3]
 800d288:	61fb      	str	r3, [r7, #28]
   return(result);
 800d28a:	69fb      	ldr	r3, [r7, #28]
 800d28c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800d290:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800d294:	687b      	ldr	r3, [r7, #4]
 800d296:	681b      	ldr	r3, [r3, #0]
 800d298:	3308      	adds	r3, #8
 800d29a:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 800d29e:	62fa      	str	r2, [r7, #44]	; 0x2c
 800d2a0:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d2a2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800d2a4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800d2a6:	e841 2300 	strex	r3, r2, [r1]
 800d2aa:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800d2ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d2ae:	2b00      	cmp	r3, #0
 800d2b0:	d1e3      	bne.n	800d27a <UART_RxISR_8BIT_FIFOEN+0x2c6>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 800d2b2:	687b      	ldr	r3, [r7, #4]
 800d2b4:	4a16      	ldr	r2, [pc, #88]	; (800d310 <UART_RxISR_8BIT_FIFOEN+0x35c>)
 800d2b6:	675a      	str	r2, [r3, #116]	; 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800d2b8:	687b      	ldr	r3, [r7, #4]
 800d2ba:	681b      	ldr	r3, [r3, #0]
 800d2bc:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d2be:	68fb      	ldr	r3, [r7, #12]
 800d2c0:	e853 3f00 	ldrex	r3, [r3]
 800d2c4:	60bb      	str	r3, [r7, #8]
   return(result);
 800d2c6:	68bb      	ldr	r3, [r7, #8]
 800d2c8:	f043 0320 	orr.w	r3, r3, #32
 800d2cc:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800d2d0:	687b      	ldr	r3, [r7, #4]
 800d2d2:	681b      	ldr	r3, [r3, #0]
 800d2d4:	461a      	mov	r2, r3
 800d2d6:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800d2da:	61bb      	str	r3, [r7, #24]
 800d2dc:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d2de:	6979      	ldr	r1, [r7, #20]
 800d2e0:	69ba      	ldr	r2, [r7, #24]
 800d2e2:	e841 2300 	strex	r3, r2, [r1]
 800d2e6:	613b      	str	r3, [r7, #16]
   return(result);
 800d2e8:	693b      	ldr	r3, [r7, #16]
 800d2ea:	2b00      	cmp	r3, #0
 800d2ec:	d1e4      	bne.n	800d2b8 <UART_RxISR_8BIT_FIFOEN+0x304>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800d2ee:	e007      	b.n	800d300 <UART_RxISR_8BIT_FIFOEN+0x34c>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800d2f0:	687b      	ldr	r3, [r7, #4]
 800d2f2:	681b      	ldr	r3, [r3, #0]
 800d2f4:	699a      	ldr	r2, [r3, #24]
 800d2f6:	687b      	ldr	r3, [r7, #4]
 800d2f8:	681b      	ldr	r3, [r3, #0]
 800d2fa:	f042 0208 	orr.w	r2, r2, #8
 800d2fe:	619a      	str	r2, [r3, #24]
}
 800d300:	bf00      	nop
 800d302:	37b0      	adds	r7, #176	; 0xb0
 800d304:	46bd      	mov	sp, r7
 800d306:	bd80      	pop	{r7, pc}
 800d308:	effffffe 	.word	0xeffffffe
 800d30c:	58000c00 	.word	0x58000c00
 800d310:	0800cc45 	.word	0x0800cc45

0800d314 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800d314:	b580      	push	{r7, lr}
 800d316:	b0ae      	sub	sp, #184	; 0xb8
 800d318:	af00      	add	r7, sp, #0
 800d31a:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 800d31c:	687b      	ldr	r3, [r7, #4]
 800d31e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800d322:	f8a7 30b2 	strh.w	r3, [r7, #178]	; 0xb2
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 800d326:	687b      	ldr	r3, [r7, #4]
 800d328:	681b      	ldr	r3, [r3, #0]
 800d32a:	69db      	ldr	r3, [r3, #28]
 800d32c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 800d330:	687b      	ldr	r3, [r7, #4]
 800d332:	681b      	ldr	r3, [r3, #0]
 800d334:	681b      	ldr	r3, [r3, #0]
 800d336:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 800d33a:	687b      	ldr	r3, [r7, #4]
 800d33c:	681b      	ldr	r3, [r3, #0]
 800d33e:	689b      	ldr	r3, [r3, #8]
 800d340:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800d344:	687b      	ldr	r3, [r7, #4]
 800d346:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800d34a:	2b22      	cmp	r3, #34	; 0x22
 800d34c:	f040 8184 	bne.w	800d658 <UART_RxISR_16BIT_FIFOEN+0x344>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 800d350:	687b      	ldr	r3, [r7, #4]
 800d352:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800d356:	f8a7 30a6 	strh.w	r3, [r7, #166]	; 0xa6
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800d35a:	e127      	b.n	800d5ac <UART_RxISR_16BIT_FIFOEN+0x298>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800d35c:	687b      	ldr	r3, [r7, #4]
 800d35e:	681b      	ldr	r3, [r3, #0]
 800d360:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d362:	f8a7 30a4 	strh.w	r3, [r7, #164]	; 0xa4
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 800d366:	687b      	ldr	r3, [r7, #4]
 800d368:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800d36a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
      *tmp = (uint16_t)(uhdata & uhMask);
 800d36e:	f8b7 20a4 	ldrh.w	r2, [r7, #164]	; 0xa4
 800d372:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	; 0xb2
 800d376:	4013      	ands	r3, r2
 800d378:	b29a      	uxth	r2, r3
 800d37a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800d37e:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800d380:	687b      	ldr	r3, [r7, #4]
 800d382:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800d384:	1c9a      	adds	r2, r3, #2
 800d386:	687b      	ldr	r3, [r7, #4]
 800d388:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 800d38a:	687b      	ldr	r3, [r7, #4]
 800d38c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800d390:	b29b      	uxth	r3, r3
 800d392:	3b01      	subs	r3, #1
 800d394:	b29a      	uxth	r2, r3
 800d396:	687b      	ldr	r3, [r7, #4]
 800d398:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 800d39c:	687b      	ldr	r3, [r7, #4]
 800d39e:	681b      	ldr	r3, [r3, #0]
 800d3a0:	69db      	ldr	r3, [r3, #28]
 800d3a2:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 800d3a6:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800d3aa:	f003 0307 	and.w	r3, r3, #7
 800d3ae:	2b00      	cmp	r3, #0
 800d3b0:	d053      	beq.n	800d45a <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800d3b2:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800d3b6:	f003 0301 	and.w	r3, r3, #1
 800d3ba:	2b00      	cmp	r3, #0
 800d3bc:	d011      	beq.n	800d3e2 <UART_RxISR_16BIT_FIFOEN+0xce>
 800d3be:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800d3c2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800d3c6:	2b00      	cmp	r3, #0
 800d3c8:	d00b      	beq.n	800d3e2 <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800d3ca:	687b      	ldr	r3, [r7, #4]
 800d3cc:	681b      	ldr	r3, [r3, #0]
 800d3ce:	2201      	movs	r2, #1
 800d3d0:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 800d3d2:	687b      	ldr	r3, [r7, #4]
 800d3d4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d3d8:	f043 0201 	orr.w	r2, r3, #1
 800d3dc:	687b      	ldr	r3, [r7, #4]
 800d3de:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800d3e2:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800d3e6:	f003 0302 	and.w	r3, r3, #2
 800d3ea:	2b00      	cmp	r3, #0
 800d3ec:	d011      	beq.n	800d412 <UART_RxISR_16BIT_FIFOEN+0xfe>
 800d3ee:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800d3f2:	f003 0301 	and.w	r3, r3, #1
 800d3f6:	2b00      	cmp	r3, #0
 800d3f8:	d00b      	beq.n	800d412 <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800d3fa:	687b      	ldr	r3, [r7, #4]
 800d3fc:	681b      	ldr	r3, [r3, #0]
 800d3fe:	2202      	movs	r2, #2
 800d400:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 800d402:	687b      	ldr	r3, [r7, #4]
 800d404:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d408:	f043 0204 	orr.w	r2, r3, #4
 800d40c:	687b      	ldr	r3, [r7, #4]
 800d40e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800d412:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800d416:	f003 0304 	and.w	r3, r3, #4
 800d41a:	2b00      	cmp	r3, #0
 800d41c:	d011      	beq.n	800d442 <UART_RxISR_16BIT_FIFOEN+0x12e>
 800d41e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800d422:	f003 0301 	and.w	r3, r3, #1
 800d426:	2b00      	cmp	r3, #0
 800d428:	d00b      	beq.n	800d442 <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800d42a:	687b      	ldr	r3, [r7, #4]
 800d42c:	681b      	ldr	r3, [r3, #0]
 800d42e:	2204      	movs	r2, #4
 800d430:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 800d432:	687b      	ldr	r3, [r7, #4]
 800d434:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d438:	f043 0202 	orr.w	r2, r3, #2
 800d43c:	687b      	ldr	r3, [r7, #4]
 800d43e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800d442:	687b      	ldr	r3, [r7, #4]
 800d444:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d448:	2b00      	cmp	r3, #0
 800d44a:	d006      	beq.n	800d45a <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800d44c:	6878      	ldr	r0, [r7, #4]
 800d44e:	f7fe f95b 	bl	800b708 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 800d452:	687b      	ldr	r3, [r7, #4]
 800d454:	2200      	movs	r2, #0
 800d456:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 800d45a:	687b      	ldr	r3, [r7, #4]
 800d45c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800d460:	b29b      	uxth	r3, r3
 800d462:	2b00      	cmp	r3, #0
 800d464:	f040 80a2 	bne.w	800d5ac <UART_RxISR_16BIT_FIFOEN+0x298>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800d468:	687b      	ldr	r3, [r7, #4]
 800d46a:	681b      	ldr	r3, [r3, #0]
 800d46c:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d46e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800d470:	e853 3f00 	ldrex	r3, [r3]
 800d474:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800d476:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800d478:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800d47c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800d480:	687b      	ldr	r3, [r7, #4]
 800d482:	681b      	ldr	r3, [r3, #0]
 800d484:	461a      	mov	r2, r3
 800d486:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800d48a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800d48e:	67fa      	str	r2, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d490:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800d492:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800d496:	e841 2300 	strex	r3, r2, [r1]
 800d49a:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800d49c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800d49e:	2b00      	cmp	r3, #0
 800d4a0:	d1e2      	bne.n	800d468 <UART_RxISR_16BIT_FIFOEN+0x154>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800d4a2:	687b      	ldr	r3, [r7, #4]
 800d4a4:	681b      	ldr	r3, [r3, #0]
 800d4a6:	3308      	adds	r3, #8
 800d4a8:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d4aa:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800d4ac:	e853 3f00 	ldrex	r3, [r3]
 800d4b0:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800d4b2:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800d4b4:	4b6e      	ldr	r3, [pc, #440]	; (800d670 <UART_RxISR_16BIT_FIFOEN+0x35c>)
 800d4b6:	4013      	ands	r3, r2
 800d4b8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800d4bc:	687b      	ldr	r3, [r7, #4]
 800d4be:	681b      	ldr	r3, [r3, #0]
 800d4c0:	3308      	adds	r3, #8
 800d4c2:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 800d4c6:	66fa      	str	r2, [r7, #108]	; 0x6c
 800d4c8:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d4ca:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800d4cc:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800d4ce:	e841 2300 	strex	r3, r2, [r1]
 800d4d2:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800d4d4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800d4d6:	2b00      	cmp	r3, #0
 800d4d8:	d1e3      	bne.n	800d4a2 <UART_RxISR_16BIT_FIFOEN+0x18e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800d4da:	687b      	ldr	r3, [r7, #4]
 800d4dc:	2220      	movs	r2, #32
 800d4de:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800d4e2:	687b      	ldr	r3, [r7, #4]
 800d4e4:	2200      	movs	r2, #0
 800d4e6:	675a      	str	r2, [r3, #116]	; 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 800d4e8:	687b      	ldr	r3, [r7, #4]
 800d4ea:	2200      	movs	r2, #0
 800d4ec:	671a      	str	r2, [r3, #112]	; 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800d4ee:	687b      	ldr	r3, [r7, #4]
 800d4f0:	681b      	ldr	r3, [r3, #0]
 800d4f2:	4a60      	ldr	r2, [pc, #384]	; (800d674 <UART_RxISR_16BIT_FIFOEN+0x360>)
 800d4f4:	4293      	cmp	r3, r2
 800d4f6:	d021      	beq.n	800d53c <UART_RxISR_16BIT_FIFOEN+0x228>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800d4f8:	687b      	ldr	r3, [r7, #4]
 800d4fa:	681b      	ldr	r3, [r3, #0]
 800d4fc:	685b      	ldr	r3, [r3, #4]
 800d4fe:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800d502:	2b00      	cmp	r3, #0
 800d504:	d01a      	beq.n	800d53c <UART_RxISR_16BIT_FIFOEN+0x228>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800d506:	687b      	ldr	r3, [r7, #4]
 800d508:	681b      	ldr	r3, [r3, #0]
 800d50a:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d50c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d50e:	e853 3f00 	ldrex	r3, [r3]
 800d512:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800d514:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800d516:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800d51a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800d51e:	687b      	ldr	r3, [r7, #4]
 800d520:	681b      	ldr	r3, [r3, #0]
 800d522:	461a      	mov	r2, r3
 800d524:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800d528:	65bb      	str	r3, [r7, #88]	; 0x58
 800d52a:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d52c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800d52e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800d530:	e841 2300 	strex	r3, r2, [r1]
 800d534:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800d536:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d538:	2b00      	cmp	r3, #0
 800d53a:	d1e4      	bne.n	800d506 <UART_RxISR_16BIT_FIFOEN+0x1f2>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800d53c:	687b      	ldr	r3, [r7, #4]
 800d53e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d540:	2b01      	cmp	r3, #1
 800d542:	d130      	bne.n	800d5a6 <UART_RxISR_16BIT_FIFOEN+0x292>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800d544:	687b      	ldr	r3, [r7, #4]
 800d546:	2200      	movs	r2, #0
 800d548:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800d54a:	687b      	ldr	r3, [r7, #4]
 800d54c:	681b      	ldr	r3, [r3, #0]
 800d54e:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d550:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d552:	e853 3f00 	ldrex	r3, [r3]
 800d556:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800d558:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d55a:	f023 0310 	bic.w	r3, r3, #16
 800d55e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800d562:	687b      	ldr	r3, [r7, #4]
 800d564:	681b      	ldr	r3, [r3, #0]
 800d566:	461a      	mov	r2, r3
 800d568:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800d56c:	647b      	str	r3, [r7, #68]	; 0x44
 800d56e:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d570:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800d572:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800d574:	e841 2300 	strex	r3, r2, [r1]
 800d578:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800d57a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d57c:	2b00      	cmp	r3, #0
 800d57e:	d1e4      	bne.n	800d54a <UART_RxISR_16BIT_FIFOEN+0x236>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800d580:	687b      	ldr	r3, [r7, #4]
 800d582:	681b      	ldr	r3, [r3, #0]
 800d584:	69db      	ldr	r3, [r3, #28]
 800d586:	f003 0310 	and.w	r3, r3, #16
 800d58a:	2b10      	cmp	r3, #16
 800d58c:	d103      	bne.n	800d596 <UART_RxISR_16BIT_FIFOEN+0x282>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800d58e:	687b      	ldr	r3, [r7, #4]
 800d590:	681b      	ldr	r3, [r3, #0]
 800d592:	2210      	movs	r2, #16
 800d594:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800d596:	687b      	ldr	r3, [r7, #4]
 800d598:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800d59c:	4619      	mov	r1, r3
 800d59e:	6878      	ldr	r0, [r7, #4]
 800d5a0:	f7fe f8bc 	bl	800b71c <HAL_UARTEx_RxEventCallback>
 800d5a4:	e002      	b.n	800d5ac <UART_RxISR_16BIT_FIFOEN+0x298>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 800d5a6:	6878      	ldr	r0, [r7, #4]
 800d5a8:	f7f3 f874 	bl	8000694 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800d5ac:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	; 0xa6
 800d5b0:	2b00      	cmp	r3, #0
 800d5b2:	d006      	beq.n	800d5c2 <UART_RxISR_16BIT_FIFOEN+0x2ae>
 800d5b4:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800d5b8:	f003 0320 	and.w	r3, r3, #32
 800d5bc:	2b00      	cmp	r3, #0
 800d5be:	f47f aecd 	bne.w	800d35c <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 800d5c2:	687b      	ldr	r3, [r7, #4]
 800d5c4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800d5c8:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800d5cc:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 800d5d0:	2b00      	cmp	r3, #0
 800d5d2:	d049      	beq.n	800d668 <UART_RxISR_16BIT_FIFOEN+0x354>
 800d5d4:	687b      	ldr	r3, [r7, #4]
 800d5d6:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800d5da:	f8b7 208e 	ldrh.w	r2, [r7, #142]	; 0x8e
 800d5de:	429a      	cmp	r2, r3
 800d5e0:	d242      	bcs.n	800d668 <UART_RxISR_16BIT_FIFOEN+0x354>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800d5e2:	687b      	ldr	r3, [r7, #4]
 800d5e4:	681b      	ldr	r3, [r3, #0]
 800d5e6:	3308      	adds	r3, #8
 800d5e8:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d5ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d5ec:	e853 3f00 	ldrex	r3, [r3]
 800d5f0:	623b      	str	r3, [r7, #32]
   return(result);
 800d5f2:	6a3b      	ldr	r3, [r7, #32]
 800d5f4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800d5f8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800d5fc:	687b      	ldr	r3, [r7, #4]
 800d5fe:	681b      	ldr	r3, [r3, #0]
 800d600:	3308      	adds	r3, #8
 800d602:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 800d606:	633a      	str	r2, [r7, #48]	; 0x30
 800d608:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d60a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800d60c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d60e:	e841 2300 	strex	r3, r2, [r1]
 800d612:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800d614:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d616:	2b00      	cmp	r3, #0
 800d618:	d1e3      	bne.n	800d5e2 <UART_RxISR_16BIT_FIFOEN+0x2ce>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 800d61a:	687b      	ldr	r3, [r7, #4]
 800d61c:	4a16      	ldr	r2, [pc, #88]	; (800d678 <UART_RxISR_16BIT_FIFOEN+0x364>)
 800d61e:	675a      	str	r2, [r3, #116]	; 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800d620:	687b      	ldr	r3, [r7, #4]
 800d622:	681b      	ldr	r3, [r3, #0]
 800d624:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d626:	693b      	ldr	r3, [r7, #16]
 800d628:	e853 3f00 	ldrex	r3, [r3]
 800d62c:	60fb      	str	r3, [r7, #12]
   return(result);
 800d62e:	68fb      	ldr	r3, [r7, #12]
 800d630:	f043 0320 	orr.w	r3, r3, #32
 800d634:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800d638:	687b      	ldr	r3, [r7, #4]
 800d63a:	681b      	ldr	r3, [r3, #0]
 800d63c:	461a      	mov	r2, r3
 800d63e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800d642:	61fb      	str	r3, [r7, #28]
 800d644:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d646:	69b9      	ldr	r1, [r7, #24]
 800d648:	69fa      	ldr	r2, [r7, #28]
 800d64a:	e841 2300 	strex	r3, r2, [r1]
 800d64e:	617b      	str	r3, [r7, #20]
   return(result);
 800d650:	697b      	ldr	r3, [r7, #20]
 800d652:	2b00      	cmp	r3, #0
 800d654:	d1e4      	bne.n	800d620 <UART_RxISR_16BIT_FIFOEN+0x30c>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800d656:	e007      	b.n	800d668 <UART_RxISR_16BIT_FIFOEN+0x354>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800d658:	687b      	ldr	r3, [r7, #4]
 800d65a:	681b      	ldr	r3, [r3, #0]
 800d65c:	699a      	ldr	r2, [r3, #24]
 800d65e:	687b      	ldr	r3, [r7, #4]
 800d660:	681b      	ldr	r3, [r3, #0]
 800d662:	f042 0208 	orr.w	r2, r2, #8
 800d666:	619a      	str	r2, [r3, #24]
}
 800d668:	bf00      	nop
 800d66a:	37b8      	adds	r7, #184	; 0xb8
 800d66c:	46bd      	mov	sp, r7
 800d66e:	bd80      	pop	{r7, pc}
 800d670:	effffffe 	.word	0xeffffffe
 800d674:	58000c00 	.word	0x58000c00
 800d678:	0800cdfd 	.word	0x0800cdfd

0800d67c <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800d67c:	b480      	push	{r7}
 800d67e:	b083      	sub	sp, #12
 800d680:	af00      	add	r7, sp, #0
 800d682:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800d684:	bf00      	nop
 800d686:	370c      	adds	r7, #12
 800d688:	46bd      	mov	sp, r7
 800d68a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d68e:	4770      	bx	lr

0800d690 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800d690:	b480      	push	{r7}
 800d692:	b083      	sub	sp, #12
 800d694:	af00      	add	r7, sp, #0
 800d696:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800d698:	bf00      	nop
 800d69a:	370c      	adds	r7, #12
 800d69c:	46bd      	mov	sp, r7
 800d69e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d6a2:	4770      	bx	lr

0800d6a4 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800d6a4:	b480      	push	{r7}
 800d6a6:	b083      	sub	sp, #12
 800d6a8:	af00      	add	r7, sp, #0
 800d6aa:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800d6ac:	bf00      	nop
 800d6ae:	370c      	adds	r7, #12
 800d6b0:	46bd      	mov	sp, r7
 800d6b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d6b6:	4770      	bx	lr

0800d6b8 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800d6b8:	b480      	push	{r7}
 800d6ba:	b085      	sub	sp, #20
 800d6bc:	af00      	add	r7, sp, #0
 800d6be:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800d6c0:	687b      	ldr	r3, [r7, #4]
 800d6c2:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800d6c6:	2b01      	cmp	r3, #1
 800d6c8:	d101      	bne.n	800d6ce <HAL_UARTEx_DisableFifoMode+0x16>
 800d6ca:	2302      	movs	r3, #2
 800d6cc:	e027      	b.n	800d71e <HAL_UARTEx_DisableFifoMode+0x66>
 800d6ce:	687b      	ldr	r3, [r7, #4]
 800d6d0:	2201      	movs	r2, #1
 800d6d2:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800d6d6:	687b      	ldr	r3, [r7, #4]
 800d6d8:	2224      	movs	r2, #36	; 0x24
 800d6da:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800d6de:	687b      	ldr	r3, [r7, #4]
 800d6e0:	681b      	ldr	r3, [r3, #0]
 800d6e2:	681b      	ldr	r3, [r3, #0]
 800d6e4:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800d6e6:	687b      	ldr	r3, [r7, #4]
 800d6e8:	681b      	ldr	r3, [r3, #0]
 800d6ea:	681a      	ldr	r2, [r3, #0]
 800d6ec:	687b      	ldr	r3, [r7, #4]
 800d6ee:	681b      	ldr	r3, [r3, #0]
 800d6f0:	f022 0201 	bic.w	r2, r2, #1
 800d6f4:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800d6f6:	68fb      	ldr	r3, [r7, #12]
 800d6f8:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800d6fc:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800d6fe:	687b      	ldr	r3, [r7, #4]
 800d700:	2200      	movs	r2, #0
 800d702:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800d704:	687b      	ldr	r3, [r7, #4]
 800d706:	681b      	ldr	r3, [r3, #0]
 800d708:	68fa      	ldr	r2, [r7, #12]
 800d70a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800d70c:	687b      	ldr	r3, [r7, #4]
 800d70e:	2220      	movs	r2, #32
 800d710:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800d714:	687b      	ldr	r3, [r7, #4]
 800d716:	2200      	movs	r2, #0
 800d718:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800d71c:	2300      	movs	r3, #0
}
 800d71e:	4618      	mov	r0, r3
 800d720:	3714      	adds	r7, #20
 800d722:	46bd      	mov	sp, r7
 800d724:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d728:	4770      	bx	lr

0800d72a <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800d72a:	b580      	push	{r7, lr}
 800d72c:	b084      	sub	sp, #16
 800d72e:	af00      	add	r7, sp, #0
 800d730:	6078      	str	r0, [r7, #4]
 800d732:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800d734:	687b      	ldr	r3, [r7, #4]
 800d736:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800d73a:	2b01      	cmp	r3, #1
 800d73c:	d101      	bne.n	800d742 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800d73e:	2302      	movs	r3, #2
 800d740:	e02d      	b.n	800d79e <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800d742:	687b      	ldr	r3, [r7, #4]
 800d744:	2201      	movs	r2, #1
 800d746:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800d74a:	687b      	ldr	r3, [r7, #4]
 800d74c:	2224      	movs	r2, #36	; 0x24
 800d74e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800d752:	687b      	ldr	r3, [r7, #4]
 800d754:	681b      	ldr	r3, [r3, #0]
 800d756:	681b      	ldr	r3, [r3, #0]
 800d758:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800d75a:	687b      	ldr	r3, [r7, #4]
 800d75c:	681b      	ldr	r3, [r3, #0]
 800d75e:	681a      	ldr	r2, [r3, #0]
 800d760:	687b      	ldr	r3, [r7, #4]
 800d762:	681b      	ldr	r3, [r3, #0]
 800d764:	f022 0201 	bic.w	r2, r2, #1
 800d768:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800d76a:	687b      	ldr	r3, [r7, #4]
 800d76c:	681b      	ldr	r3, [r3, #0]
 800d76e:	689b      	ldr	r3, [r3, #8]
 800d770:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800d774:	687b      	ldr	r3, [r7, #4]
 800d776:	681b      	ldr	r3, [r3, #0]
 800d778:	683a      	ldr	r2, [r7, #0]
 800d77a:	430a      	orrs	r2, r1
 800d77c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800d77e:	6878      	ldr	r0, [r7, #4]
 800d780:	f000 f850 	bl	800d824 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800d784:	687b      	ldr	r3, [r7, #4]
 800d786:	681b      	ldr	r3, [r3, #0]
 800d788:	68fa      	ldr	r2, [r7, #12]
 800d78a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800d78c:	687b      	ldr	r3, [r7, #4]
 800d78e:	2220      	movs	r2, #32
 800d790:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800d794:	687b      	ldr	r3, [r7, #4]
 800d796:	2200      	movs	r2, #0
 800d798:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800d79c:	2300      	movs	r3, #0
}
 800d79e:	4618      	mov	r0, r3
 800d7a0:	3710      	adds	r7, #16
 800d7a2:	46bd      	mov	sp, r7
 800d7a4:	bd80      	pop	{r7, pc}

0800d7a6 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800d7a6:	b580      	push	{r7, lr}
 800d7a8:	b084      	sub	sp, #16
 800d7aa:	af00      	add	r7, sp, #0
 800d7ac:	6078      	str	r0, [r7, #4]
 800d7ae:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800d7b0:	687b      	ldr	r3, [r7, #4]
 800d7b2:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800d7b6:	2b01      	cmp	r3, #1
 800d7b8:	d101      	bne.n	800d7be <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800d7ba:	2302      	movs	r3, #2
 800d7bc:	e02d      	b.n	800d81a <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800d7be:	687b      	ldr	r3, [r7, #4]
 800d7c0:	2201      	movs	r2, #1
 800d7c2:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800d7c6:	687b      	ldr	r3, [r7, #4]
 800d7c8:	2224      	movs	r2, #36	; 0x24
 800d7ca:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800d7ce:	687b      	ldr	r3, [r7, #4]
 800d7d0:	681b      	ldr	r3, [r3, #0]
 800d7d2:	681b      	ldr	r3, [r3, #0]
 800d7d4:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800d7d6:	687b      	ldr	r3, [r7, #4]
 800d7d8:	681b      	ldr	r3, [r3, #0]
 800d7da:	681a      	ldr	r2, [r3, #0]
 800d7dc:	687b      	ldr	r3, [r7, #4]
 800d7de:	681b      	ldr	r3, [r3, #0]
 800d7e0:	f022 0201 	bic.w	r2, r2, #1
 800d7e4:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800d7e6:	687b      	ldr	r3, [r7, #4]
 800d7e8:	681b      	ldr	r3, [r3, #0]
 800d7ea:	689b      	ldr	r3, [r3, #8]
 800d7ec:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800d7f0:	687b      	ldr	r3, [r7, #4]
 800d7f2:	681b      	ldr	r3, [r3, #0]
 800d7f4:	683a      	ldr	r2, [r7, #0]
 800d7f6:	430a      	orrs	r2, r1
 800d7f8:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800d7fa:	6878      	ldr	r0, [r7, #4]
 800d7fc:	f000 f812 	bl	800d824 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800d800:	687b      	ldr	r3, [r7, #4]
 800d802:	681b      	ldr	r3, [r3, #0]
 800d804:	68fa      	ldr	r2, [r7, #12]
 800d806:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800d808:	687b      	ldr	r3, [r7, #4]
 800d80a:	2220      	movs	r2, #32
 800d80c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800d810:	687b      	ldr	r3, [r7, #4]
 800d812:	2200      	movs	r2, #0
 800d814:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800d818:	2300      	movs	r3, #0
}
 800d81a:	4618      	mov	r0, r3
 800d81c:	3710      	adds	r7, #16
 800d81e:	46bd      	mov	sp, r7
 800d820:	bd80      	pop	{r7, pc}
	...

0800d824 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800d824:	b480      	push	{r7}
 800d826:	b085      	sub	sp, #20
 800d828:	af00      	add	r7, sp, #0
 800d82a:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800d82c:	687b      	ldr	r3, [r7, #4]
 800d82e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800d830:	2b00      	cmp	r3, #0
 800d832:	d108      	bne.n	800d846 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800d834:	687b      	ldr	r3, [r7, #4]
 800d836:	2201      	movs	r2, #1
 800d838:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800d83c:	687b      	ldr	r3, [r7, #4]
 800d83e:	2201      	movs	r2, #1
 800d840:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800d844:	e031      	b.n	800d8aa <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800d846:	2310      	movs	r3, #16
 800d848:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800d84a:	2310      	movs	r3, #16
 800d84c:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800d84e:	687b      	ldr	r3, [r7, #4]
 800d850:	681b      	ldr	r3, [r3, #0]
 800d852:	689b      	ldr	r3, [r3, #8]
 800d854:	0e5b      	lsrs	r3, r3, #25
 800d856:	b2db      	uxtb	r3, r3
 800d858:	f003 0307 	and.w	r3, r3, #7
 800d85c:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800d85e:	687b      	ldr	r3, [r7, #4]
 800d860:	681b      	ldr	r3, [r3, #0]
 800d862:	689b      	ldr	r3, [r3, #8]
 800d864:	0f5b      	lsrs	r3, r3, #29
 800d866:	b2db      	uxtb	r3, r3
 800d868:	f003 0307 	and.w	r3, r3, #7
 800d86c:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800d86e:	7bbb      	ldrb	r3, [r7, #14]
 800d870:	7b3a      	ldrb	r2, [r7, #12]
 800d872:	4911      	ldr	r1, [pc, #68]	; (800d8b8 <UARTEx_SetNbDataToProcess+0x94>)
 800d874:	5c8a      	ldrb	r2, [r1, r2]
 800d876:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800d87a:	7b3a      	ldrb	r2, [r7, #12]
 800d87c:	490f      	ldr	r1, [pc, #60]	; (800d8bc <UARTEx_SetNbDataToProcess+0x98>)
 800d87e:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800d880:	fb93 f3f2 	sdiv	r3, r3, r2
 800d884:	b29a      	uxth	r2, r3
 800d886:	687b      	ldr	r3, [r7, #4]
 800d888:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800d88c:	7bfb      	ldrb	r3, [r7, #15]
 800d88e:	7b7a      	ldrb	r2, [r7, #13]
 800d890:	4909      	ldr	r1, [pc, #36]	; (800d8b8 <UARTEx_SetNbDataToProcess+0x94>)
 800d892:	5c8a      	ldrb	r2, [r1, r2]
 800d894:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800d898:	7b7a      	ldrb	r2, [r7, #13]
 800d89a:	4908      	ldr	r1, [pc, #32]	; (800d8bc <UARTEx_SetNbDataToProcess+0x98>)
 800d89c:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800d89e:	fb93 f3f2 	sdiv	r3, r3, r2
 800d8a2:	b29a      	uxth	r2, r3
 800d8a4:	687b      	ldr	r3, [r7, #4]
 800d8a6:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800d8aa:	bf00      	nop
 800d8ac:	3714      	adds	r7, #20
 800d8ae:	46bd      	mov	sp, r7
 800d8b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d8b4:	4770      	bx	lr
 800d8b6:	bf00      	nop
 800d8b8:	0800ea68 	.word	0x0800ea68
 800d8bc:	0800ea70 	.word	0x0800ea70

0800d8c0 <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_InitTypeDef *Init)
{
 800d8c0:	b480      	push	{r7}
 800d8c2:	b083      	sub	sp, #12
 800d8c4:	af00      	add	r7, sp, #0
 800d8c6:	6078      	str	r0, [r7, #4]
 800d8c8:	6039      	str	r1, [r7, #0]
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank == FMC_SDRAM_BANK1)
 800d8ca:	683b      	ldr	r3, [r7, #0]
 800d8cc:	681b      	ldr	r3, [r3, #0]
 800d8ce:	2b00      	cmp	r3, #0
 800d8d0:	d121      	bne.n	800d916 <FMC_SDRAM_Init+0x56>
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 800d8d2:	687b      	ldr	r3, [r7, #4]
 800d8d4:	681a      	ldr	r2, [r3, #0]
 800d8d6:	4b27      	ldr	r3, [pc, #156]	; (800d974 <FMC_SDRAM_Init+0xb4>)
 800d8d8:	4013      	ands	r3, r2
 800d8da:	683a      	ldr	r2, [r7, #0]
 800d8dc:	6851      	ldr	r1, [r2, #4]
 800d8de:	683a      	ldr	r2, [r7, #0]
 800d8e0:	6892      	ldr	r2, [r2, #8]
 800d8e2:	4311      	orrs	r1, r2
 800d8e4:	683a      	ldr	r2, [r7, #0]
 800d8e6:	68d2      	ldr	r2, [r2, #12]
 800d8e8:	4311      	orrs	r1, r2
 800d8ea:	683a      	ldr	r2, [r7, #0]
 800d8ec:	6912      	ldr	r2, [r2, #16]
 800d8ee:	4311      	orrs	r1, r2
 800d8f0:	683a      	ldr	r2, [r7, #0]
 800d8f2:	6952      	ldr	r2, [r2, #20]
 800d8f4:	4311      	orrs	r1, r2
 800d8f6:	683a      	ldr	r2, [r7, #0]
 800d8f8:	6992      	ldr	r2, [r2, #24]
 800d8fa:	4311      	orrs	r1, r2
 800d8fc:	683a      	ldr	r2, [r7, #0]
 800d8fe:	69d2      	ldr	r2, [r2, #28]
 800d900:	4311      	orrs	r1, r2
 800d902:	683a      	ldr	r2, [r7, #0]
 800d904:	6a12      	ldr	r2, [r2, #32]
 800d906:	4311      	orrs	r1, r2
 800d908:	683a      	ldr	r2, [r7, #0]
 800d90a:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800d90c:	430a      	orrs	r2, r1
 800d90e:	431a      	orrs	r2, r3
 800d910:	687b      	ldr	r3, [r7, #4]
 800d912:	601a      	str	r2, [r3, #0]
 800d914:	e026      	b.n	800d964 <FMC_SDRAM_Init+0xa4>
                Init->ReadBurst          |
                Init->ReadPipeDelay));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 800d916:	687b      	ldr	r3, [r7, #4]
 800d918:	681b      	ldr	r3, [r3, #0]
 800d91a:	f423 42f8 	bic.w	r2, r3, #31744	; 0x7c00
 800d91e:	683b      	ldr	r3, [r7, #0]
 800d920:	69d9      	ldr	r1, [r3, #28]
 800d922:	683b      	ldr	r3, [r7, #0]
 800d924:	6a1b      	ldr	r3, [r3, #32]
 800d926:	4319      	orrs	r1, r3
 800d928:	683b      	ldr	r3, [r7, #0]
 800d92a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d92c:	430b      	orrs	r3, r1
 800d92e:	431a      	orrs	r2, r3
 800d930:	687b      	ldr	r3, [r7, #4]
 800d932:	601a      	str	r2, [r3, #0]
               FMC_SDCRx_RPIPE,
               (Init->SDClockPeriod      |
                Init->ReadBurst          |
                Init->ReadPipeDelay));

    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK2],
 800d934:	687b      	ldr	r3, [r7, #4]
 800d936:	685a      	ldr	r2, [r3, #4]
 800d938:	4b0e      	ldr	r3, [pc, #56]	; (800d974 <FMC_SDRAM_Init+0xb4>)
 800d93a:	4013      	ands	r3, r2
 800d93c:	683a      	ldr	r2, [r7, #0]
 800d93e:	6851      	ldr	r1, [r2, #4]
 800d940:	683a      	ldr	r2, [r7, #0]
 800d942:	6892      	ldr	r2, [r2, #8]
 800d944:	4311      	orrs	r1, r2
 800d946:	683a      	ldr	r2, [r7, #0]
 800d948:	68d2      	ldr	r2, [r2, #12]
 800d94a:	4311      	orrs	r1, r2
 800d94c:	683a      	ldr	r2, [r7, #0]
 800d94e:	6912      	ldr	r2, [r2, #16]
 800d950:	4311      	orrs	r1, r2
 800d952:	683a      	ldr	r2, [r7, #0]
 800d954:	6952      	ldr	r2, [r2, #20]
 800d956:	4311      	orrs	r1, r2
 800d958:	683a      	ldr	r2, [r7, #0]
 800d95a:	6992      	ldr	r2, [r2, #24]
 800d95c:	430a      	orrs	r2, r1
 800d95e:	431a      	orrs	r2, r3
 800d960:	687b      	ldr	r3, [r7, #4]
 800d962:	605a      	str	r2, [r3, #4]
                Init->InternalBankNumber |
                Init->CASLatency         |
                Init->WriteProtection));
  }

  return HAL_OK;
 800d964:	2300      	movs	r3, #0
}
 800d966:	4618      	mov	r0, r3
 800d968:	370c      	adds	r7, #12
 800d96a:	46bd      	mov	sp, r7
 800d96c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d970:	4770      	bx	lr
 800d972:	bf00      	nop
 800d974:	ffff8000 	.word	0xffff8000

0800d978 <FMC_SDRAM_Timing_Init>:
  * @param  Bank SDRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device,
                                        FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 800d978:	b480      	push	{r7}
 800d97a:	b085      	sub	sp, #20
 800d97c:	af00      	add	r7, sp, #0
 800d97e:	60f8      	str	r0, [r7, #12]
 800d980:	60b9      	str	r1, [r7, #8]
 800d982:	607a      	str	r2, [r7, #4]
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));

  /* Set SDRAM device timing parameters */
  if (Bank == FMC_SDRAM_BANK1)
 800d984:	687b      	ldr	r3, [r7, #4]
 800d986:	2b00      	cmp	r3, #0
 800d988:	d128      	bne.n	800d9dc <FMC_SDRAM_Timing_Init+0x64>
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 800d98a:	68fb      	ldr	r3, [r7, #12]
 800d98c:	689b      	ldr	r3, [r3, #8]
 800d98e:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 800d992:	68bb      	ldr	r3, [r7, #8]
 800d994:	681b      	ldr	r3, [r3, #0]
 800d996:	1e59      	subs	r1, r3, #1
 800d998:	68bb      	ldr	r3, [r7, #8]
 800d99a:	685b      	ldr	r3, [r3, #4]
 800d99c:	3b01      	subs	r3, #1
 800d99e:	011b      	lsls	r3, r3, #4
 800d9a0:	4319      	orrs	r1, r3
 800d9a2:	68bb      	ldr	r3, [r7, #8]
 800d9a4:	689b      	ldr	r3, [r3, #8]
 800d9a6:	3b01      	subs	r3, #1
 800d9a8:	021b      	lsls	r3, r3, #8
 800d9aa:	4319      	orrs	r1, r3
 800d9ac:	68bb      	ldr	r3, [r7, #8]
 800d9ae:	68db      	ldr	r3, [r3, #12]
 800d9b0:	3b01      	subs	r3, #1
 800d9b2:	031b      	lsls	r3, r3, #12
 800d9b4:	4319      	orrs	r1, r3
 800d9b6:	68bb      	ldr	r3, [r7, #8]
 800d9b8:	691b      	ldr	r3, [r3, #16]
 800d9ba:	3b01      	subs	r3, #1
 800d9bc:	041b      	lsls	r3, r3, #16
 800d9be:	4319      	orrs	r1, r3
 800d9c0:	68bb      	ldr	r3, [r7, #8]
 800d9c2:	695b      	ldr	r3, [r3, #20]
 800d9c4:	3b01      	subs	r3, #1
 800d9c6:	051b      	lsls	r3, r3, #20
 800d9c8:	4319      	orrs	r1, r3
 800d9ca:	68bb      	ldr	r3, [r7, #8]
 800d9cc:	699b      	ldr	r3, [r3, #24]
 800d9ce:	3b01      	subs	r3, #1
 800d9d0:	061b      	lsls	r3, r3, #24
 800d9d2:	430b      	orrs	r3, r1
 800d9d4:	431a      	orrs	r2, r3
 800d9d6:	68fb      	ldr	r3, [r7, #12]
 800d9d8:	609a      	str	r2, [r3, #8]
 800d9da:	e02d      	b.n	800da38 <FMC_SDRAM_Timing_Init+0xc0>
                (((Timing->RPDelay) - 1U)              << FMC_SDTRx_TRP_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTRx_TRCD_Pos)));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 800d9dc:	68fb      	ldr	r3, [r7, #12]
 800d9de:	689a      	ldr	r2, [r3, #8]
 800d9e0:	4b19      	ldr	r3, [pc, #100]	; (800da48 <FMC_SDRAM_Timing_Init+0xd0>)
 800d9e2:	4013      	ands	r3, r2
 800d9e4:	68ba      	ldr	r2, [r7, #8]
 800d9e6:	68d2      	ldr	r2, [r2, #12]
 800d9e8:	3a01      	subs	r2, #1
 800d9ea:	0311      	lsls	r1, r2, #12
 800d9ec:	68ba      	ldr	r2, [r7, #8]
 800d9ee:	6952      	ldr	r2, [r2, #20]
 800d9f0:	3a01      	subs	r2, #1
 800d9f2:	0512      	lsls	r2, r2, #20
 800d9f4:	430a      	orrs	r2, r1
 800d9f6:	431a      	orrs	r2, r3
 800d9f8:	68fb      	ldr	r3, [r7, #12]
 800d9fa:	609a      	str	r2, [r3, #8]
               FMC_SDTRx_TRC |
               FMC_SDTRx_TRP,
               (((Timing->RowCycleDelay) - 1U)         << FMC_SDTRx_TRC_Pos)  |
               (((Timing->RPDelay) - 1U)               << FMC_SDTRx_TRP_Pos));

    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK2],
 800d9fc:	68fb      	ldr	r3, [r7, #12]
 800d9fe:	68db      	ldr	r3, [r3, #12]
 800da00:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 800da04:	68bb      	ldr	r3, [r7, #8]
 800da06:	681b      	ldr	r3, [r3, #0]
 800da08:	1e59      	subs	r1, r3, #1
 800da0a:	68bb      	ldr	r3, [r7, #8]
 800da0c:	685b      	ldr	r3, [r3, #4]
 800da0e:	3b01      	subs	r3, #1
 800da10:	011b      	lsls	r3, r3, #4
 800da12:	4319      	orrs	r1, r3
 800da14:	68bb      	ldr	r3, [r7, #8]
 800da16:	689b      	ldr	r3, [r3, #8]
 800da18:	3b01      	subs	r3, #1
 800da1a:	021b      	lsls	r3, r3, #8
 800da1c:	4319      	orrs	r1, r3
 800da1e:	68bb      	ldr	r3, [r7, #8]
 800da20:	691b      	ldr	r3, [r3, #16]
 800da22:	3b01      	subs	r3, #1
 800da24:	041b      	lsls	r3, r3, #16
 800da26:	4319      	orrs	r1, r3
 800da28:	68bb      	ldr	r3, [r7, #8]
 800da2a:	699b      	ldr	r3, [r3, #24]
 800da2c:	3b01      	subs	r3, #1
 800da2e:	061b      	lsls	r3, r3, #24
 800da30:	430b      	orrs	r3, r1
 800da32:	431a      	orrs	r2, r3
 800da34:	68fb      	ldr	r3, [r7, #12]
 800da36:	60da      	str	r2, [r3, #12]
                (((Timing->SelfRefreshTime) - 1U)      << FMC_SDTRx_TRAS_Pos) |
                (((Timing->WriteRecoveryTime) - 1U)    << FMC_SDTRx_TWR_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTRx_TRCD_Pos)));
  }

  return HAL_OK;
 800da38:	2300      	movs	r3, #0
}
 800da3a:	4618      	mov	r0, r3
 800da3c:	3714      	adds	r7, #20
 800da3e:	46bd      	mov	sp, r7
 800da40:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da44:	4770      	bx	lr
 800da46:	bf00      	nop
 800da48:	ff0f0fff 	.word	0xff0f0fff

0800da4c <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800da4c:	b084      	sub	sp, #16
 800da4e:	b580      	push	{r7, lr}
 800da50:	b084      	sub	sp, #16
 800da52:	af00      	add	r7, sp, #0
 800da54:	6078      	str	r0, [r7, #4]
 800da56:	f107 001c 	add.w	r0, r7, #28
 800da5a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800da5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800da60:	2b01      	cmp	r3, #1
 800da62:	d120      	bne.n	800daa6 <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800da64:	687b      	ldr	r3, [r7, #4]
 800da66:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800da68:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800da6c:	687b      	ldr	r3, [r7, #4]
 800da6e:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800da70:	687b      	ldr	r3, [r7, #4]
 800da72:	68da      	ldr	r2, [r3, #12]
 800da74:	4b2a      	ldr	r3, [pc, #168]	; (800db20 <USB_CoreInit+0xd4>)
 800da76:	4013      	ands	r3, r2
 800da78:	687a      	ldr	r2, [r7, #4]
 800da7a:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800da7c:	687b      	ldr	r3, [r7, #4]
 800da7e:	68db      	ldr	r3, [r3, #12]
 800da80:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800da84:	687b      	ldr	r3, [r7, #4]
 800da86:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800da88:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800da8a:	2b01      	cmp	r3, #1
 800da8c:	d105      	bne.n	800da9a <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800da8e:	687b      	ldr	r3, [r7, #4]
 800da90:	68db      	ldr	r3, [r3, #12]
 800da92:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800da96:	687b      	ldr	r3, [r7, #4]
 800da98:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800da9a:	6878      	ldr	r0, [r7, #4]
 800da9c:	f000 faac 	bl	800dff8 <USB_CoreReset>
 800daa0:	4603      	mov	r3, r0
 800daa2:	73fb      	strb	r3, [r7, #15]
 800daa4:	e01a      	b.n	800dadc <USB_CoreInit+0x90>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800daa6:	687b      	ldr	r3, [r7, #4]
 800daa8:	68db      	ldr	r3, [r3, #12]
 800daaa:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800daae:	687b      	ldr	r3, [r7, #4]
 800dab0:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800dab2:	6878      	ldr	r0, [r7, #4]
 800dab4:	f000 faa0 	bl	800dff8 <USB_CoreReset>
 800dab8:	4603      	mov	r3, r0
 800daba:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800dabc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800dabe:	2b00      	cmp	r3, #0
 800dac0:	d106      	bne.n	800dad0 <USB_CoreInit+0x84>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800dac2:	687b      	ldr	r3, [r7, #4]
 800dac4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800dac6:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800daca:	687b      	ldr	r3, [r7, #4]
 800dacc:	639a      	str	r2, [r3, #56]	; 0x38
 800dace:	e005      	b.n	800dadc <USB_CoreInit+0x90>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800dad0:	687b      	ldr	r3, [r7, #4]
 800dad2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800dad4:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800dad8:	687b      	ldr	r3, [r7, #4]
 800dada:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800dadc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dade:	2b01      	cmp	r3, #1
 800dae0:	d116      	bne.n	800db10 <USB_CoreInit+0xc4>
  {
    /* make sure to reserve 18 fifo Locations for DMA buffers */
    USBx->GDFIFOCFG &= ~(0xFFFFU << 16);
 800dae2:	687b      	ldr	r3, [r7, #4]
 800dae4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800dae6:	b29a      	uxth	r2, r3
 800dae8:	687b      	ldr	r3, [r7, #4]
 800daea:	65da      	str	r2, [r3, #92]	; 0x5c
    USBx->GDFIFOCFG |= 0x3EEU << 16;
 800daec:	687b      	ldr	r3, [r7, #4]
 800daee:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800daf0:	4b0c      	ldr	r3, [pc, #48]	; (800db24 <USB_CoreInit+0xd8>)
 800daf2:	4313      	orrs	r3, r2
 800daf4:	687a      	ldr	r2, [r7, #4]
 800daf6:	65d3      	str	r3, [r2, #92]	; 0x5c

    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800daf8:	687b      	ldr	r3, [r7, #4]
 800dafa:	689b      	ldr	r3, [r3, #8]
 800dafc:	f043 0206 	orr.w	r2, r3, #6
 800db00:	687b      	ldr	r3, [r7, #4]
 800db02:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800db04:	687b      	ldr	r3, [r7, #4]
 800db06:	689b      	ldr	r3, [r3, #8]
 800db08:	f043 0220 	orr.w	r2, r3, #32
 800db0c:	687b      	ldr	r3, [r7, #4]
 800db0e:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800db10:	7bfb      	ldrb	r3, [r7, #15]
}
 800db12:	4618      	mov	r0, r3
 800db14:	3710      	adds	r7, #16
 800db16:	46bd      	mov	sp, r7
 800db18:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800db1c:	b004      	add	sp, #16
 800db1e:	4770      	bx	lr
 800db20:	ffbdffbf 	.word	0xffbdffbf
 800db24:	03ee0000 	.word	0x03ee0000

0800db28 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800db28:	b480      	push	{r7}
 800db2a:	b083      	sub	sp, #12
 800db2c:	af00      	add	r7, sp, #0
 800db2e:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800db30:	687b      	ldr	r3, [r7, #4]
 800db32:	689b      	ldr	r3, [r3, #8]
 800db34:	f023 0201 	bic.w	r2, r3, #1
 800db38:	687b      	ldr	r3, [r7, #4]
 800db3a:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800db3c:	2300      	movs	r3, #0
}
 800db3e:	4618      	mov	r0, r3
 800db40:	370c      	adds	r7, #12
 800db42:	46bd      	mov	sp, r7
 800db44:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db48:	4770      	bx	lr

0800db4a <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800db4a:	b580      	push	{r7, lr}
 800db4c:	b084      	sub	sp, #16
 800db4e:	af00      	add	r7, sp, #0
 800db50:	6078      	str	r0, [r7, #4]
 800db52:	460b      	mov	r3, r1
 800db54:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800db56:	2300      	movs	r3, #0
 800db58:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800db5a:	687b      	ldr	r3, [r7, #4]
 800db5c:	68db      	ldr	r3, [r3, #12]
 800db5e:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800db62:	687b      	ldr	r3, [r7, #4]
 800db64:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800db66:	78fb      	ldrb	r3, [r7, #3]
 800db68:	2b01      	cmp	r3, #1
 800db6a:	d115      	bne.n	800db98 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800db6c:	687b      	ldr	r3, [r7, #4]
 800db6e:	68db      	ldr	r3, [r3, #12]
 800db70:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800db74:	687b      	ldr	r3, [r7, #4]
 800db76:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800db78:	2001      	movs	r0, #1
 800db7a:	f7f5 f84f 	bl	8002c1c <HAL_Delay>
      ms++;
 800db7e:	68fb      	ldr	r3, [r7, #12]
 800db80:	3301      	adds	r3, #1
 800db82:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 800db84:	6878      	ldr	r0, [r7, #4]
 800db86:	f000 fa29 	bl	800dfdc <USB_GetMode>
 800db8a:	4603      	mov	r3, r0
 800db8c:	2b01      	cmp	r3, #1
 800db8e:	d01e      	beq.n	800dbce <USB_SetCurrentMode+0x84>
 800db90:	68fb      	ldr	r3, [r7, #12]
 800db92:	2b31      	cmp	r3, #49	; 0x31
 800db94:	d9f0      	bls.n	800db78 <USB_SetCurrentMode+0x2e>
 800db96:	e01a      	b.n	800dbce <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800db98:	78fb      	ldrb	r3, [r7, #3]
 800db9a:	2b00      	cmp	r3, #0
 800db9c:	d115      	bne.n	800dbca <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800db9e:	687b      	ldr	r3, [r7, #4]
 800dba0:	68db      	ldr	r3, [r3, #12]
 800dba2:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800dba6:	687b      	ldr	r3, [r7, #4]
 800dba8:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800dbaa:	2001      	movs	r0, #1
 800dbac:	f7f5 f836 	bl	8002c1c <HAL_Delay>
      ms++;
 800dbb0:	68fb      	ldr	r3, [r7, #12]
 800dbb2:	3301      	adds	r3, #1
 800dbb4:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 800dbb6:	6878      	ldr	r0, [r7, #4]
 800dbb8:	f000 fa10 	bl	800dfdc <USB_GetMode>
 800dbbc:	4603      	mov	r3, r0
 800dbbe:	2b00      	cmp	r3, #0
 800dbc0:	d005      	beq.n	800dbce <USB_SetCurrentMode+0x84>
 800dbc2:	68fb      	ldr	r3, [r7, #12]
 800dbc4:	2b31      	cmp	r3, #49	; 0x31
 800dbc6:	d9f0      	bls.n	800dbaa <USB_SetCurrentMode+0x60>
 800dbc8:	e001      	b.n	800dbce <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800dbca:	2301      	movs	r3, #1
 800dbcc:	e005      	b.n	800dbda <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 800dbce:	68fb      	ldr	r3, [r7, #12]
 800dbd0:	2b32      	cmp	r3, #50	; 0x32
 800dbd2:	d101      	bne.n	800dbd8 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800dbd4:	2301      	movs	r3, #1
 800dbd6:	e000      	b.n	800dbda <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800dbd8:	2300      	movs	r3, #0
}
 800dbda:	4618      	mov	r0, r3
 800dbdc:	3710      	adds	r7, #16
 800dbde:	46bd      	mov	sp, r7
 800dbe0:	bd80      	pop	{r7, pc}
	...

0800dbe4 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800dbe4:	b084      	sub	sp, #16
 800dbe6:	b580      	push	{r7, lr}
 800dbe8:	b086      	sub	sp, #24
 800dbea:	af00      	add	r7, sp, #0
 800dbec:	6078      	str	r0, [r7, #4]
 800dbee:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800dbf2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800dbf6:	2300      	movs	r3, #0
 800dbf8:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800dbfa:	687b      	ldr	r3, [r7, #4]
 800dbfc:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800dbfe:	2300      	movs	r3, #0
 800dc00:	613b      	str	r3, [r7, #16]
 800dc02:	e009      	b.n	800dc18 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800dc04:	687a      	ldr	r2, [r7, #4]
 800dc06:	693b      	ldr	r3, [r7, #16]
 800dc08:	3340      	adds	r3, #64	; 0x40
 800dc0a:	009b      	lsls	r3, r3, #2
 800dc0c:	4413      	add	r3, r2
 800dc0e:	2200      	movs	r2, #0
 800dc10:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800dc12:	693b      	ldr	r3, [r7, #16]
 800dc14:	3301      	adds	r3, #1
 800dc16:	613b      	str	r3, [r7, #16]
 800dc18:	693b      	ldr	r3, [r7, #16]
 800dc1a:	2b0e      	cmp	r3, #14
 800dc1c:	d9f2      	bls.n	800dc04 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800dc1e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800dc20:	2b00      	cmp	r3, #0
 800dc22:	d11c      	bne.n	800dc5e <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800dc24:	68fb      	ldr	r3, [r7, #12]
 800dc26:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800dc2a:	685b      	ldr	r3, [r3, #4]
 800dc2c:	68fa      	ldr	r2, [r7, #12]
 800dc2e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800dc32:	f043 0302 	orr.w	r3, r3, #2
 800dc36:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 800dc38:	687b      	ldr	r3, [r7, #4]
 800dc3a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800dc3c:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800dc40:	687b      	ldr	r3, [r7, #4]
 800dc42:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 800dc44:	687b      	ldr	r3, [r7, #4]
 800dc46:	681b      	ldr	r3, [r3, #0]
 800dc48:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800dc4c:	687b      	ldr	r3, [r7, #4]
 800dc4e:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 800dc50:	687b      	ldr	r3, [r7, #4]
 800dc52:	681b      	ldr	r3, [r3, #0]
 800dc54:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800dc58:	687b      	ldr	r3, [r7, #4]
 800dc5a:	601a      	str	r2, [r3, #0]
 800dc5c:	e005      	b.n	800dc6a <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 800dc5e:	687b      	ldr	r3, [r7, #4]
 800dc60:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800dc62:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800dc66:	687b      	ldr	r3, [r7, #4]
 800dc68:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800dc6a:	68fb      	ldr	r3, [r7, #12]
 800dc6c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800dc70:	461a      	mov	r2, r3
 800dc72:	2300      	movs	r3, #0
 800dc74:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800dc76:	68fb      	ldr	r3, [r7, #12]
 800dc78:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800dc7c:	4619      	mov	r1, r3
 800dc7e:	68fb      	ldr	r3, [r7, #12]
 800dc80:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800dc84:	461a      	mov	r2, r3
 800dc86:	680b      	ldr	r3, [r1, #0]
 800dc88:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800dc8a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dc8c:	2b01      	cmp	r3, #1
 800dc8e:	d10c      	bne.n	800dcaa <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800dc90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dc92:	2b00      	cmp	r3, #0
 800dc94:	d104      	bne.n	800dca0 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800dc96:	2100      	movs	r1, #0
 800dc98:	6878      	ldr	r0, [r7, #4]
 800dc9a:	f000 f965 	bl	800df68 <USB_SetDevSpeed>
 800dc9e:	e008      	b.n	800dcb2 <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800dca0:	2101      	movs	r1, #1
 800dca2:	6878      	ldr	r0, [r7, #4]
 800dca4:	f000 f960 	bl	800df68 <USB_SetDevSpeed>
 800dca8:	e003      	b.n	800dcb2 <USB_DevInit+0xce>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800dcaa:	2103      	movs	r1, #3
 800dcac:	6878      	ldr	r0, [r7, #4]
 800dcae:	f000 f95b 	bl	800df68 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800dcb2:	2110      	movs	r1, #16
 800dcb4:	6878      	ldr	r0, [r7, #4]
 800dcb6:	f000 f8f3 	bl	800dea0 <USB_FlushTxFifo>
 800dcba:	4603      	mov	r3, r0
 800dcbc:	2b00      	cmp	r3, #0
 800dcbe:	d001      	beq.n	800dcc4 <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 800dcc0:	2301      	movs	r3, #1
 800dcc2:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800dcc4:	6878      	ldr	r0, [r7, #4]
 800dcc6:	f000 f91f 	bl	800df08 <USB_FlushRxFifo>
 800dcca:	4603      	mov	r3, r0
 800dccc:	2b00      	cmp	r3, #0
 800dcce:	d001      	beq.n	800dcd4 <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 800dcd0:	2301      	movs	r3, #1
 800dcd2:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800dcd4:	68fb      	ldr	r3, [r7, #12]
 800dcd6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800dcda:	461a      	mov	r2, r3
 800dcdc:	2300      	movs	r3, #0
 800dcde:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800dce0:	68fb      	ldr	r3, [r7, #12]
 800dce2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800dce6:	461a      	mov	r2, r3
 800dce8:	2300      	movs	r3, #0
 800dcea:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800dcec:	68fb      	ldr	r3, [r7, #12]
 800dcee:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800dcf2:	461a      	mov	r2, r3
 800dcf4:	2300      	movs	r3, #0
 800dcf6:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800dcf8:	2300      	movs	r3, #0
 800dcfa:	613b      	str	r3, [r7, #16]
 800dcfc:	e043      	b.n	800dd86 <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800dcfe:	693b      	ldr	r3, [r7, #16]
 800dd00:	015a      	lsls	r2, r3, #5
 800dd02:	68fb      	ldr	r3, [r7, #12]
 800dd04:	4413      	add	r3, r2
 800dd06:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800dd0a:	681b      	ldr	r3, [r3, #0]
 800dd0c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800dd10:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800dd14:	d118      	bne.n	800dd48 <USB_DevInit+0x164>
    {
      if (i == 0U)
 800dd16:	693b      	ldr	r3, [r7, #16]
 800dd18:	2b00      	cmp	r3, #0
 800dd1a:	d10a      	bne.n	800dd32 <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800dd1c:	693b      	ldr	r3, [r7, #16]
 800dd1e:	015a      	lsls	r2, r3, #5
 800dd20:	68fb      	ldr	r3, [r7, #12]
 800dd22:	4413      	add	r3, r2
 800dd24:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800dd28:	461a      	mov	r2, r3
 800dd2a:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800dd2e:	6013      	str	r3, [r2, #0]
 800dd30:	e013      	b.n	800dd5a <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800dd32:	693b      	ldr	r3, [r7, #16]
 800dd34:	015a      	lsls	r2, r3, #5
 800dd36:	68fb      	ldr	r3, [r7, #12]
 800dd38:	4413      	add	r3, r2
 800dd3a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800dd3e:	461a      	mov	r2, r3
 800dd40:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800dd44:	6013      	str	r3, [r2, #0]
 800dd46:	e008      	b.n	800dd5a <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800dd48:	693b      	ldr	r3, [r7, #16]
 800dd4a:	015a      	lsls	r2, r3, #5
 800dd4c:	68fb      	ldr	r3, [r7, #12]
 800dd4e:	4413      	add	r3, r2
 800dd50:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800dd54:	461a      	mov	r2, r3
 800dd56:	2300      	movs	r3, #0
 800dd58:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800dd5a:	693b      	ldr	r3, [r7, #16]
 800dd5c:	015a      	lsls	r2, r3, #5
 800dd5e:	68fb      	ldr	r3, [r7, #12]
 800dd60:	4413      	add	r3, r2
 800dd62:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800dd66:	461a      	mov	r2, r3
 800dd68:	2300      	movs	r3, #0
 800dd6a:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800dd6c:	693b      	ldr	r3, [r7, #16]
 800dd6e:	015a      	lsls	r2, r3, #5
 800dd70:	68fb      	ldr	r3, [r7, #12]
 800dd72:	4413      	add	r3, r2
 800dd74:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800dd78:	461a      	mov	r2, r3
 800dd7a:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800dd7e:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800dd80:	693b      	ldr	r3, [r7, #16]
 800dd82:	3301      	adds	r3, #1
 800dd84:	613b      	str	r3, [r7, #16]
 800dd86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dd88:	693a      	ldr	r2, [r7, #16]
 800dd8a:	429a      	cmp	r2, r3
 800dd8c:	d3b7      	bcc.n	800dcfe <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800dd8e:	2300      	movs	r3, #0
 800dd90:	613b      	str	r3, [r7, #16]
 800dd92:	e043      	b.n	800de1c <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800dd94:	693b      	ldr	r3, [r7, #16]
 800dd96:	015a      	lsls	r2, r3, #5
 800dd98:	68fb      	ldr	r3, [r7, #12]
 800dd9a:	4413      	add	r3, r2
 800dd9c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800dda0:	681b      	ldr	r3, [r3, #0]
 800dda2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800dda6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800ddaa:	d118      	bne.n	800ddde <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 800ddac:	693b      	ldr	r3, [r7, #16]
 800ddae:	2b00      	cmp	r3, #0
 800ddb0:	d10a      	bne.n	800ddc8 <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800ddb2:	693b      	ldr	r3, [r7, #16]
 800ddb4:	015a      	lsls	r2, r3, #5
 800ddb6:	68fb      	ldr	r3, [r7, #12]
 800ddb8:	4413      	add	r3, r2
 800ddba:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ddbe:	461a      	mov	r2, r3
 800ddc0:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800ddc4:	6013      	str	r3, [r2, #0]
 800ddc6:	e013      	b.n	800ddf0 <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800ddc8:	693b      	ldr	r3, [r7, #16]
 800ddca:	015a      	lsls	r2, r3, #5
 800ddcc:	68fb      	ldr	r3, [r7, #12]
 800ddce:	4413      	add	r3, r2
 800ddd0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ddd4:	461a      	mov	r2, r3
 800ddd6:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800ddda:	6013      	str	r3, [r2, #0]
 800dddc:	e008      	b.n	800ddf0 <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800ddde:	693b      	ldr	r3, [r7, #16]
 800dde0:	015a      	lsls	r2, r3, #5
 800dde2:	68fb      	ldr	r3, [r7, #12]
 800dde4:	4413      	add	r3, r2
 800dde6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ddea:	461a      	mov	r2, r3
 800ddec:	2300      	movs	r3, #0
 800ddee:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800ddf0:	693b      	ldr	r3, [r7, #16]
 800ddf2:	015a      	lsls	r2, r3, #5
 800ddf4:	68fb      	ldr	r3, [r7, #12]
 800ddf6:	4413      	add	r3, r2
 800ddf8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ddfc:	461a      	mov	r2, r3
 800ddfe:	2300      	movs	r3, #0
 800de00:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800de02:	693b      	ldr	r3, [r7, #16]
 800de04:	015a      	lsls	r2, r3, #5
 800de06:	68fb      	ldr	r3, [r7, #12]
 800de08:	4413      	add	r3, r2
 800de0a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800de0e:	461a      	mov	r2, r3
 800de10:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800de14:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800de16:	693b      	ldr	r3, [r7, #16]
 800de18:	3301      	adds	r3, #1
 800de1a:	613b      	str	r3, [r7, #16]
 800de1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800de1e:	693a      	ldr	r2, [r7, #16]
 800de20:	429a      	cmp	r2, r3
 800de22:	d3b7      	bcc.n	800dd94 <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800de24:	68fb      	ldr	r3, [r7, #12]
 800de26:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800de2a:	691b      	ldr	r3, [r3, #16]
 800de2c:	68fa      	ldr	r2, [r7, #12]
 800de2e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800de32:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800de36:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800de38:	687b      	ldr	r3, [r7, #4]
 800de3a:	2200      	movs	r2, #0
 800de3c:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800de3e:	687b      	ldr	r3, [r7, #4]
 800de40:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 800de44:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800de46:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800de48:	2b00      	cmp	r3, #0
 800de4a:	d105      	bne.n	800de58 <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800de4c:	687b      	ldr	r3, [r7, #4]
 800de4e:	699b      	ldr	r3, [r3, #24]
 800de50:	f043 0210 	orr.w	r2, r3, #16
 800de54:	687b      	ldr	r3, [r7, #4]
 800de56:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800de58:	687b      	ldr	r3, [r7, #4]
 800de5a:	699a      	ldr	r2, [r3, #24]
 800de5c:	4b0e      	ldr	r3, [pc, #56]	; (800de98 <USB_DevInit+0x2b4>)
 800de5e:	4313      	orrs	r3, r2
 800de60:	687a      	ldr	r2, [r7, #4]
 800de62:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800de64:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800de66:	2b00      	cmp	r3, #0
 800de68:	d005      	beq.n	800de76 <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800de6a:	687b      	ldr	r3, [r7, #4]
 800de6c:	699b      	ldr	r3, [r3, #24]
 800de6e:	f043 0208 	orr.w	r2, r3, #8
 800de72:	687b      	ldr	r3, [r7, #4]
 800de74:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800de76:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800de78:	2b01      	cmp	r3, #1
 800de7a:	d105      	bne.n	800de88 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800de7c:	687b      	ldr	r3, [r7, #4]
 800de7e:	699a      	ldr	r2, [r3, #24]
 800de80:	4b06      	ldr	r3, [pc, #24]	; (800de9c <USB_DevInit+0x2b8>)
 800de82:	4313      	orrs	r3, r2
 800de84:	687a      	ldr	r2, [r7, #4]
 800de86:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800de88:	7dfb      	ldrb	r3, [r7, #23]
}
 800de8a:	4618      	mov	r0, r3
 800de8c:	3718      	adds	r7, #24
 800de8e:	46bd      	mov	sp, r7
 800de90:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800de94:	b004      	add	sp, #16
 800de96:	4770      	bx	lr
 800de98:	803c3800 	.word	0x803c3800
 800de9c:	40000004 	.word	0x40000004

0800dea0 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800dea0:	b480      	push	{r7}
 800dea2:	b085      	sub	sp, #20
 800dea4:	af00      	add	r7, sp, #0
 800dea6:	6078      	str	r0, [r7, #4]
 800dea8:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800deaa:	2300      	movs	r3, #0
 800deac:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800deae:	68fb      	ldr	r3, [r7, #12]
 800deb0:	3301      	adds	r3, #1
 800deb2:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800deb4:	68fb      	ldr	r3, [r7, #12]
 800deb6:	4a13      	ldr	r2, [pc, #76]	; (800df04 <USB_FlushTxFifo+0x64>)
 800deb8:	4293      	cmp	r3, r2
 800deba:	d901      	bls.n	800dec0 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 800debc:	2303      	movs	r3, #3
 800debe:	e01b      	b.n	800def8 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800dec0:	687b      	ldr	r3, [r7, #4]
 800dec2:	691b      	ldr	r3, [r3, #16]
 800dec4:	2b00      	cmp	r3, #0
 800dec6:	daf2      	bge.n	800deae <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 800dec8:	2300      	movs	r3, #0
 800deca:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800decc:	683b      	ldr	r3, [r7, #0]
 800dece:	019b      	lsls	r3, r3, #6
 800ded0:	f043 0220 	orr.w	r2, r3, #32
 800ded4:	687b      	ldr	r3, [r7, #4]
 800ded6:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800ded8:	68fb      	ldr	r3, [r7, #12]
 800deda:	3301      	adds	r3, #1
 800dedc:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800dede:	68fb      	ldr	r3, [r7, #12]
 800dee0:	4a08      	ldr	r2, [pc, #32]	; (800df04 <USB_FlushTxFifo+0x64>)
 800dee2:	4293      	cmp	r3, r2
 800dee4:	d901      	bls.n	800deea <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800dee6:	2303      	movs	r3, #3
 800dee8:	e006      	b.n	800def8 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800deea:	687b      	ldr	r3, [r7, #4]
 800deec:	691b      	ldr	r3, [r3, #16]
 800deee:	f003 0320 	and.w	r3, r3, #32
 800def2:	2b20      	cmp	r3, #32
 800def4:	d0f0      	beq.n	800ded8 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800def6:	2300      	movs	r3, #0
}
 800def8:	4618      	mov	r0, r3
 800defa:	3714      	adds	r7, #20
 800defc:	46bd      	mov	sp, r7
 800defe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df02:	4770      	bx	lr
 800df04:	00030d40 	.word	0x00030d40

0800df08 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800df08:	b480      	push	{r7}
 800df0a:	b085      	sub	sp, #20
 800df0c:	af00      	add	r7, sp, #0
 800df0e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800df10:	2300      	movs	r3, #0
 800df12:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800df14:	68fb      	ldr	r3, [r7, #12]
 800df16:	3301      	adds	r3, #1
 800df18:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800df1a:	68fb      	ldr	r3, [r7, #12]
 800df1c:	4a11      	ldr	r2, [pc, #68]	; (800df64 <USB_FlushRxFifo+0x5c>)
 800df1e:	4293      	cmp	r3, r2
 800df20:	d901      	bls.n	800df26 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800df22:	2303      	movs	r3, #3
 800df24:	e018      	b.n	800df58 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800df26:	687b      	ldr	r3, [r7, #4]
 800df28:	691b      	ldr	r3, [r3, #16]
 800df2a:	2b00      	cmp	r3, #0
 800df2c:	daf2      	bge.n	800df14 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800df2e:	2300      	movs	r3, #0
 800df30:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800df32:	687b      	ldr	r3, [r7, #4]
 800df34:	2210      	movs	r2, #16
 800df36:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800df38:	68fb      	ldr	r3, [r7, #12]
 800df3a:	3301      	adds	r3, #1
 800df3c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800df3e:	68fb      	ldr	r3, [r7, #12]
 800df40:	4a08      	ldr	r2, [pc, #32]	; (800df64 <USB_FlushRxFifo+0x5c>)
 800df42:	4293      	cmp	r3, r2
 800df44:	d901      	bls.n	800df4a <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800df46:	2303      	movs	r3, #3
 800df48:	e006      	b.n	800df58 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800df4a:	687b      	ldr	r3, [r7, #4]
 800df4c:	691b      	ldr	r3, [r3, #16]
 800df4e:	f003 0310 	and.w	r3, r3, #16
 800df52:	2b10      	cmp	r3, #16
 800df54:	d0f0      	beq.n	800df38 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800df56:	2300      	movs	r3, #0
}
 800df58:	4618      	mov	r0, r3
 800df5a:	3714      	adds	r7, #20
 800df5c:	46bd      	mov	sp, r7
 800df5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df62:	4770      	bx	lr
 800df64:	00030d40 	.word	0x00030d40

0800df68 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800df68:	b480      	push	{r7}
 800df6a:	b085      	sub	sp, #20
 800df6c:	af00      	add	r7, sp, #0
 800df6e:	6078      	str	r0, [r7, #4]
 800df70:	460b      	mov	r3, r1
 800df72:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800df74:	687b      	ldr	r3, [r7, #4]
 800df76:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800df78:	68fb      	ldr	r3, [r7, #12]
 800df7a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800df7e:	681a      	ldr	r2, [r3, #0]
 800df80:	78fb      	ldrb	r3, [r7, #3]
 800df82:	68f9      	ldr	r1, [r7, #12]
 800df84:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800df88:	4313      	orrs	r3, r2
 800df8a:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800df8c:	2300      	movs	r3, #0
}
 800df8e:	4618      	mov	r0, r3
 800df90:	3714      	adds	r7, #20
 800df92:	46bd      	mov	sp, r7
 800df94:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df98:	4770      	bx	lr

0800df9a <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800df9a:	b480      	push	{r7}
 800df9c:	b085      	sub	sp, #20
 800df9e:	af00      	add	r7, sp, #0
 800dfa0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800dfa2:	687b      	ldr	r3, [r7, #4]
 800dfa4:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800dfa6:	68fb      	ldr	r3, [r7, #12]
 800dfa8:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800dfac:	681b      	ldr	r3, [r3, #0]
 800dfae:	68fa      	ldr	r2, [r7, #12]
 800dfb0:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800dfb4:	f023 0303 	bic.w	r3, r3, #3
 800dfb8:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800dfba:	68fb      	ldr	r3, [r7, #12]
 800dfbc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800dfc0:	685b      	ldr	r3, [r3, #4]
 800dfc2:	68fa      	ldr	r2, [r7, #12]
 800dfc4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800dfc8:	f043 0302 	orr.w	r3, r3, #2
 800dfcc:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800dfce:	2300      	movs	r3, #0
}
 800dfd0:	4618      	mov	r0, r3
 800dfd2:	3714      	adds	r7, #20
 800dfd4:	46bd      	mov	sp, r7
 800dfd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dfda:	4770      	bx	lr

0800dfdc <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800dfdc:	b480      	push	{r7}
 800dfde:	b083      	sub	sp, #12
 800dfe0:	af00      	add	r7, sp, #0
 800dfe2:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800dfe4:	687b      	ldr	r3, [r7, #4]
 800dfe6:	695b      	ldr	r3, [r3, #20]
 800dfe8:	f003 0301 	and.w	r3, r3, #1
}
 800dfec:	4618      	mov	r0, r3
 800dfee:	370c      	adds	r7, #12
 800dff0:	46bd      	mov	sp, r7
 800dff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dff6:	4770      	bx	lr

0800dff8 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800dff8:	b480      	push	{r7}
 800dffa:	b085      	sub	sp, #20
 800dffc:	af00      	add	r7, sp, #0
 800dffe:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800e000:	2300      	movs	r3, #0
 800e002:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800e004:	68fb      	ldr	r3, [r7, #12]
 800e006:	3301      	adds	r3, #1
 800e008:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800e00a:	68fb      	ldr	r3, [r7, #12]
 800e00c:	4a13      	ldr	r2, [pc, #76]	; (800e05c <USB_CoreReset+0x64>)
 800e00e:	4293      	cmp	r3, r2
 800e010:	d901      	bls.n	800e016 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800e012:	2303      	movs	r3, #3
 800e014:	e01b      	b.n	800e04e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800e016:	687b      	ldr	r3, [r7, #4]
 800e018:	691b      	ldr	r3, [r3, #16]
 800e01a:	2b00      	cmp	r3, #0
 800e01c:	daf2      	bge.n	800e004 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800e01e:	2300      	movs	r3, #0
 800e020:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800e022:	687b      	ldr	r3, [r7, #4]
 800e024:	691b      	ldr	r3, [r3, #16]
 800e026:	f043 0201 	orr.w	r2, r3, #1
 800e02a:	687b      	ldr	r3, [r7, #4]
 800e02c:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800e02e:	68fb      	ldr	r3, [r7, #12]
 800e030:	3301      	adds	r3, #1
 800e032:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800e034:	68fb      	ldr	r3, [r7, #12]
 800e036:	4a09      	ldr	r2, [pc, #36]	; (800e05c <USB_CoreReset+0x64>)
 800e038:	4293      	cmp	r3, r2
 800e03a:	d901      	bls.n	800e040 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800e03c:	2303      	movs	r3, #3
 800e03e:	e006      	b.n	800e04e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800e040:	687b      	ldr	r3, [r7, #4]
 800e042:	691b      	ldr	r3, [r3, #16]
 800e044:	f003 0301 	and.w	r3, r3, #1
 800e048:	2b01      	cmp	r3, #1
 800e04a:	d0f0      	beq.n	800e02e <USB_CoreReset+0x36>

  return HAL_OK;
 800e04c:	2300      	movs	r3, #0
}
 800e04e:	4618      	mov	r0, r3
 800e050:	3714      	adds	r7, #20
 800e052:	46bd      	mov	sp, r7
 800e054:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e058:	4770      	bx	lr
 800e05a:	bf00      	nop
 800e05c:	00030d40 	.word	0x00030d40

0800e060 <__errno>:
 800e060:	4b01      	ldr	r3, [pc, #4]	; (800e068 <__errno+0x8>)
 800e062:	6818      	ldr	r0, [r3, #0]
 800e064:	4770      	bx	lr
 800e066:	bf00      	nop
 800e068:	24000018 	.word	0x24000018

0800e06c <__libc_init_array>:
 800e06c:	b570      	push	{r4, r5, r6, lr}
 800e06e:	4d0d      	ldr	r5, [pc, #52]	; (800e0a4 <__libc_init_array+0x38>)
 800e070:	4c0d      	ldr	r4, [pc, #52]	; (800e0a8 <__libc_init_array+0x3c>)
 800e072:	1b64      	subs	r4, r4, r5
 800e074:	10a4      	asrs	r4, r4, #2
 800e076:	2600      	movs	r6, #0
 800e078:	42a6      	cmp	r6, r4
 800e07a:	d109      	bne.n	800e090 <__libc_init_array+0x24>
 800e07c:	4d0b      	ldr	r5, [pc, #44]	; (800e0ac <__libc_init_array+0x40>)
 800e07e:	4c0c      	ldr	r4, [pc, #48]	; (800e0b0 <__libc_init_array+0x44>)
 800e080:	f000 fca2 	bl	800e9c8 <_init>
 800e084:	1b64      	subs	r4, r4, r5
 800e086:	10a4      	asrs	r4, r4, #2
 800e088:	2600      	movs	r6, #0
 800e08a:	42a6      	cmp	r6, r4
 800e08c:	d105      	bne.n	800e09a <__libc_init_array+0x2e>
 800e08e:	bd70      	pop	{r4, r5, r6, pc}
 800e090:	f855 3b04 	ldr.w	r3, [r5], #4
 800e094:	4798      	blx	r3
 800e096:	3601      	adds	r6, #1
 800e098:	e7ee      	b.n	800e078 <__libc_init_array+0xc>
 800e09a:	f855 3b04 	ldr.w	r3, [r5], #4
 800e09e:	4798      	blx	r3
 800e0a0:	3601      	adds	r6, #1
 800e0a2:	e7f2      	b.n	800e08a <__libc_init_array+0x1e>
 800e0a4:	0800eab4 	.word	0x0800eab4
 800e0a8:	0800eab4 	.word	0x0800eab4
 800e0ac:	0800eab4 	.word	0x0800eab4
 800e0b0:	0800eab8 	.word	0x0800eab8

0800e0b4 <memcpy>:
 800e0b4:	440a      	add	r2, r1
 800e0b6:	4291      	cmp	r1, r2
 800e0b8:	f100 33ff 	add.w	r3, r0, #4294967295
 800e0bc:	d100      	bne.n	800e0c0 <memcpy+0xc>
 800e0be:	4770      	bx	lr
 800e0c0:	b510      	push	{r4, lr}
 800e0c2:	f811 4b01 	ldrb.w	r4, [r1], #1
 800e0c6:	f803 4f01 	strb.w	r4, [r3, #1]!
 800e0ca:	4291      	cmp	r1, r2
 800e0cc:	d1f9      	bne.n	800e0c2 <memcpy+0xe>
 800e0ce:	bd10      	pop	{r4, pc}

0800e0d0 <memset>:
 800e0d0:	4402      	add	r2, r0
 800e0d2:	4603      	mov	r3, r0
 800e0d4:	4293      	cmp	r3, r2
 800e0d6:	d100      	bne.n	800e0da <memset+0xa>
 800e0d8:	4770      	bx	lr
 800e0da:	f803 1b01 	strb.w	r1, [r3], #1
 800e0de:	e7f9      	b.n	800e0d4 <memset+0x4>

0800e0e0 <sniprintf>:
 800e0e0:	b40c      	push	{r2, r3}
 800e0e2:	b530      	push	{r4, r5, lr}
 800e0e4:	4b17      	ldr	r3, [pc, #92]	; (800e144 <sniprintf+0x64>)
 800e0e6:	1e0c      	subs	r4, r1, #0
 800e0e8:	681d      	ldr	r5, [r3, #0]
 800e0ea:	b09d      	sub	sp, #116	; 0x74
 800e0ec:	da08      	bge.n	800e100 <sniprintf+0x20>
 800e0ee:	238b      	movs	r3, #139	; 0x8b
 800e0f0:	602b      	str	r3, [r5, #0]
 800e0f2:	f04f 30ff 	mov.w	r0, #4294967295
 800e0f6:	b01d      	add	sp, #116	; 0x74
 800e0f8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800e0fc:	b002      	add	sp, #8
 800e0fe:	4770      	bx	lr
 800e100:	f44f 7302 	mov.w	r3, #520	; 0x208
 800e104:	f8ad 3014 	strh.w	r3, [sp, #20]
 800e108:	bf14      	ite	ne
 800e10a:	f104 33ff 	addne.w	r3, r4, #4294967295
 800e10e:	4623      	moveq	r3, r4
 800e110:	9304      	str	r3, [sp, #16]
 800e112:	9307      	str	r3, [sp, #28]
 800e114:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800e118:	9002      	str	r0, [sp, #8]
 800e11a:	9006      	str	r0, [sp, #24]
 800e11c:	f8ad 3016 	strh.w	r3, [sp, #22]
 800e120:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800e122:	ab21      	add	r3, sp, #132	; 0x84
 800e124:	a902      	add	r1, sp, #8
 800e126:	4628      	mov	r0, r5
 800e128:	9301      	str	r3, [sp, #4]
 800e12a:	f000 f869 	bl	800e200 <_svfiprintf_r>
 800e12e:	1c43      	adds	r3, r0, #1
 800e130:	bfbc      	itt	lt
 800e132:	238b      	movlt	r3, #139	; 0x8b
 800e134:	602b      	strlt	r3, [r5, #0]
 800e136:	2c00      	cmp	r4, #0
 800e138:	d0dd      	beq.n	800e0f6 <sniprintf+0x16>
 800e13a:	9b02      	ldr	r3, [sp, #8]
 800e13c:	2200      	movs	r2, #0
 800e13e:	701a      	strb	r2, [r3, #0]
 800e140:	e7d9      	b.n	800e0f6 <sniprintf+0x16>
 800e142:	bf00      	nop
 800e144:	24000018 	.word	0x24000018

0800e148 <__ssputs_r>:
 800e148:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e14c:	688e      	ldr	r6, [r1, #8]
 800e14e:	429e      	cmp	r6, r3
 800e150:	4682      	mov	sl, r0
 800e152:	460c      	mov	r4, r1
 800e154:	4690      	mov	r8, r2
 800e156:	461f      	mov	r7, r3
 800e158:	d838      	bhi.n	800e1cc <__ssputs_r+0x84>
 800e15a:	898a      	ldrh	r2, [r1, #12]
 800e15c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800e160:	d032      	beq.n	800e1c8 <__ssputs_r+0x80>
 800e162:	6825      	ldr	r5, [r4, #0]
 800e164:	6909      	ldr	r1, [r1, #16]
 800e166:	eba5 0901 	sub.w	r9, r5, r1
 800e16a:	6965      	ldr	r5, [r4, #20]
 800e16c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800e170:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800e174:	3301      	adds	r3, #1
 800e176:	444b      	add	r3, r9
 800e178:	106d      	asrs	r5, r5, #1
 800e17a:	429d      	cmp	r5, r3
 800e17c:	bf38      	it	cc
 800e17e:	461d      	movcc	r5, r3
 800e180:	0553      	lsls	r3, r2, #21
 800e182:	d531      	bpl.n	800e1e8 <__ssputs_r+0xa0>
 800e184:	4629      	mov	r1, r5
 800e186:	f000 fb55 	bl	800e834 <_malloc_r>
 800e18a:	4606      	mov	r6, r0
 800e18c:	b950      	cbnz	r0, 800e1a4 <__ssputs_r+0x5c>
 800e18e:	230c      	movs	r3, #12
 800e190:	f8ca 3000 	str.w	r3, [sl]
 800e194:	89a3      	ldrh	r3, [r4, #12]
 800e196:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e19a:	81a3      	strh	r3, [r4, #12]
 800e19c:	f04f 30ff 	mov.w	r0, #4294967295
 800e1a0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e1a4:	6921      	ldr	r1, [r4, #16]
 800e1a6:	464a      	mov	r2, r9
 800e1a8:	f7ff ff84 	bl	800e0b4 <memcpy>
 800e1ac:	89a3      	ldrh	r3, [r4, #12]
 800e1ae:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800e1b2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800e1b6:	81a3      	strh	r3, [r4, #12]
 800e1b8:	6126      	str	r6, [r4, #16]
 800e1ba:	6165      	str	r5, [r4, #20]
 800e1bc:	444e      	add	r6, r9
 800e1be:	eba5 0509 	sub.w	r5, r5, r9
 800e1c2:	6026      	str	r6, [r4, #0]
 800e1c4:	60a5      	str	r5, [r4, #8]
 800e1c6:	463e      	mov	r6, r7
 800e1c8:	42be      	cmp	r6, r7
 800e1ca:	d900      	bls.n	800e1ce <__ssputs_r+0x86>
 800e1cc:	463e      	mov	r6, r7
 800e1ce:	6820      	ldr	r0, [r4, #0]
 800e1d0:	4632      	mov	r2, r6
 800e1d2:	4641      	mov	r1, r8
 800e1d4:	f000 faa8 	bl	800e728 <memmove>
 800e1d8:	68a3      	ldr	r3, [r4, #8]
 800e1da:	1b9b      	subs	r3, r3, r6
 800e1dc:	60a3      	str	r3, [r4, #8]
 800e1de:	6823      	ldr	r3, [r4, #0]
 800e1e0:	4433      	add	r3, r6
 800e1e2:	6023      	str	r3, [r4, #0]
 800e1e4:	2000      	movs	r0, #0
 800e1e6:	e7db      	b.n	800e1a0 <__ssputs_r+0x58>
 800e1e8:	462a      	mov	r2, r5
 800e1ea:	f000 fb97 	bl	800e91c <_realloc_r>
 800e1ee:	4606      	mov	r6, r0
 800e1f0:	2800      	cmp	r0, #0
 800e1f2:	d1e1      	bne.n	800e1b8 <__ssputs_r+0x70>
 800e1f4:	6921      	ldr	r1, [r4, #16]
 800e1f6:	4650      	mov	r0, sl
 800e1f8:	f000 fab0 	bl	800e75c <_free_r>
 800e1fc:	e7c7      	b.n	800e18e <__ssputs_r+0x46>
	...

0800e200 <_svfiprintf_r>:
 800e200:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e204:	4698      	mov	r8, r3
 800e206:	898b      	ldrh	r3, [r1, #12]
 800e208:	061b      	lsls	r3, r3, #24
 800e20a:	b09d      	sub	sp, #116	; 0x74
 800e20c:	4607      	mov	r7, r0
 800e20e:	460d      	mov	r5, r1
 800e210:	4614      	mov	r4, r2
 800e212:	d50e      	bpl.n	800e232 <_svfiprintf_r+0x32>
 800e214:	690b      	ldr	r3, [r1, #16]
 800e216:	b963      	cbnz	r3, 800e232 <_svfiprintf_r+0x32>
 800e218:	2140      	movs	r1, #64	; 0x40
 800e21a:	f000 fb0b 	bl	800e834 <_malloc_r>
 800e21e:	6028      	str	r0, [r5, #0]
 800e220:	6128      	str	r0, [r5, #16]
 800e222:	b920      	cbnz	r0, 800e22e <_svfiprintf_r+0x2e>
 800e224:	230c      	movs	r3, #12
 800e226:	603b      	str	r3, [r7, #0]
 800e228:	f04f 30ff 	mov.w	r0, #4294967295
 800e22c:	e0d1      	b.n	800e3d2 <_svfiprintf_r+0x1d2>
 800e22e:	2340      	movs	r3, #64	; 0x40
 800e230:	616b      	str	r3, [r5, #20]
 800e232:	2300      	movs	r3, #0
 800e234:	9309      	str	r3, [sp, #36]	; 0x24
 800e236:	2320      	movs	r3, #32
 800e238:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800e23c:	f8cd 800c 	str.w	r8, [sp, #12]
 800e240:	2330      	movs	r3, #48	; 0x30
 800e242:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800e3ec <_svfiprintf_r+0x1ec>
 800e246:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800e24a:	f04f 0901 	mov.w	r9, #1
 800e24e:	4623      	mov	r3, r4
 800e250:	469a      	mov	sl, r3
 800e252:	f813 2b01 	ldrb.w	r2, [r3], #1
 800e256:	b10a      	cbz	r2, 800e25c <_svfiprintf_r+0x5c>
 800e258:	2a25      	cmp	r2, #37	; 0x25
 800e25a:	d1f9      	bne.n	800e250 <_svfiprintf_r+0x50>
 800e25c:	ebba 0b04 	subs.w	fp, sl, r4
 800e260:	d00b      	beq.n	800e27a <_svfiprintf_r+0x7a>
 800e262:	465b      	mov	r3, fp
 800e264:	4622      	mov	r2, r4
 800e266:	4629      	mov	r1, r5
 800e268:	4638      	mov	r0, r7
 800e26a:	f7ff ff6d 	bl	800e148 <__ssputs_r>
 800e26e:	3001      	adds	r0, #1
 800e270:	f000 80aa 	beq.w	800e3c8 <_svfiprintf_r+0x1c8>
 800e274:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800e276:	445a      	add	r2, fp
 800e278:	9209      	str	r2, [sp, #36]	; 0x24
 800e27a:	f89a 3000 	ldrb.w	r3, [sl]
 800e27e:	2b00      	cmp	r3, #0
 800e280:	f000 80a2 	beq.w	800e3c8 <_svfiprintf_r+0x1c8>
 800e284:	2300      	movs	r3, #0
 800e286:	f04f 32ff 	mov.w	r2, #4294967295
 800e28a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800e28e:	f10a 0a01 	add.w	sl, sl, #1
 800e292:	9304      	str	r3, [sp, #16]
 800e294:	9307      	str	r3, [sp, #28]
 800e296:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800e29a:	931a      	str	r3, [sp, #104]	; 0x68
 800e29c:	4654      	mov	r4, sl
 800e29e:	2205      	movs	r2, #5
 800e2a0:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e2a4:	4851      	ldr	r0, [pc, #324]	; (800e3ec <_svfiprintf_r+0x1ec>)
 800e2a6:	f7f2 f823 	bl	80002f0 <memchr>
 800e2aa:	9a04      	ldr	r2, [sp, #16]
 800e2ac:	b9d8      	cbnz	r0, 800e2e6 <_svfiprintf_r+0xe6>
 800e2ae:	06d0      	lsls	r0, r2, #27
 800e2b0:	bf44      	itt	mi
 800e2b2:	2320      	movmi	r3, #32
 800e2b4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800e2b8:	0711      	lsls	r1, r2, #28
 800e2ba:	bf44      	itt	mi
 800e2bc:	232b      	movmi	r3, #43	; 0x2b
 800e2be:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800e2c2:	f89a 3000 	ldrb.w	r3, [sl]
 800e2c6:	2b2a      	cmp	r3, #42	; 0x2a
 800e2c8:	d015      	beq.n	800e2f6 <_svfiprintf_r+0xf6>
 800e2ca:	9a07      	ldr	r2, [sp, #28]
 800e2cc:	4654      	mov	r4, sl
 800e2ce:	2000      	movs	r0, #0
 800e2d0:	f04f 0c0a 	mov.w	ip, #10
 800e2d4:	4621      	mov	r1, r4
 800e2d6:	f811 3b01 	ldrb.w	r3, [r1], #1
 800e2da:	3b30      	subs	r3, #48	; 0x30
 800e2dc:	2b09      	cmp	r3, #9
 800e2de:	d94e      	bls.n	800e37e <_svfiprintf_r+0x17e>
 800e2e0:	b1b0      	cbz	r0, 800e310 <_svfiprintf_r+0x110>
 800e2e2:	9207      	str	r2, [sp, #28]
 800e2e4:	e014      	b.n	800e310 <_svfiprintf_r+0x110>
 800e2e6:	eba0 0308 	sub.w	r3, r0, r8
 800e2ea:	fa09 f303 	lsl.w	r3, r9, r3
 800e2ee:	4313      	orrs	r3, r2
 800e2f0:	9304      	str	r3, [sp, #16]
 800e2f2:	46a2      	mov	sl, r4
 800e2f4:	e7d2      	b.n	800e29c <_svfiprintf_r+0x9c>
 800e2f6:	9b03      	ldr	r3, [sp, #12]
 800e2f8:	1d19      	adds	r1, r3, #4
 800e2fa:	681b      	ldr	r3, [r3, #0]
 800e2fc:	9103      	str	r1, [sp, #12]
 800e2fe:	2b00      	cmp	r3, #0
 800e300:	bfbb      	ittet	lt
 800e302:	425b      	neglt	r3, r3
 800e304:	f042 0202 	orrlt.w	r2, r2, #2
 800e308:	9307      	strge	r3, [sp, #28]
 800e30a:	9307      	strlt	r3, [sp, #28]
 800e30c:	bfb8      	it	lt
 800e30e:	9204      	strlt	r2, [sp, #16]
 800e310:	7823      	ldrb	r3, [r4, #0]
 800e312:	2b2e      	cmp	r3, #46	; 0x2e
 800e314:	d10c      	bne.n	800e330 <_svfiprintf_r+0x130>
 800e316:	7863      	ldrb	r3, [r4, #1]
 800e318:	2b2a      	cmp	r3, #42	; 0x2a
 800e31a:	d135      	bne.n	800e388 <_svfiprintf_r+0x188>
 800e31c:	9b03      	ldr	r3, [sp, #12]
 800e31e:	1d1a      	adds	r2, r3, #4
 800e320:	681b      	ldr	r3, [r3, #0]
 800e322:	9203      	str	r2, [sp, #12]
 800e324:	2b00      	cmp	r3, #0
 800e326:	bfb8      	it	lt
 800e328:	f04f 33ff 	movlt.w	r3, #4294967295
 800e32c:	3402      	adds	r4, #2
 800e32e:	9305      	str	r3, [sp, #20]
 800e330:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800e3fc <_svfiprintf_r+0x1fc>
 800e334:	7821      	ldrb	r1, [r4, #0]
 800e336:	2203      	movs	r2, #3
 800e338:	4650      	mov	r0, sl
 800e33a:	f7f1 ffd9 	bl	80002f0 <memchr>
 800e33e:	b140      	cbz	r0, 800e352 <_svfiprintf_r+0x152>
 800e340:	2340      	movs	r3, #64	; 0x40
 800e342:	eba0 000a 	sub.w	r0, r0, sl
 800e346:	fa03 f000 	lsl.w	r0, r3, r0
 800e34a:	9b04      	ldr	r3, [sp, #16]
 800e34c:	4303      	orrs	r3, r0
 800e34e:	3401      	adds	r4, #1
 800e350:	9304      	str	r3, [sp, #16]
 800e352:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e356:	4826      	ldr	r0, [pc, #152]	; (800e3f0 <_svfiprintf_r+0x1f0>)
 800e358:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800e35c:	2206      	movs	r2, #6
 800e35e:	f7f1 ffc7 	bl	80002f0 <memchr>
 800e362:	2800      	cmp	r0, #0
 800e364:	d038      	beq.n	800e3d8 <_svfiprintf_r+0x1d8>
 800e366:	4b23      	ldr	r3, [pc, #140]	; (800e3f4 <_svfiprintf_r+0x1f4>)
 800e368:	bb1b      	cbnz	r3, 800e3b2 <_svfiprintf_r+0x1b2>
 800e36a:	9b03      	ldr	r3, [sp, #12]
 800e36c:	3307      	adds	r3, #7
 800e36e:	f023 0307 	bic.w	r3, r3, #7
 800e372:	3308      	adds	r3, #8
 800e374:	9303      	str	r3, [sp, #12]
 800e376:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e378:	4433      	add	r3, r6
 800e37a:	9309      	str	r3, [sp, #36]	; 0x24
 800e37c:	e767      	b.n	800e24e <_svfiprintf_r+0x4e>
 800e37e:	fb0c 3202 	mla	r2, ip, r2, r3
 800e382:	460c      	mov	r4, r1
 800e384:	2001      	movs	r0, #1
 800e386:	e7a5      	b.n	800e2d4 <_svfiprintf_r+0xd4>
 800e388:	2300      	movs	r3, #0
 800e38a:	3401      	adds	r4, #1
 800e38c:	9305      	str	r3, [sp, #20]
 800e38e:	4619      	mov	r1, r3
 800e390:	f04f 0c0a 	mov.w	ip, #10
 800e394:	4620      	mov	r0, r4
 800e396:	f810 2b01 	ldrb.w	r2, [r0], #1
 800e39a:	3a30      	subs	r2, #48	; 0x30
 800e39c:	2a09      	cmp	r2, #9
 800e39e:	d903      	bls.n	800e3a8 <_svfiprintf_r+0x1a8>
 800e3a0:	2b00      	cmp	r3, #0
 800e3a2:	d0c5      	beq.n	800e330 <_svfiprintf_r+0x130>
 800e3a4:	9105      	str	r1, [sp, #20]
 800e3a6:	e7c3      	b.n	800e330 <_svfiprintf_r+0x130>
 800e3a8:	fb0c 2101 	mla	r1, ip, r1, r2
 800e3ac:	4604      	mov	r4, r0
 800e3ae:	2301      	movs	r3, #1
 800e3b0:	e7f0      	b.n	800e394 <_svfiprintf_r+0x194>
 800e3b2:	ab03      	add	r3, sp, #12
 800e3b4:	9300      	str	r3, [sp, #0]
 800e3b6:	462a      	mov	r2, r5
 800e3b8:	4b0f      	ldr	r3, [pc, #60]	; (800e3f8 <_svfiprintf_r+0x1f8>)
 800e3ba:	a904      	add	r1, sp, #16
 800e3bc:	4638      	mov	r0, r7
 800e3be:	f3af 8000 	nop.w
 800e3c2:	1c42      	adds	r2, r0, #1
 800e3c4:	4606      	mov	r6, r0
 800e3c6:	d1d6      	bne.n	800e376 <_svfiprintf_r+0x176>
 800e3c8:	89ab      	ldrh	r3, [r5, #12]
 800e3ca:	065b      	lsls	r3, r3, #25
 800e3cc:	f53f af2c 	bmi.w	800e228 <_svfiprintf_r+0x28>
 800e3d0:	9809      	ldr	r0, [sp, #36]	; 0x24
 800e3d2:	b01d      	add	sp, #116	; 0x74
 800e3d4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e3d8:	ab03      	add	r3, sp, #12
 800e3da:	9300      	str	r3, [sp, #0]
 800e3dc:	462a      	mov	r2, r5
 800e3de:	4b06      	ldr	r3, [pc, #24]	; (800e3f8 <_svfiprintf_r+0x1f8>)
 800e3e0:	a904      	add	r1, sp, #16
 800e3e2:	4638      	mov	r0, r7
 800e3e4:	f000 f87a 	bl	800e4dc <_printf_i>
 800e3e8:	e7eb      	b.n	800e3c2 <_svfiprintf_r+0x1c2>
 800e3ea:	bf00      	nop
 800e3ec:	0800ea78 	.word	0x0800ea78
 800e3f0:	0800ea82 	.word	0x0800ea82
 800e3f4:	00000000 	.word	0x00000000
 800e3f8:	0800e149 	.word	0x0800e149
 800e3fc:	0800ea7e 	.word	0x0800ea7e

0800e400 <_printf_common>:
 800e400:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e404:	4616      	mov	r6, r2
 800e406:	4699      	mov	r9, r3
 800e408:	688a      	ldr	r2, [r1, #8]
 800e40a:	690b      	ldr	r3, [r1, #16]
 800e40c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800e410:	4293      	cmp	r3, r2
 800e412:	bfb8      	it	lt
 800e414:	4613      	movlt	r3, r2
 800e416:	6033      	str	r3, [r6, #0]
 800e418:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800e41c:	4607      	mov	r7, r0
 800e41e:	460c      	mov	r4, r1
 800e420:	b10a      	cbz	r2, 800e426 <_printf_common+0x26>
 800e422:	3301      	adds	r3, #1
 800e424:	6033      	str	r3, [r6, #0]
 800e426:	6823      	ldr	r3, [r4, #0]
 800e428:	0699      	lsls	r1, r3, #26
 800e42a:	bf42      	ittt	mi
 800e42c:	6833      	ldrmi	r3, [r6, #0]
 800e42e:	3302      	addmi	r3, #2
 800e430:	6033      	strmi	r3, [r6, #0]
 800e432:	6825      	ldr	r5, [r4, #0]
 800e434:	f015 0506 	ands.w	r5, r5, #6
 800e438:	d106      	bne.n	800e448 <_printf_common+0x48>
 800e43a:	f104 0a19 	add.w	sl, r4, #25
 800e43e:	68e3      	ldr	r3, [r4, #12]
 800e440:	6832      	ldr	r2, [r6, #0]
 800e442:	1a9b      	subs	r3, r3, r2
 800e444:	42ab      	cmp	r3, r5
 800e446:	dc26      	bgt.n	800e496 <_printf_common+0x96>
 800e448:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800e44c:	1e13      	subs	r3, r2, #0
 800e44e:	6822      	ldr	r2, [r4, #0]
 800e450:	bf18      	it	ne
 800e452:	2301      	movne	r3, #1
 800e454:	0692      	lsls	r2, r2, #26
 800e456:	d42b      	bmi.n	800e4b0 <_printf_common+0xb0>
 800e458:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800e45c:	4649      	mov	r1, r9
 800e45e:	4638      	mov	r0, r7
 800e460:	47c0      	blx	r8
 800e462:	3001      	adds	r0, #1
 800e464:	d01e      	beq.n	800e4a4 <_printf_common+0xa4>
 800e466:	6823      	ldr	r3, [r4, #0]
 800e468:	68e5      	ldr	r5, [r4, #12]
 800e46a:	6832      	ldr	r2, [r6, #0]
 800e46c:	f003 0306 	and.w	r3, r3, #6
 800e470:	2b04      	cmp	r3, #4
 800e472:	bf08      	it	eq
 800e474:	1aad      	subeq	r5, r5, r2
 800e476:	68a3      	ldr	r3, [r4, #8]
 800e478:	6922      	ldr	r2, [r4, #16]
 800e47a:	bf0c      	ite	eq
 800e47c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800e480:	2500      	movne	r5, #0
 800e482:	4293      	cmp	r3, r2
 800e484:	bfc4      	itt	gt
 800e486:	1a9b      	subgt	r3, r3, r2
 800e488:	18ed      	addgt	r5, r5, r3
 800e48a:	2600      	movs	r6, #0
 800e48c:	341a      	adds	r4, #26
 800e48e:	42b5      	cmp	r5, r6
 800e490:	d11a      	bne.n	800e4c8 <_printf_common+0xc8>
 800e492:	2000      	movs	r0, #0
 800e494:	e008      	b.n	800e4a8 <_printf_common+0xa8>
 800e496:	2301      	movs	r3, #1
 800e498:	4652      	mov	r2, sl
 800e49a:	4649      	mov	r1, r9
 800e49c:	4638      	mov	r0, r7
 800e49e:	47c0      	blx	r8
 800e4a0:	3001      	adds	r0, #1
 800e4a2:	d103      	bne.n	800e4ac <_printf_common+0xac>
 800e4a4:	f04f 30ff 	mov.w	r0, #4294967295
 800e4a8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e4ac:	3501      	adds	r5, #1
 800e4ae:	e7c6      	b.n	800e43e <_printf_common+0x3e>
 800e4b0:	18e1      	adds	r1, r4, r3
 800e4b2:	1c5a      	adds	r2, r3, #1
 800e4b4:	2030      	movs	r0, #48	; 0x30
 800e4b6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800e4ba:	4422      	add	r2, r4
 800e4bc:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800e4c0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800e4c4:	3302      	adds	r3, #2
 800e4c6:	e7c7      	b.n	800e458 <_printf_common+0x58>
 800e4c8:	2301      	movs	r3, #1
 800e4ca:	4622      	mov	r2, r4
 800e4cc:	4649      	mov	r1, r9
 800e4ce:	4638      	mov	r0, r7
 800e4d0:	47c0      	blx	r8
 800e4d2:	3001      	adds	r0, #1
 800e4d4:	d0e6      	beq.n	800e4a4 <_printf_common+0xa4>
 800e4d6:	3601      	adds	r6, #1
 800e4d8:	e7d9      	b.n	800e48e <_printf_common+0x8e>
	...

0800e4dc <_printf_i>:
 800e4dc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800e4e0:	7e0f      	ldrb	r7, [r1, #24]
 800e4e2:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800e4e4:	2f78      	cmp	r7, #120	; 0x78
 800e4e6:	4691      	mov	r9, r2
 800e4e8:	4680      	mov	r8, r0
 800e4ea:	460c      	mov	r4, r1
 800e4ec:	469a      	mov	sl, r3
 800e4ee:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800e4f2:	d807      	bhi.n	800e504 <_printf_i+0x28>
 800e4f4:	2f62      	cmp	r7, #98	; 0x62
 800e4f6:	d80a      	bhi.n	800e50e <_printf_i+0x32>
 800e4f8:	2f00      	cmp	r7, #0
 800e4fa:	f000 80d8 	beq.w	800e6ae <_printf_i+0x1d2>
 800e4fe:	2f58      	cmp	r7, #88	; 0x58
 800e500:	f000 80a3 	beq.w	800e64a <_printf_i+0x16e>
 800e504:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800e508:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800e50c:	e03a      	b.n	800e584 <_printf_i+0xa8>
 800e50e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800e512:	2b15      	cmp	r3, #21
 800e514:	d8f6      	bhi.n	800e504 <_printf_i+0x28>
 800e516:	a101      	add	r1, pc, #4	; (adr r1, 800e51c <_printf_i+0x40>)
 800e518:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800e51c:	0800e575 	.word	0x0800e575
 800e520:	0800e589 	.word	0x0800e589
 800e524:	0800e505 	.word	0x0800e505
 800e528:	0800e505 	.word	0x0800e505
 800e52c:	0800e505 	.word	0x0800e505
 800e530:	0800e505 	.word	0x0800e505
 800e534:	0800e589 	.word	0x0800e589
 800e538:	0800e505 	.word	0x0800e505
 800e53c:	0800e505 	.word	0x0800e505
 800e540:	0800e505 	.word	0x0800e505
 800e544:	0800e505 	.word	0x0800e505
 800e548:	0800e695 	.word	0x0800e695
 800e54c:	0800e5b9 	.word	0x0800e5b9
 800e550:	0800e677 	.word	0x0800e677
 800e554:	0800e505 	.word	0x0800e505
 800e558:	0800e505 	.word	0x0800e505
 800e55c:	0800e6b7 	.word	0x0800e6b7
 800e560:	0800e505 	.word	0x0800e505
 800e564:	0800e5b9 	.word	0x0800e5b9
 800e568:	0800e505 	.word	0x0800e505
 800e56c:	0800e505 	.word	0x0800e505
 800e570:	0800e67f 	.word	0x0800e67f
 800e574:	682b      	ldr	r3, [r5, #0]
 800e576:	1d1a      	adds	r2, r3, #4
 800e578:	681b      	ldr	r3, [r3, #0]
 800e57a:	602a      	str	r2, [r5, #0]
 800e57c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800e580:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800e584:	2301      	movs	r3, #1
 800e586:	e0a3      	b.n	800e6d0 <_printf_i+0x1f4>
 800e588:	6820      	ldr	r0, [r4, #0]
 800e58a:	6829      	ldr	r1, [r5, #0]
 800e58c:	0606      	lsls	r6, r0, #24
 800e58e:	f101 0304 	add.w	r3, r1, #4
 800e592:	d50a      	bpl.n	800e5aa <_printf_i+0xce>
 800e594:	680e      	ldr	r6, [r1, #0]
 800e596:	602b      	str	r3, [r5, #0]
 800e598:	2e00      	cmp	r6, #0
 800e59a:	da03      	bge.n	800e5a4 <_printf_i+0xc8>
 800e59c:	232d      	movs	r3, #45	; 0x2d
 800e59e:	4276      	negs	r6, r6
 800e5a0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800e5a4:	485e      	ldr	r0, [pc, #376]	; (800e720 <_printf_i+0x244>)
 800e5a6:	230a      	movs	r3, #10
 800e5a8:	e019      	b.n	800e5de <_printf_i+0x102>
 800e5aa:	680e      	ldr	r6, [r1, #0]
 800e5ac:	602b      	str	r3, [r5, #0]
 800e5ae:	f010 0f40 	tst.w	r0, #64	; 0x40
 800e5b2:	bf18      	it	ne
 800e5b4:	b236      	sxthne	r6, r6
 800e5b6:	e7ef      	b.n	800e598 <_printf_i+0xbc>
 800e5b8:	682b      	ldr	r3, [r5, #0]
 800e5ba:	6820      	ldr	r0, [r4, #0]
 800e5bc:	1d19      	adds	r1, r3, #4
 800e5be:	6029      	str	r1, [r5, #0]
 800e5c0:	0601      	lsls	r1, r0, #24
 800e5c2:	d501      	bpl.n	800e5c8 <_printf_i+0xec>
 800e5c4:	681e      	ldr	r6, [r3, #0]
 800e5c6:	e002      	b.n	800e5ce <_printf_i+0xf2>
 800e5c8:	0646      	lsls	r6, r0, #25
 800e5ca:	d5fb      	bpl.n	800e5c4 <_printf_i+0xe8>
 800e5cc:	881e      	ldrh	r6, [r3, #0]
 800e5ce:	4854      	ldr	r0, [pc, #336]	; (800e720 <_printf_i+0x244>)
 800e5d0:	2f6f      	cmp	r7, #111	; 0x6f
 800e5d2:	bf0c      	ite	eq
 800e5d4:	2308      	moveq	r3, #8
 800e5d6:	230a      	movne	r3, #10
 800e5d8:	2100      	movs	r1, #0
 800e5da:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800e5de:	6865      	ldr	r5, [r4, #4]
 800e5e0:	60a5      	str	r5, [r4, #8]
 800e5e2:	2d00      	cmp	r5, #0
 800e5e4:	bfa2      	ittt	ge
 800e5e6:	6821      	ldrge	r1, [r4, #0]
 800e5e8:	f021 0104 	bicge.w	r1, r1, #4
 800e5ec:	6021      	strge	r1, [r4, #0]
 800e5ee:	b90e      	cbnz	r6, 800e5f4 <_printf_i+0x118>
 800e5f0:	2d00      	cmp	r5, #0
 800e5f2:	d04d      	beq.n	800e690 <_printf_i+0x1b4>
 800e5f4:	4615      	mov	r5, r2
 800e5f6:	fbb6 f1f3 	udiv	r1, r6, r3
 800e5fa:	fb03 6711 	mls	r7, r3, r1, r6
 800e5fe:	5dc7      	ldrb	r7, [r0, r7]
 800e600:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800e604:	4637      	mov	r7, r6
 800e606:	42bb      	cmp	r3, r7
 800e608:	460e      	mov	r6, r1
 800e60a:	d9f4      	bls.n	800e5f6 <_printf_i+0x11a>
 800e60c:	2b08      	cmp	r3, #8
 800e60e:	d10b      	bne.n	800e628 <_printf_i+0x14c>
 800e610:	6823      	ldr	r3, [r4, #0]
 800e612:	07de      	lsls	r6, r3, #31
 800e614:	d508      	bpl.n	800e628 <_printf_i+0x14c>
 800e616:	6923      	ldr	r3, [r4, #16]
 800e618:	6861      	ldr	r1, [r4, #4]
 800e61a:	4299      	cmp	r1, r3
 800e61c:	bfde      	ittt	le
 800e61e:	2330      	movle	r3, #48	; 0x30
 800e620:	f805 3c01 	strble.w	r3, [r5, #-1]
 800e624:	f105 35ff 	addle.w	r5, r5, #4294967295
 800e628:	1b52      	subs	r2, r2, r5
 800e62a:	6122      	str	r2, [r4, #16]
 800e62c:	f8cd a000 	str.w	sl, [sp]
 800e630:	464b      	mov	r3, r9
 800e632:	aa03      	add	r2, sp, #12
 800e634:	4621      	mov	r1, r4
 800e636:	4640      	mov	r0, r8
 800e638:	f7ff fee2 	bl	800e400 <_printf_common>
 800e63c:	3001      	adds	r0, #1
 800e63e:	d14c      	bne.n	800e6da <_printf_i+0x1fe>
 800e640:	f04f 30ff 	mov.w	r0, #4294967295
 800e644:	b004      	add	sp, #16
 800e646:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e64a:	4835      	ldr	r0, [pc, #212]	; (800e720 <_printf_i+0x244>)
 800e64c:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800e650:	6829      	ldr	r1, [r5, #0]
 800e652:	6823      	ldr	r3, [r4, #0]
 800e654:	f851 6b04 	ldr.w	r6, [r1], #4
 800e658:	6029      	str	r1, [r5, #0]
 800e65a:	061d      	lsls	r5, r3, #24
 800e65c:	d514      	bpl.n	800e688 <_printf_i+0x1ac>
 800e65e:	07df      	lsls	r7, r3, #31
 800e660:	bf44      	itt	mi
 800e662:	f043 0320 	orrmi.w	r3, r3, #32
 800e666:	6023      	strmi	r3, [r4, #0]
 800e668:	b91e      	cbnz	r6, 800e672 <_printf_i+0x196>
 800e66a:	6823      	ldr	r3, [r4, #0]
 800e66c:	f023 0320 	bic.w	r3, r3, #32
 800e670:	6023      	str	r3, [r4, #0]
 800e672:	2310      	movs	r3, #16
 800e674:	e7b0      	b.n	800e5d8 <_printf_i+0xfc>
 800e676:	6823      	ldr	r3, [r4, #0]
 800e678:	f043 0320 	orr.w	r3, r3, #32
 800e67c:	6023      	str	r3, [r4, #0]
 800e67e:	2378      	movs	r3, #120	; 0x78
 800e680:	4828      	ldr	r0, [pc, #160]	; (800e724 <_printf_i+0x248>)
 800e682:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800e686:	e7e3      	b.n	800e650 <_printf_i+0x174>
 800e688:	0659      	lsls	r1, r3, #25
 800e68a:	bf48      	it	mi
 800e68c:	b2b6      	uxthmi	r6, r6
 800e68e:	e7e6      	b.n	800e65e <_printf_i+0x182>
 800e690:	4615      	mov	r5, r2
 800e692:	e7bb      	b.n	800e60c <_printf_i+0x130>
 800e694:	682b      	ldr	r3, [r5, #0]
 800e696:	6826      	ldr	r6, [r4, #0]
 800e698:	6961      	ldr	r1, [r4, #20]
 800e69a:	1d18      	adds	r0, r3, #4
 800e69c:	6028      	str	r0, [r5, #0]
 800e69e:	0635      	lsls	r5, r6, #24
 800e6a0:	681b      	ldr	r3, [r3, #0]
 800e6a2:	d501      	bpl.n	800e6a8 <_printf_i+0x1cc>
 800e6a4:	6019      	str	r1, [r3, #0]
 800e6a6:	e002      	b.n	800e6ae <_printf_i+0x1d2>
 800e6a8:	0670      	lsls	r0, r6, #25
 800e6aa:	d5fb      	bpl.n	800e6a4 <_printf_i+0x1c8>
 800e6ac:	8019      	strh	r1, [r3, #0]
 800e6ae:	2300      	movs	r3, #0
 800e6b0:	6123      	str	r3, [r4, #16]
 800e6b2:	4615      	mov	r5, r2
 800e6b4:	e7ba      	b.n	800e62c <_printf_i+0x150>
 800e6b6:	682b      	ldr	r3, [r5, #0]
 800e6b8:	1d1a      	adds	r2, r3, #4
 800e6ba:	602a      	str	r2, [r5, #0]
 800e6bc:	681d      	ldr	r5, [r3, #0]
 800e6be:	6862      	ldr	r2, [r4, #4]
 800e6c0:	2100      	movs	r1, #0
 800e6c2:	4628      	mov	r0, r5
 800e6c4:	f7f1 fe14 	bl	80002f0 <memchr>
 800e6c8:	b108      	cbz	r0, 800e6ce <_printf_i+0x1f2>
 800e6ca:	1b40      	subs	r0, r0, r5
 800e6cc:	6060      	str	r0, [r4, #4]
 800e6ce:	6863      	ldr	r3, [r4, #4]
 800e6d0:	6123      	str	r3, [r4, #16]
 800e6d2:	2300      	movs	r3, #0
 800e6d4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800e6d8:	e7a8      	b.n	800e62c <_printf_i+0x150>
 800e6da:	6923      	ldr	r3, [r4, #16]
 800e6dc:	462a      	mov	r2, r5
 800e6de:	4649      	mov	r1, r9
 800e6e0:	4640      	mov	r0, r8
 800e6e2:	47d0      	blx	sl
 800e6e4:	3001      	adds	r0, #1
 800e6e6:	d0ab      	beq.n	800e640 <_printf_i+0x164>
 800e6e8:	6823      	ldr	r3, [r4, #0]
 800e6ea:	079b      	lsls	r3, r3, #30
 800e6ec:	d413      	bmi.n	800e716 <_printf_i+0x23a>
 800e6ee:	68e0      	ldr	r0, [r4, #12]
 800e6f0:	9b03      	ldr	r3, [sp, #12]
 800e6f2:	4298      	cmp	r0, r3
 800e6f4:	bfb8      	it	lt
 800e6f6:	4618      	movlt	r0, r3
 800e6f8:	e7a4      	b.n	800e644 <_printf_i+0x168>
 800e6fa:	2301      	movs	r3, #1
 800e6fc:	4632      	mov	r2, r6
 800e6fe:	4649      	mov	r1, r9
 800e700:	4640      	mov	r0, r8
 800e702:	47d0      	blx	sl
 800e704:	3001      	adds	r0, #1
 800e706:	d09b      	beq.n	800e640 <_printf_i+0x164>
 800e708:	3501      	adds	r5, #1
 800e70a:	68e3      	ldr	r3, [r4, #12]
 800e70c:	9903      	ldr	r1, [sp, #12]
 800e70e:	1a5b      	subs	r3, r3, r1
 800e710:	42ab      	cmp	r3, r5
 800e712:	dcf2      	bgt.n	800e6fa <_printf_i+0x21e>
 800e714:	e7eb      	b.n	800e6ee <_printf_i+0x212>
 800e716:	2500      	movs	r5, #0
 800e718:	f104 0619 	add.w	r6, r4, #25
 800e71c:	e7f5      	b.n	800e70a <_printf_i+0x22e>
 800e71e:	bf00      	nop
 800e720:	0800ea89 	.word	0x0800ea89
 800e724:	0800ea9a 	.word	0x0800ea9a

0800e728 <memmove>:
 800e728:	4288      	cmp	r0, r1
 800e72a:	b510      	push	{r4, lr}
 800e72c:	eb01 0402 	add.w	r4, r1, r2
 800e730:	d902      	bls.n	800e738 <memmove+0x10>
 800e732:	4284      	cmp	r4, r0
 800e734:	4623      	mov	r3, r4
 800e736:	d807      	bhi.n	800e748 <memmove+0x20>
 800e738:	1e43      	subs	r3, r0, #1
 800e73a:	42a1      	cmp	r1, r4
 800e73c:	d008      	beq.n	800e750 <memmove+0x28>
 800e73e:	f811 2b01 	ldrb.w	r2, [r1], #1
 800e742:	f803 2f01 	strb.w	r2, [r3, #1]!
 800e746:	e7f8      	b.n	800e73a <memmove+0x12>
 800e748:	4402      	add	r2, r0
 800e74a:	4601      	mov	r1, r0
 800e74c:	428a      	cmp	r2, r1
 800e74e:	d100      	bne.n	800e752 <memmove+0x2a>
 800e750:	bd10      	pop	{r4, pc}
 800e752:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800e756:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800e75a:	e7f7      	b.n	800e74c <memmove+0x24>

0800e75c <_free_r>:
 800e75c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800e75e:	2900      	cmp	r1, #0
 800e760:	d044      	beq.n	800e7ec <_free_r+0x90>
 800e762:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800e766:	9001      	str	r0, [sp, #4]
 800e768:	2b00      	cmp	r3, #0
 800e76a:	f1a1 0404 	sub.w	r4, r1, #4
 800e76e:	bfb8      	it	lt
 800e770:	18e4      	addlt	r4, r4, r3
 800e772:	f000 f913 	bl	800e99c <__malloc_lock>
 800e776:	4a1e      	ldr	r2, [pc, #120]	; (800e7f0 <_free_r+0x94>)
 800e778:	9801      	ldr	r0, [sp, #4]
 800e77a:	6813      	ldr	r3, [r2, #0]
 800e77c:	b933      	cbnz	r3, 800e78c <_free_r+0x30>
 800e77e:	6063      	str	r3, [r4, #4]
 800e780:	6014      	str	r4, [r2, #0]
 800e782:	b003      	add	sp, #12
 800e784:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800e788:	f000 b90e 	b.w	800e9a8 <__malloc_unlock>
 800e78c:	42a3      	cmp	r3, r4
 800e78e:	d908      	bls.n	800e7a2 <_free_r+0x46>
 800e790:	6825      	ldr	r5, [r4, #0]
 800e792:	1961      	adds	r1, r4, r5
 800e794:	428b      	cmp	r3, r1
 800e796:	bf01      	itttt	eq
 800e798:	6819      	ldreq	r1, [r3, #0]
 800e79a:	685b      	ldreq	r3, [r3, #4]
 800e79c:	1949      	addeq	r1, r1, r5
 800e79e:	6021      	streq	r1, [r4, #0]
 800e7a0:	e7ed      	b.n	800e77e <_free_r+0x22>
 800e7a2:	461a      	mov	r2, r3
 800e7a4:	685b      	ldr	r3, [r3, #4]
 800e7a6:	b10b      	cbz	r3, 800e7ac <_free_r+0x50>
 800e7a8:	42a3      	cmp	r3, r4
 800e7aa:	d9fa      	bls.n	800e7a2 <_free_r+0x46>
 800e7ac:	6811      	ldr	r1, [r2, #0]
 800e7ae:	1855      	adds	r5, r2, r1
 800e7b0:	42a5      	cmp	r5, r4
 800e7b2:	d10b      	bne.n	800e7cc <_free_r+0x70>
 800e7b4:	6824      	ldr	r4, [r4, #0]
 800e7b6:	4421      	add	r1, r4
 800e7b8:	1854      	adds	r4, r2, r1
 800e7ba:	42a3      	cmp	r3, r4
 800e7bc:	6011      	str	r1, [r2, #0]
 800e7be:	d1e0      	bne.n	800e782 <_free_r+0x26>
 800e7c0:	681c      	ldr	r4, [r3, #0]
 800e7c2:	685b      	ldr	r3, [r3, #4]
 800e7c4:	6053      	str	r3, [r2, #4]
 800e7c6:	4421      	add	r1, r4
 800e7c8:	6011      	str	r1, [r2, #0]
 800e7ca:	e7da      	b.n	800e782 <_free_r+0x26>
 800e7cc:	d902      	bls.n	800e7d4 <_free_r+0x78>
 800e7ce:	230c      	movs	r3, #12
 800e7d0:	6003      	str	r3, [r0, #0]
 800e7d2:	e7d6      	b.n	800e782 <_free_r+0x26>
 800e7d4:	6825      	ldr	r5, [r4, #0]
 800e7d6:	1961      	adds	r1, r4, r5
 800e7d8:	428b      	cmp	r3, r1
 800e7da:	bf04      	itt	eq
 800e7dc:	6819      	ldreq	r1, [r3, #0]
 800e7de:	685b      	ldreq	r3, [r3, #4]
 800e7e0:	6063      	str	r3, [r4, #4]
 800e7e2:	bf04      	itt	eq
 800e7e4:	1949      	addeq	r1, r1, r5
 800e7e6:	6021      	streq	r1, [r4, #0]
 800e7e8:	6054      	str	r4, [r2, #4]
 800e7ea:	e7ca      	b.n	800e782 <_free_r+0x26>
 800e7ec:	b003      	add	sp, #12
 800e7ee:	bd30      	pop	{r4, r5, pc}
 800e7f0:	24000f48 	.word	0x24000f48

0800e7f4 <sbrk_aligned>:
 800e7f4:	b570      	push	{r4, r5, r6, lr}
 800e7f6:	4e0e      	ldr	r6, [pc, #56]	; (800e830 <sbrk_aligned+0x3c>)
 800e7f8:	460c      	mov	r4, r1
 800e7fa:	6831      	ldr	r1, [r6, #0]
 800e7fc:	4605      	mov	r5, r0
 800e7fe:	b911      	cbnz	r1, 800e806 <sbrk_aligned+0x12>
 800e800:	f000 f8bc 	bl	800e97c <_sbrk_r>
 800e804:	6030      	str	r0, [r6, #0]
 800e806:	4621      	mov	r1, r4
 800e808:	4628      	mov	r0, r5
 800e80a:	f000 f8b7 	bl	800e97c <_sbrk_r>
 800e80e:	1c43      	adds	r3, r0, #1
 800e810:	d00a      	beq.n	800e828 <sbrk_aligned+0x34>
 800e812:	1cc4      	adds	r4, r0, #3
 800e814:	f024 0403 	bic.w	r4, r4, #3
 800e818:	42a0      	cmp	r0, r4
 800e81a:	d007      	beq.n	800e82c <sbrk_aligned+0x38>
 800e81c:	1a21      	subs	r1, r4, r0
 800e81e:	4628      	mov	r0, r5
 800e820:	f000 f8ac 	bl	800e97c <_sbrk_r>
 800e824:	3001      	adds	r0, #1
 800e826:	d101      	bne.n	800e82c <sbrk_aligned+0x38>
 800e828:	f04f 34ff 	mov.w	r4, #4294967295
 800e82c:	4620      	mov	r0, r4
 800e82e:	bd70      	pop	{r4, r5, r6, pc}
 800e830:	24000f4c 	.word	0x24000f4c

0800e834 <_malloc_r>:
 800e834:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e838:	1ccd      	adds	r5, r1, #3
 800e83a:	f025 0503 	bic.w	r5, r5, #3
 800e83e:	3508      	adds	r5, #8
 800e840:	2d0c      	cmp	r5, #12
 800e842:	bf38      	it	cc
 800e844:	250c      	movcc	r5, #12
 800e846:	2d00      	cmp	r5, #0
 800e848:	4607      	mov	r7, r0
 800e84a:	db01      	blt.n	800e850 <_malloc_r+0x1c>
 800e84c:	42a9      	cmp	r1, r5
 800e84e:	d905      	bls.n	800e85c <_malloc_r+0x28>
 800e850:	230c      	movs	r3, #12
 800e852:	603b      	str	r3, [r7, #0]
 800e854:	2600      	movs	r6, #0
 800e856:	4630      	mov	r0, r6
 800e858:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e85c:	4e2e      	ldr	r6, [pc, #184]	; (800e918 <_malloc_r+0xe4>)
 800e85e:	f000 f89d 	bl	800e99c <__malloc_lock>
 800e862:	6833      	ldr	r3, [r6, #0]
 800e864:	461c      	mov	r4, r3
 800e866:	bb34      	cbnz	r4, 800e8b6 <_malloc_r+0x82>
 800e868:	4629      	mov	r1, r5
 800e86a:	4638      	mov	r0, r7
 800e86c:	f7ff ffc2 	bl	800e7f4 <sbrk_aligned>
 800e870:	1c43      	adds	r3, r0, #1
 800e872:	4604      	mov	r4, r0
 800e874:	d14d      	bne.n	800e912 <_malloc_r+0xde>
 800e876:	6834      	ldr	r4, [r6, #0]
 800e878:	4626      	mov	r6, r4
 800e87a:	2e00      	cmp	r6, #0
 800e87c:	d140      	bne.n	800e900 <_malloc_r+0xcc>
 800e87e:	6823      	ldr	r3, [r4, #0]
 800e880:	4631      	mov	r1, r6
 800e882:	4638      	mov	r0, r7
 800e884:	eb04 0803 	add.w	r8, r4, r3
 800e888:	f000 f878 	bl	800e97c <_sbrk_r>
 800e88c:	4580      	cmp	r8, r0
 800e88e:	d13a      	bne.n	800e906 <_malloc_r+0xd2>
 800e890:	6821      	ldr	r1, [r4, #0]
 800e892:	3503      	adds	r5, #3
 800e894:	1a6d      	subs	r5, r5, r1
 800e896:	f025 0503 	bic.w	r5, r5, #3
 800e89a:	3508      	adds	r5, #8
 800e89c:	2d0c      	cmp	r5, #12
 800e89e:	bf38      	it	cc
 800e8a0:	250c      	movcc	r5, #12
 800e8a2:	4629      	mov	r1, r5
 800e8a4:	4638      	mov	r0, r7
 800e8a6:	f7ff ffa5 	bl	800e7f4 <sbrk_aligned>
 800e8aa:	3001      	adds	r0, #1
 800e8ac:	d02b      	beq.n	800e906 <_malloc_r+0xd2>
 800e8ae:	6823      	ldr	r3, [r4, #0]
 800e8b0:	442b      	add	r3, r5
 800e8b2:	6023      	str	r3, [r4, #0]
 800e8b4:	e00e      	b.n	800e8d4 <_malloc_r+0xa0>
 800e8b6:	6822      	ldr	r2, [r4, #0]
 800e8b8:	1b52      	subs	r2, r2, r5
 800e8ba:	d41e      	bmi.n	800e8fa <_malloc_r+0xc6>
 800e8bc:	2a0b      	cmp	r2, #11
 800e8be:	d916      	bls.n	800e8ee <_malloc_r+0xba>
 800e8c0:	1961      	adds	r1, r4, r5
 800e8c2:	42a3      	cmp	r3, r4
 800e8c4:	6025      	str	r5, [r4, #0]
 800e8c6:	bf18      	it	ne
 800e8c8:	6059      	strne	r1, [r3, #4]
 800e8ca:	6863      	ldr	r3, [r4, #4]
 800e8cc:	bf08      	it	eq
 800e8ce:	6031      	streq	r1, [r6, #0]
 800e8d0:	5162      	str	r2, [r4, r5]
 800e8d2:	604b      	str	r3, [r1, #4]
 800e8d4:	4638      	mov	r0, r7
 800e8d6:	f104 060b 	add.w	r6, r4, #11
 800e8da:	f000 f865 	bl	800e9a8 <__malloc_unlock>
 800e8de:	f026 0607 	bic.w	r6, r6, #7
 800e8e2:	1d23      	adds	r3, r4, #4
 800e8e4:	1af2      	subs	r2, r6, r3
 800e8e6:	d0b6      	beq.n	800e856 <_malloc_r+0x22>
 800e8e8:	1b9b      	subs	r3, r3, r6
 800e8ea:	50a3      	str	r3, [r4, r2]
 800e8ec:	e7b3      	b.n	800e856 <_malloc_r+0x22>
 800e8ee:	6862      	ldr	r2, [r4, #4]
 800e8f0:	42a3      	cmp	r3, r4
 800e8f2:	bf0c      	ite	eq
 800e8f4:	6032      	streq	r2, [r6, #0]
 800e8f6:	605a      	strne	r2, [r3, #4]
 800e8f8:	e7ec      	b.n	800e8d4 <_malloc_r+0xa0>
 800e8fa:	4623      	mov	r3, r4
 800e8fc:	6864      	ldr	r4, [r4, #4]
 800e8fe:	e7b2      	b.n	800e866 <_malloc_r+0x32>
 800e900:	4634      	mov	r4, r6
 800e902:	6876      	ldr	r6, [r6, #4]
 800e904:	e7b9      	b.n	800e87a <_malloc_r+0x46>
 800e906:	230c      	movs	r3, #12
 800e908:	603b      	str	r3, [r7, #0]
 800e90a:	4638      	mov	r0, r7
 800e90c:	f000 f84c 	bl	800e9a8 <__malloc_unlock>
 800e910:	e7a1      	b.n	800e856 <_malloc_r+0x22>
 800e912:	6025      	str	r5, [r4, #0]
 800e914:	e7de      	b.n	800e8d4 <_malloc_r+0xa0>
 800e916:	bf00      	nop
 800e918:	24000f48 	.word	0x24000f48

0800e91c <_realloc_r>:
 800e91c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e920:	4680      	mov	r8, r0
 800e922:	4614      	mov	r4, r2
 800e924:	460e      	mov	r6, r1
 800e926:	b921      	cbnz	r1, 800e932 <_realloc_r+0x16>
 800e928:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800e92c:	4611      	mov	r1, r2
 800e92e:	f7ff bf81 	b.w	800e834 <_malloc_r>
 800e932:	b92a      	cbnz	r2, 800e940 <_realloc_r+0x24>
 800e934:	f7ff ff12 	bl	800e75c <_free_r>
 800e938:	4625      	mov	r5, r4
 800e93a:	4628      	mov	r0, r5
 800e93c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e940:	f000 f838 	bl	800e9b4 <_malloc_usable_size_r>
 800e944:	4284      	cmp	r4, r0
 800e946:	4607      	mov	r7, r0
 800e948:	d802      	bhi.n	800e950 <_realloc_r+0x34>
 800e94a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800e94e:	d812      	bhi.n	800e976 <_realloc_r+0x5a>
 800e950:	4621      	mov	r1, r4
 800e952:	4640      	mov	r0, r8
 800e954:	f7ff ff6e 	bl	800e834 <_malloc_r>
 800e958:	4605      	mov	r5, r0
 800e95a:	2800      	cmp	r0, #0
 800e95c:	d0ed      	beq.n	800e93a <_realloc_r+0x1e>
 800e95e:	42bc      	cmp	r4, r7
 800e960:	4622      	mov	r2, r4
 800e962:	4631      	mov	r1, r6
 800e964:	bf28      	it	cs
 800e966:	463a      	movcs	r2, r7
 800e968:	f7ff fba4 	bl	800e0b4 <memcpy>
 800e96c:	4631      	mov	r1, r6
 800e96e:	4640      	mov	r0, r8
 800e970:	f7ff fef4 	bl	800e75c <_free_r>
 800e974:	e7e1      	b.n	800e93a <_realloc_r+0x1e>
 800e976:	4635      	mov	r5, r6
 800e978:	e7df      	b.n	800e93a <_realloc_r+0x1e>
	...

0800e97c <_sbrk_r>:
 800e97c:	b538      	push	{r3, r4, r5, lr}
 800e97e:	4d06      	ldr	r5, [pc, #24]	; (800e998 <_sbrk_r+0x1c>)
 800e980:	2300      	movs	r3, #0
 800e982:	4604      	mov	r4, r0
 800e984:	4608      	mov	r0, r1
 800e986:	602b      	str	r3, [r5, #0]
 800e988:	f7f3 ffce 	bl	8002928 <_sbrk>
 800e98c:	1c43      	adds	r3, r0, #1
 800e98e:	d102      	bne.n	800e996 <_sbrk_r+0x1a>
 800e990:	682b      	ldr	r3, [r5, #0]
 800e992:	b103      	cbz	r3, 800e996 <_sbrk_r+0x1a>
 800e994:	6023      	str	r3, [r4, #0]
 800e996:	bd38      	pop	{r3, r4, r5, pc}
 800e998:	24000f50 	.word	0x24000f50

0800e99c <__malloc_lock>:
 800e99c:	4801      	ldr	r0, [pc, #4]	; (800e9a4 <__malloc_lock+0x8>)
 800e99e:	f000 b811 	b.w	800e9c4 <__retarget_lock_acquire_recursive>
 800e9a2:	bf00      	nop
 800e9a4:	24000f54 	.word	0x24000f54

0800e9a8 <__malloc_unlock>:
 800e9a8:	4801      	ldr	r0, [pc, #4]	; (800e9b0 <__malloc_unlock+0x8>)
 800e9aa:	f000 b80c 	b.w	800e9c6 <__retarget_lock_release_recursive>
 800e9ae:	bf00      	nop
 800e9b0:	24000f54 	.word	0x24000f54

0800e9b4 <_malloc_usable_size_r>:
 800e9b4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800e9b8:	1f18      	subs	r0, r3, #4
 800e9ba:	2b00      	cmp	r3, #0
 800e9bc:	bfbc      	itt	lt
 800e9be:	580b      	ldrlt	r3, [r1, r0]
 800e9c0:	18c0      	addlt	r0, r0, r3
 800e9c2:	4770      	bx	lr

0800e9c4 <__retarget_lock_acquire_recursive>:
 800e9c4:	4770      	bx	lr

0800e9c6 <__retarget_lock_release_recursive>:
 800e9c6:	4770      	bx	lr

0800e9c8 <_init>:
 800e9c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e9ca:	bf00      	nop
 800e9cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e9ce:	bc08      	pop	{r3}
 800e9d0:	469e      	mov	lr, r3
 800e9d2:	4770      	bx	lr

0800e9d4 <_fini>:
 800e9d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e9d6:	bf00      	nop
 800e9d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e9da:	bc08      	pop	{r3}
 800e9dc:	469e      	mov	lr, r3
 800e9de:	4770      	bx	lr
